/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:26:20 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.AccessDeniedException;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.AclFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.DosFileAttributeView;
import java.nio.file.attribute.DosFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.function.IOSupplier;
import org.apache.commons.io.input.RandomAccessFileInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:503)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1774)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:502)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      
      // Undeclared exception!
      PathUtils.sizeOf(path0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "')";
          MockFile mockFile0 = new MockFile("')", "')");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("')", mockFile0.getName());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          
          Charset charset0 = Charset.defaultCharset();
          assertNotNull(charset0);
          assertTrue(charset0.canEncode());
          assertTrue(charset0.isRegistered());
          assertEquals("UTF-8", charset0.toString());
          assertEquals("UTF-8", charset0.displayName());
          assertEquals("UTF-8", charset0.name());
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertEquals(3, linkOptionArray0.length);
          assertFalse(boolean0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("')", mockFile0.getName());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          
          FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 3);
          FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/')\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:401)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:377)
             // sun.reflect.GeneratedMethodAccessor215.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z|)v!D=ZVt", "z|)v!D=ZVt");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt/z|)v!D=ZVt", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("z|)v!D=ZVt", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      Duration duration0 = Duration.ofMinutes(0L);
      assertNotNull(duration0);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt/z|)v!D=ZVt", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("z|)v!D=ZVt", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')", "')");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("')", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isPosix(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("')", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Duration duration0 = Duration.ofMinutes((-4582L));
          assertNotNull(duration0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          
          boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
          assertFalse(boolean0);
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[16];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"og.apache.comons.io.file.PathUtils\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:570)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:476)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      boolean boolean2 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(4, fileVisitOptionArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Instant instant0 = MockInstant.ofEpochSecond(18464L, 50786L);
      assertNotNull(instant0);
      
      boolean boolean3 = PathUtils.isNewer(path0, instant0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Duration duration0 = Duration.ofMinutes((-4582L));
      assertNotNull(duration0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(boolean0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertEquals(6, fileVisitOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')", "')");
      assertNotNull(mockFile0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption1;
      linkOptionArray0[7] = linkOption1;
      linkOptionArray0[8] = linkOption1;
      OpenOption[] openOptionArray0 = new OpenOption[7];
      openOptionArray0[0] = (OpenOption) linkOption0;
      openOptionArray0[1] = (OpenOption) linkOption0;
      LinkOption linkOption2 = PathUtils.NULL_LINK_OPTION;
      openOptionArray0[2] = (OpenOption) null;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[3] = (OpenOption) standardOpenOption0;
      openOptionArray0[4] = (OpenOption) linkOption0;
      openOptionArray0[5] = (OpenOption) linkOption0;
      openOptionArray0[6] = (OpenOption) linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream(path0, linkOptionArray0, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      assertNotNull(falseFileFilter0);
      assertEquals("false", falseFileFilter0.toString());
      
      Path[] pathArray0 = new Path[2];
      Path[] pathArray1 = PathUtils.filter(falseFileFilter0, pathArray0);
      assertEquals(2, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("false", falseFileFilter0.toString());
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        PathUtils.readString((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      String string0 = "bXcsUk";
      MockFile mockFile1 = new MockFile(mockFile0, "bXcsUk");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = mockFile1.toURL();
      assertNotNull(uRL0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/tmp/foo.bar", mockFile1.getParent());
      assertEquals("bXcsUk", mockFile1.getName());
      assertEquals("/tmp/foo.bar/bXcsUk", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(uRL0);
      assertNull(fileTime0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/tmp/foo.bar", mockFile1.getParent());
      assertEquals("bXcsUk", mockFile1.getName());
      assertEquals("/tmp/foo.bar/bXcsUk", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("bXcsUk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.bXcsUk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("");
      assertNotNull(regexFileFilter0);
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean2);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) null, fileVisitOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(4, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_base_pr_493.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:503)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1774)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:502)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:453)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes((-4577L));
      assertNotNull(duration0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(6, fileAttributeArray0.length);
      assertNull(path0);
      
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)CountingPathVisitor.defaultDirFilter();
      assertNotNull(trueFileFilter0);
      assertEquals("true", trueFileFilter0.toString());
      
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream((Path) null, trueFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      try { 
        PathUtils.setLastModifiedTime(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Pattern pattern0 = Pattern.compile("8rw");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("8rw", pattern0.pattern());
      assertEquals("8rw", pattern0.toString());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals(0, pattern0.flags());
      assertEquals("8rw", pattern0.pattern());
      assertEquals("8rw", pattern0.toString());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=8rw]", string0);
      assertNotNull(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("8rw", pattern0.pattern());
      assertEquals("8rw", pattern0.toString());
      
      MockFile mockFile1 = new MockFile("");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.equals((Object)mockFile1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      LinkOption linkOption3 = PathUtils.NULL_LINK_OPTION;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertSame(path1, path0);
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      try { 
        PathUtils.countDirectoryAsBigInteger(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertFalse(boolean1);
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean1 == boolean0);
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertNull(fileTime0);
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Path path0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView((Path) null, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ofSeconds((-2098L));
      assertNotNull(duration0);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertTrue(boolean0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, (PathFilter) null, (-5139), false, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(69355219L, long0);
      
      PriorityBlockingQueue<Path> priorityBlockingQueue0 = new PriorityBlockingQueue<Path>();
      assertNotNull(priorityBlockingQueue0);
      assertFalse(priorityBlockingQueue0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(priorityBlockingQueue0, path0, true, comparator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(priorityBlockingQueue0.contains(path0));
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, linkOption1, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = null;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = null;
      linkOptionArray0[4] = null;
      linkOptionArray0[5] = null;
      linkOptionArray0[6] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-413), linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      PathUtils.sizeOfDirectoryAsBigInteger(path0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      boolean boolean1 = PathUtils.isNewer(path0, instant1, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean1);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertNull(fileTime0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      FileTime fileTime1 = PathUtils.getLastModifiedFileTime(path0, (FileTime) null, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertNull(fileTime1);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      boolean boolean0 = PathUtils.isOlder(path0, (FileTime) null, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertFalse(boolean0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      LinkOption[] linkOptionArray1 = new LinkOption[3];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      linkOptionArray1[0] = linkOption0;
      linkOptionArray1[1] = linkOption1;
      linkOptionArray1[2] = linkOption1;
      boolean boolean1 = PathUtils.isNewer(path0, 1L, linkOptionArray1);
      assertEquals(3, linkOptionArray1.length);
      assertFalse(boolean1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          linkOptionArray0[2] = linkOptionArray0[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"og.apache.comons.io.file.PathUtils\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:570)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:544)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:529)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("2m+");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals("2m+", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("2m+", mockFile0.toString());
          assertNull(mockFile0.getParent());
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"2m+\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:570)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:544)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:453)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      Duration duration0 = Duration.ofMillis(0L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofMillis((-2607L));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration1.isZero();
      assertFalse(boolean0);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption0;
      boolean boolean1 = PathUtils.waitFor(path0, duration1, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertTrue(boolean1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean1 == boolean0);
      
      PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertNull(posixFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      FileTime fileTime0 = FileTime.from((-10L), timeUnit0);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Duration duration0 = Duration.ofMinutes((-4577L));
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isZero();
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = null;
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      try { 
        PathUtils.isNewer(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      MockFile mockFile0 = new MockFile("SENSITIVE");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("SENSITIVE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("SENSITIVE", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FileTime fileTime0 = FileTime.from(0L, timeUnit0);
      assertNotNull(fileTime0);
      
      FileTime fileTime1 = PathUtils.getLastModifiedFileTime(path0, fileTime0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(fileTime1);
      assertSame(fileTime0, fileTime1);
      assertSame(fileTime1, fileTime0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("SENSITIVE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("SENSITIVE", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      LinkOption[] linkOptionArray1 = new LinkOption[5];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[4] = linkOption4;
      boolean boolean0 = PathUtils.isOlder(path0, fileTime1, linkOptionArray1);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(5, linkOptionArray1.length);
      assertFalse(boolean0);
      assertNotSame(linkOptionArray0, linkOptionArray1);
      assertSame(fileTime0, fileTime1);
      assertSame(fileTime1, fileTime0);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("SENSITIVE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("SENSITIVE", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(69355219L, long0);
      
      Instant instant0 = MockInstant.ofEpochMilli(69355219L);
      assertNotNull(instant0);
      
      FileTime fileTime0 = FileTime.from(instant0);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      boolean boolean0 = PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertFalse(boolean0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(4, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "UonXw");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("UonXw", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("UonXw", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("UonXw", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("UonXw", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      boolean boolean1 = mockFile0.setReadable(true);
      assertTrue(boolean1);
      assertEquals("UonXw", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("UonXw", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(boolean1 == boolean0);
      
      File file0 = MockFile.createTempFile("collector", (String) null);
      assertNotNull(file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("collector0.tmp", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/collector0.tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean2 = PathUtils.isNewer(path0, (-116444736000000000L), linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean2);
      assertNotSame(mockFile0, file0);
      assertEquals("UonXw", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("UonXw", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = mockFile0.mkdir();
      assertFalse(boolean3);
      assertNotSame(mockFile0, file0);
      assertEquals("UonXw", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("UonXw", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      // Undeclared exception!
      PathUtils.sizeOfAsBigInteger(path0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ofMinutes((-4577L));
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isZero();
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ofHours(1432L);
      assertNotNull(duration0);
      
      MockFile mockFile0 = new MockFile("fylz-tHA7@F'V-aT^l");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("fylz-tHA7@F'V-aT^l", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("fylz-tHA7@F'V-aT^l", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path1);
      assertTrue(boolean0);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("fylz-tHA7@F'V-aT^l", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("fylz-tHA7@F'V-aT^l", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(path1.equals((Object)path0));
      
      try { 
        PathUtils.sizeOfDirectory(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Duration duration0 = Duration.ofMinutes((-4577L));
      assertNotNull(duration0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(boolean0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      String[] stringArray0 = new String[0];
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(nameFileFilter0);
      
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) nameFileFilter0);
      assertEquals(0, stringArray0.length);
      assertNotNull(delegateFileFilter0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter(delegateFileFilter0, nameFileFilter0);
      assertEquals(0, stringArray0.length);
      assertNotNull(orFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[0] = path0;
      pathArray0[3] = path0;
      Path[] pathArray1 = PathUtils.filter(orFileFilter0, pathArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      DosFileAttributes dosFileAttributes0 = PathUtils.readDosFileAttributes(path0, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertNotNull(dosFileAttributes0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("$yd");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $yd
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]", "RegexFileFilter [pattern=]");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/RegexFileFilter [pattern=]", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/RegexFileFilter [pattern=]/RegexFileFilter [pattern=]", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      try { 
        PathUtils.isOlder(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      assertNotNull(falseFileFilter0);
      assertEquals("false", falseFileFilter0.toString());
      
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(4, linkOptionArray0.length);
      assertFalse(boolean0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize(list0, (Path) null, false, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      assertNotNull(falseFileFilter0);
      assertEquals("false", falseFileFilter0.toString());
      
      Path[] pathArray0 = new Path[2];
      Path[] pathArray1 = PathUtils.filter(falseFileFilter0, pathArray0);
      assertEquals(2, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("false", falseFileFilter0.toString());
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      PathUtils.countDirectory(path1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "og.apache.comons.io.file.PathUtils";
          MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canRead());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          linkOptionArray0[2] = linkOption0;
          String string1 = "";
          MockFile mockFile1 = new MockFile("");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Path path1 = mockFile0.toPath();
          assertNotNull(path1);
          assertNotSame(mockFile0, mockFile1);
          assertSame(path1, path0);
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canRead());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.equals((Object)mockFile1));
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"og.apache.comons.io.file.PathUtils\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1207)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readAttributes((Path) null, class0, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOf((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      Duration duration0 = Duration.ofMillis(1073741824L);
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isZero();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-45), bigInteger0.byteValue());
      assertEquals((short)18131, bigInteger0.shortValue());
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
      assertNotNull(string0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      Path[] pathArray0 = new Path[8];
      Matcher matcher0 = pattern0.matcher("RegexFileFilter [pattern=]");
      assertNotNull(matcher0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(0, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern= region=0,26 lastmatch=]", matcher0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      pathArray0[5] = path0;
      pathArray0[6] = path0;
      pathArray0[7] = path0;
      Path[] pathArray1 = PathUtils.filter(regexFileFilter0, pathArray0);
      assertEquals(8, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      Instant instant0 = MockInstant.ofEpochSecond((-345L));
      assertNotNull(instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean0 = PathUtils.isOlder(path0, instant0, linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.isOlder(path0, (-1128L), linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
          assertFalse(boolean0);
          
          Pattern pattern0 = Pattern.compile("");
          assertNotNull(pattern0);
          assertEquals("", pattern0.toString());
          assertEquals(0, pattern0.flags());
          assertEquals("", pattern0.pattern());
          
          RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
          assertNotNull(regexFileFilter0);
          assertEquals("", pattern0.toString());
          assertEquals(0, pattern0.flags());
          assertEquals("", pattern0.pattern());
          
          String string0 = regexFileFilter0.toString();
          assertEquals("RegexFileFilter [pattern=]", string0);
          assertNotNull(string0);
          assertEquals("", pattern0.toString());
          assertEquals(0, pattern0.flags());
          assertEquals("", pattern0.pattern());
          
          URI uRI0 = MockURI.aHttpURI;
          assertNotNull(uRI0);
          assertNull(uRI0.getRawQuery());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertEquals("", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("http://foo.bar", uRI0.toString());
          assertEquals("foo.bar", uRI0.getHost());
          assertNull(uRI0.getRawFragment());
          assertEquals("http", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertTrue(uRI0.isAbsolute());
          
          URI uRI1 = MockURI.normalize(uRI0);
          assertNotNull(uRI1);
          assertSame(uRI0, uRI1);
          assertSame(uRI1, uRI0);
          assertNull(uRI0.getRawQuery());
          assertEquals("foo.bar", uRI0.getRawAuthority());
          assertEquals("", uRI0.getRawPath());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertEquals("http://foo.bar", uRI0.toString());
          assertEquals("foo.bar", uRI0.getHost());
          assertNull(uRI0.getRawFragment());
          assertEquals("http", uRI0.getScheme());
          assertEquals((-1), uRI0.getPort());
          assertTrue(uRI0.isAbsolute());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertEquals("http://foo.bar", uRI1.toString());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertEquals("http", uRI1.getScheme());
          assertTrue(uRI1.isAbsolute());
          assertNull(uRI1.getRawQuery());
          assertEquals("foo.bar", uRI1.getRawAuthority());
          assertEquals((-1), uRI1.getPort());
          assertEquals("foo.bar", uRI1.getHost());
          
          MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("RegexFileFilter [pattern=]", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("RegexFileFilter [pattern=]", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"RegexFileFilter [pattern=]\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1207)
             // sun.reflect.GeneratedMethodAccessor298.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      PathUtils.countDirectoryAsBigInteger(path1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canRead());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      MockFile mockFile1 = new MockFile("XgCmcu]{5a>)C}o", "?7sT]aall$ai#OB}");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime((File) mockFile1);
      assertNull(fileTime0);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile1.canWrite());
      assertEquals("?7sT]aall$ai#OB}", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XgCmcu]{5a>)C}o/?7sT]aall$ai#OB}", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XgCmcu]{5a>)C}o", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = PathUtils.isNewer(path0, (FileTime) null, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.canRead());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.equals((Object)mockFile1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("", iOCase0);
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[6];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      pathArray0[5] = path0;
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertEquals(6, pathArray0.length);
      assertEquals(6, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertNotNull(pathEqualsFileFilter0);
      
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(109);
      assertNotNull(sizeFileFilter0);
      
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.and(sizeFileFilter0);
      assertNotNull(iOFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      pathArray0[2] = path0;
      Path[] pathArray1 = PathUtils.filter(iOFileFilter0, pathArray0);
      assertEquals(4, pathArray0.length);
      assertEquals(1, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      System.setCurrentTimeMillis((-646L));
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(uRL0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[10];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean0 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertEquals(10, linkOptionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = PathUtils.isDirectory((Path) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOf((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      linkOptionArray0[0] = linkOption0;
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, (Path[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(fileTime0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertNotSame(path0, path1);
      assertTrue(path0.equals((Object)path1));
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
      StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
      assertSame(standardDeleteOption3, standardDeleteOption1);
      assertSame(standardDeleteOption3, standardDeleteOption0);
      assertSame(standardDeleteOption3, standardDeleteOption2);
      
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
      try { 
        PathUtils.deleteFile(path1, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      assertNotNull(falseFileFilter0);
      assertEquals("false", falseFileFilter0.toString());
      
      Path[] pathArray0 = new Path[2];
      Path[] pathArray1 = PathUtils.filter(falseFileFilter0, pathArray0);
      assertEquals(2, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("false", falseFileFilter0.toString());
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      // Undeclared exception!
      try { 
        PathUtils.walk((Path) null, falseFileFilter0, 1986, false, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')", "')");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("')", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      
      boolean boolean0 = mockFile0.delete();
      assertFalse(boolean0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("')", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime((File) mockFile0);
      assertNotNull(fileTime0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, "", (Charset) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      try { 
        PathUtils.copyDirectory(path0, path0, linkOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.isEmptyFile(path0);
          assertFalse(boolean0);
          
          MockFile mockFile0 = new MockFile("<<[tdkN&FHuH;#U|5I");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, "<<[tdkN&FHuH;#U|5I");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Path path1 = mockFile1.toPath();
          assertNotNull(path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(path1, path0);
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("<<[tdkN&FHuH;#U|5I", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertEquals("<<[tdkN&FHuH;#U|5I", mockFile0.getName());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.isHidden());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/<<[tdkN&FHuH;#U|5I/<<[tdkN&FHuH;#U|5I", mockFile1.toString());
          assertEquals("<<[tdkN&FHuH;#U|5I", mockFile1.getName());
          assertTrue(mockFile1.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/<<[tdkN&FHuH;#U|5I", mockFile1.getParent());
          assertFalse(mockFile1.canWrite());
          assertEquals(0L, mockFile1.lastModified());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertTrue(mockFile1.isFile());
          assertFalse(mockFile1.canExecute());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(path1.equals((Object)path0));
          
          boolean boolean1 = PathUtils.isNewer(path1, path0);
          assertFalse(boolean1);
          assertNotSame(path0, path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(path1, path0);
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("<<[tdkN&FHuH;#U|5I", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertEquals("<<[tdkN&FHuH;#U|5I", mockFile0.getName());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.isHidden());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/<<[tdkN&FHuH;#U|5I/<<[tdkN&FHuH;#U|5I", mockFile1.toString());
          assertEquals("<<[tdkN&FHuH;#U|5I", mockFile1.getName());
          assertTrue(mockFile1.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/<<[tdkN&FHuH;#U|5I", mockFile1.getParent());
          assertFalse(mockFile1.canWrite());
          assertEquals(0L, mockFile1.lastModified());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertTrue(mockFile1.isFile());
          assertFalse(mockFile1.canExecute());
          assertFalse(path0.equals((Object)path1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(path1.equals((Object)path0));
          assertTrue(boolean1 == boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.readPosixFileAttributes(path1, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.function.Uncheck.apply(Uncheck.java:162)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1259)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1349)
             // sun.reflect.GeneratedMethodAccessor290.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Duration duration0 = Duration.ofMinutes((-4582L));
      assertNotNull(duration0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(boolean0);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      boolean boolean1 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(boolean1);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.isNewer(path0, (-1343L), (LinkOption[]) null);
      assertFalse(boolean2);
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileTime fileTime0 = FileTime.fromMillis(0L);
      assertNotNull(fileTime0);
      
      FileTime fileTime1 = PathUtils.getLastModifiedFileTime(path0, fileTime0, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertNotNull(fileTime1);
      assertSame(fileTime0, fileTime1);
      assertSame(fileTime1, fileTime0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, false, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.HiddenFileFilter";
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.HiddenFileFilter/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertSame(path1, path0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.HiddenFileFilter/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      try { 
        PathUtils.readBasicFileAttributes(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("Wdp<6~|");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("Wdp<6~|", mockFile0.toString());
      assertEquals("Wdp<6~|", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      
      Charset charset0 = null;
      OpenOption[] openOptionArray0 = null;
      try { 
        PathUtils.readString(path1, (Charset) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 12);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[4] = fileAttributeArray0[0];
      fileAttributeArray0[2] = fileAttributeArray0[0];
      Path path2 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(12, fileAttributeArray0.length);
      assertNotNull(path2);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      
      boolean boolean2 = PathUtils.isOlder(path1, path0);
      assertTrue(boolean2);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertNotSame(path1, path2);
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      boolean boolean0 = PathUtils.isOlder(path0, 9223372036854775807L, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Unexpected mismatch.");
      assertNotNull(pattern0);
      assertEquals("Unexpected mismatch.", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("Unexpected mismatch.", pattern0.pattern());
      
      Pattern pattern1 = Pattern.compile("Unexpected mismatch.", 2902);
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertEquals("Unexpected mismatch.", pattern1.pattern());
      assertEquals("Unexpected mismatch.", pattern1.toString());
      assertEquals(2902, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern1);
      assertNotNull(regexFileFilter0);
      assertEquals("Unexpected mismatch.", pattern1.pattern());
      assertEquals("Unexpected mismatch.", pattern1.toString());
      assertEquals(2902, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=Unexpected mismatch.]", string0);
      assertNotNull(string0);
      assertNotSame(pattern1, pattern0);
      assertEquals("Unexpected mismatch.", pattern1.pattern());
      assertEquals("Unexpected mismatch.", pattern1.toString());
      assertEquals(2902, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      
      Path[] pathArray0 = new Path[3];
      Path[] pathArray1 = PathUtils.filter(regexFileFilter0, pathArray0);
      assertEquals(3, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pattern1, pattern0);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("Unexpected mismatch.", pattern1.pattern());
      assertEquals("Unexpected mismatch.", pattern1.toString());
      assertEquals(2902, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
      
      FileVisitResult fileVisitResult0 = regexFileFilter0.preVisitDirectory(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
      assertNotSame(pattern1, pattern0);
      assertEquals("Unexpected mismatch.", pattern1.pattern());
      assertEquals("Unexpected mismatch.", pattern1.toString());
      assertEquals(2902, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      Stream<Path> stream0 = PathUtils.walk(path0, regexFileFilter0, 16, true, fileVisitOptionArray0);
      assertEquals(6, fileVisitOptionArray0.length);
      assertNotNull(stream0);
      assertNotSame(pattern1, pattern0);
      assertEquals("Unexpected mismatch.", pattern1.pattern());
      assertEquals("Unexpected mismatch.", pattern1.toString());
      assertEquals(2902, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      assertNotNull(canExecuteFileFilter0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      Stream<Path> stream0 = PathUtils.walk(path0, canExecuteFileFilter0, 2894, true, fileVisitOptionArray0);
      assertEquals(1, fileVisitOptionArray0.length);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path1);
      assertFalse(boolean1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption1);
      assertNotSame(standardCopyOption1, standardCopyOption0);
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)93;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)80, (byte)82, (byte) (-69), (byte) (-15), (byte)93}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      // Undeclared exception!
      try { 
        PathUtils.copy((IOSupplier<InputStream>) null, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption0;
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(7, fileVisitOptionArray0.length);
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(fileVisitOption2));
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, path1, set0, (-850));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(5, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CopyDirectoryVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          Path path1 = PathUtils.getTempDirectory();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertTrue(path1.equals((Object)path0));
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertEquals(0, linkOptionArray0.length);
          assertTrue(boolean0);
          assertNotSame(path0, path1);
          assertTrue(path0.equals((Object)path1));
          
          boolean boolean1 = PathUtils.isEmpty(path0);
          assertFalse(boolean1);
          assertNotSame(path0, path1);
          assertTrue(path0.equals((Object)path1));
          assertFalse(boolean1 == boolean0);
          
          FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          fileAttributeArray0[7] = fileAttribute0;
          Path path2 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
          assertEquals(8, fileAttributeArray0.length);
          assertNotNull(path2);
          assertNotSame(path2, path0);
          assertNotSame(path2, path1);
          assertNotSame(path0, path1);
          assertNotSame(path0, path2);
          assertFalse(path2.equals((Object)path0));
          assertFalse(path2.equals((Object)path1));
          assertTrue(path0.equals((Object)path1));
          
          Path path3 = PathUtils.current();
          assertNotNull(path3);
          assertNotSame(path3, path1);
          assertNotSame(path3, path0);
          assertNotSame(path3, path2);
          assertFalse(path3.equals((Object)path1));
          assertFalse(path3.equals((Object)path0));
          assertFalse(path3.equals((Object)path2));
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path2, path3, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./snap\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // org.apache.commons.io.file.CopyDirectoryVisitor.preVisitDirectory(CopyDirectoryVisitor.java:153)
             // org.apache.commons.io.file.CopyDirectoryVisitor.preVisitDirectory(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2677)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:292)
             // sun.reflect.GeneratedMethodAccessor300.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          String string0 = ")hdZ![p#l8=j";
          MockFile mockFile0 = new MockFile(")hdZ![p#l8=j");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canRead());
          assertEquals(")hdZ![p#l8=j", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(")hdZ![p#l8=j", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(path1.equals((Object)path0));
          
          LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \")hdZ![p#l8=j\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Duration duration0 = Duration.ofMinutes((-4582L));
          assertNotNull(duration0);
          
          boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
          assertFalse(boolean0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.isDirectory());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          
          boolean boolean1 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
          assertFalse(boolean1);
          assertFalse(mockFile0.isDirectory());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertTrue(boolean1 == boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"og.apache.comons.io.file.PathUtils\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      assertNotNull(directoryFileFilter0);
      
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, directoryFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      Path path2 = PathUtils.current();
      assertNotNull(path2);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
      assertNotNull(prefixFileFilter0);
      
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, prefixFileFilter0);
      assertNotNull(directoryStream0);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertTrue(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isEmpty(path0);
          assertFalse(boolean0);
          assertNotSame(path0, path1);
          assertFalse(path0.equals((Object)path1));
          
          boolean boolean1 = PathUtils.isEmpty(path0);
          assertFalse(boolean1);
          assertNotSame(path0, path1);
          assertFalse(path0.equals((Object)path1));
          assertTrue(boolean1 == boolean0);
          
          FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 12);
          FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[4] = fileAttributeArray0[0];
          fileAttributeArray0[2] = fileAttributeArray0[0];
          fileAttributeArray0[3] = fileAttributeArray0[2];
          Path path2 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
          assertEquals(12, fileAttributeArray0.length);
          assertNotNull(path2);
          assertNotSame(path0, path2);
          assertNotSame(path0, path1);
          assertNotSame(path2, path0);
          assertNotSame(path2, path1);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path2.equals((Object)path0));
          assertFalse(path2.equals((Object)path1));
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path2, path2, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/snap/README\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:90)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:174)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:292)
             // sun.reflect.GeneratedMethodAccessor300.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      
      URI uRI1 = MockURI.aHttpURI;
      assertNotNull(uRI1);
      assertSame(uRI1, uRI0);
      assertFalse(uRI1.isOpaque());
      assertEquals("http://foo.bar", uRI1.toString());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("", uRI1.getRawPath());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(0, fileVisitOptionArray0.length);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        ZoneOffset.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      // Undeclared exception!
      try { 
        PathUtils.readAttributes(path0, class0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Path path0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      boolean boolean0 = StandardDeleteOption.overrideReadOnly(deleteOptionArray0);
      assertEquals(2, deleteOptionArray0.length);
      assertTrue(boolean0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null, (LinkOption[]) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[4] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[5] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[6] = (DeleteOption) standardDeleteOption0;
      boolean boolean0 = StandardDeleteOption.overrideReadOnly(deleteOptionArray0);
      assertEquals(7, deleteOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(2, fileVisitOptionArray0.length);
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(set0.contains(fileVisitOption0));
      
      DeleteOption[] deleteOptionArray1 = new DeleteOption[3];
      assertFalse(deleteOptionArray1.equals((Object)deleteOptionArray0));
      
      deleteOptionArray1[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray1[1] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray1[2] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null, (LinkOption[]) null, deleteOptionArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "path");
          assertFalse(boolean0);
          
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertEquals("", mockFile0.getName());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.canWrite());
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          linkOptionArray0[0] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption2;
          linkOptionArray0[2] = linkOption1;
          linkOptionArray0[3] = linkOption0;
          linkOptionArray0[4] = linkOption0;
          linkOptionArray0[5] = linkOption0;
          boolean boolean1 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertEquals(6, linkOptionArray0.length);
          assertTrue(boolean1);
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertEquals("", mockFile0.getName());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.canWrite());
          assertFalse(boolean1 == boolean0);
          
          boolean boolean2 = PathUtils.isEmpty(path0);
          assertFalse(boolean2);
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertEquals("", mockFile0.getName());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.canWrite());
          assertTrue(boolean2 == boolean0);
          assertFalse(boolean2 == boolean1);
          
          FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_base_pr_493.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:248)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isDirectory(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:90)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:174)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:292)
             // sun.reflect.GeneratedMethodAccessor300.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertTrue(boolean0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean1 == boolean0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(8, fileAttributeArray0.length);
      assertNull(path1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[8];
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path1, path1, (-2856), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Path[] pathArray0 = new Path[1];
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      Pattern pattern1 = Pattern.compile("", (-336));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertEquals((-336), pattern1.flags());
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      assertFalse(pattern1.equals((Object)pattern0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readAttributes(path0, class0, linkOptionArray0);
      assertEquals(8, linkOptionArray0.length);
      assertNotNull(basicFileAttributes0);
      
      FileVisitResult fileVisitResult0 = regexFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(8, linkOptionArray0.length);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
      assertNotSame(pattern0, pattern1);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(pattern0.equals((Object)pattern1));
      
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(regexFileFilter0, pathArray0);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pattern0, pattern1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      LinkOption[] linkOptionArray1 = new LinkOption[4];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[0] = linkOption8;
      LinkOption linkOption9 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[1] = linkOption9;
      LinkOption linkOption10 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[2] = linkOption10;
      LinkOption linkOption11 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[3] = linkOption11;
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray1, (OpenOption[]) linkOptionArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(fileTime0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.isOlder(path1, 16384L, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[1];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[0] = linkOption0;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0, linkOptionArray1);
      assertEquals(1, linkOptionArray1.length);
      assertNotNull(basicFileAttributes0);
      assertNotSame(path0, path1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      // Undeclared exception!
      try { 
        ZoneId.ofOffset((String) null, zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      boolean boolean1 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.isEmpty(path0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      try { 
        PathUtils.directoryContentEquals(path0, path0, 992, linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isNewer(path0, path1);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(path1, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("s7mL4^:N%6");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("s7mL4^:N%6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("s7mL4^:N%6", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("s7mL4^:N%6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("s7mL4^:N%6", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("fH1/(c+E07uKVm", "fH1/(c+E07uKVm");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/fH1/(c+E07uKVm/fH1/(c+E07uKVm", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("(c+E07uKVm", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/fH1/(c+E07uKVm/fH1", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      MockFile mockFile1 = new MockFile("filter", "org.apache.commons.io.input.CharSequenceInputStream$Builder");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean1 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertTrue(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/fH1/(c+E07uKVm/fH1/(c+E07uKVm", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("(c+E07uKVm", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/fH1/(c+E07uKVm/fH1", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean1 == boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("jdb3\"}r");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("jdb3\"}r", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("jdb3\"}r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path1, path1);
      assertTrue(boolean1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("jdb3\"}r", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("jdb3\"}r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      URI uRI0 = MockURI.URI((String) null, "fx.)4l8ajXzzPs", (String) null, (-1373), "})%Ok0,M&\"'1L,", (String) null, (String) null);
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getScheme());
      assertEquals("%7D)%25Ok0,M&%22'1L,", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7D)%25Ok0,M&%22'1L,", uRI0.getRawPath());
      
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("jdb3\"}r", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("jdb3\"}r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      
      String string0 = ",";
      String string1 = "&8yjmL0Z<(6>[8sI3n";
      MockFile mockFile1 = new MockFile(",", "&8yjmL0Z<(6>[8sI3n");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean2 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean2);
      assertNotSame(path0, path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("jdb3\"}r", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("jdb3\"}r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(path0.equals((Object)path1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf(";,qQo\"YM$cZK53{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.;,qQo\"YM$cZK53{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      boolean boolean1 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = PathUtils.isRegularFile((Path) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      try { 
        PathUtils.directoryContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, "", (Charset) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      Duration duration0 = Duration.ofMillis(100L);
      assertNotNull(duration0);
      
      boolean boolean1 = duration0.isZero();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked((Path) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOfDirectory(path0);
      assertEquals(69355219L, long0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(uRI0);
      assertNull(fileTime0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path1);
      assertTrue(boolean0);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path1);
      assertNull(list0);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(69355219L, long0);
      assertNotSame(path0, path1);
      assertTrue(path0.equals((Object)path1));
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean1 = PathUtils.isRegularFile(path1, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Path path0 = null;
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      DosFileAttributes dosFileAttributes0 = PathUtils.readDosFileAttributes((Path) null, linkOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertNull(dosFileAttributes0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      LinkOption linkOption6 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[1] = (CopyOption) null;
      // Undeclared exception!
      try { 
        StandardCopyOption.valueOf(" does not define exactly one abstract method: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardCopyOption. does not define exactly one abstract method: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
          assertNotNull(counters_PathCounters0);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1634)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectoryAsBigInteger(path0);
          assertNotNull(counters_PathCounters0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteOnExit(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // java.io.File.deleteOnExit(File.java:1085)
             // org.apache.commons.io.file.PathUtils.deleteOnExit(PathUtils.java:607)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">jis@h[I{+(Bx6C8`n");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 1);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(1, fileAttributeArray0.length);
      assertNull(path1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      Path path2 = mockFile0.toPath();
      assertNotNull(path2);
      assertSame(path2, path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      Path path3 = PathUtils.createParentDirectories(path2, fileAttributeArray0);
      assertEquals(1, fileAttributeArray0.length);
      assertNull(path3);
      assertSame(path2, path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      Path path4 = mockFile0.toPath();
      assertNotNull(path4);
      assertSame(path4, path0);
      assertSame(path4, path2);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      Path path5 = mockFile0.toPath();
      assertNotNull(path5);
      assertSame(path5, path0);
      assertSame(path5, path2);
      assertSame(path5, path4);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path5);
      assertTrue(boolean0);
      assertSame(path0, path2);
      assertSame(path0, path4);
      assertSame(path0, path5);
      assertSame(path5, path0);
      assertSame(path5, path2);
      assertSame(path5, path4);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(">jis@h[I{+(Bx6C8`n", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      String string0 = ".";
      try { 
        MockURI.URI(">jis@h[I{+(Bx6C8`n", ">jis@h[I{+(Bx6C8`n", ">jis@h[I{+(Bx6C8`n", (-1373), "", (String) null, "})%Ok0,M&\"'1L,");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: >jis@h[I{+(Bx6C8`n://%3Ejis%40h%5BI%7B+(Bx6C8%60n@>jis@h[I{+(Bx6C8`n:-1373#%7D)%25Ok0,M&%22'1L,
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(4, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption[] linkOptionArray0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      Path path2 = PathUtils.createParentDirectories(path0, (LinkOption) null, fileAttributeArray0);
      assertEquals(4, fileAttributeArray0.length);
      assertNull(path2);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      boolean boolean1 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedBlockingQueue<Path> linkedBlockingQueue0 = new LinkedBlockingQueue<Path>();
      assertNotNull(linkedBlockingQueue0);
      
      int int0 = linkedBlockingQueue0.remainingCapacity();
      assertEquals(Integer.MAX_VALUE, int0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedBlockingQueue0, path0, false, comparator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedBlockingQueue0.contains(path0));
      assertFalse(list0.contains(path0));
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean0 = PathUtils.isRegularFile(path1, linkOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URL uRL1 = MockURL.URL(uRL0, "g;>;H!s{");
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/g;>;H!s{", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/g;>;H!s{", uRL1.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(uRL1.equals((Object)uRL0));
      
      try { 
        PathUtils.getLastModifiedFileTime(uRL1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 41: ftp://ftp.someFakeButWellFormedURL.org/g;>;H!s{
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption1;
      fileVisitOptionArray0[2] = fileVisitOption1;
      fileVisitOptionArray0[3] = fileVisitOption0;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption3;
      fileVisitOptionArray0[5] = fileVisitOption2;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertEquals(6, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      assertNotNull(canReadFileFilter0);
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("There should be a `%s` method on class `%s`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertEquals(7, fileAttributeArray0.length);
      assertNull(path1);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short)18131, bigInteger0.shortValue());
      assertEquals((byte) (-45), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption3;
      fileVisitOptionArray0[2] = fileVisitOption1;
      fileVisitOptionArray0[3] = fileVisitOption1;
      fileVisitOptionArray0[4] = fileVisitOption0;
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[7] = fileVisitOption0;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertEquals(8, fileVisitOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, 16384L, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      LinkOption linkOption3 = PathUtils.NULL_LINK_OPTION;
      linkOptionArray0[4] = linkOption0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("path", "path", 1, "path", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("path:1", uRL0.getAuthority());
      assertEquals("path", uRL0.getHost());
      assertEquals("path", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("path", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("path", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals(1, uRL0.getPort());
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Duration duration0 = Duration.ofMinutes((-4582L));
      assertNotNull(duration0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean0 = PathUtils.isPosix(path0, (LinkOption[]) null);
      assertFalse(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          String string0 = "";
          boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
          assertFalse(boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path1, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.function.Uncheck.apply(Uncheck.java:162)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1259)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1349)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:1164)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Path[] pathArray0 = PathUtils.filter(regexFileFilter0, (Path[]) null);
      assertEquals(0, pathArray0.length);
      assertNotNull(pathArray0);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      System.setCurrentTimeMillis((-289L));
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      assertNotNull(directoryFileFilter0);
      
      Path[] pathArray0 = PathUtils.filter(directoryFileFilter0, (Path[]) null);
      assertEquals(0, pathArray0.length);
      assertNotNull(pathArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[2] = fileAttributeArray0[1];
      fileAttributeArray0[3] = fileAttributeArray0[2];
      fileAttributeArray0[5] = fileAttributeArray0[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertEquals(6, fileAttributeArray0.length);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      Path path2 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(6, fileAttributeArray0.length);
      assertNull(path2);
      
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime(path0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption1);
      assertSame(fileVisitOption1, fileVisitOption0);
      
      fileVisitOptionArray0[2] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption4;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      Path path2 = PathUtils.current();
      assertNotNull(path2);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertFalse(path2.equals((Object)path0));
      assertTrue(path2.equals((Object)path1));
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path2, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "G", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertEquals(7, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'WA&=S");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      // Undeclared exception!
      try { 
        PathUtils.isPosix((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1422)
             // sun.reflect.GeneratedMethodAccessor302.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = null;
      boolean boolean0 = PathUtils.isDirectory((Path) null, (LinkOption[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      Path path2 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path2);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[1] = (CopyOption) null;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = null;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      Path path1 = PathUtils.createParentDirectories(path0, (LinkOption) null, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
      assertNotNull(list0);
      assertNotSame(path0, path1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedHashSet0.contains(path0));
      assertFalse(list0.contains(path0));
      assertFalse(path0.equals((Object)path1));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      Path path2 = PathUtils.createParentDirectories((Path) null, (LinkOption) null, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path2);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      Path path1 = PathUtils.createParentDirectories(path0, (LinkOption) null, (FileAttribute<?>[]) null);
      assertNull(path1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'LpP!lj|RIG;:`h63", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertFalse(mockFile0.exists());
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      Path path0 = PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
      assertEquals(4, fileAttributeArray0.length);
      assertNull(path0);
      
      String string0 = "O)zJ/BOd{2.9";
      MockFile mockFile0 = new MockFile("O)zJ/BOd{2.9");
      assertNotNull(mockFile0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(4, fileAttributeArray0.length);
      assertNull(path1);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertEquals(1, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(659);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(659, charBuffer0.limit());
      assertEquals(659, charBuffer0.remaining());
      assertEquals(659, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(659, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "O)zJ/BOd{2.9", 659, (-2523));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      fileVisitOptionArray0[3] = fileVisitOption0;
      fileVisitOptionArray0[4] = fileVisitOption0;
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[6] = fileVisitOption0;
      fileVisitOptionArray0[7] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertEquals(8, fileVisitOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("5WL1w!$A6e<Lb1Ulitc", "");
      assertNotNull(mockFile0);
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime((File) mockFile0);
      assertNull(fileTime0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("5WL1w!$A6e<Lb1Ulitc", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/5WL1w!$A6e<Lb1Ulitc", mockFile0.toString());
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (FileTime) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.attribute.FileTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
          assertNotNull(randomAccessFileInputStream_Builder0);
          
          boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean1);
          assertFalse(boolean1 == boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption[] linkOptionArray1 = null;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:322)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils$RelativeSortedPaths");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals("org.apache.commons.io.file.PathUtils$RelativeSortedPaths", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.io.file.PathUtils$RelativeSortedPaths", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals("org.apache.commons.io.file.PathUtils$RelativeSortedPaths", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.io.file.PathUtils$RelativeSortedPaths", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, 14623L, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, 0L, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      try { 
        MockURI.URI("", "net.bytebuddy.build.HashCodeAndEqualsPlugin$AnnotationOrderComparator", "net.bytebuddy.build.HashCodeAndEqualsPlugin$AnnotationOrderComparator");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :net.bytebuddy.build.HashCodeAndEqualsPlugin$AnnotationOrderComparator#net.bytebuddy.build.HashCodeAndEqualsPlugin$AnnotationOrderComparator
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      URI uRI0 = MockURI.create(".");
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertEquals(".", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals(".", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertEquals(4, fileVisitOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertTrue(path0.equals((Object)path1));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      boolean boolean1 = PathUtils.directoryContentEquals((Path) null, (Path) null, 1, linkOptionArray0, fileVisitOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertEquals(5, fileVisitOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      Path path2 = PathUtils.createParentDirectories(path1, (FileAttribute<?>[]) null);
      assertNotNull(path2);
      assertNotSame(path1, path2);
      assertNotSame(path1, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      assertTrue(path1.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption1;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption1;
      linkOptionArray0[7] = linkOption1;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path1, (FileTime) null, linkOptionArray0);
      assertEquals(8, linkOptionArray0.length);
      assertNotNull(fileTime0);
      assertNotSame(path1, path2);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path2));
      
      boolean boolean0 = PathUtils.isNewer(path1, fileTime0, linkOptionArray0);
      assertEquals(8, linkOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(path1, path2);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path2));
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path0, path2);
      assertTrue(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path2));
      assertTrue(boolean1 == boolean0);
      
      Path path3 = PathUtils.createParentDirectories(path0, linkOption1, (FileAttribute<?>[]) null);
      assertNotNull(path3);
      assertNotSame(path0, path1);
      assertNotSame(path0, path3);
      assertNotSame(path0, path2);
      assertNotSame(path3, path1);
      assertSame(path3, path2);
      assertNotSame(path3, path0);
      assertSame(linkOption1, linkOption2);
      assertSame(linkOption1, linkOption0);
      assertTrue(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path0));
      
      DosFileAttributeView dosFileAttributeView0 = PathUtils.getDosFileAttributeView(path3, linkOptionArray0);
      assertEquals(8, linkOptionArray0.length);
      assertNotNull(dosFileAttributeView0);
      assertNotSame(path0, path1);
      assertNotSame(path0, path3);
      assertNotSame(path0, path2);
      assertNotSame(path3, path1);
      assertSame(path3, path2);
      assertNotSame(path3, path0);
      assertSame(linkOption1, linkOption2);
      assertSame(linkOption1, linkOption0);
      assertTrue(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path3));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("path");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("path", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("path", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path1);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("path", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("path", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      try { 
        MockURI.URI("path", "fx.)4l8ajXzzPs", "", 1024, (String) null, (String) null, "IBp");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected hostname at index 22: path://fx.)4l8ajXzzPs@:1024#IBp
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-,el6,u#9Shj6HpwsK*");
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ofHours(502L);
      assertNotNull(duration0);
      
      String string0 = "\\@>Ip!7e2N";
      MockFile mockFile0 = new MockFile("@>Ip!7e2N");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("@>Ip!7e2N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("@>Ip!7e2N", mockFile0.getName());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("@>Ip!7e2N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("@>Ip!7e2N", mockFile0.getName());
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[6];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("62*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.62*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Path path0 = null;
      MockFile mockFile0 = new MockFile("BlrL", "BlrL");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/BlrL/BlrL", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("BlrL", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/BlrL", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path1);
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/BlrL/BlrL", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("BlrL", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/BlrL", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder1 = randomAccessFileInputStream_Builder0.setCloseOnClose(false);
      assertNotNull(randomAccessFileInputStream_Builder1);
      assertSame(randomAccessFileInputStream_Builder0, randomAccessFileInputStream_Builder1);
      assertSame(randomAccessFileInputStream_Builder1, randomAccessFileInputStream_Builder0);
      
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      assertNotNull(charset0);
      assertSame(randomAccessFileInputStream_Builder0, randomAccessFileInputStream_Builder1);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("BlrL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.BlrL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jdb3\"}r");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("jdb3\"}r", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("jdb3\"}r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("jdb3\"}r", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("jdb3\"}r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      URI uRI0 = MockURI.URI((String) null, "fx.)4l8ajXzzPs", (String) null, (-1373), "})%Ok0,M&\"'1L,", "fx.)4l8ajXzzPs", "fx.)4l8ajXzzPs");
      assertNotNull(uRI0);
      assertNull(uRI0.getScheme());
      assertEquals("%7D)%25Ok0,M&%22'1L,", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertEquals("%7D)%25Ok0,M&%22'1L,?fx.)4l8ajXzzPs#fx.)4l8ajXzzPs", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("fx.)4l8ajXzzPs", uRI0.getRawFragment());
      assertEquals("fx.)4l8ajXzzPs", uRI0.getRawQuery());
      
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      MockFile mockFile1 = new MockFile(",", "&8yjmL0Z<(6>[8sI3n");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'LpP!lj|RIG;:`h63", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(5, fileAttributeArray0.length);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(path1.equals((Object)path0));
      
      Path path2 = mockFile0.toPath();
      assertNotNull(path2);
      assertSame(path2, path0);
      assertNotSame(path2, path1);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(path2.equals((Object)path1));
      
      Path path3 = PathUtils.createParentDirectories(path2, (FileAttribute<?>[]) null);
      assertNotNull(path3);
      assertSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path3);
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(path2.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertTrue(path3.equals((Object)path1));
      
      Path path4 = mockFile0.toPath();
      assertNotNull(path4);
      assertSame(path4, path0);
      assertNotSame(path4, path3);
      assertSame(path4, path2);
      assertNotSame(path4, path1);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(path4.equals((Object)path3));
      assertFalse(path4.equals((Object)path1));
      
      boolean boolean0 = PathUtils.directoryContentEquals(path4, path3);
      assertFalse(boolean0);
      assertSame(path2, path0);
      assertSame(path2, path4);
      assertNotSame(path2, path1);
      assertNotSame(path2, path3);
      assertNotSame(path3, path4);
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertSame(path4, path0);
      assertNotSame(path4, path3);
      assertSame(path4, path2);
      assertNotSame(path4, path1);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path3));
      assertFalse(path3.equals((Object)path4));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertTrue(path3.equals((Object)path1));
      assertFalse(path4.equals((Object)path3));
      assertFalse(path4.equals((Object)path1));
      
      try { 
        MockURI.URI("|0%$", ".", "@UhEi_EVy4", 19, "", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: |0%$://.@@UhEi_EVy4:19?#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(69355219L, long0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path1, (FileTime) null, linkOptionArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertEquals(7, linkOptionArray0.length);
      assertNotNull(fileTime0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      String string0 = "Bg< ";
      MockFile mockFile0 = new MockFile("Bg< ");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("Bg< ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bg< ", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        PathUtils.getLastModifiedFileTime(uRL0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 32: file:/home/azureuser/LLm4PrTest/ io_experiments/Bg<
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          long long0 = 4096L;
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          boolean boolean0 = PathUtils.isOlder(path0, 4096L, linkOptionArray0);
          assertEquals(5, linkOptionArray0.length);
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:503)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1774)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:502)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:487)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption1;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption2;
      linkOptionArray0[7] = linkOption1;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(8, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path1);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      OpenOption[] openOptionArray0 = new OpenOption[1];
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(aclFileAttributeView0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.delete(path0, (LinkOption[]) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteOnExit((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&@jj'$OM#T\"NFq");
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      Path path2 = PathUtils.current();
      assertNotNull(path2);
      assertNotSame(path2, path0);
      assertTrue(path2.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path2, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path1, (FileTime) null, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertNotNull(fileTime0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.isEmpty(path1);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      Path path2 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNotNull(path2);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertSame(linkOption0, linkOption1);
      assertSame(path2, path1);
      assertNotSame(path2, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      
      DosFileAttributeView dosFileAttributeView0 = PathUtils.getDosFileAttributeView(path0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertNotNull(dosFileAttributeView0);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(path0, (Path) null, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      long long0 = PathUtils.sizeOfDirectory(path0);
      assertEquals(69355219L, long0);
      
      boolean boolean1 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readOsFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:503)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1774)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:502)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:453)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:431)
             // sun.reflect.GeneratedMethodAccessor195.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, (LinkOption[]) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      FileTime fileTime0 = FileTime.from((-1522L), timeUnit0);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean1 = PathUtils.isNewer(path1, fileTime0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 154);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) null, (-665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, 0L, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      try { 
        MockURI.URI("", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView((Path) null, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      Path path1 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      MockFile mockFile0 = new MockFile("q*o40MCVDt");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("q*o40MCVDt", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("q*o40MCVDt", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertEquals("q*o40MCVDt", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("q*o40MCVDt", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      Pattern pattern0 = Pattern.compile("Pj!1]", (-1));
      assertNotNull(pattern0);
      assertEquals("Pj!1]", pattern0.toString());
      assertEquals("Pj!1]", pattern0.pattern());
      assertEquals((-1), pattern0.flags());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals("Pj!1]", pattern0.toString());
      assertEquals("Pj!1]", pattern0.pattern());
      assertEquals((-1), pattern0.flags());
      
      Path[] pathArray0 = new Path[5];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      Path[] pathArray1 = PathUtils.filter(regexFileFilter0, pathArray0);
      assertEquals(5, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("Pj!1]", pattern0.toString());
      assertEquals("Pj!1]", pattern0.pattern());
      assertEquals((-1), pattern0.flags());
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("C+3q46*QO_:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.C+3q46*QO_:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteOnExit(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // java.io.File.deleteOnExit(File.java:1085)
             // org.apache.commons.io.file.PathUtils.deleteOnExit(PathUtils.java:607)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_base_pr_493.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:517)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:476)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
          assertTrue(boolean0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
          assertNotNull(randomAccessFileInputStream_Builder0);
          
          RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder1 = randomAccessFileInputStream_Builder0.setCloseOnClose(true);
          assertNotNull(randomAccessFileInputStream_Builder1);
          assertSame(randomAccessFileInputStream_Builder0, randomAccessFileInputStream_Builder1);
          assertSame(randomAccessFileInputStream_Builder1, randomAccessFileInputStream_Builder0);
          
          Charset charset0 = randomAccessFileInputStream_Builder1.getCharset();
          assertNotNull(charset0);
          assertSame(randomAccessFileInputStream_Builder0, randomAccessFileInputStream_Builder1);
          assertSame(randomAccessFileInputStream_Builder1, randomAccessFileInputStream_Builder0);
          assertTrue(charset0.isRegistered());
          assertEquals("UTF-8", charset0.toString());
          assertTrue(charset0.canEncode());
          assertEquals("UTF-8", charset0.displayName());
          assertEquals("UTF-8", charset0.name());
          
          StringWriter stringWriter0 = new StringWriter();
          assertNotNull(stringWriter0);
          assertEquals("", stringWriter0.toString());
          
          StringBuffer stringBuffer0 = stringWriter0.getBuffer();
          assertNotNull(stringBuffer0);
          assertEquals("", stringWriter0.toString());
          assertEquals(0, stringBuffer0.length());
          assertEquals("", stringBuffer0.toString());
          
          CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
          assertNotNull(charBuffer0);
          assertEquals("", stringWriter0.toString());
          assertEquals(0, stringBuffer0.length());
          assertEquals("", stringBuffer0.toString());
          assertEquals(0, charBuffer0.length());
          assertEquals("", charBuffer0.toString());
          assertEquals(0, charBuffer0.remaining());
          assertEquals(0, charBuffer0.position());
          assertTrue(charBuffer0.isReadOnly());
          assertFalse(charBuffer0.hasRemaining());
          assertEquals(0, charBuffer0.limit());
          assertEquals(0, charBuffer0.capacity());
          assertFalse(charBuffer0.isDirect());
          assertFalse(charBuffer0.hasArray());
          
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          linkOptionArray0[3] = linkOption0;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_base_pr_493.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:517)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:476)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      LinkOption linkOption9 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption9, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path0);
      assertSame(linkOption9, linkOption2);
      assertSame(linkOption9, linkOption1);
      assertSame(linkOption9, linkOption6);
      assertSame(linkOption9, linkOption7);
      assertSame(linkOption9, linkOption3);
      assertSame(linkOption9, linkOption4);
      assertSame(linkOption9, linkOption0);
      assertSame(linkOption9, linkOption5);
      assertSame(linkOption9, linkOption8);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      LinkOption[] linkOptionArray0 = new LinkOption[11];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SIBLINGS;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, path0);
      assertNotNull(simpleFileVisitor1);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(8, fileVisitOptionArray0.length);
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(set0.contains(fileVisitOption2));
      
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-45), bigInteger0.byteValue());
      assertEquals((short)18131, bigInteger0.shortValue());
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      Duration duration0 = Duration.ofMillis(100L);
      assertNotNull(duration0);
      
      boolean boolean1 = duration0.isZero();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 4);
          FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          Path path0 = PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
          assertEquals(4, fileAttributeArray0.length);
          assertNull(path0);
          
          String string0 = "O)zJ/BOd{2.9";
          MockFile mockFile0 = new MockFile("O)zJ/BOd{2.9");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertNotNull(path1);
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals("O)zJ", mockFile0.getParent());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertEquals("BOd{2.9", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("O)zJ/BOd{2.9", mockFile0.toString());
          assertFalse(mockFile0.canRead());
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path1, linkOption0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"O)zJ\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:401)
             // sun.reflect.GeneratedMethodAccessor214.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z|)v!D=ZVt", "z|)v!D=ZVt");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("z|)v!D=ZVt", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt/z|)v!D=ZVt", mockFile0.toString());
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertSame(path1, path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("z|)v!D=ZVt", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt/z|)v!D=ZVt", mockFile0.toString());
      
      Duration duration0 = Duration.ofMinutes(0L);
      assertNotNull(duration0);
      
      boolean boolean0 = PathUtils.waitFor(path1, duration0, (LinkOption[]) null);
      assertFalse(boolean0);
      assertSame(path1, path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("z|)v!D=ZVt", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt/z|)v!D=ZVt", mockFile0.toString());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger(path1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt/z|)v!D=ZVt'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Duration duration0 = Duration.ofMinutes((-4577L));
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isZero();
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      boolean boolean1 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(boolean1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption2;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean0 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertEquals(4, linkOptionArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(5, fileAttributeArray0.length);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, (FileTime) null, linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertNotNull(fileTime0);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      
      boolean boolean0 = PathUtils.isNewer(path1, fileTime0, linkOptionArray0);
      assertEquals(5, fileAttributeArray0.length);
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray1 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 1);
      FileAttribute<BasicFileAttributes> fileAttribute1 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray1[0] = fileAttribute1;
      Path path2 = PathUtils.createParentDirectories(path1, linkOption0, fileAttributeArray1);
      assertEquals(5, fileAttributeArray0.length);
      assertEquals(1, fileAttributeArray1.length);
      assertNull(path2);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertSame(linkOption0, linkOption6);
      assertSame(linkOption0, linkOption5);
      assertSame(linkOption0, linkOption2);
      assertSame(linkOption0, linkOption1);
      assertSame(linkOption0, linkOption4);
      assertSame(linkOption0, linkOption3);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("ftp", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"ftp\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      Path path2 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path2);
      
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      String string0 = ".";
      URI uRI0 = MockURI.URI("sourceFile", ".", (String) null, 19, "", "@UhEi_EVy4", ".");
      assertNotNull(uRI0);
      assertEquals(".", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("sourceFile", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("sourceFile:?@UhEi_EVy4#.", uRI0.toString());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"sourceFile\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path2 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path2);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption3;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption2;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.exists());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption1;
          linkOptionArray0[4] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"og.apache.comons.io.file.PathUtils\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1207)
             // sun.reflect.GeneratedMethodAccessor298.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("?1ze#7WCl(e=`F^zk@", "?1ze#7WCl(e=`F^zk@");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/?1ze#7WCl(e=`F^zk@/?1ze#7WCl(e=`F^zk@", mockFile0.toString());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/?1ze#7WCl(e=`F^zk@", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("?1ze#7WCl(e=`F^zk@", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/?1ze#7WCl(e=`F^zk@\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:401)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1212)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1207)
             // sun.reflect.GeneratedMethodAccessor298.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"org.apache.commons.io.file.PathUtils\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      // Undeclared exception!
      try { 
        PathUtils.getLastModifiedFileTime(path0, (FileTime) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      assertNotNull(emptyFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = null;
      Path[] pathArray1 = PathUtils.filter(emptyFileFilter0, pathArray0);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isEmpty(path1);
      assertFalse(boolean0);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OrFileFilter orFileFilter0 = new OrFileFilter(linkedList0);
      assertNotNull(orFileFilter0);
      assertEquals(0, linkedList0.size());
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path1;
      Path[] pathArray1 = PathUtils.filter(orFileFilter0, pathArray0);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(pathArray1.equals((Object)pathArray0));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[5] = fileAttributeArray0[4];
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(6, fileAttributeArray0.length);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      String string0 = "";
      Pattern pattern0 = Pattern.compile("", (-1));
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals((-1), pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals("", pattern0.toString());
      assertEquals((-1), pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(regexFileFilter0, pathArray0);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals("", pattern0.toString());
      assertEquals((-1), pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(pathArray1.equals((Object)pathArray0));
      
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
          assertTrue(boolean0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
          assertNotNull(randomAccessFileInputStream_Builder0);
          
          RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder1 = randomAccessFileInputStream_Builder0.setCloseOnClose(true);
          assertNotNull(randomAccessFileInputStream_Builder1);
          assertSame(randomAccessFileInputStream_Builder0, randomAccessFileInputStream_Builder1);
          assertSame(randomAccessFileInputStream_Builder1, randomAccessFileInputStream_Builder0);
          
          Charset charset0 = randomAccessFileInputStream_Builder1.getCharset();
          assertNotNull(charset0);
          assertSame(randomAccessFileInputStream_Builder0, randomAccessFileInputStream_Builder1);
          assertSame(randomAccessFileInputStream_Builder1, randomAccessFileInputStream_Builder0);
          assertEquals("UTF-8", charset0.name());
          assertEquals("UTF-8", charset0.displayName());
          assertTrue(charset0.canEncode());
          assertTrue(charset0.isRegistered());
          assertEquals("UTF-8", charset0.toString());
          
          StringWriter stringWriter0 = new StringWriter();
          assertNotNull(stringWriter0);
          assertEquals("", stringWriter0.toString());
          
          StringBuffer stringBuffer0 = stringWriter0.getBuffer();
          assertNotNull(stringBuffer0);
          assertEquals("", stringWriter0.toString());
          assertEquals("", stringBuffer0.toString());
          assertEquals(0, stringBuffer0.length());
          
          CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
          assertNotNull(charBuffer0);
          assertEquals("", stringWriter0.toString());
          assertEquals("", stringBuffer0.toString());
          assertEquals(0, stringBuffer0.length());
          assertEquals(0, charBuffer0.position());
          assertTrue(charBuffer0.isReadOnly());
          assertFalse(charBuffer0.hasArray());
          assertEquals(0, charBuffer0.remaining());
          assertEquals(0, charBuffer0.length());
          assertFalse(charBuffer0.isDirect());
          assertEquals(0, charBuffer0.capacity());
          assertEquals("", charBuffer0.toString());
          assertEquals(0, charBuffer0.limit());
          assertFalse(charBuffer0.hasRemaining());
          
          OpenOption[] openOptionArray0 = new OpenOption[1];
          openOptionArray0[0] = (OpenOption) linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.writeString(path0, charBuffer0, charset0, openOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.write(Files.java:3292)
             // org.apache.commons.io.file.PathUtils.writeString(PathUtils.java:1799)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short)18131, bigInteger0.shortValue());
      assertEquals((byte) (-45), bigInteger0.byteValue());
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(8, linkOptionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(197L);
      assertNotNull(duration0);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path2 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(659);
      assertNotNull(charBuffer0);
      assertEquals(659, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(659, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(659, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(659, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 659, 659);
      assertNotNull(charBuffer1);
      assertEquals(659, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(659, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(659, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(659, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(659, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(659, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(659, charBuffer1.limit());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertFalse(boolean0);
      
      SynchronousQueue<Path> synchronousQueue0 = new SynchronousQueue<Path>();
      assertNotNull(synchronousQueue0);
      assertFalse(synchronousQueue0.contains(path0));
      
      MockFile mockFile0 = new MockFile("Only set one of RandomAccessFile (%s) or origin (%s)");
      assertNotNull(mockFile0);
      
      Path path3 = mockFile0.toPath();
      assertNotNull(path3);
      assertNotSame(path3, path0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Only set one of RandomAccessFile (%s) or origin (%s)", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Only set one of RandomAccessFile (%s) or origin (%s)", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path3.equals((Object)path0));
      
      List<Path> list0 = PathUtils.relativize(synchronousQueue0, path3, false, (Comparator<? super Path>) null);
      assertNotNull(list0);
      assertNotSame(path3, path0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Only set one of RandomAccessFile (%s) or origin (%s)", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("Only set one of RandomAccessFile (%s) or origin (%s)", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(path3));
      assertFalse(synchronousQueue0.contains(path3));
      assertFalse(path3.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path2 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(659);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(659, charBuffer0.limit());
      assertEquals(659, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(659, charBuffer0.remaining());
      assertEquals(659, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 659, 659);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(659, charBuffer0.limit());
      assertEquals(659, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(659, charBuffer0.remaining());
      assertEquals(659, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(659, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(659, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(659, charBuffer1.limit());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      assertNotNull(randomAccessFileInputStream_Builder0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      long long0 = 100L;
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, 100L, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, 0L, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(8, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      try { 
        MockURI.URI("", "", "sourceFile", 31, "@UhEi_EVy4", "J2)CYR'(:hR=_ x", "@UhEi_EVy4");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://@sourceFile:31@UhEi_EVy4?J2)CYR'(:hR=_%20x#@UhEi_EVy4
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path1, (FileTime) null, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertNotNull(fileTime0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.isEmpty(path1);
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      Path path2 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNotNull(path2);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertSame(linkOption0, linkOption1);
      assertNotSame(path2, path0);
      assertSame(path2, path1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      
      DosFileAttributeView dosFileAttributeView0 = PathUtils.getDosFileAttributeView(path0, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertNotNull(dosFileAttributeView0);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      
      try { 
        PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 6);
          FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
          assertEquals(6, fileAttributeArray0.length);
          assertNotNull(path1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          // Undeclared exception!
          try { 
            PathUtils.readOsFileAttributes(path1, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.function.Uncheck.apply(Uncheck.java:162)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1259)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1349)
             // org.apache.commons.io.file.PathUtils.readOsFileAttributes(PathUtils.java:1335)
             // sun.reflect.GeneratedMethodAccessor272.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption2, (FileAttribute<?>[]) null);
      assertNotNull(path1);
      assertNotSame(path0, path1);
      assertSame(linkOption2, linkOption0);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption4;
      // Undeclared exception!
      PathUtils.directoryContentEquals(path1, path1, 341, linkOptionArray0, (FileVisitOption[]) null);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "q*o40MCVDt";
      MockFile mockFile0 = new MockFile("q*o40MCVDt");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("q*o40MCVDt", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("q*o40MCVDt", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("q*o40MCVDt", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("q*o40MCVDt", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[9];
      String string1 = null;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(69355219L, long0);
      
      try { 
        PathUtils.deleteFile(path0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1404)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1517)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[7] = linkOption7;
          LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[8] = linkOption8;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1404)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1517)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, false, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView((Path) null, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly((Path) null, false, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          fileAttributeArray0[7] = fileAttribute0;
          Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
          assertEquals(8, fileAttributeArray0.length);
          assertNotNull(path1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1634)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      // Undeclared exception!
      try { 
        PathUtils.waitFor((Path) null, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((URL) null, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          long long0 = PathUtils.sizeOf(path0);
          assertEquals(69355219L, long0);
          
          Instant instant0 = MockInstant.ofEpochMilli(69355219L);
          assertNotNull(instant0);
          
          FileTime fileTime0 = FileTime.from(instant0);
          assertNotNull(fileTime0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkedTransferQueue<Path> linkedTransferQueue0 = new LinkedTransferQueue<Path>();
          assertNotNull(linkedTransferQueue0);
          assertFalse(linkedTransferQueue0.contains(path0));
          
          List<Path> list0 = PathUtils.relativize(linkedTransferQueue0, path0, false, (Comparator<? super Path>) null);
          assertNotNull(list0);
          assertTrue(list0.isEmpty());
          assertEquals(0, list0.size());
          assertFalse(linkedTransferQueue0.contains(path0));
          assertFalse(list0.contains(path0));
          
          LinkOption[] linkOptionArray1 = new LinkOption[2];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray1[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray1[1] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.readOsFileAttributes(path0, linkOptionArray1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.function.Uncheck.apply(Uncheck.java:162)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1259)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1349)
             // org.apache.commons.io.file.PathUtils.readOsFileAttributes(PathUtils.java:1335)
             // sun.reflect.GeneratedMethodAccessor272.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      
      PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(posixFileAttributeView0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertNotNull(posixFileAttributeView0);
      
      LinkedBlockingQueue<Path> linkedBlockingQueue0 = new LinkedBlockingQueue<Path>();
      assertNotNull(linkedBlockingQueue0);
      assertFalse(linkedBlockingQueue0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedBlockingQueue0, path0, false, comparator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedBlockingQueue0.contains(path0));
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_base_pr_493.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:248)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:235)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cCJE$}8pf[@)g");
      assertNotNull(mockFile0);
      
      FileTime fileTime0 = PathUtils.getLastModifiedFileTime((File) mockFile0);
      assertNull(fileTime0);
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("cCJE$}8pf[@)g", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("cCJE$}8pf[@)g", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      URL uRL0 = null;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Charset charset0 = null;
      try { 
        PathUtils.readString(path0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      try { 
        PathUtils.readString(path0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[0] = (CopyOption) linkOption0;
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[1] = (CopyOption) null;
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apache.comons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("og.apache.comons.io.file.PathUtils", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: 'og.apache.comons.io.file.PathUtils'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFile mockFile0 = new MockFile("')", "')");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("')", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/')/')", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/')/')'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "'LpP!lj|RIG;:`\\h63";
      String string1 = "";
      MockFile mockFile0 = new MockFile("'LpP!lj|RIG;:`h63", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setExecutable(false, true);
      assertFalse(boolean1);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(boolean1 == boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("'LpP!lj|RIG;:`h63", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/'LpP!lj|RIG;:`h63'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1634)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1634)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readOsFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.readPosixFileAttributes(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.function.Uncheck.apply(Uncheck.java:162)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1259)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1349)
             // sun.reflect.GeneratedMethodAccessor290.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryContentEquals(path0, path0);
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Path path0 = null;
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<MockFileInputStream> fileAttribute0 = (FileAttribute<MockFileInputStream>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("^?B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.^?B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, "", (Charset) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      Path path1 = PathUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      linkOptionArray0[0] = linkOption0;
      PathUtils.isEmpty(path1);
      PathUtils.createParentDirectories(path0, (LinkOption) null, (FileAttribute<?>[]) null);
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView(path1, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(659);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 659, 659);
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      OpenOption[] openOptionArray0 = new OpenOption[6];
      openOptionArray0[0] = (OpenOption) linkOption0;
      openOptionArray0[1] = (OpenOption) linkOption0;
      openOptionArray0[2] = (OpenOption) linkOption0;
      openOptionArray0[3] = (OpenOption) linkOption0;
      openOptionArray0[4] = (OpenOption) linkOption0;
      openOptionArray0[5] = (OpenOption) linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.writeString((Path) null, charBuffer1, charset0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNotSame(path1, path0);
      assertNotNull(path1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("z|)v!D=ZVt", "z|)v!D=ZVt");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/z|)v!D=ZVt\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:401)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:377)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1631)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<MockFileInputStream>[] fileAttributeArray0 = (FileAttribute<MockFileInputStream>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertNull(path1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile((File) null, "' does not exist: '");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"' does not exist: '\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1632)
             // sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:503)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1774)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:502)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:453)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:431)
             // sun.reflect.GeneratedMethodAccessor195.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
