/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:20:53 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.function.Supplier;
import org.apache.commons.io.input.BrokenReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BrokenReader_ESTest extends BrokenReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrokenReader brokenReader0 = BrokenReader.INSTANCE;
      try { 
        brokenReader0.skip((-1946L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((IOException) null);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Supplier<IOException>) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenReader0.mark(2378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.INSTANCE.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((IOException) null);
      // Undeclared exception!
      try { 
        brokenReader0.skip(666L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((IOException) null);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrokenReader brokenReader0 = BrokenReader.INSTANCE;
      try { 
        brokenReader0.mark(1312);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.read((char[]) null, 756, 756);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }
}
