/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:18:47 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.function.Supplier;
import org.apache.commons.io.input.BrokenInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BrokenInputStream_ESTest extends BrokenInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenInputStream0.skip(2704L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream();
      try { 
        brokenInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken input stream
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream();
      try { 
        brokenInputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken input stream
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream((IOException) null);
      // Undeclared exception!
      try { 
        brokenInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream();
      try { 
        brokenInputStream0.skip(5033L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken input stream
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream();
      try { 
        brokenInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken input stream
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = BrokenInputStream.INSTANCE;
      try { 
        brokenInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken input stream
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BrokenInputStream brokenInputStream0 = new BrokenInputStream((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenInputStream", e);
      }
  }
}
