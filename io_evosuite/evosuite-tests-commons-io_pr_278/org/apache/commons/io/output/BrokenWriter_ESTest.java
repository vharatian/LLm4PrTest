/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:25:03 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.function.Supplier;
import org.apache.commons.io.output.BrokenWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BrokenWriter_ESTest extends BrokenWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrokenWriter brokenWriter0 = BrokenWriter.INSTANCE;
      try { 
        brokenWriter0.write((char[]) null, 2657, 2657);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken writer
         //
         verifyException("org.apache.commons.io.output.BrokenWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrokenWriter brokenWriter0 = new BrokenWriter((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenWriter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.BrokenWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrokenWriter brokenWriter0 = BrokenWriter.INSTANCE;
      try { 
        brokenWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken writer
         //
         verifyException("org.apache.commons.io.output.BrokenWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException("l4pKVsK3h)+", mockThrowable0);
      BrokenWriter brokenWriter0 = new BrokenWriter(mockIOException0);
      try { 
        brokenWriter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrokenWriter brokenWriter0 = new BrokenWriter((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenWriter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.BrokenWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrokenWriter brokenWriter0 = new BrokenWriter((Supplier<IOException>) null);
      // Undeclared exception!
      try { 
        brokenWriter0.write((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.BrokenWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrokenWriter brokenWriter0 = new BrokenWriter();
  }
}
