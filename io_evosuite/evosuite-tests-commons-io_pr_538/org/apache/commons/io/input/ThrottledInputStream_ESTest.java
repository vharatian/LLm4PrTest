/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:46:05 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import org.apache.commons.io.input.ThrottledInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ThrottledInputStream_ESTest extends ThrottledInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = new ThrottledInputStream.Builder();
      throttledInputStream_Builder0.setPath("");
      ThrottledInputStream throttledInputStream0 = throttledInputStream_Builder0.get();
      throttledInputStream0.afterRead(584);
      System.setCurrentTimeMillis(67L);
      String string0 = throttledInputStream0.toString();
      assertEquals("ThrottledInputStream[bytesRead=584, maxBytesPerSec=9223372036854775807, bytesPerSec=0, totalSleepDuration=PT0S]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = new ThrottledInputStream.Builder();
      throttledInputStream_Builder0.setPath("");
      ThrottledInputStream throttledInputStream0 = throttledInputStream_Builder0.get();
      System.setCurrentTimeMillis(9223372036854775807L);
      String string0 = throttledInputStream0.toString();
      assertEquals("ThrottledInputStream[bytesRead=0, maxBytesPerSec=9223372036854775807, bytesPerSec=0, totalSleepDuration=PT0S]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = ThrottledInputStream.builder();
      throttledInputStream_Builder0.setMaxBytesPerSecond(0L);
      throttledInputStream_Builder0.setPath("");
      // Undeclared exception!
      try { 
        throttledInputStream_Builder0.get();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Bandwidth 0 is invalid.
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis(1L, 999L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis(182L, 3297L, 1477L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis(105L, 0L, 105L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis((-1255L), (-9223372036854775808L), 2072L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = ThrottledInputStream.builder();
      throttledInputStream_Builder0.setPath("");
      ThrottledInputStream throttledInputStream0 = throttledInputStream_Builder0.get();
      throttledInputStream0.beforeRead(1431655765);
      assertEquals(0L, throttledInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThrottledInputStream.toSleepMillis((-2091L), (-2091L), (-2091L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The elapsed time should be greater or equal to zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = ThrottledInputStream.builder();
      ThrottledInputStream.Builder throttledInputStream_Builder1 = throttledInputStream_Builder0.setPath("");
      throttledInputStream_Builder1.setMaxBytesPerSecond((-219L));
      // Undeclared exception!
      try { 
        throttledInputStream_Builder1.get();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Bandwidth -219 is invalid.
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis(864L, 864L, 864L);
      assertEquals(136L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis(9223372036854775807L, (-385L), 9223372036854775807L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = ThrottledInputStream.toSleepMillis(418L, 418L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = ThrottledInputStream.builder();
      ThrottledInputStream.Builder throttledInputStream_Builder1 = throttledInputStream_Builder0.setPath("");
      ThrottledInputStream throttledInputStream0 = throttledInputStream_Builder1.get();
      System.setCurrentTimeMillis((-825L));
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        throttledInputStream0.read(byteArray0, (int) (byte) (-46), (int) (byte)108);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The elapsed time should be greater or equal to zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = ThrottledInputStream.builder();
      throttledInputStream_Builder0.setPath("");
      ThrottledInputStream throttledInputStream0 = throttledInputStream_Builder0.get();
      Duration duration0 = throttledInputStream0.getTotalSleepDuration();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThrottledInputStream.Builder throttledInputStream_Builder0 = new ThrottledInputStream.Builder();
      throttledInputStream_Builder0.setPath("");
      ThrottledInputStream throttledInputStream0 = throttledInputStream_Builder0.get();
      String string0 = throttledInputStream0.toString();
      assertEquals("ThrottledInputStream[bytesRead=0, maxBytesPerSec=9223372036854775807, bytesPerSec=0, totalSleepDuration=PT0S]", string0);
  }
}
