/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:52:04 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.time.ZoneId;
import java.time.chrono.IsoEra;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "/home/azureuser/isa_:/ actual: /isa_:/vD!QToP/ actual: /isa_:/isa_:/@[%IFT9JWVx$ .YA/ actual: 0isa_:");
      FileUtils.toFile(uRL1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileUtils.byteCountToDisplaySize((-2146410441000L));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.FalseFileFilter", "s;-]gw!@=");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile0, true);
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) ageFileFilter0, false);
      FileUtils.copyDirectory((File) mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(tv_iZ]D~";
      stringArray0[1] = "(tv_iZ]D~";
      stringArray0[2] = "org.apache.commons.io.iocase";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.writeStringToFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<>nj";
      stringArray0[1] = "}6'$A$3zmG:5C";
      stringArray0[2] = "}6'$A$3zmG:5C";
      stringArray0[3] = "}6'$A$3zmG:5C";
      stringArray0[4] = "NTFS ADS separator (':') in file name is forbidden.";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.writeStringToFile(file0, "NTFS ADS separator (':') in file name is forbidden.", charset0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("content-lngth", "OP");
      FileUtils.writeStringToFile(file0, " is not a directory", (String) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) set0, false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) set0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/s;-]gw!@=");
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) arrayDeque0, "/tmp/s;-]gw!@=");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The wildcard array must not be null");
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Comparator<? super String>) null);
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      byte[] byteArray0 = new byte[8];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 3, (int) (byte)90);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wBS=&z3EXh)_I)vZ`_/", "wBS=&z3EXh)_I)vZ`_/");
      byte[] byteArray0 = new byte[7];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.deleteQuietly(file0);
      FileUtils.write(file0, (CharSequence) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "!/8lo'3s2");
      FileUtils.write((File) mockFile0, (CharSequence) "!/8lo'3s2");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ");
      byte[] byteArray0 = new byte[7];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)3, 1024, false);
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = file0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[8];
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      FileUtils.listFilesAndDirs(file0, wildcardFileFilter0, wildcardFileFilter0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(2048L);
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) ageFileFilter0);
      AndFileFilter andFileFilter0 = new AndFileFilter(delegateFileFilter0, delegateFileFilter0);
      FileUtils.listFiles(file0, (IOFileFilter) andFileFilter0, (IOFileFilter) delegateFileFilter0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home", "/tmp/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home");
      FileUtils.touch(mockFile0);
      FileUtils.lineIterator((File) mockFile0, (String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      FileUtils.iterateFiles(file0, (IOFileFilter) trueFileFilter0, (IOFileFilter) trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      FileUtils.getTempDirectory();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4^S$P[Tfy>We[E";
      stringArray0[1] = "";
      stringArray0[2] = "Hgt)PUHlQ";
      stringArray0[3] = "):u";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("4^S$P[Tfy>We[E/Hgt)PUHlQ/):u");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "'N.v~>p:GZ8;={u");
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/tmp";
      stringArray0[1] = "/tmp";
      stringArray0[2] = "/tmp";
      stringArray0[3] = ".K.k9v";
      stringArray0[4] = ".K.k9v";
      stringArray0[5] = ".K.k9v";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getUserDirectory();
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      String[] stringArray0 = new String[0];
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("File '", "File '");
      mockFile0.mkdirs();
      File file0 = FileUtils.getUserDirectory();
      FileUtils.directoryContains(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("J6GrG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "e (~.");
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.checksumCRC32(mockFile0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      CRC32 cRC32_0 = new CRC32();
      cRC32_0.update(1);
      FileUtils.checksum(mockFile0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "$WeAk", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(file0, "^:4-+QB(0", charset0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "6cPT$_s-?vW", "JdGrG", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // JdGrG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, " bytes", "' to '", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' to '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "' already exists", "' already exists");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' already exists
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "o+U6@n#8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "OP", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) arrayDeque0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) null, "fJbh_tAl}&du2Vt#y3c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, "*h?mg:!(2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "/tmp//tmp/!/8lo'3s2");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        FileUtils.writeLines((File) mockFile1, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/J6GrG/tmp/tmp/!' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "J6GrG", (Collection<?>) set0, false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J6GrG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Stack<Object> stack0 = new Stack<Object>();
      try { 
        FileUtils.writeLines(file0, (String) null, (Collection<?>) stack0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "JdGrG", (Collection<?>) treeSet0, "JdGrG", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // JdGrG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, ",RpeO2iQH*bU", (Collection<?>) set0, ",RpeO2iQH*bU", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeLines(file0, "|", (Collection<?>) null, "}:mjz(u+?!.n$!+o4\"", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      MockFile mockFile0 = new MockFile("J6GrG");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "J6GrG", (Collection<?>) vector0, "Size cannot be greater than Integer max value: ");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J6GrG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dT3>#b0>^o&M'3", "6FSMu:fzBH:B(^");
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "6FSMu:fzBH:B(^", (Collection<?>) arrayDeque0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6FSMu:fzBH:B(^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/home/azureuser", (Collection<?>) arrayDeque0, "cY%'lY^~)~iz}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      TreeSet<IsoEra> treeSet0 = new TreeSet<IsoEra>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "J6GrG", (Collection<?>) treeSet0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J6GrG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=", (Collection<?>) hashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Vector<Object> vector0 = new Vector<Object>();
      try { 
        FileUtils.writeLines(file0, "' Expected length: ", (Collection<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)23, (int) (byte)23, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=", "/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-94), 3345, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-4465), (-4465), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wBS=&z3EXh)_I)vZ`_/", "wBS=&z3EXh)_I)vZ`_/");
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-76), (int) (byte)120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[1];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "S", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write(file0, (CharSequence) stringBuffer0, charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser", "java.io.tmpdir", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // java.io.tmpdir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) null, "System");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // System
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JdGrG");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "g<\u0001*\"c]W");
      try { 
        FileUtils.touch(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/JdGrG' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      MockFile mockFile0 = new MockFile("LXf'p.w'c");
      try { 
        FileUtils.touch(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File[] fileArray0 = new File[4];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "d");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // d
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'J6GrG' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      File file0 = FileUtils.toFile(uRL0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp/foo.bar' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "J6");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("w{BS=&z3EXh)_I)vZ`_/", "w{BS=&z3EXh)_I)vZ`_/");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/w{BS=&z3EXh)_I)vZ`_/w{BS=&z3EXh)_I)vZ`_' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apachevcommons.io.filefilter.FawseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experimentsorg.apachevcommons.io.filefilter.FawseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyToDirectory(file0, file0);
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "|");
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/|' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceDelete(file0);
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      IOCase iOCase0 = IOCase.SYSTEM;
      String[] stringArray0 = new String[0];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(mockFile0, wildcardFileFilter0, wildcardFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: J6GrG
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(")!}", iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) wildcardFileFilter0, (IOFileFilter) wildcardFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) mockFile0, "r7gyu9G87");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // r7gyu9G87
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "/tmp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.lineIterator((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")67^V+2SBqb", ")67^V+2SBqb");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, ageFileFilter0, ageFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, notFileFilter0, notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/J6GrG/J6GrG
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Directory must not be null";
      stringArray0[1] = "[>mUey(o";
      stringArray0[2] = "Directory must not be null";
      stringArray0[3] = "VZTtCeIW=bYqA";
      stringArray0[4] = "http";
      stringArray0[5] = "Handler";
      File file0 = FileUtils.getFile(stringArray0);
      file0.mkdirs();
      File file1 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.iterateFiles(file1, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'r>rL=x55MXq(dotI", "'r>rL=x55MXq(dotI");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/'r>rL=x55MXq(dotI/'r>rL=x55MXq(dotI is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-2147483646), (-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 2147483642, 2147483642);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1815);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyToFile(sequenceInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      FileUtils.touch(mockFile0);
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>(9);
      linkedHashSet0.add(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/J6GrG/J6GrG' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      linkedHashSet0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'J6GrG' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=";
      stringArray0[1] = "vnA(";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      FileUtils.forceMkdir(file0);
      // Undeclared exception!
      FileUtils.copyToDirectory((File) mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile(",4MZ", "The strings must not be null");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/,4MZ0The strings must not be null' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.FalseFileFilter", "s;-]gw!@=");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.iocase");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("o[Oz=*S6!2xF9|Iw", "o[Oz=*S6!2xF9|Iw");
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "!/8lo'3s2");
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.deleteQuietly(file0);
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TJuyWu`L{", "TJuyWu`L{");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/TJuyWu`L{/TJuyWu`L{' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(433L, false);
      MockFile mockFile0 = new MockFile("F*5cU+,lkzgdy", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/J6GrG/tmp");
      // Undeclared exception!
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) ageFileFilter0, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter((List<IOFileFilter>) null);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) andFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter("JdGrG", iOCase0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) nameFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'JdGrG' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) directoryFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Length to read: ");
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) directoryFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'Length to read: ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "' could not be created");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.contentEquals((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist: /home/azureuser/azureuser/LLm4PrTest
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, cRC32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wBS=&z3EXh)_I)vZ`_/", "wBS=&z3EXh)_I)vZ`_/");
      FileUtils.isSymlink(mockFile0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      mockFile0.createNewFile();
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=", "/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0, "/home/azureuser/tmp/azureuser");
      MockFile mockFile1 = new MockFile(mockFile0, "1e.dB");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/1e.dB' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0huy";
      stringArray0[1] = "0huy";
      stringArray0[2] = "0huy";
      stringArray0[3] = "0huy";
      stringArray0[4] = "0huy";
      stringArray0[5] = "0huy";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveDirectory(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/0huy/0huy/0huy/0huy/0huy/0huy
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("U,Lj1IJZ8{p", "w_%escj0j#swe<d");
      try { 
        FileUtils.moveDirectory(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/U,Lj1IJZ8{p0w_%escj0j#swe<d' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      CRC32 cRC32_0 = new CRC32();
      FileUtils.checksum(mockFile0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(mockFile0, adler32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      FileUtils.isFileOlder((File) mockFile0, 1125899906842624L);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      FileUtils.isFileOlder((File) mockFile0, 1L);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1616, 1616, 16, 1616, (-133990373), (-436));
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
      ageFileFilter0.accept((File) null, "/home/azureuser");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.deleteQuietly(file0);
      FileUtils.isFileNewer(file0, (-1177L));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, (-955L));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.forceDelete(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist: /home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (int) (byte)120, (int) (byte)3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write((File) mockFile0, (CharSequence) null, charset0, true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile((File) mockFile0, "J6GrG", charset0, false);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile("w{BS=&z3EXh)_I)vZ`_/");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileUtils.copyToFile(sequenceInputStream0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S");
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Directory must not be null";
      stringArray0[1] = "[>mUey(o";
      stringArray0[2] = "Directory must not be null";
      stringArray0[3] = "VZTtCeIW=bYqA";
      stringArray0[4] = "http";
      stringArray0[5] = "Handler";
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getFile(stringArray0);
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0);
      FileUtils.copyDirectory(file0, file1, (FileFilter) magicNumberFileFilter0, false);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ");
      URL uRL0 = MockURL.getFileExample();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile0, false);
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.toFile(uRL0);
      FileUtils.copyDirectory(file0, file1, (FileFilter) ageFileFilter0, false);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) andFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("J6GrG");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) prefixFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source 'J6GrG' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("org.apache.commons.io.filefilter.CanExecuteFileFilter", "org.apache.commons.io.filefilter.CanExecuteFileFilter");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/org.apache.commons.io.filefilter.CanExecuteFileFilter0org.apache.commons.io.filefilter.CanExecuteFileFilter' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = MockFile.createTempFile("tY4s=i:g6A^iM`.", "tY4s=i:g6A^iM`.");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/tY4s=i:g6A^iM`.0tY4s=i:g6A^iM`.' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.listFiles(file0, (String[]) null, false);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/JdGrG/JdGrG
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "J6GrG");
      try { 
        FileUtils.openOutputStream((File) mockFile1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/J6GrG' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wBS=&z3EXh)_I)vZ`_/";
      stringArray0[1] = "wBS=&z3EXh)_I)vZ`_/";
      stringArray0[2] = "wBS=&z3EXh)_I)vZ`_/";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.openOutputStream(file0, true);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.openOutputStream((File) mockFile0, false);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readFileToString((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = MockFile.createTempFile("zI6Fe^{D6bY<X{~^I", "zI6Fe^{D6bY<X{~^I");
      FileUtils.openOutputStream(file0, true);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      FileUtils.openInputStream(mockFile0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ", ",4MZ");
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/,4MZ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "`JRh1j\"cH8kyXC", (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "-1895 bytes", "-1895 bytes", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -1895 bytes
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, orFileFilter0, orFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.FalseFileFilter", "s;-]gw!@=");
      byte[] byteArray0 = new byte[7];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // File must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "1e.dB");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, mockFile0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = MockFile.createTempFile("zI6Fe^{D6bY<X{~^I", "zI6Fe^{D6bY<X{~^I");
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/zI6Fe^{D6bY<X{~^I0zI6Fe^{D6bY<X{~^I' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=", "/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.FalseFileFilter", "s;-]gw!@=");
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      File file0 = MockFile.createTempFile(".K.k9v", ".K.k9v");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/.K.k9v0.K.k9v' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = MockFile.createTempFile("^;_rp\"t", "/home/azureuser//home/azureuser/azureuser");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/^;_rp\"t0/home/azureuser/home/azureuser/azureuser' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/J6GrG/J6GrG' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      File file0 = FileUtils.getTempDirectory();
      FileUtils.moveToDirectory(file0, mockFile0, true);
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "T[Pg1(EHiwd?!", (Collection<?>) stack0, "GysIdhbW-fcqVri<", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // T[Pg1(EHiwd?!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      FileUtils.touch(mockFile0);
      FileUtils.checksumCRC32(mockFile0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(278, 278, 278, 278, 278, 278);
      FileUtils.isFileOlder(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ");
      FileUtils.isFileOlder((File) mockFile0, (-7680866095000L));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2049870753), (-2049870753), (-2049870753), 1798, 1798, (-2049870753));
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(2048L);
      FileUtils.isFileOlder(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileOlder(file0, file0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockFile mockFile0 = new MockFile("directory must not be null", "directory must not be null");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file '/home/azureuser/LLm4PrTest/ io_experiments/directory must not be null/directory must not be null' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      MockDate mockDate0 = new MockDate(280L);
      FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 1000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-4423L));
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sHM;%/N~i&FJ", "sHM;%/N~i&FJ");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file '/home/azureuser/LLm4PrTest/ io_experiments/sHM;%/N~i&FJ/sHM;%/N~i&FJ' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, file0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = MockFile.createTempFile("L_z/`Dqr>8v>l5DT`", "L_z/`Dqr>8v>l5DT`");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/L_z/`Dqr>8v>l5DT`0L_z/`Dqr>8v>l5DT` is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pq");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pq does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      File file0 = FileUtils.getUserDirectory();
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("0]rr07hs%C", "file", file0);
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      FileUtils.sizeOfAsBigInteger(mockFile0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experimentsorg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@= does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = MockFile.createTempFile("Sources must not be null", "Sources must not be null");
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/J6GrG/J6GrG does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.forceMkdirParent(mockFile0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdirParent(file0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J6GrG";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory /home/azureuser/LLm4PrTest/ io_experiments/J6GrG/J6GrG
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdir(file0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      FileUtils.forceDeleteOnExit(mockFile0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      FileUtils.forceDelete(mockFile0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (int) (byte)8, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ");
      byte[] byteArray0 = new byte[7];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)3, (int) (byte)23, false);
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.write(file0, (CharSequence) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "JdGrG", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockFile mockFile0 = new MockFile("::", "::");
      FileUtils.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = MockFile.createTempFile("zI6Fe^{D6bY<X{~^I", "zI6Fe^{D6bY<X{~^I");
      FileUtils.readLines(file0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S");
      FileUtils.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("J6GrG");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.commons.io.LineIterator");
      FileUtils.readFileToByteArray(mockFile0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      FileUtils.readFileToByteArray(mockFile0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home", "/tmp/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home");
      FileUtils.touch(mockFile0);
      FileUtils.readFileToString((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-2143910461));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1797));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 281);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FvB._;gGi9Dw%YC");
      FileUtils.touch(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FvB._;gGi9Dw%YC is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/foo.bar does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azure6ser/FLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, (File) mockFile0);
      FileUtils.deleteQuietly(mockFile0);
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "2=u/w|489]O");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a directory: /home/azureuser/LLm4PrTest/ io_experiments/JdGrG/JdGrG
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "!/8lo'3s2");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) canReadFileFilter0, (IOFileFilter) canReadFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.forceDelete(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete directory /home/azureuser.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HlunE c");
      FileUtils.deleteDirectory(mockFile0);
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDelete(file0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      FileUtils.writeLines(file0, (Collection<?>) hashSet0, "hf^;", true);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      linkedHashSet0.add(file0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sources must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, (File) null);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        FileUtils.copyInputStreamToFile(mockFileInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      Stack<ObjectInputStream> stack0 = new Stack<ObjectInputStream>();
      Enumeration<ObjectInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile("U,Lj1IJZ8{p", "U,Lj1IJZ8{p");
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/U,Lj1IJZ8{p0U,Lj1IJZ8{p\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1160)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1475)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1416)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1292)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:1227)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:1620)
             // sun.reflect.GeneratedMethodAccessor260.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "rk\"zZ|GzykpnM");
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("file array contains null");
      OrFileFilter orFileFilter0 = new OrFileFilter();
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) orFileFilter0);
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source 'J6GrG' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("10 bytes", "[w)", file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/10 bytes0[w)' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source 'JdGrG' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S");
      FileUtils.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("J6GrG");
          FileUtils.touch(mockFile0);
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory((File) mockFile0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/J6GrG\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1160)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1112)
             // org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:1032)
             // org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:991)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:1618)
             // sun.reflect.GeneratedMethodAccessor260.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("directory must not be null", "isa_:");
          MockFile mockFile0 = new MockFile("vD!QToP", "directory must not be null");
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, (File) mockFile0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/vD!QToP/directory must not be null\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1160)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1112)
             // sun.reflect.GeneratedMethodAccessor262.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile(".K.k9v", ".K.k9v");
          MockFile mockFile0 = new MockFile(".K.k9v");
          // Undeclared exception!
          try { 
            FileUtils.moveFile(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".K.k9v\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1160)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1112)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1062)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:3047)
             // sun.reflect.GeneratedMethodAccessor263.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      MockFile mockFile1 = new MockFile("J6GrG", "J6GrG");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/J6GrG' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      FileUtils.touch(mockFile0);
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source 'J6GrG' and destination 'J6GrG' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=", "/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=/home/azureuser/LLm4PrTet/ io_experimegts/Trg.apache.commons.io.filefilter.FalseFileFilter/s;-]gw!@=' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File[] fileArray0 = new File[1];
      fileArray0[0] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(1, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      URL[] uRLArray0 = new URL[18];
      URL uRL0 = MockURL.getFileExample();
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(18, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      URL[] uRLArray1 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray1.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("jOChs0EWnk'Z%ldzMi");
      assertEquals("jOChs0EWnk'Z%ldzMi", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      File file1 = MockFile.createTempFile("org.apache.commons.io.iocase", ".? a;Op-$'JQ", file0);
      try { 
        FileUtils.forceMkdir(file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /fake/but/wellformed/url/org.apache.commons.io.iocase0.? a;Op-$'JQ exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      FileUtils.touch(mockFile0);
      File file0 = MockFile.createTempFile("a(6EM~Mg", "JdGrG");
      try { 
        FileUtils.contentEqualsIgnoreEOL(mockFile0, file0, "JdGrG");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("HlunE c", "HlunE c", file0);
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "Z[}91!5)M");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = MockFile.createTempFile("zI6Fe^{D6bY<X{~^I", "zI6Fe^{D6bY<X{~^I");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "zI6Fe^{D6bY<X{~^I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, ";Csh< y:N");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "ftp");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "ftp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/tmp0rVt T6?UEleb\"CjoB&\"");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "/home/azureuser/tmp0rVt T6?UEleb\"CjoB&\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wBS=&z3EXh)_I)vZ`_/", "wBS=&z3EXh)_I)vZ`_/");
      FileUtils.touch(mockFile0);
      MockFile mockFile1 = new MockFile("/fbY%@=]`JB^>");
      FileUtils.write((File) mockFile1, (CharSequence) "/fbY%@=]`JB^>", false);
      boolean boolean0 = FileUtils.contentEquals(mockFile1, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG");
      FileUtils.touch(mockFile0);
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s3+>/-KF<(gmXu3");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/,4MZ", "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      stringArray0[2] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      stringArray0[3] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      stringArray0[4] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      stringArray0[5] = "No specified file";
      stringArray0[6] = "/tmp/azureuser";
      stringArray0[7] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      stringArray0[8] = "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ";
      File file1 = FileUtils.getFile(file0, stringArray0);
      boolean boolean0 = FileUtils.contentEquals(file1, file0);
      assertEquals("/tmp/home/azureuser/LLm4PrTest/ io_experiments/,4MZ0/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/No specified file/tmp/azureuser/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/home/azureuser/LLm4PrTest/ io_experiments/,4MZ", file1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[1];
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, stringArray0, false);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parameter 'fileFilter' is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.touch(file0);
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      FileUtils.openOutputStream(file0, true);
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JdGrG", "JdGrG");
      FileUtils.touch(mockFile0);
      mockFile0.setWritable(false);
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "JdGrG", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/JdGrG/JdGrG' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      File file0 = MockFile.createTempFile("zI6Fe^{D6bY<X{~^I", "zI6Fe^{D6bY<X{~^I");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "zI6Fe^{D6bY<X{~^I");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // zI6Fe^{D6bY<X{~^I
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.io.output.StringBuilderWriter";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFile((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG", "J6GrG");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile((File) mockFile0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.getFile((File) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SENSITIVE", "K/#[e!G.");
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/SENSITIVE/K/#[e!G.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SLMIF]MP", "z!lfk!FaDQ8 W):Fv\"");
      FileUtils.writeStringToFile((File) mockFile0, "ftp");
      String string0 = FileUtils.readFileToString((File) mockFile0);
      assertEquals("ftp", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(stack0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) falseFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Vector<Object> vector0 = new Vector<Object>();
      try { 
        FileUtils.writeLines(file0, "Size cannot be greater than Integer max value: ", (Collection<?>) vector0, "Size cannot be greater than Integer max value: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",4MZ");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) mockFile0, ",4MZ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,4MZ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.iocase", "org.apache.commons.io.iocase");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "/home/azureuser/LLm4PrTest/ io_experiments/,4MZ/^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/,4MZ/^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(file0, ";5d}yF-salYqf", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = MockFile.createTempFile("S?\"{X.{[+JED2!6", "9~nZ}6EKaM4P7qxC{2", (File) null);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "S?\"{X.{[+JED2!6", (Collection<?>) priorityQueue0, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // S?\"{X.{[+JED2!6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "OP", "OP");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // OP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "ADbjL", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 330, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) ".HO;[XRf2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, notFileFilter0, notFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file", "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/diredtory must not be null/diredtory must not be null/azureuser");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/file/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/diredtory must not be null/diredtory must not be null/azureuser' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1073741824L, FileUtils.ONE_GB);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "H9J:", (Collection<?>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6GrG");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write((File) mockFile0, (CharSequence) "HlunE c", charset0);
      assertEquals(7L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "Sour3e '", "/home/azureuser/LLm4PrTest/ io_experiments/http/eZl32\"Kq/isa_:0vD!QToP");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/http/eZl32\"Kq/isa_:0vD!QToP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
