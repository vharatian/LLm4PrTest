/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:41:33 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("?", "?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("&c;$ze%\"h|;}\"-|'.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.concat("~4[ws", "");
      assertEquals("~4[ws/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getName("pj*Qu'xmvyF/E");
      assertEquals("E", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.flipSeparator('y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // y
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.flipSeparator('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("/5ut-cWYw*x(_8Gr");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("~4S[wsL");
      assertEquals("~4S[wsL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = FilenameUtils.concat("\\EGPss]p!", "sAiVC=aMV");
      assertNotNull(string0);
      assertEquals("/EGPss]p!/sAiVC=aMV", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("*", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("onThrowable");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator(".");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FilenameUtils.normalize((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = FilenameUtils.normalize(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = FilenameUtils.normalize("/:.");
      assertNotNull(string0);
      assertEquals("/:.", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("/5ut-cWYw*x(_8Gr");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("\" should have a parent context.");
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("[[#G(/JDoiXG");
      assertEquals("[[#G(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = FilenameUtils.getPath(":?!,5F&/yq7,bU ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = FilenameUtils.getName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char char0 = FilenameUtils.flipSeparator('\\');
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("java.lang.invoke.LambdaMetafactory", "()` not found in ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("t) u<0fal{[)pAtHPsm", "^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("0Zs74&D", "*5x=l", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("L", "*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("L7D(%N gu-W&rKCuE", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch(".", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, "ho!g", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("'Gc=kVY`0hEW3Vz.v,");
      assertEquals("'Gc=kVY`0hEW3Vz", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("R.nDBjdm&|;MZ;s");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("q[k`<JQf:ibG&Zg");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("Eu*z");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\76PssG]Xp!");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("7:]moG,/=bo i2=?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("R:/R:");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("f:^>hSyF");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("R:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("v");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("::");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("No advice defined by ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("package-info.class");
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("J");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals("}uug4#UlH", ":", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals(":X[;ArO,o", "baAX5", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals("No advice defined by ", "t_c/.", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals((String) null, "oWiC;5]", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals(") gNCP]oo+=\"0X]S'86", (String) null, true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, true, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals("t) u<0fal{[)pAtHPsm", "'5h$eTvBu-wR&EA4", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("J07o+'sO!>v#Y/", false);
      assertNotNull(string0);
      assertEquals("J07o+'sO!>v#Y", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = FilenameUtils.concat("COM1", "\"pKh//PRd*B%:M5z4T^");
      assertNotNull(string0);
      assertEquals("COM1/\"pKh/PRd*B%:M5z4T^", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = FilenameUtils.getPath("/5ut-cWYw*x(_8Gr");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("!*+miuO#'(", "Et>#v'`[M~jX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("NTFS ADS separator (':') in file name is forbidden.", "a;q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = FilenameUtils.normalize(".");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("*#lj*;*.", "::", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("lpu<7i!*i&r=", "lpu<7i!*i&r=/lpu<7i!*i&r=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("AH<,=%@'ic`**", "AH<,=%@'ic`**");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("A*r1t*)/A*r1t*)", "A*r1t*)", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("X");
      assertEquals("X", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("CartesianProductTest can only take exactly one type of arguments source.", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension(":^>hyF", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("$$\"XzO?m\"iOR0.", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension("$$\"XzO?m\"iR0.", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("j4HQK|fba");
      boolean boolean0 = FilenameUtils.isExtension("5{Md", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("~4[ws", (Collection<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("~/ Q5@8CMr\"@P^,a@1=", (String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("\\76PssG]Xp!");
      assertEquals("\\", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/:");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("R:F");
      assertEquals("R:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = FilenameUtils.concat(":^>hSyF", ":^>hSyF");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~I~x%+NS5:R;)9");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~4[ws/");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = FilenameUtils.concat("/", "/");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~*QCla=");
      assertNotNull(string0);
      assertEquals("~*QCla=/", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("$$\"XzO?m\"iR0.", "$$\"XzO?m\"iR0.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = FilenameUtils.isExtension("j4HQK|fba", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("?", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = FilenameUtils.concat("nN,c", "$&:,a/..");
      assertEquals("nN,c/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = FilenameUtils.concat("$&:,a/..", "$&:,a/..");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = FilenameUtils.concat("/..", "`SnptRJ7#oEOk&e");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("$$\"v3XzO?m\"iOR0.", "$$\"v3XzO?m\"iOR0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = FilenameUtils.concat("$..", "$..");
      assertNotNull(string0);
      assertEquals("$../$..", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = FilenameUtils.concat(".", ".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("~4[ws");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator(".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("/r5waX>>oQDo", "\r5waX>>oQDo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("~", "~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("Failed to create proxy for ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.concat("=_/", "=_/");
      assertEquals("=_/=_/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "+2MNd-U\"|.y(eH8urqy");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("4[ws");
      assertEquals("4[ws", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("SUjAF*P6nL#N");
      assertEquals("SUjAF*P6nL#N", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = FilenameUtils.normalize("Nosadviee dKfinec by ", false);
      assertNotNull(string0);
      assertEquals("Nosadviee dKfinec by ", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("<");
      assertEquals("<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("", "-:U$_>bP{u7/V\"`wp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("nN,)*cs", "nN,)*cs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("~;=~W/", "~;=~W/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("Method `CartesianProductTest4SFt ");
      assertEquals("Method `CartesianProductTest4SFt ", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = FilenameUtils.getPath("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertEquals("Null character present in file/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("'boKos58:j", "'boKos58:j");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("$&,a/..");
      assertNotNull(string0);
      assertEquals("$&,a/", string0);
  }
}
