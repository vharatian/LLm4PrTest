/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:44:41 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.stream.Stream;
import org.apache.commons.io.CloseableURLConnection;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOSupplier;
import org.apache.commons.io.function.IOTriFunction;
import org.apache.commons.io.input.QueueInputStream;
import org.apache.commons.io.input.RandomAccessFileInputStream;
import org.apache.commons.io.output.FileWriterWithEncoding;
import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid lambda deserialization");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      char[] charArray0 = new char[0];
      IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(unsynchronizedByteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[3];
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0, (String) null);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MockFile mockFile0 = new MockFile("6v_oG>08+^DYm<6d6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("inputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer(557);
      IOUtils.write(stringBuffer0, (OutputStream) mockPrintStream0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          MockFile mockFile0 = new MockFile("");
          // Undeclared exception!
          try { 
            IOUtils.copy(uRL0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.IOUtils.copy(IOUtils.java:1412)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", (String) null);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LWVWj&],Q");
      MockFile mockFile0 = new MockFile("6a>VA}LWVWj&],Q");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(inputStream0);
      assertEquals(15, inputStream0.available());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "6a>VA}LWVWj&],Q", (OutputStream) mockFileOutputStream0, charset0);
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0, 1);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) pushbackReader0, charset0);
      assertEquals(54, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) sequenceInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Skip count must be non-negative, actual: ");
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0, 1200);
      assertNotNull(inputStream1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      assertNull(uRL0.getRef());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Skip count must be non-negative, actual: ");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertTrue(list0.contains("Skip count must be non-negative, actual: "));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      List<String> list0 = IOUtils.readLines((InputStream) sequenceInputStream0, charset0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Integer integer0 = new Integer(91);
      Integer integer1 = new Integer(2144991049);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer0, integer1, integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      int int0 = IOUtils.read(iOTriFunction0, byteArray0, 2145899957, 2145899957);
      assertEquals(2145899957, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Integer integer0 = Integer.getInteger("Yw", 0);
      Integer integer1 = new Integer((-535));
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer0, integer0, integer1).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      int int0 = IOUtils.read(iOTriFunction0, byteArray0, 2145899957, 2145899957);
      assertEquals((-1584135), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("c,5>]<qC+qNvsDN?]kU");
      byte[] byteArray0 = IOUtils.getScratchByteArrayWriteOnly();
      int int0 = IOUtils.read(inputStream0, byteArray0, 396, 396);
      assertEquals(0, inputStream0.available());
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LineIterator lineIterator0 = IOUtils.lineIterator((InputStream) byteArrayInputStream0, (String) null);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Skip count must be non-negative, actual: ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      assertEquals(41, inputStream0.available());
      
      IOUtils.toBufferedInputStream((InputStream) pushbackInputStream0);
      long long0 = IOUtils.copy((InputStream) pushbackInputStream0, (OutputStream) pipedOutputStream0, 1361);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray(236);
      assertEquals(236, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2256);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pipedInputStream0, 92);
      assertNotNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LWVWj&],Q");
      MockFile mockFile0 = new MockFile("6a>VA}LWVWj&],Q");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(inputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "6a>VA}LWVWj&],Q", (OutputStream) mockFileOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<StringBuilder> stack0 = new Stack<StringBuilder>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) stack0, (String) null, (OutputStream) objectOutputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) pipedOutputStream0, "K--87");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // K--87
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.lang3.concurrent.BasicThreadFactory");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) mockPrintWriter0, "org.apache.commons.lang3.concurrent.BasicThreadFactory");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.lang3.concurrent.BasicThreadFactory
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write("com.google.common.jimfs.PosixAttributeProvider", (OutputStream) byteArrayOutputStream0, "com.google.common.jimfs.PosixAttributeProvider");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.google.common.jimfs.PosixAttributeProvider
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write((CharSequence) "HDz/$", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "inputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // inputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "Funnels.unencodedCharsFunnel()");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Funnels.unencodedCharsFunnel()
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("8`B-rP2#3j T='cW7w", (String) null);
      // Undeclared exception!
      try { 
        IOUtils.toString(inputStream0, "url");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // url
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      String string0 = "";
      Integer integer0 = new Integer((-621));
      Integer integer1 = new Integer((-621));
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer1, (Object) null).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(iOTriFunction0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      try { 
        IOUtils.toByteArray((URLConnection) closeableURLConnection0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, (-812L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -812
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, 457);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.skipFully(inputStream0, (-1035L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1035
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) dataInputStream0);
      byte[] byteArray0 = new byte[3];
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(supplier0).get();
      try { 
        IOUtils.skip((InputStream) bufferedInputStream0, 1024L, supplier0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        IOUtils.resourceToURL(")");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: )
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("inputStream");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: inputStream
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((ReadableByteChannel) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 457);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) bufferedReader0, (char[]) null, 667, 457);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = IOUtils.getScratchCharArray();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 457);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0, 667, 8178);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = IOUtils.getScratchCharArray();
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0, 3330, (-2301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2301
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = IOUtils.getScratchCharArray();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 457);
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0, 667, 667);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = IOUtils.getScratchCharArray();
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("tUvE(hE)k-");
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, 11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.read((IOTriFunction<byte[], Integer, Integer, Integer>) null, byteArray0, (-1769), 589);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) charArrayReader0, charArray0, Integer.MAX_VALUE, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[1];
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0, 2923, 623);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0, (-54), (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, (-683), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Invalid lambda deserialization");
      MockFile mockFile0 = new MockFile("Invalid lambda deserialization");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) dataInputStream0, (OutputStream) mockFileOutputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) unsynchronizedByteArrayOutputStream0, 1125899906842624L, (long) 2186, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("xGe-", "xGe-", 1182, "xGe-", uRLStreamHandler0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hv,TbK{i5p_<^", true);
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(unsynchronizedByteArrayOutputStream0, false);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "/r_\"b");
      // Undeclared exception!
      try { 
        IOUtils.copy(inputStream0, (Writer) mockPrintWriter0, "L");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // L
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lM/-");
      // Undeclared exception!
      try { 
        IOUtils.copy(inputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LVWj&,");
      MockFile mockFile0 = new MockFile("6a>VA}LVWj&,");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) mockFileOutputStream0, (Consumer<IOException>) stream_Builder0);
      try { 
        IOUtils.copy(inputStream0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.consume((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.byteArray((-1566));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "VoR9", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) inputStreamReader0, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, (-535));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) unsynchronizedByteArrayOutputStream0, (-2146048163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, (-3934));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("c,5>]<qC+qNsDN?]kU", "c,5>]<qC+qNsDN?]kU");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOUtils.write("c,5>]<qC+qNsDN?]kU", (OutputStream) mockPrintStream0, charset0);
      assertEquals(18L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) unsynchronizedByteArrayOutputStream0, 2179);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[6];
      IOUtils.write(charArray0, (OutputStream) bufferedOutputStream0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      byte[] byteArray0 = new byte[1];
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(44);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      byte[] byteArray0 = IOUtils.toByteArray(iOTriFunction0, 44);
      assertEquals(44, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      IOUtils.toByteArray(inputStream0, 1);
      assertEquals(4, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LWVWj&],Q");
      assertEquals(15, inputStream0.available());
      
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      byte[] byteArray0 = new byte[7];
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream0, 1355L, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream0, 1355L, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("Skip count must be non-negative, actual: ", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Skip count must be non-negative, actual: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("", (ClassLoader) null);
      assertEquals("", uRL0.getHost());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[1];
      int int0 = IOUtils.read((Reader) pipedReader0, charArray0, (-2628), (int) '\u0000');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, (char[]) null, (-2628), 2145879964);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.read(iOTriFunction0, byteArray0, 728, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Integer integer0 = Integer.getInteger("Yw", 0);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer0, integer0, integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      IOUtils.read(iOTriFunction0, byteArray0, 2145899957, 2145899957);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.read((IOTriFunction<byte[], Integer, Integer, Integer>) null, byteArray0, 2145899942, (int) (byte) (-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -111
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      byte[] byteArray0 = new byte[1];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) unsynchronizedByteArrayOutputStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) null, (Consumer<IOException>) stream_Builder0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      IOUtils.close((URLConnection) closeableURLConnection0);
      assertTrue(closeableURLConnection0.getDefaultUseCaches());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      URL uRL0 = closeableURLConnection0.getURL();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      IOUtils.close(uRLConnection0);
      assertNull(uRLConnection0.getContentType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      List<String> list0 = IOUtils.readLines((Reader) charArrayReader0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = IOUtils.readLines(inputStream0, charset0);
      assertTrue(list0.contains("/r_\"b"));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Writer writer0 = IOUtils.writer(stringBuffer0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Skip count must be non-negative, actual: ");
      Writer writer0 = IOUtils.writer(stringBuilder0);
      BufferedWriter bufferedWriter0 = IOUtils.buffer(writer0);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>();
      IOUtils.writeLines((Collection<?>) linkedBlockingQueue0, (String) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*/c94zJ|5:27n`d-#(|");
      IOUtils.writeLines((Collection<?>) null, (String) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PriorityBlockingQueue<StringBuilder> priorityBlockingQueue0 = new PriorityBlockingQueue<StringBuilder>();
      IOUtils.writeLines((Collection<?>) priorityBlockingQueue0, "net.bytebuddy.build.Plugin$Engine$AbstractBase", (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6a>VA}LWVWj&],Q", "6a>VA}LWVWj&],Q");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      Charset charset0 = Charset.defaultCharset();
      linkedHashSet0.add((Object) null);
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "6a>VA}LWVWj&],Q", (OutputStream) mockFileOutputStream0, charset0);
      assertEquals(15L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("c,5>]<qC+qNsDN?]kU", "c,5>]<qC+qNsDN?]kU");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOUtils.writeLines((Collection<?>) null, "c,5>]<qC+qNsDN?]kU", (OutputStream) mockPrintStream0, charset0);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      IOUtils.write((String) null, (OutputStream) dataOutputStream0, (String) null);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IOUtils.write((char[]) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.write((char[]) null, (OutputStream) pipedOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      IOUtils.write((byte[]) null, (Writer) pipedWriter0, charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      IOUtils.write(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((IOSupplier<InputStream>) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/r_\"b");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("/r_\"b");
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      try { 
        IOUtils.toByteArray((Reader) mockFileReader0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("inputStream");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, 1L);
      assertEquals(10, inputStream0.available());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer(236);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(iOTriFunction0, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(iOTriFunction0, (-1603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1603
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      try { 
        IOUtils.toByteArray(inputStream0, 1200L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 5, expected: 1200
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, 457);
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 457);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) fileChannel0, (-1998L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1998
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.skipFully((Reader) charArrayReader0, 439L);
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 8192 actual: 7753
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 2143);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) bufferedReader0, (-1015L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1015
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try { 
        IOUtils.skipFully((Reader) charArrayReader0, 1125899906842636L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1125899906842636 actual: 8192
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, 664L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LWVWj&],Q");
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      IOUtils.skip(inputStream0, 0L, supplier0);
      assertEquals(15, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("inputStream");
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream0, (-186L), supplier0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -186
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("^<xT}[}RoF066h.p", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: ^<xT}[}RoF066h.p
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[0];
      IOUtils.readFully((Reader) pipedReader0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      StringReader stringReader0 = new StringReader("/r_\"b");
      try { 
        IOUtils.readFully((Reader) stringReader0, charArray0, 667, 457);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 457 actual: 5
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0, (-498), (-498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -498
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      try { 
        IOUtils.readFully(inputStream0, 7);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 7 actual: 5
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, byteArray0, 557, (-414));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -414
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = IOUtils.read((InputStream) null, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "/r_\"b");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = IOUtils.length(charArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("inputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream("T/O_updmQGtiP/ ");
      byte[] byteArray0 = new byte[5];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, (-1323L), 1111L, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(11L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LWVWj&],Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6a>VA}LWVWj&],Q");
      byte[] byteArray0 = new byte[4];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, (-25L), (-3367L), byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) null, 1200L, (long) (byte)53, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 1200 actual: 2
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      MockFile mockFile0 = new MockFile("Length to read: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[0];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockFileOutputStream0, (long) (byte) (-5), (long) (byte)107, byteArray0);
      assertEquals(5, inputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("6a>VA}LWVWj&],Q");
      MockFile mockFile0 = new MockFile("6a>VA}LWVWj&],Q", "6a>VA}LWVWj&],Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      assertEquals(15, inputStream0.available());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) outputStreamWriter0);
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6a>VA}LWVWj&],Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0, 6);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) mockFileReader0, (Reader) lineNumberReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "VoR9", charset0);
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream0);
      assertEquals(4, inputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      boolean boolean0 = IOUtils.contentEquals((InputStream) dataInputStream0, (InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayDeque<Closeable> arrayDeque0 = new ArrayDeque<Closeable>();
      IOUtils.closeQuietly((Iterable<Closeable>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IOUtils.closeQuietly((Iterable<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      IOUtils.close((Closeable) pipedWriter0, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) null, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Skip count must be non-negative, actual: ");
      IOUtils.close((Closeable) inputStream0);
      assertEquals(41, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileWriterWithEncoding.Builder fileWriterWithEncoding_Builder0 = new FileWriterWithEncoding.Builder();
          fileWriterWithEncoding_Builder0.setPath("");
          // Undeclared exception!
          try { 
            fileWriterWithEncoding_Builder0.get();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1220)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1211)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2479)
             // org.apache.commons.io.output.FileWriterWithEncoding.initWriter(FileWriterWithEncoding.java:158)
             // org.apache.commons.io.output.FileWriterWithEncoding.access$000(FileWriterWithEncoding.java:52)
             // org.apache.commons.io.output.FileWriterWithEncoding$Builder.get(FileWriterWithEncoding.java:107)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) pipedWriter0, 2312);
      Writer writer0 = IOUtils.writer(bufferedWriter0);
      assertSame(bufferedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) mockFileReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, (int) (byte)54);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) mockFileReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) byteArrayOutputStream0);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("E[7FIN/=");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0);
      assertEquals(8, inputStream0.available());
      assertSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*/c94zJ|5:27n`d-#(|");
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) mockPrintWriter0, "HDz/$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // HDz/$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IOUtils.clear();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      InputStream inputStream0 = IOUtils.toInputStream("}T$i8w", charset0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray(inputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0, (int) (byte) (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -70
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("%'6by$7p?#hyv88A@", "%'6by$7p?#hyv88A@");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %'6by$7p?#hyv88A@
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("(1Tmr,^jH\"ec4s'*xQ");
      // Undeclared exception!
      try { 
        IOUtils.lineIterator(inputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) mockFileReader0);
      // Undeclared exception!
      try { 
        IOUtils.consume((Reader) bufferedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket(452);
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertEquals("ServerSocket[addr=null,localport=452]", mockServerSocket0.toString());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "f,9rr-3");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // f,9rr-3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Skip count must be non-egative, actual: ");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertTrue(list0.contains("Skip count must be non-egative, actual: "));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) queueInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("/r_\"b");
      UnsynchronizedByteArrayOutputStream.Builder unsynchronizedByteArrayOutputStream_Builder0 = new UnsynchronizedByteArrayOutputStream.Builder();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = unsynchronizedByteArrayOutputStream_Builder0.get();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(unsynchronizedByteArrayOutputStream0, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) dataInputStream0, (Writer) mockPrintWriter0, " and ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  and 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockFile mockFile0 = new MockFile("inputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOUtils.write((CharSequence) "inputStream", (OutputStream) mockPrintStream0);
      assertEquals(11L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("W");
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "Qj/72V#c%pqLM~7(Bp", (OutputStream) pipedOutputStream0, "Qj/72V#c%pqLM~7(Bp");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Qj/72V#c%pqLM~7(Bp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.writeLines((Collection<?>) stack0, ");]vB]ysrd", (OutputStream) pipedOutputStream0);
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Stack<StringBuilder> stack0 = new Stack<StringBuilder>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2256);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.writeLines((Collection<?>) stack0, (String) null, (OutputStream) pipedOutputStream0, (String) null);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals(10, IOUtils.LF);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1000);
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6a>VA}LWVWj&],Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0, 6);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) pushbackReader0, (OutputStream) mockFileOutputStream0, "6a>VA}LWVWj&],Q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6a>VA}LWVWj&],Q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      assertNotNull(queueInputStream0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gu6.'Y.ZKu");
      char[] charArray0 = new char[1];
      int int0 = IOUtils.read((Reader) stringReader0, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      IOUtils.closeQuietly((Reader) inputStreamReader0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Selector selector0 = Selector.open();
      IOUtils.closeQuietly(selector0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Skip count must be non-negative, actual: ");
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(40, inputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("Could noc Dind encoding: UTF-8", (OutputStream) null, "Could noc Dind encoding: UTF-8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Could noc Dind encoding: UTF-8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      IOUtils.closeQuietly((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("inputStream");
      byte[] byteArray0 = IOUtils.readFully(inputStream0, 11);
      assertEquals(0, inputStream0.available());
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      Charset charset0 = Charset.defaultCharset();
      IOUtils.lineIterator(inputStream0, charset0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getScratchByteArrayWriteOnly();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((ReadableByteChannel) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("lR)6Gm/@!+eHh^R'ik");
      IOUtils.write("", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("IEb*Hw>.D2j@S%<6", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: IEb*Hw>.D2j@S%<6
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "c,5>]<qC+qNsDN?]kU", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K8C>d/6rjgJpoP;~", "K8C>d/6rjgJpoP;~");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) mockFileOutputStream0, "K8C>d/6rjgJpoP;~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // K8C>d/6rjgJpoP;~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("inputStream");
      assertEquals(11, inputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.toString(inputStream0, charset0);
      assertEquals("inputStream", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      IOUtils.closeQuietly((Socket) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "{cI1ryk|R9(zsI1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {cI1ryk|R9(zsI1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArrayWriteOnly();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) charArrayReader0, (-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      assertEquals(912, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[16];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/r_\"b");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("/r_\"b");
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) mockFileReader0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.consume((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getScratchByteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) charArrayReader0, "}MU  #L#Aj~`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }MU  #L#Aj~`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      IOUtils.closeQuietly((Closeable) pipedReader0);
  }
}
