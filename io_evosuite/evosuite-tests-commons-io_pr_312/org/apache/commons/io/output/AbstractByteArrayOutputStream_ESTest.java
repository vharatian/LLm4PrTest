/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:49:41 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ConcurrentModificationException;
import org.apache.commons.io.output.AbstractByteArrayOutputStream;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractByteArrayOutputStream_ESTest extends AbstractByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) byteArrayInputStream0, 1);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      byteArrayOutputStream0.writeImpl(byteArray0, (-1065), (-1454));
      byteArrayOutputStream0.toInputStream();
      assertEquals((-1454), byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1278, 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 42);
      unsynchronizedByteArrayOutputStream0.writeImpl(pushbackInputStream0);
      unsynchronizedByteArrayOutputStream0.resetImpl();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(unsynchronizedByteArrayOutputStream0);
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeTo(unsynchronizedByteArrayOutputStream0);
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(274);
      byteArrayOutputStream0.write(274);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(9973);
      unsynchronizedByteArrayOutputStream0.close();
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      int int0 = unsynchronizedByteArrayOutputStream0.writeImpl(sequenceInputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = byteArrayOutputStream0.write(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(649);
      unsynchronizedByteArrayOutputStream0.count = 649;
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(inputStream0);
      Charset charset0 = Charset.defaultCharset();
      byteArrayOutputStream0.toString(charset0);
      assertEquals(649, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(unsynchronizedByteArrayOutputStream0);
      unsynchronizedByteArrayOutputStream0.toString();
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream((AbstractByteArrayOutputStream.InputStreamConstructor<MockFileInputStream>) null);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(25);
      byteArrayOutputStream0.write((-4279));
      byteArrayOutputStream0.toByteArrayImpl();
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(9973);
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(649);
      unsynchronizedByteArrayOutputStream0.count = 649;
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(649, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArrayOutputStream0.writeImpl(byteArray0, (-2551), (-2551));
      int int0 = byteArrayOutputStream0.size();
      assertEquals((-2551), byteArrayOutputStream0.size());
      assertEquals((-2551), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(unsynchronizedByteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('\\');
      unsynchronizedByteArrayOutputStream0.writeToImpl(printStream0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeToImpl(mockPrintStream0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        unsynchronizedByteArrayOutputStream0.writeToImpl(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(16);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      File file0 = MockFile.createTempFile("Instance check requires a single regular-typed argument: ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl((byte[]) null, 1024, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(25);
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(25);
      byte[] byteArray0 = byteArrayOutputStream0.toByteArrayImpl();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, 9987, 1805);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(6);
      unsynchronizedByteArrayOutputStream0.needNewBuffer(3);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2409);
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.needNewBuffer(1);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1024
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(byteArray0, (-1603), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offset=-1,603, length=0
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      unsynchronizedByteArrayOutputStream0.write(inputStream0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(9993);
      try { 
        unsynchronizedByteArrayOutputStream0.write((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = 4194;
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(4194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4194
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = (-622);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((Charset) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(1024);
      try { 
        unsynchronizedByteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      assertEquals(3, unsynchronizedByteArrayOutputStream0.size());
      
      unsynchronizedByteArrayOutputStream0.resetImpl();
      unsynchronizedByteArrayOutputStream0.needNewBuffer((-18));
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(649);
      unsynchronizedByteArrayOutputStream0.count = 649;
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      unsynchronizedByteArrayOutputStream0.writeImpl(inputStream0);
      ByteArrayOutputStream.toBufferedInputStream(inputStream0, (int) (byte)0);
      assertEquals(1298, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = 9969;
      unsynchronizedByteArrayOutputStream0.writeToImpl(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeTo(unsynchronizedByteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.writeImpl(0);
      unsynchronizedByteArrayOutputStream0.toString();
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(649);
      unsynchronizedByteArrayOutputStream0.count = 649;
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeImpl(inputStream0);
      unsynchronizedByteArrayOutputStream0.writeToImpl(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      byteArrayOutputStream0.toString(charset0);
      assertEquals(1298, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = 1445;
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 1862;
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(649);
      unsynchronizedByteArrayOutputStream0.count = 649;
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      assertEquals(649, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(25);
      byteArrayOutputStream0.write((-4279));
      byteArrayOutputStream0.toInputStream();
      assertEquals(1, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.resetImpl();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      String string0 = unsynchronizedByteArrayOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteArrayOutputStream0.toString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.needNewBuffer(0);
      unsynchronizedByteArrayOutputStream0.resetImpl();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      unsynchronizedByteArrayOutputStream0.writeImpl(inputStream0);
  }
}
