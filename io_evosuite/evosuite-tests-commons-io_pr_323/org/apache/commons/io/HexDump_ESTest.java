/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:33:16 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.io.HexDump;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HexDump_ESTest extends HexDump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[16];
      HexDump.dump(byteArray0, (-1L), byteArrayOutputStream0, 0);
      assertEquals("FFFFFFFF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n", byteArrayOutputStream0.toString());
      assertEquals(74, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z7op-@.\"8* y9IG");
      HexDump.dump(byteArray0, 0L, mockPrintStream0, (byte)0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream(" into array of length ");
      try { 
        HexDump.dump(byteArray0, (byte)0, mockPrintStream0, 2419);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 2419 into array of length 7
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        HexDump.dump(byteArray0, 8, pipedOutputStream0, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)96;
      HexDump.dump(byteArray0, (byte)96, byteArrayOutputStream0, (byte)0);
      assertEquals(60, byteArrayOutputStream0.size());
      assertEquals("00000060 00 60                                           .`\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)127;
      HexDump.dump(byteArray0, (byte)127, byteArrayOutputStream0, 0);
      assertEquals(61, byteArrayOutputStream0.size());
      assertEquals("0000007F 00 00 7F                                        ...\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[20];
      HexDump.dump(byteArray0, 0, byteArrayOutputStream0, 0);
      assertEquals("00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00000010 00 00 00 00                                     ....\n", byteArrayOutputStream0.toString());
      assertEquals(136, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[0];
      try { 
        HexDump.dump(byteArray0, 0, byteArrayOutputStream0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 0 into array of length 0
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      try { 
        HexDump.dump(byteArray0, 0, (OutputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot write to nullstream
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        HexDump.dump((byte[]) null, 0, byteArrayOutputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        HexDump.dump(byteArray0, (-10), byteArrayOutputStream0, (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: -10 into array of length 6
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HexDump hexDump0 = new HexDump();
  }
}
