/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:12:37 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.input.CharSequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceInputStream_ESTest extends CharSequenceInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(707);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 9);
      long long0 = charSequenceInputStream0.skip(9);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(707);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 787);
      byte[] byteArray0 = new byte[4];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(1, int0);
      
      int int1 = charSequenceInputStream0.available();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 787);
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.skip(787);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, (byte)127);
      byte[] byteArray0 = new byte[19];
      charSequenceInputStream0.read(byteArray0);
      charBuffer0.put(';');
      charSequenceInputStream0.mark(9);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.reset();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null, (-2544), (-2544));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, (byte)127);
      byte[] byteArray0 = new byte[6];
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, (byte)114);
      charBuffer0.put(charArray0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", (Charset) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("net.bytebuddy.build.ToStringPlugin", "net.bytebuddy.build.ToStringPlugin", (-3968));
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.build.ToStringPlugin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(";Nh", ";Nh", 1);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;Nh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("m", "m");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // m
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("Yup*B%to%", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("z", charset0);
      byte[] byteArray0 = new byte[9];
      int int0 = charSequenceInputStream0.read(byteArray0, 3, 3);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[5];
      int int0 = charSequenceInputStream0.read(byteArray0, (int) (byte)0, 1);
      assertEquals(1, int0);
      
      int int1 = charSequenceInputStream0.read(byteArray0, 1, (int) (byte)1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 787);
      byte[] byteArray0 = new byte[4];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(1, int0);
      
      int int1 = charSequenceInputStream0.read(byteArray0, 1, 1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(707);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[0];
      int int0 = charSequenceInputStream0.read(byteArray0, (-1654), (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("z", charset0);
      charSequenceInputStream0.read();
      charSequenceInputStream0.mark(122);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("z", charset0, 3);
      charSequenceInputStream0.mark(3);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("I", charset0);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("z", charset0, 2823);
      long long0 = charSequenceInputStream0.skip(2823);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      long long0 = charSequenceInputStream0.skip((-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("#:T6v|-gfGaO", charset0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 2146434046, 2146434046);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(",", charset0);
      byte[] byteArray0 = new byte[0];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("]up*B%toJ", charset0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=1, offset=1, length=1
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[6];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("net.bytebuddy.build.ToStringPlugin", charset0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=0, length=-1
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("I", charset0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size 1 is less than maxBytesPerChar 3.0
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("Yup*B%to%", charset0);
      int int0 = charSequenceInputStream0.available();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(",", ",");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(",", (String) null, 825);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.close();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      boolean boolean0 = charSequenceInputStream0.markSupported();
      assertTrue(boolean0);
  }
}
