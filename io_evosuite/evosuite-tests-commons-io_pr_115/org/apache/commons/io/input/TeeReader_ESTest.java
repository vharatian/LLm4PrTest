/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:17:53 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.apache.commons.io.input.TeeReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TeeReader_ESTest extends TeeReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("){f+ZQ");
      TeeReader teeReader0 = new TeeReader(stringReader0, pipedWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1403);
      try { 
        teeReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      CharBuffer charBuffer0 = CharBuffer.allocate(4271);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      charBuffer0.position(54);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      TeeReader teeReader0 = new TeeReader(stringReader0, outputStreamWriter0);
      int int0 = teeReader0.read(charBuffer0);
      assertEquals(4207, charBuffer0.remaining());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.input.TeeReader");
      StringWriter stringWriter0 = new StringWriter(1582);
      TeeReader teeReader0 = new TeeReader(stringReader0, stringWriter0);
      char[] charArray0 = new char[7];
      int int0 = teeReader0.read(charArray0, 1, 2);
      assertEquals("or", stringWriter0.toString());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jJ\u0001");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      TeeReader teeReader0 = new TeeReader(stringReader0, charArrayWriter0, false);
      char[] charArray0 = new char[0];
      int int0 = teeReader0.read(charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      TeeReader teeReader0 = new TeeReader(stringReader0, outputStreamWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      int int0 = teeReader0.read(charBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jJ\u0001");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[0];
      TeeReader teeReader0 = new TeeReader(stringReader0, charArrayWriter0);
      // Undeclared exception!
      try { 
        teeReader0.read(charArray0, 4, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TeeReader teeReader0 = new TeeReader(pipedReader0, (Writer) null);
      char[] charArray0 = new char[0];
      try { 
        teeReader0.read(charArray0, 5590, 5590);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      TeeReader teeReader0 = new TeeReader(pipedReader0, pipedWriter0);
      // Undeclared exception!
      try { 
        teeReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TeeReader teeReader0 = new TeeReader(pipedReader0, (Writer) null);
      char[] charArray0 = new char[3];
      try { 
        teeReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      StringWriter stringWriter0 = new StringWriter(1582);
      TeeReader teeReader0 = new TeeReader(stringReader0, stringWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6uFm,_oCqw");
      // Undeclared exception!
      try { 
        teeReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      TeeReader teeReader0 = new TeeReader(pipedReader0, pipedWriter0);
      // Undeclared exception!
      try { 
        teeReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.TeeReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      TeeReader teeReader0 = new TeeReader(pipedReader0, pipedWriter0);
      teeReader0.close();
      CharBuffer charBuffer0 = CharBuffer.allocate(2429);
      try { 
        teeReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TeeReader teeReader0 = new TeeReader(pipedReader0, (Writer) null, true);
      try { 
        teeReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      TeeReader teeReader0 = null;
      try {
        teeReader0 = new TeeReader((Reader) null, outputStreamWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      CharBuffer charBuffer0 = CharBuffer.allocate(4271);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      TeeReader teeReader0 = new TeeReader(stringReader0, outputStreamWriter0);
      teeReader0.read(charBuffer0);
      int int0 = teeReader0.read(charBuffer0);
      assertEquals(4261, charBuffer0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      TeeReader teeReader0 = new TeeReader(pipedReader0, pipedWriter0);
      char[] charArray0 = new char[6];
      int int0 = teeReader0.read(charArray0, 4, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      StringWriter stringWriter0 = new StringWriter(1582);
      TeeReader teeReader0 = new TeeReader(stringReader0, stringWriter0);
      char[] charArray0 = new char[2];
      int int0 = teeReader0.read(charArray0);
      assertEquals("6u", stringWriter0.toString());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      CharBuffer charBuffer0 = CharBuffer.allocate(4271);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      TeeReader teeReader0 = new TeeReader(stringReader0, outputStreamWriter0);
      teeReader0.read(charBuffer0);
      assertEquals(4261, charBuffer0.length());
      
      char[] charArray0 = new char[6];
      int int0 = teeReader0.read(charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      StringWriter stringWriter0 = new StringWriter(1582);
      TeeReader teeReader0 = new TeeReader(stringReader0, stringWriter0);
      int int0 = teeReader0.read();
      assertEquals("6", stringWriter0.toString());
      assertEquals(54, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6uFm,_oCqw");
      StringWriter stringWriter0 = new StringWriter(1582);
      TeeReader teeReader0 = new TeeReader(stringReader0, stringWriter0);
      teeReader0.skip(1582);
      int int0 = teeReader0.read();
      assertEquals((-1), int0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      TeeReader teeReader0 = new TeeReader(pipedReader0, pipedWriter0, true);
      teeReader0.close();
  }
}
