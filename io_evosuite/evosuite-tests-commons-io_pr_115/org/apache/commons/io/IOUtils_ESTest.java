/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:05:18 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ServerSocket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      charArrayReader0.read(charBuffer0);
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 6 actual: 4
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(")!$<'_<");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)47);
      boolean boolean0 = IOUtils.contentEquals(inputStream0, (InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("PN!");
      byte[] byteArray0 = new byte[9];
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write(byteArray0, (Writer) mockFileWriter0, charset0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      IOUtils.write("+ent", (Writer) charArrayWriter0);
      assertEquals(4, charArrayWriter0.size());
      assertEquals("+ent", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      IOUtils.readFully((InputStream) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte) (-26));
      IOUtils.copy((InputStream) byteArrayInputStream0, (Writer) null);
      assertEquals((-26), byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 6);
      String string0 = IOUtils.toString((Reader) bufferedReader0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("cQx1(qk@8;C", charset0);
      String string0 = IOUtils.toString(inputStream0, charset0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = IOUtils.toCharArray((Reader) charArrayReader0);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, (byte)45);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 768, (-1035));
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)112);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) bufferedReader0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1327, (-1259));
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, 84);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      byte[] byteArray0 = IOUtils.toByteArray(uRL0);
      assertEquals(686, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = IOUtils.readLines((InputStream) dataInputStream0, charset0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lzU4AZ0e^7EH7?*vbgk");
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(18, inputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = IOUtils.length(charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&][");
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) mockPrintWriter0, 0L, (long) 2);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = MockFile.createTempFile(", expected: ", "oykiUic$Bc");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray1 = new byte[8];
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0, byteArray1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("!!UyF/N[Y1.b/i");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 3629);
      assertEquals(14, inputStream0.available());
      
      IOUtils.readLines(inputStream0);
      MockFile mockFile0 = new MockFile("3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      long long0 = IOUtils.copyLarge((InputStream) bufferedInputStream0, (OutputStream) mockFileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0);
      long long0 = IOUtils.copy((Reader) charArrayReader0, (Appendable) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = IOUtils.copy((InputStream) sequenceInputStream0, (OutputStream) pipedOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) null, "x=>'s**z32U<}", (OutputStream) pipedOutputStream0, "com.google.common.io.PatternFilenameFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.google.common.io.PatternFilenameFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = MockFile.createTempFile("last-modified", "org.apache.commons.io.IOUtils");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) null, "", (OutputStream) mockFileOutputStream0, "net.bytebuddy.asm.Advice$WithCustomMapping");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // net.bytebuddy.asm.Advice$WithCustomMapping
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((byte[]) null, (Writer) null, "1n");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 1n
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.junitpioneer.vintage.ExpectedExceptionExtension", false);
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.write("", (OutputStream) mockFileOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write((CharSequence) "lzU4AZ0e^7EH7?*vbgk", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lesHAZ0e^7EH7?*vbgk");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) mockFileOutputStream0, "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "outputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // outputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((URL) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URL) null, "Cannot inject classes into a sealed class loader");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cannot inject classes into a sealed class loader
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      URI uRI2 = MockURI.normalize(uRI1);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI2, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-58), (byte)3);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("", "IF_DECLARED");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // IF_DECLARED
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("]q. mn_W", "]q. mn_W");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]q. mn_W
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, "NMiTMk{|\"8zniT=T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // NMiTMk{|\"8zniT=T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader((byte)4);
      try { 
        IOUtils.toCharArray((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1153), 2);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray(inputStream0, "]:Fym$`?L(akXj7K8(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]:Fym$`?L(akXj7K8(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(688);
      try { 
        IOUtils.toCharArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.close();
      try { 
        IOUtils.toByteArray((Reader) charArrayReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 1176L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1518), 2122219134);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, 189L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 179);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, 1773);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) charArrayReader0, (int) (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) pushbackInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream(inputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lzU4AZ0e^7EH7?*vbgk");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, mockFileInputStream0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0, 7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) null, 1062L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) charArrayReader0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      try { 
        IOUtils.skipFully((Reader) inputStreamReader0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, 2048L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, (long) 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) null, (long) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)82);
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, 4824L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("`v\"^,a", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: `v\"^,a
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: $
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-58), (byte)3);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) byteArrayInputStream0, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.readLines(inputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, charArray0, 1098, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0, 2228, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0, (-1173), (-1173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1173
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1669);
      char[] charArray0 = new char[7];
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0, 1669, 17);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) charArrayReader0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.close();
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, byteArray0, 9, (int) (byte)127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, byteArray0, (int) (byte)3, (int) (byte) (-109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -109
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-874), 2623);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[5];
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(")!$<'_<");
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, (-664));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)65, (byte)65);
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, 137);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 137 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, charArray0, 3991, 3991);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) pipedInputStream0, (byte[]) null, 655, 655);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.read((InputStream) pipedInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[9];
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) null, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) charArrayWriter0, 3L, 475L, (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("9", "net.bytebuddy.build.ToStringPlugin");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) mockFileOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      File file0 = MockFile.createTempFile("N>^i%&kY^", "N>^i%&kY^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[1];
      try { 
        IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) mockFileOutputStream0, 2782L, (-1L), byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("T'Yp_", "?0M>RCiK~i|4n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) charArrayReader0, (Appendable) null, (CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      PipedReader pipedReader0 = new PipedReader(6);
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) charBuffer0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) mockFileReader0, (Writer) pipedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.copy((InputStream) mockFileInputStream0, (Writer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        IOUtils.contentEquals((InputStream) pipedInputStream0, (InputStream) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) pipedWriter0, (-646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) charArrayReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) mockPrintStream0, (-1814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, 8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) dataInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegal range. Equal from and to will produce an empty range.");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IOUtils.write(stringBuffer0, (OutputStream) mockPrintStream0, (String) null);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("8lhWi2,'AeS0X,B");
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write("8lhWi2,'AeS0X,B", (OutputStream) mockPrintStream0, charset0);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-h8W70A");
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((char[]) null, (OutputStream) mockFileOutputStream0, charset0);
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)65, (byte)65);
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, charset0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)6, 1931);
      IOUtils.toByteArray((InputStream) byteArrayInputStream0, 1);
      assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) pipedInputStream0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      try { 
        IOUtils.toByteArray(inputStream0, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size. current: 0, expected: 5
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, (-1259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1259
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("63gQ08-2\"YS");
      assertEquals(11, inputStream0.available());
      
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1295);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) pipedReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0);
      try { 
        IOUtils.skipFully((Reader) charArrayReader0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      long long0 = IOUtils.skip((Reader) charArrayReader0, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      long long0 = IOUtils.skip((Reader) bufferedReader0, (long) 10);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToURL("T'Yp_", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: T'Yp_
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("", (ClassLoader) null);
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(8192);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0, proxy0);
      byte[] byteArray0 = IOUtils.toByteArray(uRLConnection0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0, 8192, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) bufferedReader0, charArray0, (-3613), (int) (byte)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = IOUtils.read((Reader) charArrayReader0, charArray0, (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1024);
      byteBuffer0.flip();
      int int0 = IOUtils.read((ReadableByteChannel) null, byteBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, byteArray0, (-473), 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) pipedInputStream0, byteArray0, (int) (byte)0, 4171);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, (long) 0);
      int int0 = IOUtils.read((InputStream) dataInputStream0, byteArray0, 4, 0);
      assertEquals(0, inputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[18];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) null, (-2823L), (-2289L), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      File file0 = MockFile.createTempFile("No more lines", "\r\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " mUpiMO(bV,p");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 9);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[5];
      long long0 = IOUtils.copyLarge((InputStream) pushbackInputStream0, (OutputStream) mockFileOutputStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(" mUpiMO(bV,p");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) pipedOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Kk2-", true);
      MockFileReader mockFileReader0 = new MockFileReader("Kk2-");
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0, 15);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, 8192);
      int int0 = IOUtils.copy((Reader) pushbackReader0, (Writer) mockFileWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NEVER");
      int int0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IOUtils.close((URLConnection) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Consumer<IOException> consumer0 = (Consumer<IOException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IOUtils.closeQuietly((Closeable) null, consumer0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Kk2-", charset0);
      assertEquals(4, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("org.apache.commons.io.filefilter.CanReadFileFilter");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) pushbackReader0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(127);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IOUtils.closeQuietly((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("O~$:A", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: O~$:A
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Writer writer0 = IOUtils.writer(stringBuilder0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("#ds|_%yL]D)Y[fYE", true);
      Writer writer0 = IOUtils.writer(mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      Writer writer0 = IOUtils.writer(charBuffer0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.offerLast(object0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("#ds|_%yL]D)Y[fYE", true);
      IOUtils.writeLines((Collection<?>) linkedList0, "#ds|_%yL]D)Y[fYE", (Writer) mockFileWriter0);
      assertTrue(linkedList0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile("last-modified", "last-modified");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      IOUtils.writeLines((Collection<?>) null, "beY+(", (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("q JqOA", true);
      IOUtils.writeLines((Collection<?>) linkedHashSet0, (String) null, (Writer) mockFileWriter0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegal range. Equal from and to will produce an empty range.");
      Charset charset0 = Charset.defaultCharset();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, (String) null, (OutputStream) mockPrintStream0, charset0);
      assertFalse(linkedHashSet0.contains("Illegal range. Equal from and to will produce an empty range."));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegal range. Equal from and to will produce an empty range.");
      Charset charset0 = Charset.defaultCharset();
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "Illegal range. Equal from and to will produce an empty range.", (OutputStream) mockPrintStream0, charset0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[1];
      StringWriter stringWriter0 = new StringWriter(0);
      IOUtils.writeChunked(charArray0, (Writer) stringWriter0);
      assertEquals("\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      IOUtils.writeChunked((char[]) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",", false);
      IOUtils.writeChunked(byteArray0, (OutputStream) mockFileOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_4V2HcIH)TDv&b*~eq", false);
      IOUtils.writeChunked((byte[]) null, (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IOUtils.write(stringBuffer0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IOUtils.write((StringBuffer) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ra]j31m|7<`3a^)yE");
      IOUtils.write((CharSequence) "ra]j31m|7<`3a^)yE", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IOUtils.write((CharSequence) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(92);
      IOUtils.write((CharSequence) "", (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write(charArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("PN!");
      IOUtils.write((char[]) null, (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockFile mockFile0 = new MockFile("m5vxg8ECiRNn}@*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      try { 
        IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Kk2-");
      IOUtils.write((byte[]) null, (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOUtils.write(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.write((byte[]) null, (OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 8192);
      String string0 = IOUtils.toString((Reader) bufferedReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 897);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) bufferedReader0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("net.bytebuddy.description.type.TypeDescription$Generic");
      try { 
        IOUtils.toByteArray(inputStream0, 954L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size. current: 54, expected: 954
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(inputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, (int) (byte)4);
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) null, 1L, 1L, (byte[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-58), (byte)3);
      IOUtils.skipFully((InputStream) byteArrayInputStream0, (long) (byte)0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("!!UyF/N[Y1.b/i");
      // Undeclared exception!
      try { 
        IOUtils.skipFully(inputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) null, 2147483647L, 1L, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 2147483647 actual: 10
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.skipFully((Reader) charArrayReader0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) charArrayReader0, (-1134L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1134
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      IOUtils.skip((ReadableByteChannel) datagramChannel0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) datagramChannel0, 1L);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lesHAZ0e^7EH7?*vbgk");
      long long0 = IOUtils.skip(inputStream0, 164L);
      assertEquals(0, inputStream0.available());
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lesHAZ0e^7EH7?*vbgk");
      IOUtils.skip(inputStream0, (long) 0);
      assertEquals(19, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) bufferedInputStream0, (-341L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -341
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToByteArray("O#aL]:", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: O#aL]:
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FPY3Zh{j$e]6@<o");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertTrue(list0.contains("FPY3Zh{j$e]6@<o"));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) charArrayReader0, charArray0, (-3837), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1725);
      // Undeclared exception!
      try { 
        IOUtils.read((ReadableByteChannel) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      IOUtils.readFully((ReadableByteChannel) null, byteBuffer0);
      assertEquals(0, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, byteArray0, (int) (byte)102, (int) (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -8
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[6];
      int int0 = IOUtils.length((Object[]) closeableArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "lzU4AZ0e^7EH7?*vbgk");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = IOUtils.length(charArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[10];
      File file0 = MockFile.createTempFile("Chars to skip: ", "Resource not found: ");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      long long0 = IOUtils.copyLarge((Reader) mockFileReader0, (Writer) null, (-2364L), (-2364L), charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0h48");
      long long0 = IOUtils.copyLarge((Reader) null, (Writer) mockPrintWriter0, (-1L), 137L, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[10];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) null, (-1082L), 0L, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("!!UyF/N[Y1.b/i");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) null, (long) (-1), 84L, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("!!UyF/N[Y1.b/i");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) null, (long) (byte) (-64), (-2149L), byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      long long0 = IOUtils.copy((Reader) charArrayReader0, (Appendable) stringBuilder0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL((Reader) null, (Reader) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 8192);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(charArrayReader0, bufferedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2455);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 64);
      try { 
        IOUtils.contentEquals((Reader) bufferedReader0, (Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) lineNumberReader0, (Reader) lineNumberReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bytes to skip must not be negative: ");
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lzU4AZ0e^7EH7?*vbgk");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)99, (byte)5);
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, inputStream0);
      assertEquals(0, inputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(")!$<'_<");
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1131), (byte) (-8));
      boolean boolean0 = IOUtils.contentEquals(inputStream0, (InputStream) byteArrayInputStream0);
      assertEquals(0, inputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2145396686, (-4073));
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, (InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = IOUtils.contentEquals((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[2];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(2, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      IOUtils.close(uRLConnection0);
      assertEquals((-1), uRLConnection0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lesHAZ0e^7EH7?*vbgk");
      IOUtils.close((Closeable) inputStream0, (IOConsumer<IOException>) null);
      assertEquals(19, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      IOConsumer<IOException> iOConsumer0 = (IOConsumer<IOException>) mock(IOConsumer.class, new ViolatedAssumptionAnswer());
      IOUtils.close((Closeable) null, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.close((Closeable) charArrayReader0);
      try { 
        IOUtils.toString((Reader) charArrayReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Size must be equal or greater than zero: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0, 2);
      assertSame(bufferedWriter1, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(6);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 6);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) lineNumberReader0, (-3957));
      assertSame(bufferedReader0, lineNumberReader0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, 3327);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.filefilter.AbstractFileFilter");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) lineNumberReader0);
      assertSame(bufferedReader0, lineNumberReader0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("GL8+=m^0%*`V");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 5);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, 5);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("1hs0:{0Nz");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockPrintStream0, 29);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("8lhWi2,'AeS0X,B");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockPrintStream0);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("!!UyF/N[Y1.b/i");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 3623);
      IOUtils.buffer((InputStream) bufferedInputStream0, (-1760));
      assertEquals(14, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)65, (byte)65);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) byteArrayInputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, (InputStream) bufferedInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((byte[]) null, (Writer) null, "`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // `
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) bufferedInputStream0, "8.zgo");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 8.zgo
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("", (String) null);
      IOUtils.closeQuietly((Closeable) inputStream0, (Consumer<IOException>) null);
      assertEquals(1, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("L");
      // Undeclared exception!
      try { 
        IOUtils.lineIterator(inputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0h48");
      PipedReader pipedReader0 = new PipedReader(2048);
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) mockPrintWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("g7|6([EK\".\"wk");
      MockServerSocket mockServerSocket0 = new MockServerSocket(10, (-1760), inetAddress0);
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertEquals("ServerSocket[addr=null,localport=10]", mockServerSocket0.toString());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URL) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, charset0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(" mUpiMO(bV,p");
      // Undeclared exception!
      try { 
        IOUtils.toString(inputStream0, " mUpiMO(bV,p");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  mUpiMO(bV,p
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((CharSequence) null, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("!!UyF/N[Y1.b/i");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Resource not found: ");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "Resource not found: ", (OutputStream) mockFileOutputStream0, "Resource not found: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Resource not found: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = MockFile.createTempFile("][`eq3sU", "last-modified");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      IOUtils.writeLines((Collection<?>) null, "", (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("org.junitpioneer.vintage.TimeoutExtension", ", ", 1184, "2v(", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = MockFile.createTempFile("][`eq3sU", "last-modified");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      IOUtils.writeLines((Collection<?>) null, "O~$:A", (OutputStream) mockFileOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader", "Unexpected read size. current: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) mockFileReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(6);
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m5vxg8ECiRNn}@*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      try { 
        IOUtils.copyLarge((InputStream) pipedInputStream0, (OutputStream) bufferedOutputStream0, (long) 3629, (long) 3629);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      char[] charArray0 = new char[0];
      int int0 = IOUtils.read((Reader) inputStreamReader0, charArray0);
      assertEquals(0, int0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1295);
      IOUtils.closeQuietly((Reader) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      IOUtils.closeQuietly((Selector) null);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOUtils.write("", (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      IOUtils.closeQuietly(inputStream0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("lzU4AZ0e^7EH7?*vbgk");
      assertEquals(19, inputStream0.available());
      
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(19, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(" mUpiMO(bV,p");
      IOUtils.readFully(inputStream0, 1);
      assertEquals(11, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      Charset charset0 = Charset.defaultCharset();
      IOUtils.lineIterator(inputStream0, charset0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 4824);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) pushbackReader0, "}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("org.apache.commons.io.filefilter.AbstractFileFilter");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: org.apache.commons.io.filefilter.AbstractFileFilter
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(95);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0);
      IOUtils.closeQuietly((Writer) bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("8lhWi2,'AeS0X,B");
      IOUtils.write("Skip count must be non-negative, actual: ", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.resourceToString("", charset0);
      assertEquals("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nfile\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nfunction\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nTaggedIOException.class\nThreadMonitor.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", (String) null);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null, "&][");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &][
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "org.apache.commons.io.filefilter.AbstractFileFilter");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      assertEquals(51, inputStream0.available());
      
      String string0 = IOUtils.toString((InputStream) bufferedInputStream0);
      assertEquals("org.apache.commons.io.filefilter.AbstractFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("!!UyF/N[Y1.b/i");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, (long) 2);
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "!!UyF/N[Y1.b/i");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !!UyF/N[Y1.b/i
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = IOUtils.toCharArray((Reader) charArrayReader0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&][");
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) mockPrintWriter0, 0L, (long) 2);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) pipedReader0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-81), (byte) (-23));
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 5 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.write((char[]) null, (OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      InputStream inputStream0 = IOUtils.toInputStream("");
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(686, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Resource not found: ");
      IOUtils.closeQuietly((OutputStream) mockFileOutputStream0);
  }
}
