/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:22:31 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DeferredFileOutputStream_ESTest extends DeferredFileOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.output.DeferredFileOutputStream", "org.apache.commons.io.output.DeferredFileOutputStream");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1, 1, "' exists but is not a directory", "org.apache.commons.io.output.DeferredFileOutputStream", mockFile0);
      assertEquals(0L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1518), (File) null);
      ByteArrayOutputStream byteArrayOutputStream0 = (ByteArrayOutputStream)deferredFileOutputStream0.getStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("' does not exist [createDestDir=", "' does not exist [createDestDir=");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2082, file0);
      deferredFileOutputStream0.write((-939));
      deferredFileOutputStream0.thresholdReached();
      File file1 = deferredFileOutputStream0.getFile();
      assertEquals("/tmp", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "sour-eDir");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-675), 2111, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertFalse(file0.exists());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile(".?oX0\"Xh$\"O%s_XXf", ".?oX0\"Xh$\"O%s_XXf", (File) null);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(62, file0);
      File file1 = deferredFileOutputStream0.getFile();
      assertEquals(0L, file1.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "C+Neiu{&");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-410), 0, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertEquals(0L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(17, (File) null);
      deferredFileOutputStream0.write(17);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-310), (File) null);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gZzXF]0", "gZzXF]0");
      File file0 = MockFile.createTempFile("gZzXF]0", "gZzXF]0", (File) mockFile0);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2861), file0);
      deferredFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("gZzXF]0/gZzXF]0/gZzXF]00gZzXF]0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "nb}=$K5?ul_QEsl]");
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, (File) null);
      deferredFileOutputStream0.close();
      DeferredFileOutputStream deferredFileOutputStream1 = new DeferredFileOutputStream((-2974), 2459, "", "", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V6D", "V6D");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2853), mockFile0);
      deferredFileOutputStream0.close();
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(3, 3, (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, "", "", mockFile0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' exists but is not a directory", "' exists but is not a directory");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1, 1, "' exists but is not a directory", "' exists but is not a directory", mockFile0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(3, 3, mockFile0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-14), (-14), (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -14
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "", "", (File) null);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "C+Neiu{&");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-410), 0, mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("~!.8e[?5i", "~!.8e[?5i");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1316), file0);
      deferredFileOutputStream0.close();
      deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
      assertFalse(deferredFileOutputStream0.isInMemory());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$OnNonDefaultValue");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(7, 7, mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0, false);
      try { 
        deferredFileOutputStream0.writeTo(mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not closed
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "", "", (File) null);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$OnNonDefaultValue");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(7, 7, mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0, false);
      mockPrintStream0.println((long) 7);
      Object object0 = new Object();
      mockPrintStream0.println(object0);
      deferredFileOutputStream0.getData();
      assertEquals(28L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(1024, (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(127, "", "net.bytebuddy.build.Plugin$ForElementMatcher", (File) null);
      assertFalse(deferredFileOutputStream0.isThresholdExceeded());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "", "", (File) null);
      File file0 = deferredFileOutputStream0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gZzXF]0", "gZzXF]0");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2861), mockFile0);
      deferredFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("gZzXF]0/gZzXF]0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Initial buffer size must be atleast 0.");
      DeferredFileOutputStream deferredFileOutputStream1 = new DeferredFileOutputStream((-2861), 0, "", "", mockFile0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
