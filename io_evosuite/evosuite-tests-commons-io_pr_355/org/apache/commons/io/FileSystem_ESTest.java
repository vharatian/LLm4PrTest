/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:10:14 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.io.FileSystem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileSystem_ESTest extends FileSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(260);
      char[] charArray0 = new char[5];
      charBuffer0.get(charArray0);
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.isLegalFileName(charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystem[] fileSystemArray0 = FileSystem.values();
      assertEquals(4, fileSystemArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("WINDOWS");
      assertEquals(FileSystem.WINDOWS, fileSystem0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("LINUX");
      assertEquals(4096, fileSystem0.getMaxPathLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("GENERIC");
      assertEquals(Integer.MAX_VALUE, fileSystem0.getMaxFileNameLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      String string0 = fileSystem0.toLegalFileName("", 'l');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.supportsDriveLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      String string0 = fileSystem0.normalizeSeparators("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      boolean boolean0 = fileSystem0.isCaseSensitive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isCasePreserving();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      String[] stringArray0 = fileSystem0.getReservedFileNames();
      assertEquals(24, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      // Undeclared exception!
      try { 
        fileSystem0.toLegalFileName((String) null, 'b');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.isReservedFileName((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      char[] charArray0 = fileSystem0.getIllegalFileNameChars();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        fileSystem0.isReservedFileName(charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(235);
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.isLegalFileName(charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isReservedFileName("COM5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isReservedFileName("LINUX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      String string0 = fileSystem0.toLegalFileName("a<0L}AV&dL?)*9|<", '%');
      assertEquals("a%0L}AV&dL%)%9%%", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.toLegalFileName("Windows", '\u0000');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The replacement character '\\0' cannot be one of the WINDOWS illegal characters: [\u0000, \u0001, \u0002, \u0003, \u0004, \u0005, \u0006, \u0007, \b, \t, 
         // , \u000B, \f, \r, \u000E, \u000F, \u0010, \u0011, \u0012, \u0013, \u0014, \u0015, \u0016, \u0017, \u0018, \u0019, \u001A, \u001B, \u001C, \u001D, \u001E, \u001F, \", *, /, :, <, >, ?, \\, |]
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      // Undeclared exception!
      try { 
        fileSystem0.toLegalFileName("GENERIC", '/');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The replacement character '/' cannot be one of the LINUX illegal characters: [\u0000, /]
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      boolean boolean0 = fileSystem0.isLegalFileName("Caught a SecurityException reading the system property '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isLegalFileName("AUX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharBuffer charBuffer0 = CharBuffer.allocate(986);
      boolean boolean0 = fileSystem0.isLegalFileName(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      boolean boolean0 = fileSystem0.isLegalFileName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isLegalFileName((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isLegalFileName(":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      String string0 = fileSystem0.normalizeSeparators((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isCaseSensitive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      char char0 = fileSystem0.getNameSeparator();
      assertEquals('\\', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      boolean boolean0 = fileSystem0.supportsDriveLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.GENERIC;
      boolean boolean0 = fileSystem0.isCasePreserving();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.GENERIC;
      String[] stringArray0 = fileSystem0.getReservedFileNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      int int0 = fileSystem0.getMaxFileNameLength();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      String string0 = fileSystem0.normalizeSeparators("Caught a SecurityException reading the system property '");
      assertEquals("Caught a SecurityException reading the system property '", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      int int0 = fileSystem0.getMaxPathLength();
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.getCurrent();
      assertTrue(fileSystem0.isCaseSensitive());
  }
}
