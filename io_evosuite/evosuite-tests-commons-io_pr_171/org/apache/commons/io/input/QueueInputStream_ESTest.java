/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:17:21 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import org.apache.commons.io.input.QueueInputStream;
import org.apache.commons.io.output.QueueOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QueueInputStream_ESTest extends QueueInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>(17);
      Integer integer0 = new Integer(0);
      linkedBlockingQueue0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(linkedBlockingQueue0);
      int int0 = queueInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QueueInputStream queueInputStream0 = null;
      try {
        queueInputStream0 = new QueueInputStream((BlockingQueue<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // queue is required
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      QueueInputStream queueInputStream0 = new QueueInputStream(linkedBlockingDeque0);
      int int0 = queueInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-5210));
      linkedBlockingDeque0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(linkedBlockingDeque0);
      int int0 = queueInputStream0.read();
      assertEquals(166, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      QueueOutputStream queueOutputStream0 = queueInputStream0.newQueueOutputStream();
      assertNotNull(queueOutputStream0);
  }
}
