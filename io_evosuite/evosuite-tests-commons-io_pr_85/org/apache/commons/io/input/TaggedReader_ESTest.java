/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:47:36 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import org.apache.commons.io.input.TaggedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TaggedReader_ESTest extends TaggedReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TaggedReader taggedReader0 = new TaggedReader(pipedReader0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        taggedReader0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.TaggedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TaggedReader taggedReader0 = null;
      try {
        taggedReader0 = new TaggedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TaggedReader taggedReader0 = new TaggedReader(pipedReader0);
      MockThrowable mockThrowable0 = new MockThrowable();
      boolean boolean0 = taggedReader0.isCauseOf(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TaggedReader taggedReader0 = new TaggedReader(pipedReader0);
      // Undeclared exception!
      try { 
        taggedReader0.handleIOException((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.TaggedIOException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TaggedReader taggedReader0 = new TaggedReader(pipedReader0);
      taggedReader0.throwIfCauseOf((Throwable) null);
  }
}
