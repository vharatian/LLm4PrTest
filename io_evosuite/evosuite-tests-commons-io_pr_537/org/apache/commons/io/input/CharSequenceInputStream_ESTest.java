/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:49:12 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.input.CharSequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceInputStream_ESTest extends CharSequenceInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4151);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 98629247, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=1, offset=98629247, length=0
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (Charset) null, 1476);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4178);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (String) null, 4178);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      long long0 = charSequenceInputStream0.skip((-2193L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(255);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(" ", charset0);
      int int0 = charSequenceInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k`");
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charset0.encode(charBuffer0);
      charSequenceInputStream0.reset();
      // Undeclared exception!
      try { 
        charSequenceInputStream0.reset();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null, (-3123), (-3123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("'", charset0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, (-805), 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (Charset) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(charBuffer1, (Charset) null, 'x');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", charset0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size 0 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(58);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(charBuffer1, (Charset) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", "NFD", 1431655765);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // NFD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", "", 16);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size 0 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("T", "T");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4151);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[8];
      int int0 = charSequenceInputStream0.read(byteArray0, 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(" ", charset0);
      byte[] byteArray0 = new byte[2];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(1, int0);
      
      int int1 = charSequenceInputStream0.read(byteArray0, 1, 1);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[4];
      int int0 = charSequenceInputStream0.read(byteArray0, (int) (byte) (-1), (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("a", charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals(97, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4151);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.mark(4151);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = new CharSequenceInputStream.Builder();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4155);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      long long0 = charSequenceInputStream0.skip(4155);
      assertEquals(4155L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      charSequenceInputStream0.reset();
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[2];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[0];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("8", charset0);
      byte[] byteArray0 = new byte[14];
      int int0 = charSequenceInputStream0.read(byteArray0, 5, 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=2, offset=-1, length=-1
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("@ ", charset0);
      long long0 = charSequenceInputStream0.skip(3L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = CharSequenceInputStream.builder();
      CharSequenceInputStream.Builder charSequenceInputStream_Builder1 = charSequenceInputStream_Builder0.setCharset(charset0);
      assertSame(charSequenceInputStream_Builder1, charSequenceInputStream_Builder0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = CharSequenceInputStream.builder();
      // Undeclared exception!
      try { 
        charSequenceInputStream_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = CharSequenceInputStream.builder();
      CharSequenceInputStream.Builder charSequenceInputStream_Builder1 = charSequenceInputStream_Builder0.setCharsetEncoder((CharsetEncoder) null);
      assertSame(charSequenceInputStream_Builder1, charSequenceInputStream_Builder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      CharsetEncoder charsetEncoder0 = charSequenceInputStream0.getCharsetEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      int int0 = charSequenceInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("Zg9rI", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = CharSequenceInputStream.builder();
      CharsetEncoder charsetEncoder0 = charSequenceInputStream_Builder0.getCharsetEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k`");
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.reset();
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.close();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", (String) null);
      boolean boolean0 = charSequenceInputStream0.markSupported();
      assertTrue(boolean0);
  }
}
