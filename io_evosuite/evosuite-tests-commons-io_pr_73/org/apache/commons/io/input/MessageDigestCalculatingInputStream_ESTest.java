/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:02:23 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.io.input.MessageDigestCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MessageDigestCalculatingInputStream_ESTest extends MessageDigestCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MessageDigest messageDigest0 = MessageDigest.getInstance("MD5");
      MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver messageDigestCalculatingInputStream_MessageDigestMaintainingObserver0 = new MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver(messageDigest0);
      byte[] byteArray0 = new byte[8];
      messageDigestCalculatingInputStream_MessageDigestMaintainingObserver0.data(byteArray0, (int) (byte) (-2), 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MessageDigest messageDigest0 = MessageDigest.getInstance("MD5");
      MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver messageDigestCalculatingInputStream_MessageDigestMaintainingObserver0 = new MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver(messageDigest0);
      messageDigestCalculatingInputStream_MessageDigestMaintainingObserver0.data(1873);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      MessageDigestCalculatingInputStream messageDigestCalculatingInputStream0 = new MessageDigestCalculatingInputStream(pushbackInputStream0, (MessageDigest) null);
      MessageDigest messageDigest0 = messageDigestCalculatingInputStream0.getMessageDigest();
      assertNull(messageDigest0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MessageDigestCalculatingInputStream messageDigestCalculatingInputStream0 = new MessageDigestCalculatingInputStream((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MessageDigestCalculatingInputStream messageDigestCalculatingInputStream0 = new MessageDigestCalculatingInputStream(pipedInputStream0, "MD5");
      MessageDigestCalculatingInputStream messageDigestCalculatingInputStream1 = null;
      try {
        messageDigestCalculatingInputStream1 = new MessageDigestCalculatingInputStream(messageDigestCalculatingInputStream0, "org.apache.commons.io.filefilter.CanWriteFileFilter");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MessageDigest messageDigest0 = MessageDigest.getInstance("MD5");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MessageDigestCalculatingInputStream messageDigestCalculatingInputStream0 = new MessageDigestCalculatingInputStream(pipedInputStream0, messageDigest0);
      MessageDigest messageDigest1 = messageDigestCalculatingInputStream0.getMessageDigest();
      assertEquals("MD5 Message Digest from SUN, <initialized>\n", messageDigest1.toString());
  }
}
