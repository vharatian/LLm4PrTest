/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:08:52 GMT 2025
 */

package org.apache.commons.io.input.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.io.input.buffer.PeekableInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PeekableInputStream_ESTest extends PeekableInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      peekableInputStream0.peek(byteArray1);
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0, 28, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 28
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8192, (byte)0);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      boolean boolean0 = peekableInputStream0.peek(byteArray0, (int) (byte)0, 1571);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8192, (byte)0);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      boolean boolean0 = peekableInputStream0.peek(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 8);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        peekableInputStream0.peek((byte[]) null, 8, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2407), 1378);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0, 899, 899);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(pipedInputStream0, 1);
      byte[] byteArray0 = new byte[1];
      try { 
        peekableInputStream0.peek(byteArray0, 1, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        peekableInputStream0.peek((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2407), 1378);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(pipedInputStream0);
      try { 
        peekableInputStream0.peek(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeekableInputStream peekableInputStream0 = null;
      try {
        peekableInputStream0 = new PeekableInputStream((InputStream) null, (-1989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = null;
      try {
        peekableInputStream0 = new PeekableInputStream(pipedInputStream0, (-824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid buffer size: -824
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeekableInputStream peekableInputStream0 = null;
      try {
        peekableInputStream0 = new PeekableInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      boolean boolean0 = peekableInputStream0.peek(byteArray0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(pipedInputStream0, 1);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0, 2444, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Peek request size of 6 bytes exceeds buffer size of 1 bytes
         //
         verifyException("org.apache.commons.io.input.buffer.PeekableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0, 28, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 28
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(pipedInputStream0, 1);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Peek request size of 6 bytes exceeds buffer size of 1 bytes
         //
         verifyException("org.apache.commons.io.input.buffer.PeekableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        peekableInputStream0.peek(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 0
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)59, 104);
      PeekableInputStream peekableInputStream0 = new PeekableInputStream(byteArrayInputStream0);
      PeekableInputStream peekableInputStream1 = new PeekableInputStream(peekableInputStream0, 8);
      boolean boolean0 = peekableInputStream1.peek(byteArray0);
      assertTrue(boolean0);
  }
}
