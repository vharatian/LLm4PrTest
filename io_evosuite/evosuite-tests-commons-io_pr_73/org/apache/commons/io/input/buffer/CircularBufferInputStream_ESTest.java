/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:04:34 GMT 2025
 */

package org.apache.commons.io.input.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.io.input.buffer.CircularBufferInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CircularBufferInputStream_ESTest extends CircularBufferInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)2);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)2);
      circularBufferInputStream0.read();
      int int0 = circularBufferInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = null;
      try {
        circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid buffer size: 0
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)2);
      circularBufferInputStream0.fillBuffer();
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 693, 693);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      int int0 = circularBufferInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)2);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)2);
      int int0 = circularBufferInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)2);
      boolean boolean0 = circularBufferInputStream0.haveBytes((byte)36);
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)46);
      boolean boolean0 = circularBufferInputStream0.haveBytes((byte) (-21));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read((byte[]) null, 1, 1411);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read(byteArray0, 464, 464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 464
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(pipedInputStream0, (byte)1);
      try { 
        circularBufferInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(pipedInputStream0, 8190);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3827), 395);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(4356);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(pipedInputStream0);
      try { 
        circularBufferInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-112), (byte)1);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, 1087);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(pipedInputStream0);
      try { 
        circularBufferInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 621);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(bufferedInputStream0, (byte)1);
      try { 
        circularBufferInputStream0.haveBytes((byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)1);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)1);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.fillBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1998);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(pipedInputStream0, 1998);
      try { 
        circularBufferInputStream0.fillBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CircularBufferInputStream circularBufferInputStream0 = null;
      try {
        circularBufferInputStream0 = new CircularBufferInputStream((InputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CircularBufferInputStream circularBufferInputStream0 = null;
      try {
        circularBufferInputStream0 = new CircularBufferInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)2);
      int int0 = circularBufferInputStream0.read(byteArray0, 2, 365);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)2);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)2);
      circularBufferInputStream0.read();
      int int0 = circularBufferInputStream0.read(byteArray0, 3, (int) (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read(byteArray0, 0, (-3559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        circularBufferInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must not be negative
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)16, (byte)16);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (byte)16);
      int int0 = circularBufferInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)124);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, 3);
      int int0 = circularBufferInputStream0.read(byteArray0, 4, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)124);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, 3);
      CircularBufferInputStream circularBufferInputStream1 = new CircularBufferInputStream(circularBufferInputStream0, 314);
      int int0 = circularBufferInputStream1.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = null;
      try {
        circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0, (-1482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid buffer size: -1482
         //
         verifyException("org.apache.commons.io.input.buffer.CircularBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CircularBufferInputStream circularBufferInputStream0 = new CircularBufferInputStream(byteArrayInputStream0);
      circularBufferInputStream0.close();
  }
}
