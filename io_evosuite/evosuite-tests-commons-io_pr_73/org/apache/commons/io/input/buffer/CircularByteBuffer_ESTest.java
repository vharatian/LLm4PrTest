/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:06:42 GMT 2025
 */

package org.apache.commons.io.input.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.io.input.buffer.CircularByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CircularByteBuffer_ESTest extends CircularByteBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      boolean boolean0 = circularByteBuffer0.hasSpace((-3022));
      assertEquals(1, circularByteBuffer0.getSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      circularByteBuffer0.add(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(8192, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 0, 654);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 0
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1421);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, 0, 8);
      assertFalse(boolean0);
      assertEquals(1421, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, 1, 1640);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      byte[] byteArray0 = new byte[1];
      circularByteBuffer0.read(byteArray0, 0, (int) (byte)0);
      assertEquals(1, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 0, 2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 0
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte) (-67));
      circularByteBuffer0.add((byte)70);
      byte byte0 = circularByteBuffer0.read();
      assertTrue(circularByteBuffer0.hasBytes());
      assertEquals((byte) (-67), byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      circularByteBuffer0.add((byte)0);
      circularByteBuffer0.read();
      circularByteBuffer0.add((byte) (-10));
      int int0 = circularByteBuffer0.getSpace();
      assertTrue(circularByteBuffer0.hasBytes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte) (-1));
      int int0 = circularByteBuffer0.getCurrentNumberOfBytes();
      assertEquals(8191, circularByteBuffer0.getSpace());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.read((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek((byte[]) null, 1507, 1507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      // Undeclared exception!
      try { 
        circularByteBuffer0.add((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[16];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = null;
      try {
        circularByteBuffer0 = new CircularByteBuffer((-1379));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte) (-56));
      boolean boolean0 = circularByteBuffer0.hasBytes();
      assertEquals(1, circularByteBuffer0.getCurrentNumberOfBytes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      boolean boolean0 = circularByteBuffer0.hasBytes();
      assertFalse(boolean0);
      assertEquals(0, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(22);
      boolean boolean0 = circularByteBuffer0.hasSpace(22);
      assertEquals(22, circularByteBuffer0.getSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(4);
      circularByteBuffer0.add((byte)0);
      boolean boolean0 = circularByteBuffer0.hasSpace(4);
      assertEquals(3, circularByteBuffer0.getSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      circularByteBuffer0.add((byte)0);
      circularByteBuffer0.read();
      boolean boolean0 = circularByteBuffer0.hasSpace();
      assertFalse(circularByteBuffer0.hasBytes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      boolean boolean0 = circularByteBuffer0.hasSpace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 0, 1203);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No space available
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, (int) (byte)0, (-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -668
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 8
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: -1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, 1, 1);
      assertTrue(boolean0);
      assertEquals(1, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, 1240);
      assertEquals(8192, circularByteBuffer0.getSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (byte)0, 1240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte)79);
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, (byte)0);
      assertEquals(1, circularByteBuffer0.getCurrentNumberOfBytes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, 0, 932);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: 932
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (byte)0, (byte) (-103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -103
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(3761);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, 3761, 3761);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 3761
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, 0);
      assertTrue(boolean0);
      assertEquals(1, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (-48), 2798);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: -48
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      circularByteBuffer0.add((byte)0);
      circularByteBuffer0.read();
      byte[] byteArray0 = new byte[20];
      circularByteBuffer0.add(byteArray0, 0, 1);
      // Undeclared exception!
      try { 
        circularByteBuffer0.add((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No space available
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer((byte)1);
      circularByteBuffer0.add((byte)1);
      byte[] byteArray0 = new byte[1];
      circularByteBuffer0.read(byteArray0, 0, (int) (byte)1);
      assertEquals(1, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[3];
      circularByteBuffer0.add(byteArray0, 1, 1);
      assertEquals(8191, circularByteBuffer0.getSpace());
      
      circularByteBuffer0.read(byteArray0, 0, 1);
      assertEquals(0, circularByteBuffer0.getCurrentNumberOfBytes());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, (int) (byte)0, (int) (byte)16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied byte array contains only 3 bytes, but offset, and length would require 15
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: 4
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: 1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Currently, there are only 0in the buffer, not 1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, (int) (byte) (-14), (int) (byte) (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset: -14
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte) (-8));
      circularByteBuffer0.read();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (byte)0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer((byte)1);
      circularByteBuffer0.add((byte)1);
      assertTrue(circularByteBuffer0.hasBytes());
      
      byte byte0 = circularByteBuffer0.read();
      assertFalse(circularByteBuffer0.hasBytes());
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      int int0 = circularByteBuffer0.getCurrentNumberOfBytes();
      assertEquals(0, int0);
      assertEquals(1, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      circularByteBuffer0.clear();
      assertEquals(1, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No bytes available.
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(1);
      int int0 = circularByteBuffer0.getSpace();
      assertEquals(1, int0);
  }
}
