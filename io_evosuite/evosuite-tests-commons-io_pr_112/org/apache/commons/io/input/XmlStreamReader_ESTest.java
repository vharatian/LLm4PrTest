/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:31:51 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.Enumeration;
import org.apache.commons.io.input.XmlStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class XmlStreamReader_ESTest extends XmlStreamReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime(";AqCto]gk^,O-RIL");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      try { 
        xmlStreamReader0.calculateHttpEncoding("JX1Ngwz", "<?xml.*encoding[s]*=[s]*((?:\".[^\"]*\")|(?:'.[^']*'))", "JX1Ngwz", "xx]3&vV", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, CT-MIME [JX1Ngwz] CT-Enc [null] BOM [<?xml.*encoding[s]*=[s]*((?:\".[^\"]*\")|(?:'.[^']*'))] XML guess [JX1Ngwz] XML prolog [xx]3&vV], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "kj^+4", true);
      String string0 = xmlStreamReader0.calculateHttpEncoding(":{\"SYk", ":{\"SYk", "kj^+4", "6775)8Vn", true);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
      assertEquals("6775)8Vn", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vo+/_h'", "vo+/_h'");
      File file0 = MockFile.createTempFile("vo+/_h'", (String) null, (File) mockFile0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(file0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        xmlStreamReader0.read(charArray0, 6, 778);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, (String) null);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
      assertNull(xmlStreamReader0.getDefaultEncoding());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "");
      char[] charArray0 = new char[6];
      int int0 = xmlStreamReader0.read(charArray0, (int) (byte)0, (int) (byte)0);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("last-modified");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, "CP1047", true, "CP1047");
      String string0 = xmlStreamReader0.getDefaultEncoding();
      assertEquals("CP1047", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime("?");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeEncoding("8`&_6T2w$Hd_4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "");
      xmlStreamReader0.calculateHttpEncoding("", "", "", "", true);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((URLConnection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conm
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRLConnection0, "application/Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess[{3}] ML prolog [{4}], encoding mismatch");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, false, "application/GFW&Ixfd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1862), 10);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, "H,K!KacJL7 |q'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, "cnVKj9lZ<2g=^ ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, false, "h<d?b9FIbz1Y8Ls{]K");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1968936446), (-360807349));
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "=ecD", true, "=ecD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-661), 2616);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "lhrr1=`=BMlvI$Fa", true, "UTF-8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "UTF-8", false, "UTF-32");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, ")}:0lP2RF]v", false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [)}:0lP2RF]v] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-69), 2);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(mockFileInputStream0, " <?A+V9W", false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "*\"t]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "\"V6");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2196), 9);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1599);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("XML prolog or ROOT element not found on first ");
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, "junit", true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", "<?A+V", "text/xml-external-parsed-entity");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [<?A+V] XML prolog [text/xml-external-parsed-entity] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("text/xml-external-parsed-entity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/GFW&Ixfd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/xml-external-parsed-entity", false, "application/xml-external-parsed-entity");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(bufferedInputStream0, "text/xml");
      xmlStreamReader0.calculateHttpEncoding("text/xml", "text/xml", "text/xml", "text/xml", false);
      assertEquals("US-ASCII", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, "text/html9,r-{+xml", true, "text/html9,r-{+xml");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateHttpEncoding("application/xml-external-parsed-entity", "text/", "application/xml-external-parsed-entity", "application/xml-external-parsed-entity", true);
      assertEquals("application/xml-external-parsed-entity", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32BE", "UTF-32BE", "UF-+2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32BE] XML guess [UTF-32BE] XML prolog [UF-+2] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-p?SelbKqzD4m@1");
      File file0 = MockFile.createTempFile("UTF-32BE", "UTF-32BE", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(mockFileInputStream0, false);
      xmlStreamReader0.calculateRawEncoding("UTF-32LE", "UTF-32LE", "UTF-32LE");
      assertEquals((-2), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, false);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32LE", "D2zVy", "8;-");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32LE] XML guess [D2zVy] XML prolog [8;-] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-32BE", "UTF-32BE", "UTF-32");
      assertEquals("UTF-32BE", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-16LE", (String) null, (String) null);
      assertEquals("UTF-16LE", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16LE", "<?A+V", "^yb7&yvEl7F!]o{yR#;");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16LE] XML guess [<?A+V] XML prolog [^yb7&yvEl7F!]o{yR#;] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16BE", "Annotation type already mapped: ", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16BE] XML guess [Annotation type already mapped: ] XML prolog [null] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, false);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", (String) null, "G4zA");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [null] XML prolog [G4zA] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 918);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0, "application/Jhi+xml", true, "<?A+V");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vo+/_h'", "vo+/_h'");
      File file0 = MockFile.createTempFile("vo+/_h'", (String) null, (File) mockFile0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(file0);
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "NP8zi4W].S", (String) null);
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "UTF-16LE", "{&]#IqDE");
      assertNotNull(string0);
      assertEquals("{&]#IqDE", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      try { 
        xmlStreamReader0.calculateRawEncoding("<?A+V", "<?A+V", "application/xml-dtd");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [<?A+V] XML guess [<?A+V] XML prolog [application/xml-dtd] unknown BOM
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 918);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0, "text/htmlapplicotion/qd'Y2eu", true, (String) null);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null, true, "@$KiQ(j&2mRpj=^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "t;rO-gt5XkNLYWm", false, "text/html(Qx");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [t] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conm
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      // Undeclared exception!
      try { 
        xmlStreamReader0.read((char[]) null, 318, 318);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "");
      xmlStreamReader0.close();
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/xml-dtd", false);
      String string0 = xmlStreamReader0.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile(" <?A+V9W", " <?A+V9W", (File) mockFile0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(file0);
      String string0 = xmlStreamReader0.getDefaultEncoding();
      assertNull(string0);
  }
}
