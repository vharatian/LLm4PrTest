/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:42:55 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.io.output.TaggedWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TaggedWriter_ESTest extends TaggedWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TaggedWriter taggedWriter0 = new TaggedWriter(stringWriter0);
      // Undeclared exception!
      try { 
        taggedWriter0.handleIOException((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.TaggedIOException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TaggedWriter taggedWriter0 = null;
      try {
        taggedWriter0 = new TaggedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The filters must not be null");
      TaggedWriter taggedWriter0 = new TaggedWriter(mockPrintWriter0);
      MockException mockException0 = new MockException();
      MockIOException mockIOException0 = new MockIOException("c0ME_Up`q", mockException0);
      try { 
        taggedWriter0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // c0ME_Up`q
         //
         verifyException("org.apache.commons.io.output.TaggedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The filters must not be null");
      TaggedWriter taggedWriter0 = new TaggedWriter(mockPrintWriter0);
      MockException mockException0 = new MockException();
      MockIOException mockIOException0 = new MockIOException("c0ME_Up`q", mockException0);
      taggedWriter0.throwIfCauseOf(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TaggedWriter taggedWriter0 = new TaggedWriter(stringWriter0);
      boolean boolean0 = taggedWriter0.isCauseOf((Exception) null);
      assertFalse(boolean0);
  }
}
