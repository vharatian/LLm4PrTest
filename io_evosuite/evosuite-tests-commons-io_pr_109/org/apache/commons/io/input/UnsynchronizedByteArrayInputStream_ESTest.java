/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:37:12 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnsynchronizedByteArrayInputStream_ESTest extends UnsynchronizedByteArrayInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 1);
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray0);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 2699, 2699);
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 255, (byte)0);
      int int0 = unsynchronizedByteArrayInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[2];
      unsynchronizedByteArrayInputStream0.read(byteArray1);
      int int0 = unsynchronizedByteArrayInputStream0.available();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 1, 1871);
      int int0 = unsynchronizedByteArrayInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0, 0);
      assertTrue(unsynchronizedByteArrayInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 1, 1871);
      long long0 = unsynchronizedByteArrayInputStream0.skip(1);
      assertEquals((-1L), long0);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      int int0 = unsynchronizedByteArrayInputStream0.read();
      assertEquals(255, int0);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.read((byte[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.read(byteArray0, 2146923386, 2146923386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = null;
      try {
        unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = null;
      try {
        unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream((byte[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = null;
      try {
        unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0);
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray0, 0, 1);
      assertEquals(1, int0);
      
      long long0 = unsynchronizedByteArrayInputStream0.skip(0);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (byte)126);
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0);
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray0, 1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0);
      long long0 = unsynchronizedByteArrayInputStream0.skip(0);
      assertEquals(1, unsynchronizedByteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skipping backward is not supported
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[0];
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray1);
      assertEquals(17, unsynchronizedByteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (byte)0);
      int int0 = unsynchronizedByteArrayInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.read(byteArray0, 0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 2699, 2699);
      byte[] byteArray1 = new byte[3];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.read(byteArray1, (int) (byte) (-1), 2699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0);
      assertEquals(1, unsynchronizedByteArrayInputStream0.available());
      
      unsynchronizedByteArrayInputStream0.skip(2990L);
      int int0 = unsynchronizedByteArrayInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 11, 11);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 23, 23);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayInputStream0.read(byteArray0, 23, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = null;
      try {
        unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = null;
      try {
        unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0, (-240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length cannot be negative
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (byte)0);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
      
      int int0 = unsynchronizedByteArrayInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = null;
      try {
        unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      unsynchronizedByteArrayInputStream0.reset();
      assertEquals(3, unsynchronizedByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, 0);
      boolean boolean0 = unsynchronizedByteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(1, unsynchronizedByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0);
      int int0 = unsynchronizedByteArrayInputStream0.read();
      assertEquals(0, int0);
      assertEquals(0, unsynchronizedByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      UnsynchronizedByteArrayInputStream unsynchronizedByteArrayInputStream0 = new UnsynchronizedByteArrayInputStream(byteArray0, (byte)0);
      unsynchronizedByteArrayInputStream0.mark(4);
      assertEquals(17, unsynchronizedByteArrayInputStream0.available());
  }
}
