/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:44:06 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnsynchronizedByteArrayOutputStream_ESTest extends UnsynchronizedByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(3934);
      byte[] byteArray0 = new byte[9];
      unsynchronizedByteArrayOutputStream0.write(byteArray0, 1, (int) (byte)4);
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = unsynchronizedByteArrayOutputStream0.write((InputStream) byteArrayInputStream0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      InputStream inputStream1 = UnsynchronizedByteArrayOutputStream.toBufferedInputStream(inputStream0, 3934);
      assertNotSame(inputStream0, inputStream1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      InputStream inputStream1 = UnsynchronizedByteArrayOutputStream.toBufferedInputStream(inputStream0);
      assertNotSame(inputStream1, inputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, 2572, (-451));
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals((-451), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", false);
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((byte[]) null, 467, 467);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      unsynchronizedByteArrayOutputStream0.write((InputStream) mockFileInputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.needNewBuffer(0);
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        unsynchronizedByteArrayOutputStream0.write((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.needNewBuffer(0);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1024
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = (-547);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toInputStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length cannot be negative
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, 2572, (-451));
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toByteArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
      UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) bufferedInputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1565), (byte)7);
      // Undeclared exception!
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) pipedInputStream0, 1024);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-96), 1783);
      // Undeclared exception!
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = null;
      try {
        unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream((-789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -789
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(byteArray0, 0, 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(byteArray0, 1, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(byteArray0, 201, 201);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((byte[]) null, (-1106), (-1106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) pipedInputStream0, (-528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -528
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      int int0 = unsynchronizedByteArrayOutputStream0.write(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2406);
      try { 
        UnsynchronizedByteArrayOutputStream.toBufferedInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write((-2382));
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      assertEquals(2, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.reset();
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("str1");
      unsynchronizedByteArrayOutputStream0.writeTo(mockPrintStream0);
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }
}
