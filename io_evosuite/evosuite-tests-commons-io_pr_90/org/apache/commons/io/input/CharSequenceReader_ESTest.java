/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:30:16 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.io.input.CharSequenceReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceReader_ESTest extends CharSequenceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      char[] charArray0 = new char[5];
      stringBuilder0.append(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      charSequenceReader0.read();
      long long0 = charSequenceReader0.skip(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      long long0 = charSequenceReader0.skip(1818L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceReader0.read(charBuffer0);
      int int0 = charSequenceReader0.read(charArray0);
      assertArrayEquals(new char[] {'.', ']', '[', '>', '<'}, charArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.append('K');
      char[] charArray0 = new char[5];
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) stringBuilder1);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer1);
      int int0 = charSequenceReader0.read(charArray0, 1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(2313);
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1);
      String string0 = charSequenceReader0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      long long0 = charSequenceReader0.skip(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      char[] charArray0 = new char[8];
      int int0 = charSequenceReader0.read(charArray0, 0, 8);
      assertArrayEquals(new char[] {'3', 'V', 'Z', '>', '<', '.', ']', '['}, charArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      stringBuilder0.append('K');
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      int int0 = charSequenceReader0.read();
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2796);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read(charBuffer0);
      long long0 = charSequenceReader0.skip(864L);
      assertEquals(0, charBuffer0.remaining());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.skip((-1413L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of characters to skip is less than zero: -1413
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2796);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      long long0 = charSequenceReader0.skip(864L);
      assertEquals(864L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(18);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read();
      int int0 = charSequenceReader0.read(charBuffer0);
      assertEquals("\u0000", charSequenceReader0.toString());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Number of characters to skip is less than zero: ");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 2122219134, 2122219134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('-');
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      char[] charArray0 = new char[0];
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceReader0.read(charBuffer0);
      CharSequenceReader charSequenceReader1 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader1.read(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 2866, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=4, offset=2866, length=0
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(18);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-656), 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-656, length=18
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(244);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-1, length=-1
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.appendCodePoint(1310);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read((char[]) null, 1310, 1310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Character array is missing
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read(charBuffer0);
      int int0 = charSequenceReader0.read();
      assertEquals(0, charBuffer0.remaining());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2796);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read(charBuffer0);
      int int0 = charSequenceReader0.read((char[]) null, 2796, 2796);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null);
      assertEquals("", charSequenceReader0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      charSequenceReader0.mark(0);
      assertEquals("3VZ><.][", charSequenceReader0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      charSequenceReader0.reset();
      assertEquals("3VZ><.][", charSequenceReader0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(2313);
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      String string0 = charSequenceReader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      boolean boolean0 = charSequenceReader0.markSupported();
      assertTrue(boolean0);
      assertEquals("3VZ><.][", charSequenceReader0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("3VZ><.][");
      charSequenceReader0.close();
      assertEquals("3VZ><.][", charSequenceReader0.toString());
  }
}
