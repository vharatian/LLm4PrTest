/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:45:45 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.output.FilterCollectionWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilterCollectionWriter_ESTest extends FilterCollectionWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      Writer[] writerArray0 = new Writer[1];
      StringWriter stringWriter0 = new StringWriter();
      writerArray0[0] = (Writer) stringWriter0;
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(writerArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      filterCollectionWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        filterCollectionWriter0.append((CharSequence) stringBuffer1, 2483, 2483);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2483
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.write("_");
      filterCollectionWriter0.write("6b\"OCq&?]I_TMs(", 2, 2);
      linkedList0.add((Writer) null);
      linkedList0.add((Writer) filterCollectionWriter0);
      Writer[] writerArray0 = new Writer[7];
      writerArray0[0] = (Writer) filterCollectionWriter0;
      writerArray0[1] = (Writer) filterCollectionWriter0;
      writerArray0[2] = (Writer) filterCollectionWriter0;
      writerArray0[3] = (Writer) filterCollectionWriter0;
      writerArray0[4] = (Writer) filterCollectionWriter0;
      writerArray0[5] = null;
      writerArray0[6] = null;
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(writerArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '-';
      charArray0[2] = '$';
      charArray0[3] = '3';
      // Undeclared exception!
      try { 
        filterCollectionWriter1.write(charArray0, 0, (-1501));
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Writer[] writerArray0 = new Writer[3];
      StringWriter stringWriter0 = new StringWriter();
      writerArray0[0] = (Writer) stringWriter0;
      CharBuffer charBuffer0 = CharBuffer.allocate(47);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      writerArray0[1] = (Writer) stringWriter1;
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      CharBuffer.allocate(3117);
      Writer writer0 = filterCollectionWriter0.append('&');
      writerArray0[2] = writer0;
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(writerArray0);
      filterCollectionWriter1.close();
      // Undeclared exception!
      try { 
        filterCollectionWriter1.append((CharSequence) charBuffer0, 47, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '5';
      charArray0[2] = 'Q';
      charArray0[3] = '{';
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.addFirst(stringWriter0);
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      charBuffer0.rewind();
      // Undeclared exception!
      try { 
        filterCollectionWriter0.append((CharSequence) charBuffer0, 0, 187);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.flush();
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.addFirst(stringWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1342);
      filterCollectionWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        filterCollectionWriter0.write("Cannot cache vNid result for ", 0, 76);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.close();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      filterCollectionWriter0.write(0);
      filterCollectionWriter0.append((CharSequence) charBuffer0);
      filterCollectionWriter0.write("org.apache.commons.io.output.FilterCollectionWriter");
      filterCollectionWriter0.append((CharSequence) charBuffer0);
      filterCollectionWriter0.flush();
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.addFirst(stringWriter0);
      filterCollectionWriter0.append('D');
      filterCollectionWriter0.write("H9Pb5r");
      // Undeclared exception!
      try { 
        filterCollectionWriter0.write("", 0, (-9));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      filterCollectionWriter0.write(charArray0);
      linkedList0.add((Writer) filterCollectionWriter0);
      CharSequence charSequence0 = null;
      filterCollectionWriter0.append(charSequence0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Writer[] writerArray0 = new Writer[2];
      StringWriter stringWriter0 = new StringWriter(416);
      writerArray0[0] = (Writer) stringWriter0;
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter((Collection<Writer>) null);
      writerArray0[1] = (Writer) filterCollectionWriter0;
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(writerArray0);
      filterCollectionWriter1.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 'Q';
      charArray0[2] = 'Y';
      charArray0[3] = ':';
      charArray0[4] = 'L';
      filterCollectionWriter0.write(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = '<';
      charArray1[1] = '5';
      charArray1[2] = 'g';
      charArray1[3] = 's';
      charArray1[4] = '6';
      charArray1[5] = 'y';
      filterCollectionWriter1.write(charArray1);
      CharBuffer charBuffer0 = CharBuffer.allocate(416);
      charBuffer0.order();
      filterCollectionWriter0.append((CharSequence) charBuffer0, 182, (-1322));
      filterCollectionWriter1.write(2956);
      filterCollectionWriter0.close();
      assertNotSame(filterCollectionWriter0, filterCollectionWriter1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Writer[] writerArray0 = new Writer[0];
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(writerArray0);
      filterCollectionWriter0.close();
      filterCollectionWriter0.write((-2012));
      filterCollectionWriter0.write(")}t&[.1}", (-4363), 91);
      filterCollectionWriter0.write(91);
      filterCollectionWriter0.append((CharSequence) null, (-2012), (-2012));
      filterCollectionWriter0.append('9');
      filterCollectionWriter0.append((CharSequence) null);
      filterCollectionWriter0.write((char[]) null);
      filterCollectionWriter0.append((CharSequence) null);
      filterCollectionWriter0.close();
      filterCollectionWriter0.append('!');
      filterCollectionWriter0.write((char[]) null);
      filterCollectionWriter0.write((-2012));
      filterCollectionWriter0.write(")}t&[.1}");
      filterCollectionWriter0.write("O:>");
      Writer writer0 = filterCollectionWriter0.append('j');
      filterCollectionWriter0.write(91);
      filterCollectionWriter0.close();
      assertSame(filterCollectionWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter((Collection<Writer>) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList1.add(object0);
      linkedList1.iterator();
      linkedList0.removeAll(linkedList1);
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      linkedList0.add((Writer) filterCollectionWriter0);
      String string0 = null;
      filterCollectionWriter0.write(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      linkedList0.add((Writer) filterCollectionWriter0);
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(linkedList0);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'U';
      charArray0[2] = '[';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      int int1 = (-3388);
      // Undeclared exception!
      try { 
        filterCollectionWriter0.append((CharSequence) charBuffer0, int0, int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Writer writer0 = filterCollectionWriter0.append((CharSequence) charBuffer0, 0, 0);
      assertSame(writer0, filterCollectionWriter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      char[] charArray0 = new char[0];
      filterCollectionWriter0.write(charArray0);
      filterCollectionWriter0.write(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.close();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      filterCollectionWriter0.write(0);
      filterCollectionWriter0.append((CharSequence) charBuffer0);
      filterCollectionWriter0.write("org.apache.commons.io.output.FilterCollectionWriter");
      filterCollectionWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '5';
      charArray0[2] = 'Q';
      charArray0[3] = '{';
      filterCollectionWriter0.write(charArray0);
      filterCollectionWriter0.flush();
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.addFirst(stringWriter0);
      Writer writer0 = filterCollectionWriter0.append('D');
      filterCollectionWriter0.write("H9Pb5r");
      filterCollectionWriter0.write("", 0, 0);
      assertSame(filterCollectionWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.write("38_Um[v9H9%*H{fC$P3", 281, 281);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.write(0);
      filterCollectionWriter0.write(")'Z~", 0, 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Writer[] writerArray0 = new Writer[5];
      StringWriter stringWriter0 = new StringWriter();
      writerArray0[0] = (Writer) stringWriter0;
      StringWriter stringWriter1 = new StringWriter();
      writerArray0[1] = (Writer) stringWriter1;
      stringWriter0.write(0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      writerArray0[2] = (Writer) stringWriter2;
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) null);
      stringWriter2.write("k5\"h4%umO_qqi Q");
      writerArray0[3] = (Writer) stringWriter3;
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      writerArray0[4] = (Writer) filterCollectionWriter0;
      stringWriter3.close();
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(writerArray0);
      filterCollectionWriter1.write(0);
      filterCollectionWriter0.write(0);
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'L';
      charArray0[2] = '\\';
      filterCollectionWriter1.write(charArray0, 0, 0);
      assertArrayEquals(new char[] {'%', 'L', '\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Writer[] writerArray0 = new Writer[4];
      int int0 = 2334;
      CharBuffer charBuffer0 = CharBuffer.allocate(2334);
      StringWriter stringWriter0 = new StringWriter(2357);
      writerArray0[2] = (Writer) stringWriter0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 2334);
      writerArray0[3] = (Writer) stringWriter1;
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(writerArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'Q';
      charArray0[2] = '2';
      charArray0[3] = 'Q';
      // Undeclared exception!
      try { 
        filterCollectionWriter0.write(charArray0, 0, 2357);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      Writer[] writerArray0 = new Writer[0];
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(writerArray0);
      linkedList0.push(filterCollectionWriter0);
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(linkedList0);
      assertFalse(filterCollectionWriter1.equals((Object)filterCollectionWriter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Writer[] writerArray0 = new Writer[7];
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'd';
      charArray0[2] = 'm';
      charArray0[3] = 'K';
      charArray0[4] = 'y';
      charArray0[5] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      StringWriter stringWriter2 = stringWriter1.append('+');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0, 0, 0);
      writerArray0[0] = (Writer) stringWriter3;
      StringWriter stringWriter4 = stringWriter1.append((CharSequence) charBuffer0);
      StringWriter stringWriter5 = stringWriter4.append('c');
      writerArray0[1] = (Writer) stringWriter5;
      StringWriter stringWriter6 = new StringWriter(1);
      writerArray0[2] = (Writer) stringWriter6;
      StringWriter stringWriter7 = new StringWriter(1);
      writerArray0[3] = (Writer) stringWriter7;
      StringWriter stringWriter8 = new StringWriter();
      writerArray0[4] = (Writer) stringWriter8;
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      writerArray0[5] = (Writer) filterCollectionWriter0;
      Writer writer0 = filterCollectionWriter0.append((CharSequence) charBuffer0);
      writerArray0[6] = writer0;
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(writerArray0);
      // Undeclared exception!
      try { 
        filterCollectionWriter1.write(charArray0, 939, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      Writer writer0 = filterCollectionWriter0.append((CharSequence) null);
      assertSame(filterCollectionWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter((Writer[]) null);
      Writer writer0 = filterCollectionWriter0.append('&');
      linkedList0.add(writer0);
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(linkedList0);
      assertFalse(filterCollectionWriter1.equals((Object)filterCollectionWriter0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter((Writer[]) null);
      char char0 = '\'';
      filterCollectionWriter0.close();
      filterCollectionWriter0.append('\'');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        charBuffer0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.close();
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(linkedList0);
      assertFalse(filterCollectionWriter1.equals((Object)filterCollectionWriter0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '4';
      filterCollectionWriter0.write(charArray0, 9, 9);
      assertArrayEquals(new char[] {'&', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'Q';
      charArray0[2] = '2';
      charArray0[3] = '=';
      filterCollectionWriter0.write(charArray0, 0, 0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.write(949);
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(linkedList0);
      assertFalse(filterCollectionWriter1.equals((Object)filterCollectionWriter0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.write("");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.write(949);
      filterCollectionWriter0.write("");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter((Collection<Writer>) null);
      filterCollectionWriter0.flush();
      char[] charArray0 = new char[2];
      filterCollectionWriter0.append('y');
      charArray0[0] = '4';
      charArray0[1] = '_';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.rewind();
      Writer writer0 = filterCollectionWriter0.append((CharSequence) charBuffer0);
      filterCollectionWriter0.write(charArray0);
      assertSame(filterCollectionWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      filterCollectionWriter0.flush();
      char[] charArray0 = new char[8];
      FilterCollectionWriter filterCollectionWriter1 = new FilterCollectionWriter(linkedList0);
      assertFalse(filterCollectionWriter1.equals((Object)filterCollectionWriter0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      Writer writer0 = filterCollectionWriter0.append('H');
      assertSame(writer0, filterCollectionWriter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Writer> linkedList0 = new LinkedList<Writer>();
      FilterCollectionWriter filterCollectionWriter0 = new FilterCollectionWriter(linkedList0);
      char[] charArray0 = new char[2];
      filterCollectionWriter0.flush();
      charArray0[0] = ',';
      charArray0[1] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = 76;
      charBuffer0.duplicate();
      int int1 = 5;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 76, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
