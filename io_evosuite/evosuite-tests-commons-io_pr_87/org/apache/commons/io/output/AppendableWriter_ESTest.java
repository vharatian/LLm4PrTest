/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:36:07 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.apache.commons.io.output.AppendableWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AppendableWriter_ESTest extends AppendableWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        appendableWriter0.write(charArray0, 0, 1716);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=4, offset=0, length=1716
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      char[] charArray0 = new char[0];
      appendableWriter0.write(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      char[] charArray0 = new char[2];
      appendableWriter0.write(charArray0, 1, 1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      appendableWriter0.write("TEuSZ-O.i>&^72+0", 4, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      appendableWriter0.write("8oxkH9FAU4");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      appendableWriter0.write(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      PipedWriter pipedWriter0 = appendableWriter0.getAppendable();
      assertNull(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(31);
      Writer writer0 = appendableWriter0.append((CharSequence) charBuffer0, 0, 31);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      // Undeclared exception!
      try { 
        appendableWriter0.write((char[]) null, (-2426), (-2426));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Character array is missing
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        appendableWriter0.write(charArray0, (-617), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -617
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      char[] charArray0 = new char[5];
      try { 
        appendableWriter0.write(charArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      // Undeclared exception!
      try { 
        appendableWriter0.write("Character array is missing", 375, 375);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      // Undeclared exception!
      try { 
        appendableWriter0.write("", 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      try { 
        appendableWriter0.write("'BM>YZM", 2, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      try { 
        appendableWriter0.write((-1770));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      // Undeclared exception!
      try { 
        appendableWriter0.append((CharSequence) null, 1609, 856);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        appendableWriter0.append((CharSequence) charBuffer0, 1, 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1862);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      try { 
        appendableWriter0.append((CharSequence) charBuffer0, 7, 7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      // Undeclared exception!
      try { 
        appendableWriter0.append((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      try { 
        appendableWriter0.append((CharSequence) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      // Undeclared exception!
      try { 
        appendableWriter0.append(';');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      try { 
        appendableWriter0.append('!');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      char[] charArray0 = new char[3];
      appendableWriter0.write(charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        appendableWriter0.write(charArray0, (-26), (-26));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=8, offset=-26, length=-26
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      PipedWriter pipedWriter1 = appendableWriter0.getAppendable();
      assertSame(pipedWriter0, pipedWriter1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      Writer writer0 = appendableWriter0.append('I');
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      // Undeclared exception!
      try { 
        appendableWriter0.append((CharSequence) null, 321, 321);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      Writer writer0 = appendableWriter0.append((CharSequence) "net.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>(pipedWriter0);
      appendableWriter0.flush();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      // Undeclared exception!
      try { 
        appendableWriter0.write((-689));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AppendableWriter<PipedWriter> appendableWriter0 = new AppendableWriter<PipedWriter>((PipedWriter) null);
      appendableWriter0.close();
  }
}
