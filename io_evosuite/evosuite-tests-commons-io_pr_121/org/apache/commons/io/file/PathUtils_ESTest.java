/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:47:16 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.CopyOption;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.NotDirectoryException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.PathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&po=6|f", "&po=6|f");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("&po=6|f", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f/&po=6|f", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      MockFile mockFile1 = new MockFile("&po=6|f", "&po=6|f");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      Path path1 = mockFile1.toPath();
      assertNotNull(path1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f/&po=6|f", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("&po=6|f", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertTrue(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(path0, path1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("&po=6|f", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f/&po=6|f", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f/&po=6|f", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("&po=6|f", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=6|f", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(path0.equals((Object)path1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertTrue(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("! dp?xE3lY1Jvor\"r/Q", "XwMT-", (File) null);
          assertNotNull(file0);
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r", file0.getParent());
          assertEquals("Q0XwMT-", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-", file0.toString());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          
          MockFile mockFile0 = new MockFile(file0, "! dp?xE3lY1Jvor\"r/Q");
          assertNotNull(mockFile0);
          assertFalse(mockFile0.equals((Object)file0));
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          Path path0 = file0.toPath();
          assertNotNull(path0);
          assertNotSame(file0, mockFile0);
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r", file0.getParent());
          assertEquals("Q0XwMT-", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-", file0.toString());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.equals((Object)mockFile0));
          
          Path path1 = mockFile0.toPath();
          assertNotNull(path1);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r", file0.getParent());
          assertEquals("Q0XwMT-", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-", file0.toString());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-/! dp?xE3lY1Jvor\"r/Q", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.canRead());
          assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-/! dp?xE3lY1Jvor\"r", mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals("Q", mockFile0.getName());
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path1, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-/Q\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:205)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&po=A6|f3", "&po=A6|f3");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3/&po=A6|f3", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3", mockFile0.getParent());
      assertEquals("&po=A6|f3", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      MockFile mockFile1 = new MockFile("&po=A6|f3", "&po=A6|f3");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      Path path1 = mockFile1.toPath();
      assertNotNull(path1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertEquals("&po=A6|f3", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3/&po=A6|f3", mockFile1.toString());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertTrue(path1.equals((Object)path0));
      
      try { 
        PathUtils.copyDirectory(path1, path0, linkOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "h`c0kEp");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/h`c0kEp", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("h`c0kEp", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      
      MockFile mockFile1 = new MockFile("");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path1 = mockFile1.toPath();
      assertNotNull(path1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(path0, path1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertTrue(boolean0);
      assertEquals("/h`c0kEp", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("h`c0kEp", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(path0.equals((Object)path1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      String[] stringArray0 = new String[0];
      SimpleFileVisitor<Path> simpleFileVisitor0 = PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, "", stringArray0);
      assertNotNull(simpleFileVisitor0);
      assertSame(accumulatorPathVisitor0, simpleFileVisitor0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertNotNull(set0);
      assertEquals(0, fileVisitOptionArray0.length);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertNotNull(set0);
      assertEquals(1, fileVisitOptionArray0.length);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eGmuR[;9%");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("eGmuR[;9%", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("eGmuR[;9%", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0, (-216), linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
      assertEquals(2, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("eGmuR[;9%", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("eGmuR[;9%", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils$1", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("org.apache.commons.io.file.PathUtils$1", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils$1", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path0, 1, (LinkOption[]) null, fileVisitOptionArray0);
      assertFalse(boolean0);
      assertEquals(0, fileVisitOptionArray0.length);
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("org.apache.commons.io.file.PathUtils$1", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils$1", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eGmuR[;9%");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("eGmuR[;9%", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("eGmuR[;9%", mockFile0.getName());
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 3152);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, (Path) null, (Set<FileVisitOption>) linkedHashSet0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      // Undeclared exception!
      PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, path0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withLongCounters();
      assertNotNull(countingPathVisitor0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) countingPathVisitor0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        PathUtils.relativize(list0, (Path) null, true, (Comparator<? super Path>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils", "org.apache.commons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils/org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals("r", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("r", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 827, (LinkOption[]) null, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      linkOptionArray0[2] = linkOptionArray0[0];
      linkOptionArray0[3] = linkOptionArray0[0];
      linkOptionArray0[4] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOptionArray0[1];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-1604), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".P4fuP5Q", ".P4fuP5Q");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/.P4fuP5Q", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/.P4fuP5Q/.P4fuP5Q", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(".P4fuP5Q", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isHidden());
      
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      
      // Undeclared exception!
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">=");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(">=", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(">=", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      CopyOption[] copyOptionArray0 = new CopyOption[6];
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      CopyOption[] copyOptionArray0 = new CopyOption[6];
      try { 
        PathUtils.copyFileToDirectory(uRL0, (Path) null, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      try { 
        PathUtils.copyFile(uRL0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot clear and set the following environment variable at the same time: ");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Cannot clear and set the following environment variable at the same time: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("Cannot clear and set the following environment variable at the same time: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      File file0 = MockFile.createTempFile("! dp?xE3lY1Jvor\"r/Q", "XwMT-", (File) null);
      assertNotNull(file0);
      assertEquals("Q0XwMT-", file0.getName());
      assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp/! dp?xE3lY1Jvor\"r", file0.getParent());
      
      Path path0 = file0.toPath();
      assertNotNull(path0);
      assertEquals("Q0XwMT-", file0.getName());
      assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp/! dp?xE3lY1Jvor\"r", file0.getParent());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals("Q0XwMT-", file0.getName());
      assertEquals("/tmp/! dp?xE3lY1Jvor\"r/Q0XwMT-", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp/! dp?xE3lY1Jvor\"r", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{sq;bD7aMAOlEk", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals("{sq;bD7aMAOlEk", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/{sq;bD7aMAOlEk", mockFile0.toString());
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(7, linkOptionArray0.length);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals("{sq;bD7aMAOlEk", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/{sq;bD7aMAOlEk", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(7, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[1];
      linkOptionArray0[4] = linkOptionArray0[1];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertTrue(boolean0);
      assertEquals(5, linkOptionArray0.length);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e9n!&8BfngAq6M|k{", "KB^j=$#R*W");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/e9n!&8BfngAq6M|k{", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/e9n!&8BfngAq6M|k{/KB^j=$#R*W", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("KB^j=$#R*W", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertFalse(boolean0);
      assertEquals(8, linkOptionArray0.length);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/e9n!&8BfngAq6M|k{", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/e9n!&8BfngAq6M|k{/KB^j=$#R*W", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("KB^j=$#R*W", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertTrue(boolean0);
      assertEquals(8, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils", "org.apache.commons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils/org.apache.commons.io.file.PathUtils", mockFile0.toString());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils/org.apache.commons.io.file.PathUtils\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:282)
             // sun.reflect.GeneratedMethodAccessor180.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, set0, (-1081));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withBigIntegerCounters();
      assertNotNull(countingPathVisitor0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) countingPathVisitor0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&po=A6|f3", "&po=A6|f3");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3/&po=A6|f3", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3", mockFile0.getParent());
      assertEquals("&po=A6|f3", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(path0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains(path0));
      assertFalse(list0.contains(path0));
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3/&po=A6|f3", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3", mockFile0.getParent());
      assertEquals("&po=A6|f3", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".P4fuP5Q");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(".P4fuP5Q", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(".P4fuP5Q", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isHidden());
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertNotNull(list0);
      assertFalse(list0.contains(path0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Path> list1 = PathUtils.relativize(list0, path0, false, (Comparator<? super Path>) null);
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(".P4fuP5Q", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(".P4fuP5Q", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isHidden());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&po=A6|f3");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("&po=A6|f3", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("&po=A6|f3", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&po=A6|f3", "&po=A6|f3");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3", mockFile0.getParent());
      assertEquals("&po=A6|f3", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3/&po=A6|f3", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0);
      assertTrue(boolean0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3", mockFile0.getParent());
      assertEquals("&po=A6|f3", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&po=A6|f3/&po=A6|f3", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GMT", "GMT");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("", "");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertEquals("", mockFile1.getName());
      assertEquals("/", mockFile1.toString());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("GMT", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GMT/GMT", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GMT", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOptionArray0[3];
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption0;
      linkOptionArray0[8] = linkOption0;
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(boolean0);
      assertEquals(9, linkOptionArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("GMT", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GMT/GMT", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GMT", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertEquals("", mockFile1.getName());
      assertEquals("/", mockFile1.toString());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q2n3$*M?~8zC", "Q2n3$*M?~8zC");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Q2n3$*M?~8zC", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Q2n3$*M?~8zC", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Q2n3$*M?~8zC/Q2n3$*M?~8zC", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Q2n3$*M?~8zC", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Q2n3$*M?~8zC", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Q2n3$*M?~8zC/Q2n3$*M?~8zC", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      MockFile mockFile0 = new MockFile("Kbm{1AL5");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("Kbm{1AL5", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("Kbm{1AL5", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(4, linkOptionArray0.length);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("Kbm{1AL5", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("Kbm{1AL5", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".P4fuP5Q");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(".P4fuP5Q", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(".P4fuP5Q", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
      assertEquals(7, linkOptionArray0.length);
      assertEquals(6, fileVisitOptionArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(".P4fuP5Q", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(".P4fuP5Q", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a8");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("a8", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("a8", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertFalse(boolean0);
      assertEquals(8, linkOptionArray0.length);
      assertEquals(3, fileVisitOptionArray0.length);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("a8", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("a8", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NotDirectoryException");
      
      } catch(NotDirectoryException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canWrite());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:99)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:35)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:535)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:265)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:254)
             // sun.reflect.GeneratedMethodAccessor181.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils", "org.apache.commons.io.file.PathUtils");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils", mockFile0.getParent());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils/org.apache.commons.io.file.PathUtils", mockFile0.toString());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.PathUtils/org.apache.commons.io.file.PathUtils\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:282)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:254)
             // sun.reflect.GeneratedMethodAccessor181.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H+Z<^]glA");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withLongCounters();
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) countingPathVisitor0, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0, 2146959487, linkOptionArray0, (FileVisitOption[]) null);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }
}
