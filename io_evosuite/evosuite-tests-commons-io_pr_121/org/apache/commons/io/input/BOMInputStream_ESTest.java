/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:51:44 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.io.ByteOrderMark;
import org.apache.commons.io.input.BOMInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BOMInputStream_ESTest extends BOMInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      long long0 = bOMInputStream0.skip((byte)113);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(pushbackInputStream0, true);
      long long0 = bOMInputStream0.skip(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.read(byteArray0);
      int int0 = bOMInputStream0.read(byteArray1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(pushbackInputStream0, true);
      BOMInputStream bOMInputStream1 = new BOMInputStream(bOMInputStream0, false);
      int int0 = bOMInputStream1.read(byteArray0);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[1];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_16LE;
      byteOrderMarkArray0[0] = byteOrderMark0;
      BOMInputStream bOMInputStream1 = new BOMInputStream(bOMInputStream0, false, byteOrderMarkArray0);
      int int0 = bOMInputStream1.read(byteArray0);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<BOMInputStream> enumeration0 = (Enumeration<BOMInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(sequenceInputStream0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      ByteOrderMark byteOrderMark0 = new ByteOrderMark("b$3wM!LZ9|M=", intArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[8];
      byteOrderMarkArray0[0] = byteOrderMark0;
      byteOrderMarkArray0[1] = byteOrderMark0;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      byteOrderMarkArray0[4] = byteOrderMark0;
      byteOrderMarkArray0[5] = byteOrderMark0;
      byteOrderMarkArray0[6] = byteOrderMark0;
      byteOrderMarkArray0[7] = byteOrderMark0;
      BOMInputStream bOMInputStream1 = new BOMInputStream(bOMInputStream0, byteOrderMarkArray0);
      boolean boolean0 = bOMInputStream1.hasBOM(byteOrderMark0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(pushbackInputStream0, byteOrderMarkArray0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(sequenceInputStream0);
      int int0 = bOMInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      int[] intArray0 = new int[6];
      ByteOrderMark byteOrderMark0 = new ByteOrderMark("| P=Y~`^X@%x+H7", intArray0);
      byteOrderMarkArray0[0] = byteOrderMark0;
      byteOrderMarkArray0[1] = byteOrderMarkArray0[0];
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMarkArray0[0];
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null, true, byteOrderMarkArray0);
      // Undeclared exception!
      try { 
        bOMInputStream0.skip(269L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BOMInputStream bOMInputStream0 = new BOMInputStream(dataInputStream0, false);
      // Undeclared exception!
      try { 
        bOMInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null, false);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0, 2775, 2775);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0, false);
      try { 
        bOMInputStream0.read((byte[]) null, 2888, 2888);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-2), 1253);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(dataInputStream0, true);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-229), (byte)52);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM(byteOrderMark0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-87), 40);
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, false);
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM(byteOrderMark0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      try { 
        bOMInputStream0.hasBOM(byteOrderMark0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(dataInputStream0, byteOrderMarkArray0);
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.hasBOM();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      // Undeclared exception!
      try { 
        bOMInputStream0.getBOMCharsetName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(dataInputStream0);
      try { 
        bOMInputStream0.getBOMCharsetName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(pushbackInputStream0, byteOrderMarkArray0);
      // Undeclared exception!
      try { 
        bOMInputStream0.getBOM();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2139255740), (-2139255740));
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.getBOM();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.getBOM();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream(pipedInputStream0, (ByteOrderMark[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No BOMs specified
         //
         verifyException("org.apache.commons.io.input.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[3];
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream(pipedInputStream0, false, byteOrderMarkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<BOMInputStream> enumeration0 = (Enumeration<BOMInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(sequenceInputStream0, true, byteOrderMarkArray0);
      byte[] byteArray0 = new byte[4];
      int int0 = bOMInputStream0.read(byteArray0, (-1252), (-3615));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(pushbackInputStream0, true);
      int int0 = bOMInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0, (-2371), 191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1583), 433);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0, (-1583), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.getBOM();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(3, int0);
      
      bOMInputStream0.getBOM();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.skip(52L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      long long0 = bOMInputStream0.skip((-812L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0, true);
      bOMInputStream0.mark((-240));
      try { 
        bOMInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null, true);
      // Undeclared exception!
      try { 
        bOMInputStream0.mark(2888);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(3, int0);
      
      bOMInputStream0.mark(3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[3];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_16LE;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = ByteOrderMark.UTF_32BE;
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMarkArray0[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, false, byteOrderMarkArray0);
      bOMInputStream0.getBOM();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      String string0 = bOMInputStream0.getBOMCharsetName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM((ByteOrderMark) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream not configure to detect null
         //
         verifyException("org.apache.commons.io.input.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      boolean boolean0 = bOMInputStream0.hasBOM();
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream(pipedInputStream0, false, (ByteOrderMark[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No BOMs specified
         //
         verifyException("org.apache.commons.io.input.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-2), 1253);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(dataInputStream0, true);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      BOMInputStream bOMInputStream1 = null;
      try {
        bOMInputStream1 = new BOMInputStream(bOMInputStream0, byteOrderMarkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, true);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
