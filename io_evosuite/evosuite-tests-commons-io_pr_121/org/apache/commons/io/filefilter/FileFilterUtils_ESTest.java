/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:49:28 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Vector;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.FileFilterUtils;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileFilterUtils_ESTest extends FileFilterUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.sizeRangeFileFilter(1048576L, 0L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0, (byte)33);
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeCVSAware(magicNumberFileFilter0);
      IOFileFilter iOFileFilter1 = FileFilterUtils.orFileFilter(iOFileFilter0, magicNumberFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.trueFileFilter();
      IOFileFilter iOFileFilter2 = FileFilterUtils.andFileFilter(iOFileFilter0, iOFileFilter1);
      assertNotNull(iOFileFilter2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[0];
      List<IOFileFilter> list0 = FileFilterUtils.toList(iOFileFilterArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      IOFileFilter iOFileFilter0 = FileFilterUtils.suffixFileFilter("lwk)n", iOCase0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.sizeFileFilter(163L, true);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.sizeFileFilter(1048576L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[4];
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      iOFileFilterArray0[0] = (IOFileFilter) directoryFileFilter0;
      MockDate mockDate0 = new MockDate(0, 1376, 2216, (-1), 1376, 1);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
      iOFileFilterArray0[1] = (IOFileFilter) ageFileFilter0;
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      iOFileFilterArray0[2] = (IOFileFilter) trueFileFilter0;
      String[] stringArray0 = new String[4];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      iOFileFilterArray0[3] = (IOFileFilter) suffixFileFilter0;
      IOFileFilter iOFileFilter0 = FileFilterUtils.or(iOFileFilterArray0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.notFileFilter(iOFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter(byteArray0, 0L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter(byteArray0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter("?^t!/", 985L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      MockFile mockFile0 = new MockFile("qBF!2ib%");
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      priorityQueue0.add(mockFile0);
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) trueFileFilter0, (Iterable<File>) priorityQueue0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      IOCase iOCase0 = IOCase.SENSITIVE;
      IOFileFilter iOFileFilter0 = FileFilterUtils.prefixFileFilter("", iOCase0);
      MockFile mockFile0 = new MockFile("");
      File[] fileArray0 = new File[6];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      fileArray0[4] = (File) mockFile0;
      fileArray0[5] = (File) mockFile0;
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) trueFileFilter0, fileArray0);
      List<File> list0 = FileFilterUtils.filterList(iOFileFilter0, (Iterable<File>) set0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.nameFileFilter("D6Q$e");
      File[] fileArray0 = new File[4];
      MockFile mockFile0 = new MockFile("", "C");
      fileArray0[0] = (File) mockFile0;
      MockFile mockFile1 = new MockFile("D6Q$e");
      fileArray0[1] = (File) mockFile1;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      File[] fileArray1 = FileFilterUtils.filter(iOFileFilter0, fileArray0);
      assertEquals(1, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.asFileFilter((FilenameFilter) iOFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.asFileFilter((FileFilter) iOFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[6];
      iOFileFilterArray0[0] = iOFileFilter0;
      iOFileFilterArray0[1] = iOFileFilter0;
      iOFileFilterArray0[2] = iOFileFilter0;
      iOFileFilterArray0[3] = iOFileFilter0;
      EmptyFileFilter emptyFileFilter0 = new EmptyFileFilter();
      iOFileFilterArray0[4] = (IOFileFilter) emptyFileFilter0;
      iOFileFilterArray0[5] = iOFileFilter0;
      IOFileFilter iOFileFilter1 = FileFilterUtils.and(iOFileFilterArray0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((Date) mockDate0, false);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((Date) mockDate0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("The filters must not be null", "uB8X5dH9:T");
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter(file0, false);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((File) mockFile0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.suffixFileFilter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The suffix must not be null
         //
         verifyException("org.apache.commons.io.filefilter.SuffixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.prefixFileFilter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prefix must not be null
         //
         verifyException("org.apache.commons.io.filefilter.PrefixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        FileFilterUtils.nameFileFilter((String) null, iOCase0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The wildcard must not be null
         //
         verifyException("org.apache.commons.io.filefilter.NameFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.nameFileFilter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The wildcard must not be null
         //
         verifyException("org.apache.commons.io.filefilter.NameFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number cannot be null
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      File[] fileArray0 = new File[9];
      // Undeclared exception!
      try { 
        FileFilterUtils.filterSet((IOFileFilter) falseFileFilter0, fileArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file array contains null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      MockFile mockFile0 = new MockFile("File '", "");
      File[] fileArray0 = new File[8];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      fileArray0[4] = (File) mockFile0;
      fileArray0[5] = (File) mockFile0;
      fileArray0[6] = (File) mockFile0;
      fileArray0[7] = (File) mockFile0;
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) trueFileFilter0, fileArray0);
      String[] stringArray0 = new String[2];
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      // Undeclared exception!
      try { 
        FileFilterUtils.filterSet((IOFileFilter) nameFileFilter0, (Iterable<File>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // str2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileFilterUtils.filterList(iOFileFilter0, fileArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file array contains null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      File file0 = MockFile.createTempFile("P-*7s?Fbk", "P-*7s?Fbk");
      String[] stringArray0 = new String[3];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      LinkedList<File> linkedList0 = new LinkedList<File>(arrayList0);
      linkedList0.add(file0);
      // Undeclared exception!
      try { 
        FileFilterUtils.filterList((IOFileFilter) suffixFileFilter0, (Iterable<File>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOCase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("File '", "File '");
      File[] fileArray0 = new File[6];
      fileArray0[0] = (File) mockFile0;
      String[] stringArray0 = new String[3];
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      // Undeclared exception!
      try { 
        FileFilterUtils.filter((IOFileFilter) nameFileFilter0, fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // str2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOFileFilter iOFileFilter0 = FileFilterUtils.suffixFileFilter("lTi&'1yLHh2");
      iOFileFilterArray0[0] = iOFileFilter0;
      List<IOFileFilter> list0 = FileFilterUtils.toList(iOFileFilterArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      // Undeclared exception!
      try { 
        FileFilterUtils.toList(iOFileFilterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filter[0] is null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.toList((IOFileFilter[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.nameFileFilter("D6Q$e");
      File[] fileArray0 = new File[4];
      MockFile mockFile0 = new MockFile("", "C");
      fileArray0[0] = (File) mockFile0;
      MockFile mockFile1 = new MockFile("D6Q$e");
      fileArray0[1] = (File) mockFile1;
      // Undeclared exception!
      try { 
        FileFilterUtils.filter(iOFileFilter0, fileArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file array contains null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.nameFileFilter("");
      File[] fileArray0 = new File[4];
      MockFile mockFile0 = new MockFile("", "C");
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      File[] fileArray1 = FileFilterUtils.filter(iOFileFilter0, fileArray0);
      assertEquals(0, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      File[] fileArray0 = FileFilterUtils.filter(iOFileFilter0, (File[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeFileOnly((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeDirectoryOnly((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeSVNAware((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeSVNAware(trueFileFilter0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeCVSAware((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      // Undeclared exception!
      try { 
        FileFilterUtils.or(iOFileFilterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filter[0] is null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.fileFileFilter();
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      LinkedList<File> linkedList0 = new LinkedList<File>(priorityQueue0);
      linkedList0.add((File) null);
      // Undeclared exception!
      try { 
        FileFilterUtils.filterList(iOFileFilter0, (Iterable<File>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file collection contains null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      List<File> list0 = FileFilterUtils.filterList(iOFileFilter0, (Iterable<File>) arrayList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileFileFilter fileFileFilter0 = new FileFileFilter();
      File[] fileArray0 = MockFile.listRoots();
      List<File> list0 = FileFilterUtils.filterList((IOFileFilter) fileFileFilter0, fileArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      File[] fileArray0 = MockFile.listRoots();
      List<File> list0 = FileFilterUtils.filterList((IOFileFilter) directoryFileFilter0, fileArray0);
      File[] fileArray1 = FileFilterUtils.filter((IOFileFilter) directoryFileFilter0, (Iterable<File>) list0);
      assertEquals(1, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File[] fileArray0 = new File[0];
      // Undeclared exception!
      try { 
        FileFilterUtils.filter((IOFileFilter) null, fileArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file filter is null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.falseFileFilter();
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.notFileFilter((IOFileFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filter must not be null
         //
         verifyException("org.apache.commons.io.filefilter.NotFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.sizeRangeFileFilter((-5463L), (-5463L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.AgeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.AgeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.asFileFilter((FileFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The FileFilter must not be null
         //
         verifyException("org.apache.commons.io.filefilter.DelegateFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.AgeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      File[] fileArray0 = new File[0];
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) falseFileFilter0, fileArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter("UEDJ\"|;I5u");
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.asFileFilter((FilenameFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The FilenameFilter must not be null
         //
         verifyException("org.apache.commons.io.filefilter.DelegateFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter("", 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number must contain at least one byte
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      // Undeclared exception!
      try { 
        FileFilterUtils.filterSet((IOFileFilter) null, (Iterable<File>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file filter is null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((Date) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.AgeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.prefixFileFilter("l|$");
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((-8L));
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      IOFileFilter iOFileFilter0 = FileFilterUtils.nameFileFilter("J%?]k-#", iOCase0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.andFileFilter((IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null
         //
         verifyException("org.apache.commons.io.filefilter.AndFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        FileFilterUtils.suffixFileFilter((String) null, iOCase0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The suffix must not be null
         //
         verifyException("org.apache.commons.io.filefilter.SuffixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.sizeFileFilter((-1788L), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter(0L, false);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.sizeFileFilter((-2193L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      File[] fileArray0 = FileFilterUtils.filter(iOFileFilter0, (Iterable<File>) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter(byteArray0, 4735L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number must contain at least one byte
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.orFileFilter((IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null
         //
         verifyException("org.apache.commons.io.filefilter.OrFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        FileFilterUtils.prefixFileFilter((String) null, iOCase0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prefix must not be null
         //
         verifyException("org.apache.commons.io.filefilter.PrefixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      Vector<File> vector0 = new Vector<File>();
      MockFile mockFile0 = new MockFile("iR/qhG*E+?c%e^zCC)", "iR/qhG*E+?c%e^zCC)");
      vector0.add((File) mockFile0);
      Set<File> set0 = FileFilterUtils.filterSet(iOFileFilter0, (Iterable<File>) vector0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileFilterUtils fileFilterUtils0 = new FileFilterUtils();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.and((IOFileFilter[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.filter((IOFileFilter) null, (Iterable<File>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file filter is null
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number cannot be null
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }
}
