/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:28:57 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SymbolicLinkFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          byte[] byteArray0 = new byte[0];
          // Undeclared exception!
          try { 
            FileUtils.writeByteArrayToFile(file0, byteArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1279)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1270)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2526)
             // org.apache.commons.io.FileUtils.writeByteArrayToFile(FileUtils.java:3266)
             // org.apache.commons.io.FileUtils.writeByteArrayToFile(FileUtils.java:3232)
             // org.apache.commons.io.FileUtils.writeByteArrayToFile(FileUtils.java:3218)
             // sun.reflect.GeneratedMethodAccessor471.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("%A#VCI6D6sZDA+}c/");
      assertEquals("%A#VCI6D6sZDA+}c/", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("-313594649253062377472 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bGCRzA!", "bGCRzA!");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.FileNotFoundException: Directory '/home/azureuser/LLm4PrTest/ io_experiments/bGCRzA!/bGCRzA!' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gVG-", "+O5u9_QUtyRx7$X!");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.FileNotFoundException: Directory '/home/azureuser/LLm4PrTest/ io_experiments/gVG-/+O5u9_QUtyRx7$X!' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H1{p|a2:)v=A2";
      stringArray0[1] = "1n>ke,M9>lFod` 4";
      File file1 = FileUtils.getFile(file0, stringArray0);
      file1.createNewFile();
      FileUtils.openOutputStream(file1, false);
      assertEquals("/home/azureuser/H1{p|a2:)v=A2/1n>ke,M9>lFod` 4", file1.toString());
      assertEquals("/home/azureuser/H1{p|a2:)v=A2", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("$;5E~FoR^qZS6 Oj-K#", "$;5E~FoR^qZS6 Oj-K#");
          MockFile mockFile0 = new MockFile(file0, "2hmi&{6QkK-3`");
          // Undeclared exception!
          try { 
            FileUtils.copyFile((File) mockFile0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/$;5E~FoR^qZS6 Oj-K#0$;5E~FoR^qZS6 Oj-K#\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:836)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:863)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:771)
             // sun.reflect.GeneratedMethodAccessor399.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      FileUtils.copyDirectory(file0, file1, false);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("y++ad9@dX4}r");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "zoneId";
      stringArray0[1] = "y++ad9@dX4}r";
      stringArray0[2] = "y++ad9@dX4}r";
      stringArray0[3] = "zoneId";
      stringArray0[4] = "date";
      stringArray0[5] = "zoneId";
      stringArray0[6] = "date";
      stringArray0[7] = "date";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      File file1 = FileUtils.createParentDirectories(file0);
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      FileUtils.copyDirectory(file1, (File) mockFile0, (FileFilter) canWriteFileFilter0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.waitFor(file0, 12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/tmp");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-3920));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(3, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".yh&<NSRC:{", ".yh&<NSRC:{");
      URL uRL0 = mockFile0.toURL();
      File file0 = FileUtils.toFile(uRL0);
      assertNotNull(file0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/.yh&<NSRC:{", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("file", " is not writable: '", 1577, "date", uRLStreamHandler0);
      File file0 = FileUtils.toFile(uRL0);
      assertFalse(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.current();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short)26074, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(61171162L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.current();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((byte) (-38), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<0>>b");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = MockFile.createTempFile(")L'cqd0joalt", "/tmp/a;!rPTCe+QWdQ-z<PBN0/home/azureuser/h");
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("fileKey", "fileKey");
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = SymbolicLinkFileFilter.INSTANCE;
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) symbolicLinkFileFilter0);
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, delegateFileFilter0, symbolicLinkFileFilter0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = MockFile.createTempFile("S~n8,:'EK*cM", "Source '");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[1];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-1205L));
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) prefixFileFilter0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LineIterator lineIterator0 = FileUtils.lineIterator(file0, (String) null);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertEquals(1755966260487L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = SymbolicLinkFileFilter.INSTANCE;
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) symbolicLinkFileFilter0, (IOFileFilter) symbolicLinkFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.current();
      MockDate mockDate0 = new MockDate(508, 508, 508);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.of(8, 8, 1);
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) thaiBuddhistDate0, offsetTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(2147483647L, 2147483647L);
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochSecond((-2147483648L), (-2147483648L));
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileTime.fromMillis(1125899906842624L);
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("iTC5LP2", "iTC5LP2", file0);
      FileTime fileTime0 = FileTime.fromMillis(1024L);
      boolean boolean0 = FileUtils.isFileOlder(file1, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileOlder(file0, (-430L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate(2, (-2845), 6);
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",*3--X)UG]#_&PCmkh";
      stringArray0[1] = "/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K/wLqea4.#g7k7K";
      stringArray0[2] = "";
      stringArray0[3] = "http";
      stringArray0[4] = "/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K/wLqea4.#g7k7K";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.ofEpochSecond((-53L));
      Date date0 = Date.from(instant0);
      FileUtils.isFileNewer(file0, date0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,*3--X)UG]#_&PCmkh/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K/wLqea4.#g7k7K/http/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K", file0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,*3--X)UG]#_&PCmkh/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K/wLqea4.#g7k7K/http/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K/wLqea4.#g7k7K", file0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.current();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      Clock clock0 = MockClock.system(zoneOffset0);
      OffsetTime offsetTime0 = MockOffsetTime.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0, offsetTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K^>Tq", "K^>Tq");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) japaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now((ZoneId) zoneOffset0);
      boolean boolean0 = FileUtils.isFileNewer(file0, offsetDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MockFile mockFile0 = new MockFile("k)&A0>cM=wN");
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now((ZoneId) zoneOffset0);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, offsetDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = MockFile.createTempFile("5rBJW_", "/home/azureuser/LLm4PrTest/ io_experiments");
      Instant instant0 = MockInstant.ofEpochMilli(1449L);
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileTime fileTime0 = FileTime.fromMillis(540L);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" MB");
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from((long) 2304, timeUnit0);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile("S~n8,:'EK*cM", "Source '");
      boolean boolean0 = FileUtils.isFileNewer(file0, (-1205L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setLastModified(0L);
      File file1 = FileUtils.getUserDirectory();
      assertEquals(0L, file1.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setWritable(false);
      File file1 = FileUtils.getTempDirectory();
      assertEquals("tmp", file1.getName());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setExecutable(false);
      File file1 = FileUtils.getTempDirectory();
      assertFalse(file1.canExecute());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".TMkpUL:c07";
      stringArray0[1] = ".TMkpUL:c07";
      stringArray0[2] = ".TMkpUL:c07";
      stringArray0[3] = ".TMkpUL:c07";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/.TMkpUL:c07/.TMkpUL:c07/.TMkpUL:c07/.TMkpUL:c07", file0.toString());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertTrue(file1.exists());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("' does not exist [createDestDir=", "' does not exist [createDestDir=", file0);
      boolean boolean0 = FileUtils.directoryContains(file0, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("iTC5LP2", "iTC5LP2", file0);
      File file2 = FileUtils.createParentDirectories(file1);
      assertTrue(file2.canWrite());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4=LK&fZ/?eE( O~j");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "/tmp//home/tmp");
      File file1 = FileUtils.createParentDirectories(mockFile0);
      assertNotSame(file1, mockFile0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      arrayDeque0.add(file0);
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(arrayDeque0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/tmp/tmp/tmp0", (Charset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/azureuser", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "Q", "Q", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "8A0", "8A0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 8A0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/home/azureuser/LLm4PrTest/ io_experiments/]@p JM4f#jl/]@p JM4f#jl", (Collection<?>) stack0, "/home/azureuser/LLm4PrTest/ io_experiments/]@p JM4f#jl/]@p JM4f#jl", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Gmks@Y#cIxe/", (Collection<?>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)0, (int) (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null, 8192, (-2064888121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/tmp", "/tmp", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "file", "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier", "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier0com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ahl(*^Xpf/$X", "/home/azureuser/LLm4PrTest/ io_experiments/zoneId/zoneId");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/Ahl(*^Xpf/$X0/home/azureuser/LLm4PrTest/ io_experiments/zoneId/zoneId'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.common.primitives.intsmethodsforweb", "Z%*(}bLE\"@/loIcOX");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/com.google.common.primitives.intsmethodsforweb/Z%*(}bLE\"@/loIcOX'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6x$N", "6x$N");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/6x$N/6x$N'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot create URL for ");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fPAP5");
      try { 
        FileUtils.readLines((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "names");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // names
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cannot move directory: ", "Cannot move directory: ");
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OZG<M", "OZG<M");
      try { 
        FileUtils.readFileToString((File) mockFile0, (Charset) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_|35<T2#8'0");
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "kV{~<E`qfd)rEyUE(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // kV{~<E`qfd)rEyUE(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8A0", "8A0");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("5.E0Xh?B+", "Fb5LGm{X", file0);
      try { 
        FileUtils.readFileToByteArray(file1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2~OIq_");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2~OIq_";
      stringArray0[1] = "2~OIq_";
      stringArray0[2] = "2~OIq_";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      mockFile0.createNewFile();
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/2~OIq_/2~OIq_/2~OIq_'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.moveToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("(~>Tn.&Wa[Fa^");
      File file1 = mockFile0.getCanonicalFile();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile(file1, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/azureuser", "/home/azureuser/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) mockFile0, (File) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = MockFile.createTempFile("it2EW<@v2k55&_6", "'x1=HF@>x*5.X3");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/tmp/it2EW<@v2k55&_60'x1=HF@>x*5.X3'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("/tmp/home/azureuser/tmp", "/tmp/home/azureuser/tmp");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/tmp/date/azureuser", "/home/azureuser/tmp/date/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/home/azureuser/tmp/date/azureuser0/home/azureuser/tmp/date/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/6N4TI]qjz';/6N4TI]qjz';", "/home/azureuser/LLm4PrTest/ io_experiments/6N4TI]qjz';/6N4TI]qjz';");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/6N4TI]qjz';/6N4TI]qjz';/home/azureuser/LLm4PrTest/ io_experiments/6N4TI]qjz';/6N4TI]qjz';' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter((Path) null);
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.negate();
      // Undeclared exception!
      FileUtils.listFilesAndDirs(file0, iOFileFilter0, iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.listFiles(file0, (IOFileFilter) trueFileFilter0, (IOFileFilter) trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp", "IS_OS_LINUX");
      try { 
        FileUtils.lineIterator(file0, "ADLER_32");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "4)FkMSqx[cSBS,R7F");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4)FkMSqx[cSBS,R7F
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "64 bytes");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/tmp/hOme/azure~ser_LLm4PrTest/ io_experimBnts0/hOme/azure~ser_LLm4PrTest/ io_experimBnts";
      stringArray0[1] = "File parameter '";
      stringArray0[2] = "/tmp/home/azureuser/LLm4PrTest/ io_experiments/wLqea4.#g7k7K/wLqea4.#g7k7K";
      stringArray0[3] = "/tmp/tmp/)oo,;0)oo,;";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(~>Tn.&Wa[FaN_^");
      try { 
        FileUtils.lastModifiedFileTime(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]vWjl");
      try { 
        FileUtils.lastModified(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      // Undeclared exception!
      FileUtils.iterateFilesAndDirs(file0, canReadFileFilter0, canReadFileFilter0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lnm Q&}";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: lnm Q&}
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) directoryFileFilter0, (IOFileFilter) directoryFileFilter0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-148), (-148), 1007, 944, 31);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 1, 1);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now(clock0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, offsetDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/tmp/azureuser", "/home/azureuser/LLm4PrTest/ io_experiments/file/org.apache.commons.io.output.NullWriter/LH");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/tmp/azureuser/home/azureuser/LLm4PrTest/ io_experiments/file/org.apache.commons.io.output.NullWriter/LH
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // localTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chBP");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: chBP
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFile((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/home/azureuser/azureuser", "org.apache.commons.lang3.stream.Streams$EnumerationSpliterator");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/home/azureuser/home/azureuser/azureuser0org.apache.commons.lang3.stream.Streams$EnumerationSpliterator'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4=LK&fZ/e6({ ~;", "4=LK&fZ/e6({ ~;");
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/4=LK&fZ/e6({ ~;/4=LK&fZ/e6({ ~;' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = MockFile.createTempFile("Wt9FjBP?xDUP})?", "Wt9FjBP?xDUP})?", (File) null);
      MockFile mockFile0 = new MockFile(file0, "Wt9FjBP?xDUP})?");
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/Wt9FjBP?xDUP})?0Wt9FjBP?xDUP})?'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0, 897, 897);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 37, (-1386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 2188, 2188);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = file0.toURL();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(11);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getUserDirectory();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      MockFile mockFile0 = new MockFile(file0, "destination");
      treeSet0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("v\"|XXY,/4?Z29.rmaON", "v\"|XXY,/4?Z29.rmaON");
      // Undeclared exception!
      FileUtils.copyToDirectory(file0, (File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/azureuser'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 506, 506);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(byteArrayInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("s?g2z-%:^$y~m5RYE${", "W;]d|0R_n_}?%B8W\"d");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file1 = MockFile.createTempFile(" bytes", "sourceFile", file0);
      FileUtils.deleteQuietly(file1);
      try { 
        FileUtils.copyFileToDirectory(file1, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/ bytes0sourceFile'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      File file0 = MockFile.createTempFile("'dE:~b/HQNxuR4>", "'dE:~b/HQNxuR4>", (File) null);
      try { 
        FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " TB";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/H%]8]B2Xf+C6/H%]8]B2Xf+C6";
      File file0 = FileUtils.getFile(stringArray0);
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/6N/6N");
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = MockFile.createTempFile("x-mt6K?ZM~ImvG)", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // srcFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("/home/azureuser/llm4prtest/ io_experiments/c'@bzqjjlzuX!)5vwtm/,'@b?qjjlzun!)5vwtm");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/tmp' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rDt}0X", "rDt}0X");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0p%5crJaz=0'", "/tmp");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/0p%5crJaz=0'/tmp' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) notFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<Mh8U}<", "l3R*O9r*!g5<");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(arrayList0, iOCase0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) prefixFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/<Mh8U}</l3R*O9r*!g5<' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i2F=I8", "i2F=I8");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/i2F=I8/i2F=I8' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) trueFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) canReadFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I*e6", "I*e6");
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("I*e6");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) magicNumberFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/I*e6/I*e6' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/H;oSI/|ate");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/H;oSI/|ate' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" does not exist");
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory ' does not exist' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination '", "Destination '");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination '", "Destination '");
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(mockFile0, adler32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, (Checksum) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, (Checksum) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Stream<File> stream0 = FileUtils.streamFiles(file0, true, (String[]) null);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "/<#%&@%W,J!|)7g^v");
      String[] stringArray0 = new String[0];
      try { 
        FileUtils.streamFiles(mockFile0, true, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "expectedValuesPerKey";
      stringArray0[1] = "(s'h(|\"";
      stringArray0[2] = "";
      stringArray0[3] = "/home/azureuser/LLm4PrTest/ io_experiments/6N/6N/6N";
      stringArray0[4] = "/home/azureuser/LLm4PrTest/ io_experiments/6N/6N/6N/6N/6N/6N";
      stringArray0[5] = "VHW@TGwA4oPUQz7g^w&";
      stringArray0[6] = "Unknown I/O error listing contents of directory: ";
      stringArray0[7] = "file";
      File file1 = FileUtils.getFile(file0, stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K", "/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K");
      CopyOption[] copyOptionArray0 = new CopyOption[7];
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K' (file1='/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K', file2='/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K/tmp/home/azureuser/LLm4PrTest/ io_exIeriments/wLqea4.#g7k7K/wLqea4.#g7k7K')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile(" GB", "Insensitive");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/ GB0Insensitive' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/tmp");
      boolean boolean0 = FileUtils.isSymlink(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("CASE_FOLD_UNICODE", ".Wj[5g6C");
          MockFile mockFile1 = new MockFile(".Wj[5g6C");
          CopyOption[] copyOptionArray0 = new CopyOption[1];
          // Undeclared exception!
          try { 
            FileUtils.copyFile((File) mockFile1, (File) mockFile0, false, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/CASE_FOLD_UNICODE/.Wj[5g6C\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:836)
             // sun.reflect.GeneratedMethodAccessor438.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File[] fileArray0 = new File[4];
      File file1 = MockFile.createTempFile(".Wj[5g6C", "CASE_FOLD_UNICODE");
      fileArray0[3] = file1;
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(fileArray0[3], file0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          MockFile mockFile0 = new MockFile(file0, "'GNr$&\"Cq+S[C");
          MockDate mockDate0 = new MockDate((-3273), (-990), (-3273), (-3273), Integer.MAX_VALUE, 1);
          AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, true);
          OrFileFilter orFileFilter0 = new OrFileFilter(ageFileFilter0, ageFileFilter0);
          CopyOption[] copyOptionArray0 = new CopyOption[0];
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) orFileFilter0, true, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/'GNr$&\"Cq+S[C/LLm4PrTest/ io_experiments\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // org.apache.commons.io.FileUtils.setTimes(FileUtils.java:2821)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1339)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1331)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1331)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:713)
             // sun.reflect.GeneratedMethodAccessor437.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          MockFile mockFile0 = new MockFile(file0, "'GNr$&\"Cq+S[C");
          MockDate mockDate0 = new MockDate((-3273), (-990), (-3273), (-3273), (-990), 1);
          AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, true);
          OrFileFilter orFileFilter0 = new OrFileFilter(ageFileFilter0, ageFileFilter0);
          CopyOption[] copyOptionArray0 = new CopyOption[0];
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) orFileFilter0, true, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/'GNr$&\"Cq+S[C\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // org.apache.commons.io.FileUtils.setTimes(FileUtils.java:2821)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1339)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:713)
             // sun.reflect.GeneratedMethodAccessor437.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("64 PB", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser/7+@;J1/azureuser", "/home/azureuser/7+@;J1/azureuser", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/7+@;J1/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "date", "JAVA_UTIL_ZIP", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // JAVA_UTIL_ZIP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, andFileFilter0, andFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z.");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileUtils.forceMkdir(mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "7GDG");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 7GDG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.newOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.lastModified(file0);
      //  // Unstable assertion: assertEquals(1755966261031L, long0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I*e{");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) trueFileFilter0, (IOFileFilter) trueFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) localDate0, localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp", charset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination '", "Destination '");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Destination '/Destination '' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URL uRL0 = MockURL.getFileExample();
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = file0.toURL();
      File file1 = FileUtils.toFile(uRL0);
      assertTrue(file1.exists());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", "/tmp");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: '/tmp/tmp0/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = MockFile.createTempFile("A:Pc#rm zspe", "A:Pc#rm zspe");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/A:Pc#rm zspe0A:Pc#rm zspe'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",", "/home/azureuser");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Vx|@8a@U^{", "&fj1rzh0I%)E]^]2?J8");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/Vx|@8a@U^{/&fj1rzh0I%)E]^]2?J8' does not exist.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("/tmp", "/tmp");
          MockFile mockFile0 = new MockFile("/tmp", "/tmp");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:836)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2449)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2423)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2482)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2510)
             // sun.reflect.GeneratedMethodAccessor422.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("Nj_\"4PqOo8e_YkS)Y", "/home/azureuser/LLm4PrTest/ io_experiments/file/org.apache.commons.io.output.NullWriter/LH/LH");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/Nj_\"4PqOo8e_YkS)Y/home/azureuser/LLm4PrTest/ io_experiments/file/org.apache.commons.io.output.NullWriter/LH/LH/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("I*e{", "I*e{");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/I*e{/I*e{' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("/tmp/tmp", "/tmp/tmp");
      try { 
        FileUtils.moveToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp/tmp0/tmp/tmp' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'destDir is not writable: '/home/azureuser/LLm4PrTest/ io_experiments/./tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.listFiles(file0, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[8];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) falseFileFilter0, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = FileUtils.isRegularFile((File) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chBP");
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      boolean boolean0 = FileUtils.isDirectory(mockFile0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = FileUtils.isDirectory((File) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals(0L, file1.length());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" bRq;rj&zX-$");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("", "+AjX$4-#Q-D/|UmXGb");
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) canReadFileFilter0, false);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = FileUtils.current();
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file1, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/./evosuite.jar\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:836)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1333)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:713)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:644)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:545)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:744)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:999)
             // sun.reflect.GeneratedMethodAccessor418.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, " GB");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chBP");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.current();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp", "/tmp/tmp");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals("/tmp/tmp/tmp/tmp", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("sDB%Eg$3![k?BWtm");
      assertEquals("sDB%Eg$3![k?BWtm", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
          NetworkHandling.createRemoteTextFile(evoSuiteURL0, "net.bytebuddy.dynamic.loading.bytearrayclassloader");
          File file0 = FileUtils.getUserDirectory();
          URL uRL0 = MockURL.getHttpExample();
          // Undeclared exception!
          try { 
            FileUtils.copyURLToFile(uRL0, file0, 2188, 2188);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1279)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1270)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2526)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1054)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:963)
             // org.apache.commons.io.FileUtils.copyURLToFile(FileUtils.java:1110)
             // sun.reflect.GeneratedMethodAccessor414.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      treeSet0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.current();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
      assertEquals(".", file0.toString());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile((InputStream) null, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1279)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1270)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2526)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1054)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:963)
             // sun.reflect.GeneratedMethodAccessor452.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("Destination '", "Destination '");
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      File file0 = MockFile.createTempFile(">G=MYIK+n8]6NLV,l", ">G=MYIK+n8]6NLV,l");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "/tmp/tmp/t7p/tm-0/t7p/tm-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "zv!x1i";
      stringArray0[2] = "?+$2F";
      stringArray0[3] = "/home/azureuser/LLm4PrTest/ io_experiments/4yEuE\"/hCuuN_/input";
      stringArray0[4] = "dft>";
      stringArray0[5] = " EB";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "NX17Kx~L#eqt:4UdQA");
      assertTrue(boolean0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/zv!x1i/?+$2F/home/azureuser/LLm4PrTest/ io_experiments/4yEuE\"/hCuuN_/input/dft>/ EB", file0.toString());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "H &4=Co;.");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "H &4=Co;.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = MockFile.createTempFile("62(@I_$/#7!IM'-", "62(@I_$/#7!IM'-", (File) null);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "62(@I_$/#7!IM'-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, ",fPRb0x/9ZehBTT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&0LS<", "&0LS<");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "READ_ONLY");
      boolean boolean0 = FileUtils.contentEquals(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aGZYl4", "posix");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = MockFile.createTempFile("Could not f=nd encoding: UTF-8", "Could not f=nd encoding: UTF-8");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(3367L);
      assertEquals("3 KB", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize((Number) 1125899906842624L);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "``eqAJ:.qB8[BlR|AB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-2661));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate(1L);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      HashSet<LinkOption> hashSet0 = new HashSet<LinkOption>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "JAVA_UTIL_ZIP", (Collection<?>) hashSet0, "JAVA_UTIL_ZIP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = MockFile.createTempFile("I*eW", "aZpy#OV<iM");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/I*eW0aZpy#OV<iM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 10000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/tmp/tmp", (Collection<?>) treeSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FileTime fileTime0 = FileTime.from(3801L, timeUnit0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, fileTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "' after copy to '", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      File file0 = FileUtils.current();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, falseFileFilter0, falseFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<0>>b");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      OffsetTime offsetTime0 = MockOffsetTime.now();
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) japaneseDate0, offsetTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "1024 EB", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockDate mockDate0 = new MockDate(16, 16, 16);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(61171162L, long0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(hashSet0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q", "=V:DO.iM.?3!A");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, offsetDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, 63L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayList0, "I*e{", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "/tmp");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[0];
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, stringArray0, true);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "Destination directory '");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Destination directory '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ZoneId zoneId0 = ZoneId.systemDefault();
      OffsetTime offsetTime0 = MockOffsetTime.now(zoneId0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null, offsetTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/KJ/KJ", "/home/azureuser/LLm4PrTest/ io_experiments/KJ/KJ");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) treeSet0, "Gmks@Y#cIxe/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='/home/azureuser/LLm4PrTest/ io_experiments/./.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, "I*e{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // I*e{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, offsetDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1125899906842624L, FileUtils.ONE_PB);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.deleteDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1199)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1219)
             // sun.reflect.GeneratedMethodAccessor416.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }
}
