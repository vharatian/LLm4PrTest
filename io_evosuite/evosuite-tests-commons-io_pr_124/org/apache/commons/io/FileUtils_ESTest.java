/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:35:15 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">#ru9en{#YCUC\"z\"4", "t!?oH");
      File[] fileArray0 = new File[9];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      fileArray0[4] = (File) mockFile0;
      fileArray0[5] = (File) mockFile0;
      fileArray0[6] = (File) mockFile0;
      fileArray0[7] = (File) mockFile0;
      fileArray0[8] = (File) mockFile0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      FileUtils.toFiles(uRLArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileUtils.decodeUrl("%p/7)n[*q");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ye~&");
      FileUtils.writeStringToFile((File) mockFile0, "Cannot cache the value of a method with parameters: ", (String) null, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O]:errQj$m) :|O+ek";
      stringArray0[1] = ", ";
      File file1 = FileUtils.getFile(file0, stringArray0);
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile(file1, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "fC7MX'&_y");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write((File) mockFile0, (CharSequence) null, charset0, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("");
      FileUtils.copyDirectory((File) mockFile0, file0, false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      FileUtils.copyDirectory(file1, file0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c#");
      FileUtils.writeStringToFile((File) mockFile0, "/home/azureuser", (String) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileUtils.writeStringToFile((File) mockFile0, "}UVNbW'xJ(qg>");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("Cnn_ot load cass ", "Cnn_ot load cass ", file0);
      HashSet<File> hashSet0 = new HashSet<File>();
      FileUtils.writeLines(file1, (String) null, (Collection<?>) hashSet0, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O]:errQj$m) :|O+ek";
      stringArray0[1] = ", ";
      File file1 = FileUtils.getFile(file0, stringArray0);
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      FileUtils.writeLines(file1, (String) null, (Collection<?>) treeSet0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chronoZonedDateTime", "EEE, dd MMM yyyy HH:mm:ss 'GMT'");
      byte[] byteArray0 = new byte[4];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)1, 19);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.CanExecuteFileFilter", "org.apache.commons.io.filefilter.CanExecuteFileFilter");
      FileUtils.write((File) mockFile0, (CharSequence) "org.apache.commons.io.filefilter.CanExecuteFileFilter");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          FileUtils.deleteQuietly(file0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyToDirectory(file0, file0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File[] fileArray0 = new File[0];
      FileUtils.toURLs(fileArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = file0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("py!A3Wa", "/home/azureuser");
      FileUtils.write((File) mockFile0, (CharSequence) "DoP&$NtR.WZ$E+.", true);
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SENSITIVE", "SENSITIVE");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("SENSITIVE/SENSITIVE");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "SENSITIVE");
      FileUtils.sizeOfAsBigInteger(mockFile0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      FileUtils.readFileToString((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S}#", "S}#");
      File file0 = MockFile.createTempFile("S}#", "S}#", (File) mockFile0);
      FileUtils.openInputStream(file0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) notFileFilter0);
      FileUtils.listFilesAndDirs(file0, delegateFileFilter0, delegateFileFilter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = MockFile.createTempFile(", offset=", ", offset=");
      FileUtils.lineIterator(file0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      FileUtils.iterateFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/ doesn't match any regular expression.0ftp", "/tmp/ doesn't match any regular expression.0ftp");
      FileUtils.isSymlink(file0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate();
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      MinguoDate minguoDate0 = MockMinguoDate.now();
      FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) minguoDate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mWp)L3;|dQt:");
      Instant instant0 = MockInstant.ofEpochMilli(328L);
      FileUtils.isFileNewer((File) mockFile0, instant0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setWritable(false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setExecutable(false, false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/home/azureuser";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile(".~vO", "V%^((");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".~vO";
      stringArray0[1] = ".~vO";
      stringArray0[2] = ".~vO";
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockFile mockFile0 = new MockFile("nwu2~yn'n?s");
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      FileUtils.checksumCRC32(mockFile0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("}UVNbW'xJ(qg>", "pV5~$UjZq5I[", (File) mockFile0);
      CRC32 cRC32_0 = new CRC32();
      cRC32_0.update((-2179));
      FileUtils.checksum(file0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "G}qyp-d(>", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(file0, (String) null, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("userSu.home", "userSu.home");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "userSu.home", "userSu.home");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // userSu.home
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/88H}w}-RD}?~f@", "/88H}w}-RD}?~f@");
      mockFile0.mkdirs();
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/88H}w}-RD}?~f@/88H}w}-RD}?~f@' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/tmp//tmp/tmp", (Collection<?>) priorityQueue0, "9VdSq/$kzIL", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      try { 
        FileUtils.writeLines(file0, " uHdGZ?h3", (Collection<?>) set0, "=Be6U/Hp.N/x|7$k !i", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "/home/azureuser/DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.", (Collection<?>) linkedHashSet0, "#l&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        FileUtils.writeLines(file0, "/home/azureuser/DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.", (Collection<?>) linkedHashSet0, "#l&");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EEE, dd MMM yyyy HH:mm:ss 'GMT'", "EEE, d\"MMM yyyy HH:mm:ss 'GMT'");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "xh", (Collection<?>) priorityQueue0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // xh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)4, (int) (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[0];
      File file1 = MockFile.createTempFile("Failed to delete original file '", "org.junitpioneer.jupiter.DefaultLocaleExtension", file0);
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file1, byteArray0, (-1007), 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1007
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser");
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("target", "DY~DF9)(d]lf&|E-");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "DY~DF9)(d]lf&|E-", "file", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "user.home", "user.home");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // user.home
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZ%QwZ:09]'D}");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "GZ%QwZ:09]'D}", "GZ%QwZ:09]'D}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // GZ%QwZ:09]'D}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.toURLs((File[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("home/azureuser/LLm4PrTest/ io_experiments", "home/azureuser/LLm4PrTest/ io_experiments");
      byte[] byteArray0 = new byte[8];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S}#", "S}#");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/S}#/S}#' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) mockFile0, "user.home");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // user.home
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu", "s!VwYu");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/s!VwYu/s!VwYu' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5ohmWxDd4row\"r*'-");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '5ohmWxDd4row\"r*'-' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '%/@`&UcAiiPry1<R_' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<7~3>GG:0";
      stringArray0[1] = "SIXkX_TZmqgr";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.readFileToByteArray(file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/<7~3>GG:0/SIXkX_TZmqgr' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("DoP&$NtR.WZ$E+.", "pV5~$UjZq5I[", (File) mockFile0);
      try { 
        FileUtils.openOutputStream((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/foo.bar' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '%/@`&UcAiiPry1<R_' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("K1)/", "K1)/", (File) null);
      String[] stringArray0 = new String[2];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, suffixFileFilter0, suffixFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp/K1)/0K1)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("W", 2087L);
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) magicNumberFileFilter0, (IOFileFilter) magicNumberFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("}UVNbW'xJ(qg>", "pV5~$UjZq5I[", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "S}#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, "/home/azureuser");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xh", "EEE, dd MMM yyyy HH:mm:ss 'GMT'");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/xh/EEE, dd MMM yyyy HH:mm:ss 'GMT'' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, hiddenFileFilter0, hiddenFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0);
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      MockFile mockFile0 = new MockFile("YT2yY+fTdwKUtqxrf", " bytes");
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, ageFileFilter0, trueFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/YT2yY+fTdwKUtqxrf/ bytes
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "B.");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp/B.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-138L));
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (-3183L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (-2540L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk//tmp/*UV2@:G~Nk");
      MockFile mockFile1 = new MockFile(mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk//tmp/*UV2@:G~Nk");
      byte[] byteArray0 = new byte[2];
      FileUtils.writeByteArrayToFile((File) mockFile1, byteArray0);
      // Undeclared exception!
      FileUtils.forceDeleteOnExit(mockFile0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/user.home/user.home is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, 46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 46, (-440299717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 12, 12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockFile mockFile0 = new MockFile("S}#", "S}#");
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      treeSet0.add(file0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xh", "EEE, dd MMM yyyy HH:mm:ss 'GMT'");
      TreeSet<File> treeSet0 = new TreeSet<File>();
      treeSet0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/xh/EEE, dd MMM yyyy HH:mm:ss 'GMT'' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/DoP&$NtR.WZ$E+./DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.", "/home/azureuser/LLm4PrTest/ io_experiments/DoP&$NtR.WZ$E+./DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/DoP&$NtR.WZ$E+./DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+./home/azureuser/LLm4PrTest/ io_experiments/DoP&$NtR.WZ$E+./DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/_");
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/_", "TSdMabKyi|Zev<FC", (File) null);
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/home/azureuser/LLm4PrTest/ io_experiments/_0TSdMabKyi|Zev<FC' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " PB";
      stringArray0[1] = "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/ PB/net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/foo.bar' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home");
      mockFile0.setWritable(false, false);
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/home' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O]:errQj$m) :|O+ek";
      stringArray0[1] = "*UV2@:G~Nk";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.copyDirectory(file1, file1, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/O]:errQj$m) :|O+ek/*UV2@:G~Nk' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) null, (FileFilter) ageFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S}#", "S}#");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/S}#/S}#' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) orFileFilter0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFile mockFile0 = new MockFile("userSu.home");
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'userSu.home' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) orFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/home/home/home";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/home/home' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = MockFile.createTempFile("EDS?;<r&W0)FFjsW]", "NTFS ADS separator (':') in file name is forbidden.");
      FileUtils.writeStringToFile(file0, "QjAKRo$$Z#X", (Charset) null, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      List<String> list0 = FileUtils.readLines((File) mockFile0);
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) list0, "source", true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "/tmp/foo.bar", (Collection<?>) hashSet0, "+t-h3^c`p[B)=y", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp/foo.bar
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0 bytes";
      stringArray0[1] = "0 bytes";
      stringArray0[2] = "0 bytes";
      stringArray0[3] = "YQ7nxYaONOaA3";
      stringArray0[4] = "0 bytes";
      stringArray0[5] = "0 bytes";
      File file0 = FileUtils.getFile(stringArray0);
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 2042, 2042, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser", charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("DoP&$NtR.WZ$E+.", "DoP&$NtR.WZ$E+.", file0);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines(file1, charset0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/home/azureuser";
      stringArray0[1] = "/home/azureuser";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.openOutputStream(file1, true);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readFileToString(file1, charset0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" PB");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " PB";
      stringArray0[1] = "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/ PB' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      FileUtils.openOutputStream((File) mockFile0, true);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QJ _=ar");
      FileUtils.openOutputStream((File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      mockFile0.createNewFile();
      FileUtils.openOutputStream((File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      FileUtils.openInputStream(mockFile0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = MockFile.createTempFile("destination", "/home/azureuser");
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/destination0/home/azureuser' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      File file0 = MockFile.createTempFile("/tmp", "/tmp", (File) mockFile0);
      try { 
        FileUtils.moveFile(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile(":o#6Lq*]'{2U3i", "' Expected length: ", (File) mockFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "' Expected length: ";
      File file1 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '' Expected length: ' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QJ _=ar", "QJ _=ar");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile1 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("%nl{E`", (String) null, (File) mockFile1);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/foo.bar/%nl{E`0.tmp' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DoP&$NtR.WZ$E+.");
      FileUtils.isFileOlder((File) mockFile0, 1557L);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = MockFile.createTempFile("destination", "/home/azureuser");
      FileUtils.isFileOlder(file0, 475L);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, (-802L));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      FileUtils.isFileNewer((File) mockFile0, 1152921504606846976L);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      try { 
        FileUtils.copyToFile(sequenceInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 63, 116);
      MockFile mockFile0 = new MockFile("-2220 bytes", "-2220 bytes");
      FileUtils.copyToFile(byteArrayInputStream0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RSR+Kh", "/home/azureuser/Cnn_ot load cass 0Cnn_ot load cass ");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/RSR+Kh/home/azureuser/Cnn_ot load cass 0Cnn_ot load cass ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S}#");
      File file0 = MockFile.createTempFile("S}#", "S}#", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/S}#/S}#0S}#' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", "%/@`&UcAiiPry1<R_");
          URL uRL0 = MockURL.getFileExample();
          File file1 = FileUtils.toFile(uRL0);
          CopyOption[] copyOptionArray0 = new CopyOption[9];
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, file1, false, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/fake/but/wellformed/url\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1400)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:890)
             // sun.reflect.GeneratedMethodAccessor294.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = MockFile.createTempFile("Bq>7mS]azy", "", (File) null);
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/Bq>7mS]azy0' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) notFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          MockFile mockFile0 = new MockFile(uRI0);
          MockFile.createTempFile("O]:errQj$m) :|O+ek", "O]:errQj$m) :|O+ek", (File) mockFile0);
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/foo.bar/O]:errQj$m) :|O+ek0O]:errQj$m) :|O+ek\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:311)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:270)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1445)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:340)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("}UVNbW'xJ(qg>", "pV5~$UjZq5I[", (File) mockFile0);
      CRC32 cRC32_0 = new CRC32();
      FileUtils.checksum(file0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V%^((", "V%^((");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser/DoP&$NtR1WZ$!+.0DoP&$NtR1WZ$!+.", "/home/azureuser/DoP&$NtR1WZ$!+.0DoP&$NtR1WZ$!+.", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/DoP&$NtR1WZ$!+.0DoP&$NtR1WZ$!+.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(1416000L);
      FileUtils.isFileNewer(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/tmp", "Rk:R\\TeNUPf)}3<E3", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Rk:R\\TeNUPf)}3<E3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      byte[] byteArray0 = new byte[2];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" does not declare a parameter with index ", " does not declare a parameter with index ");
      MockDate mockDate0 = new MockDate(2048L);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/ does not declare a parameter with index / does not declare a parameter with index 
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDate) japaneseDate0, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "/home/azureuser/home/azureuser/azureuser", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/home/azureuser/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-574));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 3759);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk0/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk", "skipOn");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk0/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk0skipOn is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // user.home does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.touch(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to set the last modification time for /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.touch(file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URL[] uRLArray0 = new URL[3];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(3, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short)4, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile(".CD3C3@\"]&v", "}UVNbW'xJ(qg>", file0);
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file1);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QJ _=ar");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QJ _=ar does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "-");
      FileUtils.touch(mockFile0);
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      long long0 = FileUtils.sizeOf(mockFile0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      byte[] byteArray0 = new byte[7];
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0, 1420L);
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, magicNumberFileFilter0, (IOFileFilter) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZ%QwZ:09]'D}");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      mockFile0.createNewFile();
      String string0 = FileUtils.readFileToString((File) mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      mockFile0.createNewFile();
      byte[] byteArray0 = FileUtils.readFileToByteArray(mockFile0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      MockFile mockFile1 = new MockFile("s!VwYu", "s!VwYu");
      mockFile0.createNewFile();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/s!VwYu' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = MockFile.createTempFile("%/@`&UcAjiiPOy1<R_", "%/@`&UcAjiiPOy1<R_");
      file0.setWritable(false);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        FileUtils.writeLines(file0, (String) null, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/%/@`&UcAjiiPOy1<R_0%/@`&UcAjiiPOy1<R_' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      FileUtils.write((File) mockFile0, (CharSequence) "%/@`&UcAiiPry1<R_", (String) null);
      List<String> list0 = FileUtils.readLines((File) mockFile0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/foo.bar//tmp/foo.bar/foo.bar", "/tmp/foo.bar/%nl{E`0.tmp");
      try { 
        FileUtils.lineIterator((File) mockFile0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp/foo.bar/tmp/foo.bar/foo.bar/tmp/foo.bar/%nl{E`0.tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = MockFile.createTempFile(", offset=", ", offset=");
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/, offset=0, offset=' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("S}#", "S}#");
          MockFile mockFile1 = new MockFile(mockFile0, "S}#");
          File file0 = MockFile.createTempFile("S}#", "S}#", (File) mockFile0);
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, mockFile1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/S}#/S}#/S}#/S}#0S}#\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1400)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:890)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:840)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:807)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2299)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2336)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2361)
             // sun.reflect.GeneratedMethodAccessor272.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S}#", "S}#");
      MockFile mockFile1 = new MockFile(mockFile0, "S}#");
      File file0 = MockFile.createTempFile("S}#", "S}#", (File) mockFile0);
      try { 
        FileUtils.moveToDirectory(file0, mockFile1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/S}#/S}#/S}#' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("}UVNbW'xJ(qg>", "pV5~$UjZq5I[", (File) mockFile0);
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/foo.bar/}UVNbW'xJ(qg>0pV5~$UjZq5I[' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = MockFile.createTempFile(", offset=", ", offset=");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/, offset=0, offset=' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "DoP&$NtR.WZ$E+.");
      MockFile.createTempFile("DoP&$NtR.WZ$E+.", "pV5~$UjZq5I[", (File) mockFile0);
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/tmp/foo.bar/DoP&$NtR.WZ$E+.' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(" to a subdirectory of itself: ");
      FileUtils.moveToDirectory(file0, mockFile0, true);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = MockFile.createTempFile(", offset=", ", offset=");
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/, offset=0, offset=' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZ%QwZ:09]'D}");
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: GZ%QwZ:09]'D}
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      MockDate mockDate0 = new MockDate(3759, (-1), 3759, (-4599), (-4599), 3759);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file '/tmp/tmp' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pV5~$UjZq5I[");
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, 767L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" EB");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file ' EB' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "EEE, dd MMM yyyy HH:m:ss 'GMT'");
      mockFile0.createNewFile();
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.FILE;
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) fileFileFilter0, (IOFileFilter) fileFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertTrue(file1.isDirectory());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%;");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.forceMkdirParent(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      MockFile mockFile1 = new MockFile("s!VwYu", "s!VwYu");
      mockFile0.createNewFile();
      try { 
        FileUtils.forceMkdir(mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory /home/azureuser/LLm4PrTest/ io_experiments/s!VwYu/s!VwYu
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdir(file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      File file0 = MockFile.createTempFile("%/@`&UcAjiiPOy1<R_", "%/@`&UcAjiiPOy1<R_");
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /tmp/%/@`&UcAjiiPOy1<R_0%/@`&UcAjiiPOy1<R_ exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu", "s!VwYu");
      FileUtils.forceMkdir(mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/s!VwYu", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QJ _=ar", "QJ _=ar");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("Could not create destination directories '", "/tmp/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'");
      // Undeclared exception!
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          MockFile mockFile0 = new MockFile(uRI0);
          MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk//tmp/*UV2@:G~Nk", "/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk//tmp/*UV2@:G~Nk", (File) mockFile0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/foo.bar/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk0/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1400)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1362)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1360)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:737)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:663)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:559)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:777)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:1035)
             // sun.reflect.GeneratedMethodAccessor314.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadable(false);
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/azureuser' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("' Expected length: ", "' Expected length: ", (File) mockFile0);
      OrFileFilter orFileFilter0 = new OrFileFilter();
      FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) orFileFilter0);
      assertEquals("/home", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "-");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O)f|O=rBlU");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a directory: O)f|O=rBlU
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZ%QwZ:09]'D}");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete directory /tmp.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      File file1 = FileUtils.getTempDirectory();
      assertEquals("/", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      MockFile mockFile0 = new MockFile("home/azureuser/LLm4PrTest/ io_experiments", "home/azureuser/LLm4PrTest/ io_experiments");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TreeSet<File> treeSet0 = new TreeSet<File>();
      MockFile mockFile0 = new MockFile("+\n*^sA 'M/M3GN[NZ$", "+\n*^sA 'M/M3GN[NZ$");
      FileUtils.copyToDirectory((Iterable<File>) treeSet0, (File) mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = MockFile.createTempFile(", offset=", ", offset=");
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      byte[] byteArray0 = new byte[7];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      FileUtils.copyInputStreamToFile(mockFileInputStream0, mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      FileUtils.write((File) mockFile0, (CharSequence) "%/@`&UcAiiPry1<R_", (String) null);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '%/@`&UcAiiPry1<R_' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk//tmp/*UV2@:G~Nk");
      MockFile mockFile1 = new MockFile(mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk//tmp/*UV2@:G~Nk");
      mockFile0.createNewFile();
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = MockFile.createTempFile("Cnn_ot load cass ", "Cnn_ot load cass ", file0);
          MockFile mockFile0 = new MockFile(",gbg&zS#(W&rvKK");
          // Undeclared exception!
          try { 
            FileUtils.moveFile(file1, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \",gbg&zS#(W&rvKK\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1400)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:890)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:840)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:807)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2299)
             // sun.reflect.GeneratedMethodAccessor315.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = MockFile.createTempFile(", offset=", ", offset=");
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/, offset=0, offset=' and destination '/tmp/, offset=0, offset=' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("}UNbW'xJ(qg>", "pV5~$UjZq5I[", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/foo.bar/}UNbW'xJ(qg>0pV5~$UjZq5I[' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFile mockFile0 = new MockFile("home/azureuser/LLm4PrTest/ io_experiments", "home/azureuser/LLm4PrTest/ io_experiments");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      MockFile mockFile0 = new MockFile("f<,#z>(ci", "chronoLocalDateTime");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/f<,#z>(ci/chronoLocalDateTime' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("}UVNbW'xJ(qg>", "pV5~$UjZq5I[", (File) mockFile0);
      OrFileFilter orFileFilter0 = new OrFileFilter();
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) orFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/foo.bar/}UVNbW'xJ(qg>0pV5~$UjZq5I[' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) emptyFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_", "%/@`&UcAiiPry1<R_");
      FileUtils.write((File) mockFile0, (CharSequence) "%/@`&UcAiiPry1<R_", (String) null);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/%/@`&UcAiiPry1<R_/%/@`&UcAiiPry1<R_' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S}#");
      File file0 = MockFile.createTempFile("S}#", "S}#", (File) mockFile0);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V%^((", "V%^((");
      File file0 = MockFile.createTempFile("Bn52`z'F1@", "V%^((", (File) mockFile0);
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "Bn52`z'F1@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/home/home/home";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "Cu5S");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("chronoLocalDateTime");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/chronoLocalDateTime/chronoLocalDateTime0=8~1IRBn/chronoLocalDateTime");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/DoP&$NtR.WZ$E+./DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+.", (String) null);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, ",Gs/$a<b]-");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, (File) null, "net.bytebuddy.description.type.TypeDescription$Generic");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      File file0 = MockFile.createTempFile("user.home", "user.home");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = MockFile.createTempFile("userSu.home", "userSu.home");
      byte[] byteArray0 = new byte[8];
      FileUtils.writeByteArrayToFile(file0, byteArray0);
      File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/QJ _=ar/tmp/>dmkl7V1Y:(3LpOsntL/DoP&$NtR.WZ$E+.0DoP&$NtR.WZ$E+./tmp/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/EEE, dd MMM yyyy HH:mm:ss 'GMT'/*UV2@:G~Nk/tmp/*UV2@:G~Nk0/home/azureuser/LLm4PrTest/ io_experiments/I'? 9v=/QJ _=ar", "userSu.home");
      boolean boolean0 = FileUtils.contentEquals(file1, file0);
      assertEquals(8L, file0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("I'? 9v=", "EEE, dd MMM yyyy HH:mm:ss 'GMT'", file0);
      try { 
        FileUtils.contentEquals(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      File file0 = MockFile.createTempFile("2si\u0006", "2si\u0006");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      MockFile mockFile0 = new MockFile("87ur(w(hM");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "/home/azureuser");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",U7Xvo#wbLZ";
      stringArray0[1] = "Cannot create URL for ";
      stringArray0[2] = "SENSITIVE";
      stringArray0[3] = "/tmp/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/QJ _=ar/QJ _=ar";
      stringArray0[4] = "]'Qp";
      stringArray0[5] = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      stringArray0[6] = "p>U$+Q#=kzWOn";
      File file0 = FileUtils.getFile(stringArray0);
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,U7Xvo#wbLZ/Cannot create URL for /SENSITIVE/tmp/foo.bar/home/azureuser/LLm4PrTest/ io_experiments/QJ _=ar/QJ _=ar/]'Qp/org.junitpioneer.jupiter.DefaultTimeZoneExtension/p>U$+Q#=kzWOn", file0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      FileUtils.write((File) mockFile0, (CharSequence) "%/@`&UcAiiPry1<R_", (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      mockFile0.createNewFile();
      long long0 = FileUtils.checksumCRC32(mockFile0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c#");
      FileUtils.touch(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // c# is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(2403L);
      assertEquals("2 KB", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_YB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1048576 EB", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/@`&UcAiiPry1<R_");
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("/home/azureuser//home/azureuser/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) suffixFileFilter0, (IOFileFilter) suffixFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: %/@`&UcAiiPry1<R_
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(linkedHashSet0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/names0names");
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s!VwYu");
      OrFileFilter orFileFilter0 = new OrFileFilter();
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) orFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 's!VwYu' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      MockDate mockDate0 = new MockDate(3759, (-1), 3759, (-4599), (-4599), 3759);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/tmp/azureuser", (Collection<?>) arrayList0, "/tmp/azureuser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = MockFile.createTempFile("U#&QBT%YY}i", "U#&QBT%YY}i", (File) null);
      FileUtils.writeLines(file0, (Collection<?>) null);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "62R-JgH?=ANG");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0, "", false);
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nkk@Mz;P Yz");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (-416), (-399674661));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "j6`] +0");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "DoP&$NtR.WZ$E+.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // DoP&$NtR.WZ$E+.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LocalDate localDate0 = MockLocalDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockFile mockFile0 = new MockFile("userSu.home", "userSu.home");
      Instant instant0 = MockInstant.ofEpochSecond(1000L, 1000L);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      MockFile mockFile0 = new MockFile("home/azureuser/LLm4PrTest/ io_experiments", "home/azureuser/LLm4PrTest/ io_experiments");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile((File) mockFile0, ".svn", charset0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "62R-JgH?=ANG");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "'", "Bytes to skip must not be negative: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Bytes to skip must not be negative: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          File file1 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file1, file0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:99)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:35)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:578)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:294)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:281)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:270)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1445)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:340)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1214)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2233)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2269)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2359)
             // sun.reflect.GeneratedMethodAccessor272.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "Test '%s' was supposed to run no longer than %d ms.");
      FileUtils.writeStringToFile((File) mockFile0, "Test '%s' was supposed to run no longer than %d ms.", true);
      assertEquals("/home/azureuser", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, canReadFileFilter0, canReadFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.write(file0, (CharSequence) "org.apache.commons.io.filefilter.CanExecuteFileFilter");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, true);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<", "<");
      Vector<Object> vector0 = new Vector<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) vector0, false);
      assertEquals("<", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1048576L, FileUtils.ONE_MB);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "]Ao0", (Collection<?>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c#");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      boolean boolean0 = FileUtils.isFileNewer(file0, date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2177));
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDate) thaiBuddhistDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }
}
