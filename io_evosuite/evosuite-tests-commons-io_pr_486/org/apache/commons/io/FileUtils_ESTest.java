/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:02:39 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.FileVisitResult;
import java.nio.file.InvalidPathException;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileEqualsFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PathMatcherFileFilter;
import org.apache.commons.io.filefilter.SymbolicLinkFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize((Number) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.current();
          FileUtils.deleteQuietly(file0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.deleteDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1194)
             // sun.reflect.GeneratedMethodAccessor452.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.delete(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Destination directory '";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/tmp0/home/tmp";
      stringArray0[2] = "]q&JbqnbLoqE;!";
      stringArray0[3] = "CharMatcher.breakingWhitespace()";
      stringArray0[4] = "scm)stBG#=YN8";
      stringArray0[5] = "Predicates.instanceOf(";
      stringArray0[6] = "A:{";
      File file1 = FileUtils.getFile(file0, stringArray0);
      File file2 = FileUtils.createParentDirectories(file1);
      FileUtils.copyToDirectory(file2, file1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("MEvqTO2[@(7{My`<oQI");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MEvqTO2[@(7{My`<oQI";
      stringArray0[1] = "MEvqTO2[@(7{My`<oQI";
      stringArray0[2] = "MEvqTO2[@(7{My`<oQI";
      stringArray0[3] = "MEvqTO2[@(7{My`<oQI";
      stringArray0[4] = "6%? ";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.copyDirectory((File) mockFile0, file1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`38E)0-YV5/yq", "`38E)0-YV5/yq");
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile0;
      FileUtils.toURLs(fileArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = file0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", (String) null, 42, "file");
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lineIterator(file0, (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lineIterator(file0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lastModified(file0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate((-1549L));
      FileUtils.isFileOlder(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      File file0 = FileUtils.getTempDirectory();
      ZoneId zoneId0 = ZoneId.from(offsetTime0);
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      FileUtils.isFileOlder(file0, (ChronoLocalDate) japaneseDate0, offsetTime0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-2049870753), 28, 2902);
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h:,Cm0a- TwROn-v7g");
      OffsetTime offsetTime0 = MockOffsetTime.now();
      LocalDate localDate0 = MockLocalDate.of(598, 3, 3);
      FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) localDate0, offsetTime0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Locale locale0 = Locale.FRANCE;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateNow();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(755L);
      FileUtils.isFileNewer(file0, chronoLocalDate0, localTime0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LocalDate localDate0 = MockLocalDate.ofYearDay((-186), 1);
      FileUtils.isFileNewer(file0, (ChronoLocalDate) localDate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      FileUtils.isFileNewer(file0, offsetDateTime0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochMilli((-2299L));
      FileUtils.isFileNewer(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((byte) (-22));
      File file0 = MockFile.createTempFile("' does not exist", "y] hmT]@q^RoN6", (File) null);
      FileUtils.isFileNewer(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ftp", "ftp");
      FileTime fileTime0 = FileTime.fromMillis(0L);
      FileUtils.isFileNewer((File) mockFile0, fileTime0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, 2765L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      FileUtils.getTempDirectory();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.io.LineIterator";
      stringArray0[1] = "/home/azureuser/.k-(<j=F4vO<u0 TB";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.io.filefilter.AndFileFilter";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[0];
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.current();
      FileUtils.directoryContains(file0, file1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileUtils.decodeUrl("/home/azureuser");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "XQ4m4dF8$5x<j?Q!");
      FileUtils.createParentDirectories(mockFile0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O=:'#[tn/gVi");
      FileUtils.createParentDirectories(mockFile0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S{Q";
      stringArray0[1] = "GMT";
      stringArray0[2] = "/home/azureuser/azureuser";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.createParentDirectories(file1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      AndFileFilter andFileFilter0 = new AndFileFilter(linkedList0);
      PathMatcherFileFilter pathMatcherFileFilter0 = new PathMatcherFileFilter(andFileFilter0);
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, pathMatcherFileFilter0, pathMatcherFileFilter0);
      FileUtils.convertFileCollectionToFileArray(collection0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileUtils.convertFileCollectionToFileArray(linkedList0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "HVDs9w", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "destinationDir", "destinationDir", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // destinationDir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h:,Cm0a- T?ROn-`7g");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "h:,Cm0a- T?ROn-`7g", "h:,Cm0a- T?ROn-`7g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // h:,Cm0a- T?ROn-`7g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "wGfVE^/AzU7oD4&1v<[", (Collection<?>) linkedHashSet0, "3VE-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (String) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)3, (int) (byte)3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, 38, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile("localTime", "localTime");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "localTime", "localTime", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // localTime
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "Uze", "Uze");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Uze
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-2064888121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/foo.bar'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p8fEO/T2BlAT_q:e4");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'p8fEO/T2BlAT_q:e4'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile("Destination directory '", "Destination directory '");
      File file1 = FileUtils.createParentDirectories(file0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "d]";
      stringArray0[1] = "22~s+L(lAb 8^>0j";
      stringArray0[2] = "^`c18(Nn$QVFEXD";
      stringArray0[3] = "System";
      stringArray0[4] = "xfD%U$}d+?AI";
      stringArray0[5] = "D+YX!%kqx4[{";
      stringArray0[6] = "com.google.common.base.CharMatcher$Negated";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "prefix");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // prefix
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' is not a file: ");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "isA");
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "B");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // B
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/l|Gr!:4FI k/l|Gr!:4FI k");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "diD8+Op!7";
      stringArray0[1] = "diD8+Op!7";
      stringArray0[2] = "<jN+Swt<pSekaT";
      stringArray0[3] = "diD8+Op!7";
      stringArray0[4] = "diD8+Op!7";
      stringArray0[5] = "diD8+Op!7";
      File file0 = FileUtils.getFile(stringArray0);
      File file1 = MockFile.createTempFile("diD8+Op!7", "diD8+Op!7", file0);
      File file2 = FileUtils.getFile(file1, stringArray0);
      try { 
        FileUtils.openOutputStream(file2, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/diD8+Op!7/diD8+Op!7/<jN+Swt<pSekaT/diD8+Op!7/diD8+Op!7/diD8+Op!7/diD8+Op!70diD8+Op!7/diD8+Op!7/diD8+Op!7/<jN+Swt<pSekaT/diD8+Op!7/diD8+Op!7'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.moveToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/fake/but/wellformed/url");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.moveFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("er;S", "er;S");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/er;S/er;S' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = MockFile.createTempFile("isOther", "\u0000");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/tmp/isOther0\u0000'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[m>KHX8LTwRNUnM|u", "///home/azureuser/LLm4PrTest/ io_experiments/Bs$t`[kOW|a<oHSSOx/qi&092 /!|&DDFO$8y</qi&092 /Bs$t`[kOW|a<oHSSOx");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/[m>KHX8LTwRNUnM|u/home/azureuser/LLm4PrTest/ io_experiments/Bs$t`[kOW|a<oHSSOx/qi&092 /!|&DDFO$8y</qi&092 /Bs$t`[kOW|a<oHSSOx' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("/tmp/", "/home/azureuser");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("%KoPwg]#ymu=5)", "%KoPwg]#ymu=5)", file0);
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/%KoPwg]#ymu=5)0%KoPwg]#ymu=5)'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Bs$t`[kOW|a<oHSSOx";
      stringArray0[1] = "qi&092 ";
      stringArray0[2] = "!|&DDFO$8y<";
      stringArray0[3] = "iB7$%QY{ZEg|.IwU`u";
      stringArray0[4] = " EB";
      File file2 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      FileUtils.moveDirectory(file1, file2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile("checksum", "/home/azureuser/=n9/L/$/'bK%pmhg\"U^AT*1/home/azureuser/home/home/azureuser/LLm4PrTest/ io_experiments/Bs$t`[kOW|a<oHSSOx/qi&092 /!|&DDFO$8y</qi&092 / EB/pathCounter/1KpKPVx&4 [/home/azureuser/LLm4PrTest/ io_experiments/Bs$t`[kOW|a<oHSSOx/qi&092 /!|&DDFO$8y</iB7$%QY{ZEg|.IwU`u/ EB");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/checksum0/home/azureuser/=n9/L/$/'bK%pmhg\"U^AT*1/home/azureuser/home/home/azureuser/LLm4PrTest/ io_experiments/Bs$t`[kOW|a<oHSSOx/qi&092 /!|&DDFO$8y</qi&092 / EB/pathCounter/1KpKPVx&4 [/home/azureuser/LLm4PrTest/ io_experiments/Bs$t`[kOW|a<oHSSOx/qi&092 /!|&DDFO$8y</iB7$%QY{ZEg|.IwU`u/ EB'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[@8ey;D*fEX#Po'(AV", "[@8ey;D*fEX#Po'(AV");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/[@8ey;D*fEX#Po'(AV/[@8ey;D*fEX#Po'(AV' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.listFiles(file0, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (String[]) null, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/home/azureuser
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`38E)0-YV5/yq", "`38E)0-YV5/yq");
      try { 
        FileUtils.lineIterator((File) mockFile0, "4");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) mockFile0, "org.apache.commons.io.function.IOBaseStreamAdapter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.function.IOBaseStreamAdapter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/home/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(Ljava/lang/Object;)Ljava/lang/Object;");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0000\u00AD\u0600\u061C\u06DD\u070F\u0890\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD800\uFEFF\uFFF9", "`o3;m61:PN");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /fake/but/wellformed/url
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
      try { 
        FileUtils.lastModifiedFileTime(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("XS1td_+@d^0w=g03Go#");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: XS1td_+@d^0w=g03Go#
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Path path0 = file0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      AndFileFilter andFileFilter0 = new AndFileFilter(pathEqualsFileFilter0, pathEqualsFileFilter0);
      File file1 = FileUtils.current();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file1);
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) andFileFilter0, (IOFileFilter) ageFileFilter0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.CONTINUE;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) symbolicLinkFileFilter0, (IOFileFilter) symbolicLinkFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Can only convert file URL to a File: ");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: 'Can only convert file URL to a File: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h:,Cm0a- T?ROn-`7g");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: h:,Cm0a- T?ROn-`7g
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 42L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis(942L);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, fileTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp//tmp/tmp", "/tmp//tmp/tmp");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/tmp/tmp/tmp0/tmp/tmp/tmp
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EY;0X}qAG{?7I%p", "EY;0X}qAG{?7I%p");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0000\u00AD\u0600\u061C\u06DD\u070F\u0890\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD800\uFEFF\uFFF9", "`o3;m61:PN");
      // Undeclared exception!
      try { 
        FileUtils.forceDelete(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = MockFile.createTempFile("EY;0X}qAG{?7I%p", "EY;0X}qAG{?7I%p");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/EY;0X}qAG{?7I%p0EY;0X}qAG{?7I%p'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("/home/azureuser");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/home/azureuser";
      stringArray0[1] = "/home/azureuser";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      try { 
        FileUtils.createParentDirectories(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/home/azureuser/home'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0, (-1816), (-1816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, 64, 64);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BU$t`[kOW|a<oHSSOx";
      stringArray0[1] = "qi&092 ";
      stringArray0[2] = "!|&DD%O$8y<";
      stringArray0[3] = "qi&092 ";
      stringArray0[4] = " ]B";
      File file2 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      FileUtils.copyToDirectory(file1, file2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "QPJ:iz(~'`k- xspJ");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/./QPJ:iz(~'`k- xspJ'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`38E)0-YV5/yq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      File file0 = FileUtils.current();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getFileExample();
      File file1 = FileUtils.toFile(uRL0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile(file1, file0, true, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/tmp");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`38E)0-YV5/yq");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '`38E)0-YV5/yq'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = MockFile.createTempFile("++X*-t&2", "++X*-t&2");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'sourceDir' is not a directory: '/tmp/++X*-t&20++X*-t&2'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp/foo.bar'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%/home/azureuser/LLm4PrTest/ @oWexperiments/X/%/home/azureuser/LLm4PrTest/ @oWexperiments/X/%02L`}mF_V");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) magicNumberFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = SymbolicLinkFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) symbolicLinkFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      MockFile mockFile0 = new MockFile((File) null, "/home/azureuser/Destination directory '/Destination directory '/]q&JbqnbLoqE;!/CharMatcher.breakingWhitespace()/scm)stBG#=YN8/Predicates.instanceOf(");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) null, (FileFilter) emptyFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/Destination directory '/Destination directory '/]q&JbqnbLoqE;!/CharMatcher.breakingWhitespace()/scm)stBG#=YN8/Predicates.instanceOf('
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) directoryFileFilter0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) notFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/!|&DDFO$8y</BG$t`[kOW|a<oHSSOx");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/!|&DDFO$8y</BG$t`[kOW|a<oHSSOx'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Rot*vR*F";
      stringArray0[1] = "NameFileFilter(s,Unknown I/O error listing contents of directory: )";
      stringArray0[2] = ":me g :";
      stringArray0[3] = "AapR3M5z9n#S^+,`~1";
      File file1 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      FileUtils.copyDirectory(file0, file1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.current();
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file1 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyDirectory(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$Rr7NLG Bj9lkhIv>", "$Rr7NLG Bj9lkhIv>");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/$Rr7NLG Bj9lkhIv>/$Rr7NLG Bj9lkhIv>'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = MockFile.createTempFile("Btes to kip: ", "Btes to kip: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Btes to kip: 0Btes to kip: ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "Btes to kip: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      File file0 = MockFile.createTempFile("Btes to kip: ", "Btes to kip: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = MockFile.createTempFile("XS1td_+@d^0w=g03Go#", "XS1td_+@d^0w=g03Go#");
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h:,Cm0a- TwROn-v7g");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: 'h:,Cm0a- TwROn-v7g'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/K*/O!OYa'/jVk/home/azureuser/home/azureuser/azureuser/Destination '", "/home/azureuser/LLm4PrTest/ io_experiments/K*/O!OYa'/jVk/home/azureuser/home/azureuser/azureuser/Destination '");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.current();
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ftp", "ftp");
      try { 
        FileUtils.streamFiles(mockFile0, true, (String[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[1];
      Stream<File> stream0 = FileUtils.streamFiles(file0, true, stringArray0);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/Rot*vR*F/NameFileFilter(s,Unknown I/O error listing contents of directory: )", "/home/azureuser/LLm4PrTest/ io_experiments/Rot*vR*F/NameFileFilter(s,Unknown I/O error listing contents of directory: )");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, true);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("targetFile", "{a");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/targetFile/{a/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("com.google.common.primitives.Floats$FloatConverter", " to a subdirectory of itself: ", file0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/./com.google.common.primitives.Floats$FloatConverter0 to a subdirectory of itself: ' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/foo.bar
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isSymlink(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("0 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "file", "' is not a file: ", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' is not a file: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = FileUtils.current();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2299L));
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, instant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.common.primitives.Booleans");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) null, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'com.google.common.primitives.Booleans'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "681 bytes", "681 bytes", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 681 bytes
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("system", "system");
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      HijrahDate hijrahDate0 = MockHijrahDate.from(zonedDateTime0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) hijrahDate0, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // localTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".gJ0HK>:{";
      stringArray0[1] = ";k)ZTeA^D)y^)0t";
      stringArray0[2] = "";
      stringArray0[3] = "'G{B~,dVby(+mw:";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = MockFile.createTempFile("Btes to kip: ", "Btes to kip: ");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/Btes to kip: 0Btes to kip: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.forceMkdir(file0);
      assertNull(file0.getParent());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "f&v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.newOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", ".UTh+f!%MW6tQrfZDz");
      try { 
        FileUtils.lastModified(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(3486L);
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDateTime<?>) null, (ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(996L);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = MockFile.createTempFile("Functions.forPredicate(", "#giEgRXif5c.HbKqV");
      boolean boolean0 = FileUtils.isFileNewer(file0, 64L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.current();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            FileUtils.write(file0, (CharSequence) null, charset0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1207)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2476)
             // org.apache.commons.io.FileUtils.writeStringToFile(FileUtils.java:3502)
             // org.apache.commons.io.FileUtils.write(FileUtils.java:3198)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToString(file0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(44);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 44, zoneOffset0);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDateTime<?>) localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%", "/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ @oWexperiments/X/%/home/azureuser/LLm4PrTest/ @oWexperiments/X/%' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      URL[] uRLArray0 = new URL[3];
      URL uRL0 = MockURL.getFtpExample();
      uRLArray0[1] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("{Fvjr", "{Fvjr", file0);
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5`}I`\" Pzz[B6_RwM");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '5`}I`\" Pzz[B6_RwM'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = MockFile.createTempFile("'Zm?)qt@kv>h][Fsw%", "'Zm?)qt@kv>h][Fsw%");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/'Zm?)qt@kv>h][Fsw%0'Zm?)qt@kv>h][Fsw%'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'destDir is not writable: '/home/azureuser/LLm4PrTest/ io_experiments/./tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UA");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '/tmp/foo.bar'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          File file1 = MockFile.createTempFile("ql/7", "ql/7", file0);
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file1, file0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/7\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:811)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2399)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2373)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2433)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2460)
             // sun.reflect.GeneratedMethodAccessor407.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile mockFile0 = new MockFile("O=:'#[tn/gVi");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/O=:'#[tn/gVi/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // org.apache.commons.io.FileUtils.setTimes(FileUtils.java:2867)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1314)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:688)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:619)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:520)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:491)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2313)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2351)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2458)
             // sun.reflect.GeneratedMethodAccessor407.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/tmp");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/tmp' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("///home/azureuser/LLm4PrTest/ io_experiments/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/home/azureuser/LLm4PrTest/ io_experiments/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx", " g@Z?", file0);
      try { 
        FileUtils.moveToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser/LLm4PrTest/ io_experiments/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/home/azureuser/LLm4PrTest/ io_experiments/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx/BG$t`[kOW|a<oHSSOx0 g@Z?' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setWritable(false);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
          File file1 = FileUtils.createParentDirectories(file0);
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file1, file0, (FileFilter) falseFileFilter0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // org.apache.commons.io.FileUtils.setTimes(FileUtils.java:2867)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1314)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:688)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:619)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:569)
             // sun.reflect.GeneratedMethodAccessor371.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(mockFile0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i&qPq1iv1+?jX~q";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals("tmp", file1.getName());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ay\"|>(jIfG\"(8iw(");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertEquals("Ay\"|>(jIfG\"(8iw(", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/mvn_base_pr_493.out");
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/tmp");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertFalse(file0.canWrite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileUtils.deleteDirectory(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~%8C+k{uD7P");
      URL uRL0 = mockFile0.toURL();
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/~\uFFFD+k{uD7P", file0.toString());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
      URL uRL0 = mockFile0.toURL();
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("/home/azureuser/LLm4PrTest/ @oWexperiments/X/%", file0.toString());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 64, (-2153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Collection<File> collection0 = FileUtils.listFiles(file0, (String[]) null, false);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) collection0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp/stderr8288454097745754677deferred' (file1='/tmp/stderr8288454097745754677deferred', file2='/tmp/stderr8288454097745754677deferred')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      FileUtils.copyToDirectory((Iterable<File>) arrayList0, file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("/hom", "/hom");
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/hom\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:401)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1212)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1207)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2476)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1029)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:938)
             // sun.reflect.GeneratedMethodAccessor401.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.current();
          File file1 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file0, file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/mvn_base_pr_493.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:811)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:688)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:619)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:520)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:491)
             // sun.reflect.GeneratedMethodAccessor347.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = MockFile.createTempFile("Btes to kip: ", "Btes to kip: ");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "IF_DECLARED");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockFile mockFile0 = new MockFile("system", "system");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "system");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "J}Wx[");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "=PTJaBf8y Aq1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "file1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "e[<:+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = MockFile.createTempFile("Btes to kip: ", "Btes to kip: ");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ay\"|>(jIfG\"(8iw(");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ay\"|>(jIfG\"(8iw(");
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(681L);
      assertEquals("681 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_YB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1048576 EB", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "</9bNw!ZWjP6-s>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.waitFor(file0, (-554));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jHU?63N-");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'jHU?63N-'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = FileUtils.current();
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "e($sUqG#Q87", (Collection<?>) linkedHashSet0, "e($sUqG#Q87");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ArrayDeque<Boolean> arrayDeque0 = new ArrayDeque<Boolean>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertEquals(1755767590862L, long0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5`}I`\" Pzz[B6_RwM");
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "Class %s not found, referenced in method %s");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Class %s not found, referenced in method %s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, falseFileFilter0, falseFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/azureuser");
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "lOto54g", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "QI*<n|11-tC.", (Collection<?>) linkedHashSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FileTime fileTime0 = FileTime.from(0L, timeUnit0);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "s|J+rE", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (String[]) null, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "xag/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      OffsetTime offsetTime0 = MockOffsetTime.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null, offsetTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = MockFile.createTempFile("Paj*OB$^,8", "Paj*OB$^,8");
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, offsetDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.current();
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) canReadFileFilter0, (IOFileFilter) canReadFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "QfI{YjXkEdl");
      FileUtils.forceMkdirParent(mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, offsetDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "e($sUqG#Q87", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayDeque0, "LmObn8LLab`XOv /^c ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LocalDate localDate0 = MockLocalDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (ChronoZonedDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoZonedDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (String[]) null, true);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "/home/azureuser/LLm4PrTest/ @oWexperiments/X/%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ @oWexperiments/X/%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OffsetTime offsetTime0 = MockOffsetTime.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null, offsetTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = MockFile.createTempFile("Btes to kip: ", "Btes to kip: ");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) null, "Vh0#:_nN6W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "MURMUR128_MITZ_32", "MURMUR128_MITZ_32");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // MURMUR128_MITZ_32
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = FileUtils.current();
      FileEqualsFileFilter fileEqualsFileFilter0 = new FileEqualsFileFilter(file0);
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) fileEqualsFileFilter0, (IOFileFilter) fileEqualsFileFilter0);
      assertFalse(collection0.contains(file0));
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/", "/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (OffsetDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals("/tmp", fileUtils0.getTempDirectoryPath());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }
}
