/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:07:13 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOFunction;
import org.apache.commons.io.output.ThresholdingOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ThresholdingOutputStream_ESTest extends ThresholdingOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(0);
      boolean boolean0 = thresholdingOutputStream0.isThresholdExceeded();
      assertEquals(0, thresholdingOutputStream0.getThreshold());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(0);
      thresholdingOutputStream0.checkThreshold(0);
      assertEquals(0, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      thresholdingOutputStream0.checkThreshold(0);
      assertEquals(2524, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      byte[] byteArray0 = new byte[4];
      thresholdingOutputStream0.write(byteArray0);
      assertEquals(4L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(0);
      int int0 = thresholdingOutputStream0.getThreshold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-957));
      int int0 = thresholdingOutputStream0.getThreshold();
      assertEquals((-957), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      thresholdingOutputStream0.getStream();
      assertEquals(2524, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-957));
      thresholdingOutputStream0.write((-957));
      long long0 = thresholdingOutputStream0.getByteCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      thresholdingOutputStream0.setByteCount((byte) (-1));
      long long0 = thresholdingOutputStream0.getByteCount();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      thresholdingOutputStream0.flush();
      assertEquals(2524, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-1));
      boolean boolean0 = thresholdingOutputStream0.isThresholdExceeded();
      assertTrue(boolean0);
      assertEquals((-1), thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      boolean boolean0 = thresholdingOutputStream0.isThresholdExceeded();
      assertFalse(boolean0);
      assertEquals(2524, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2801));
      thresholdingOutputStream0.write((-2801));
      thresholdingOutputStream0.write((-2801));
      assertEquals(2L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(1, (IOConsumer<ThresholdingOutputStream>) null, (IOFunction<ThresholdingOutputStream, OutputStream>) null);
      assertEquals(1, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      thresholdingOutputStream0.getByteCount();
      assertEquals(2524, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      int int0 = thresholdingOutputStream0.getThreshold();
      assertEquals(2524, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      thresholdingOutputStream0.thresholdReached();
      assertEquals(2524, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(2524);
      byte[] byteArray0 = new byte[4];
      thresholdingOutputStream0.write(byteArray0, (int) (byte)0, 585);
      assertEquals(585L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-1));
      thresholdingOutputStream0.resetByteCount();
      assertEquals(0L, thresholdingOutputStream0.getByteCount());
      assertEquals((-1), thresholdingOutputStream0.getThreshold());
      assertTrue(thresholdingOutputStream0.isThresholdExceeded());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-1));
      // Undeclared exception!
      try { 
        thresholdingOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ThresholdingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(1);
      thresholdingOutputStream0.close();
      assertEquals(1, thresholdingOutputStream0.getThreshold());
  }
}
