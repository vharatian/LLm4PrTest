/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:55:54 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = FilenameUtils.getName("&0Mh!~Z1dhR,k/E!B[>");
      assertEquals("E!B[>", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("canonicalParent");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("FNp]iGroYC");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getPath("/)#&),,8f6H|>");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = FilenameUtils.getPath("~gG_K_Z$v");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("o?8xo$p");
      assertNotNull(string0);
      assertEquals("o?8xo$p", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = FilenameUtils.concat("^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$/^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$", "^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$/^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$");
      assertNotNull(string0);
      assertEquals("^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$/^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$/^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$/^(/d{1,3})/.(/d{1,g})/.(/d{1,3})$", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("7j*_s|4", "7j*_s|4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens(" must be static.");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = FilenameUtils.normalize((String) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = FilenameUtils.getName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("", "?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals(".", "Zr$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "p>CJKd`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.push("COM2");
      // Undeclared exception!
      try { 
        FilenameUtils.isExtension("UeT86afk-3w3^", (Collection<String>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.directoryContains((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // canonicalParent
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("`", "*GDNCyK;k3L", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("?9T$*3YU8xJE2", "*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?C1j]B! BNqWO6MH;", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("0", "?8{4;?BD", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch(".H]KEW;a6V/", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, "GWTvwuRIn{l+", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals("`cnS.2H(ZL", "`cnS.2H(ZL", true, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals("h=z~EnBm*DK6}wdM+", "::", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals(":2tN }_6}", "h({\"&5BB=", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("A,OV2AF<xw-", "J58RH$", true, (IOCase) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, true, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("kic%U~UI", (String) null, false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, "(A-PO", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("C");
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("IDd.@n?\"d3z");
      assertEquals("@n?\"d3z", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = FilenameUtils.getPath("724,C|/f{hEmO*");
      assertEquals("724,C|/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~e'*CPbwl:@ :@~)18");
      assertEquals("~e'*CPbwl:@ :@~)18/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("*");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("Csj5nw6^>UNb/`_Sp?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("org.apache.commons.io.FilenameUtils");
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator(")eTBw/BdX8d6X19Dl4D");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("//cx4/Wr#Zi$){4^");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(")#&),,8f6H|>");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("K:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~(g#p:!a_4l4F0AG");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~/kZD");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("?");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(":");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("bUoyjOM-,g]");
      assertEquals("bUoyjOM-,g]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = FilenameUtils.concat("/", "^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      assertEquals("/^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "/eMy^MqV@?7Yv[X.,/");
      assertNotNull(string0);
      assertEquals("/eMy^MqV@?7Yv[X.,/", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator(".H]KEW;a6V/", false);
      assertEquals(".H]KEW;a6V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized(">", "M:m/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("B5jJ<:m6AKy~,Vx|19J", "qiVMA&**HF", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("*", "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("<uxaZ+*=#/<uxaZ+*=#", "<uxaZ+*=#", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("C", "7>Fv8(Be@FwSMlJ", (IOCase) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension(".", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("K");
      boolean boolean0 = FilenameUtils.isExtension("K", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("~", (Collection<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      boolean boolean0 = FilenameUtils.isExtension("qve)uN[", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.description.type.TypeDescription$Generic", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = FilenameUtils.isExtension("qve)uN[", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("S\"8tS", (String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[31];
      boolean boolean0 = FilenameUtils.isExtension(stringArray0[15], stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.build.ToStringPlugin", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("A,OV2AF<xw-", "J58RH$", false, (IOCase) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("):ZdG", "):ZdG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem((String) null, "z: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("Illegal range. Equal from and to will produce an empty range.");
      assertEquals("Illegal range. Equal from and to will produce an empty range", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", "Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("qve)uN[");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("/:");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath(")#&),,8f6H|>");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = FilenameUtils.getPath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("^:");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\|N4Wr6H<Zi$./km{t");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\/@r#Zi$){4^");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/:a");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("K:){#qH");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = FilenameUtils.concat("K:", "K:");
      assertNotNull(string0);
      assertEquals("K:/K:", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("K:/");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("{:U'5u7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("~(g#p:!a_4lF0AG[");
      assertNotNull(string0);
      assertEquals("~(g#p:!a_4lF0AG[", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("~/kZD");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("~z&\")");
      assertEquals("~z&\")/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("*GDNCyK;k3L");
      assertEquals("*GDNCyK;k3L", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("\\c>4/?6Wr#Si${4");
      assertEquals("\\c>4\\?6Wr#Si${4", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("Y!p>h*g=", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("_", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "#ASB+}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = FilenameUtils.concat("7:'[~o)-:O^=xiRz", "7:'[~o)-:O^=xiRz");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("~", "~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("md{1,3})b{d{1,g}h&d{,)..\u0004{1&m}$");
      assertNotNull(string0);
      assertEquals("md{1,3})b{d{1,g}h&d{,)..\u0004{1&m}$", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = FilenameUtils.concat("^(d{1,3}).{d{1,g}).(d{1,3})..d{1,3}$", "^(d{1,3}).{d{1,g}).(d{1,3})..");
      assertNotNull(string0);
      assertEquals("^(d{1,3}).{d{1,g}).(d{1,3})..d{1,3}$/^(d{1,3}).{d{1,g}).(d{1,3})..", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = FilenameUtils.normalize("<uxaZ+*=.");
      assertEquals("<uxaZ+*=.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = FilenameUtils.concat(".", ".");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = FilenameUtils.concat("+qg'W\"@Y", ".");
      assertNotNull(string0);
      assertEquals("+qg'W\"@Y/", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.normalize(".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("C[", true);
      assertNotNull(string0);
      assertEquals("C[", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = FilenameUtils.normalize("7*'vrbHbmkL7F?<F", true);
      assertEquals("7*'vrbHbmkL7F?<F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = FilenameUtils.normalize("/../;@4V^CW");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("\"[M=3*?|(XmH", "\"[M=3*?|(XmH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("L,");
      assertEquals("L,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = FilenameUtils.getPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("~", "~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("");
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
