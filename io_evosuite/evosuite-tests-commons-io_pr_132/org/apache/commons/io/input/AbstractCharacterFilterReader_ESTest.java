/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:29:59 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.LinkedHashSet;
import org.apache.commons.io.input.CharacterFilterReader;
import org.apache.commons.io.input.CharacterSetFilterReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractCharacterFilterReader_ESTest extends AbstractCharacterFilterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.input.AbstractCharacterFilterReader");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CharacterSetFilterReader characterSetFilterReader0 = new CharacterSetFilterReader(stringReader0, linkedHashSet0);
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(characterSetFilterReader0, (-2169));
      char[] charArray0 = new char[9];
      int int0 = characterFilterReader0.read(charArray0, 1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`..m#7~~]C0s0I0");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 1);
      char[] charArray0 = new char[6];
      int int0 = characterFilterReader0.read(charArray0, 1, 1);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '`', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 0);
      char[] charArray0 = new char[5];
      int int0 = characterFilterReader0.read(charArray0, 0, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cE8S{_wrJ1m<3^+3e(");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 0);
      // Undeclared exception!
      try { 
        characterFilterReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`..m#7~~]C0s0I0");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CharacterSetFilterReader characterSetFilterReader0 = new CharacterSetFilterReader(characterFilterReader0, linkedHashSet0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        characterSetFilterReader0.read(charArray0, (-1), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cE8S{_wrJ1m<3^3e(");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 0);
      characterFilterReader0.close();
      try { 
        characterFilterReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cE8S{_wrJ1m<3^+3e(");
      stringReader0.close();
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 0);
      try { 
        characterFilterReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":MB6zW&hKoGO>y");
      CharBuffer charBuffer0 = CharBuffer.allocate(66);
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 66);
      characterFilterReader0.read(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      int int0 = characterFilterReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, (-1));
      // Undeclared exception!
      characterFilterReader0.read();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`..m#7~~]C0s0I0");
      CharacterFilterReader characterFilterReader0 = new CharacterFilterReader(stringReader0, 1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CharacterSetFilterReader characterSetFilterReader0 = new CharacterSetFilterReader(characterFilterReader0, linkedHashSet0);
      int int0 = characterSetFilterReader0.read();
      assertEquals(96, int0);
  }
}
