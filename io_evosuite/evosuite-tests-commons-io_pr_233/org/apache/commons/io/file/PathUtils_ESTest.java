/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:35:07 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(fileVisitOption0));
      
      boolean boolean1 = linkedHashSet0.add(fileVisitOption0);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(fileVisitOption0));
      
      FileVisitResult fileVisitResult0 = FileVisitResult.CONTINUE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFile(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(simpleFileVisitor1);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      assertTrue(linkedHashSet0.contains(fileVisitOption0));
      
      CopyOption[] copyOptionArray0 = new CopyOption[9];
      copyOptionArray0[0] = (CopyOption) linkOption1;
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[3] = (CopyOption) standardCopyOption0;
      copyOptionArray0[4] = (CopyOption) linkOption1;
      copyOptionArray0[5] = (CopyOption) linkOption1;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption1);
      assertNotSame(standardCopyOption1, standardCopyOption0);
      
      copyOptionArray0[6] = (CopyOption) standardCopyOption1;
      copyOptionArray0[7] = (CopyOption) linkOption0;
      copyOptionArray0[8] = (CopyOption) linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[6];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
      StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
      assertSame(standardDeleteOption3, standardDeleteOption2);
      assertSame(standardDeleteOption3, standardDeleteOption1);
      assertSame(standardDeleteOption3, standardDeleteOption0);
      
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
      StandardDeleteOption standardDeleteOption4 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption4);
      assertSame(standardDeleteOption4, standardDeleteOption1);
      assertSame(standardDeleteOption4, standardDeleteOption2);
      assertSame(standardDeleteOption4, standardDeleteOption3);
      assertSame(standardDeleteOption4, standardDeleteOption0);
      
      deleteOptionArray0[4] = (DeleteOption) standardDeleteOption4;
      StandardDeleteOption standardDeleteOption5 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption5);
      assertSame(standardDeleteOption5, standardDeleteOption4);
      assertSame(standardDeleteOption5, standardDeleteOption2);
      assertSame(standardDeleteOption5, standardDeleteOption1);
      assertSame(standardDeleteOption5, standardDeleteOption0);
      assertSame(standardDeleteOption5, standardDeleteOption3);
      
      deleteOptionArray0[5] = (DeleteOption) standardDeleteOption5;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0, 3447, linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("v");
      assertNotNull(prefixFileFilter0);
      
      MockFile mockFile0 = new MockFile("v", "v");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.isFile());
      assertEquals("v", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v/v", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      File file0 = mockFile0.getAbsoluteFile();
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.isFile());
      assertEquals("v", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v/v", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v/v", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("v", file0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v", file0.getParent());
      assertFalse(file0.canExecute());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(2, linkOptionArray0.length);
      assertTrue(mockFile0.isFile());
      assertEquals("v", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/v/v", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(boolean0);
      assertNotSame(mockFile0, file0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      try { 
        PathUtils.walk(path0, prefixFileFilter0, 791, false, fileVisitOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption4;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 3447, linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.TERMINATE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{Y(`8}@P5l$+";
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "{Y(`8}@P5l$+", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(simpleFileVisitor1);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[0] = (CopyOption) linkOption0;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.REPLACE_EXISTING;
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption1);
      assertNotSame(standardCopyOption1, standardCopyOption0);
      
      copyOptionArray0[2] = (CopyOption) standardCopyOption1;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path2 = mockFile0.toPath();
      assertFalse(path2.equals((Object)path0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertNotNull(path2);
      assertNotSame(path2, path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path2, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertFalse(path2.equals((Object)path0));
      assertEquals(0, linkOptionArray0.length);
      assertEquals(5, fileVisitOptionArray0.length);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(boolean0);
      assertNotSame(path2, path0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile((URL) null, (Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("posix:permissions");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("posix:permissions", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("posix:permissions", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals("posix:permissions", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("posix:permissions", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Path[] pathArray0 = new Path[7];
      MockFile mockFile0 = new MockFile("ACQmh$)ZN8X*sK)Cn0", "ACQmh$)ZN8X*sK)Cn0");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ACQmh$)ZN8X*sK)Cn0/ACQmh$)ZN8X*sK)Cn0", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ACQmh$)ZN8X*sK)Cn0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("ACQmh$)ZN8X*sK)Cn0", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1564L, true);
      assertNotNull(sizeFileFilter0);
      
      try { 
        PathUtils.newDirectoryStream(path0, sizeFileFilter0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          MockFile mockFile0 = new MockFile("%,d exceptions: %s");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(path1.equals((Object)path0));
          assertFalse(mockFile0.exists());
          assertEquals("%,d exceptions: %s", mockFile0.toString());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isDirectory());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals("%,d exceptions: %s", mockFile0.getName());
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path1, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"%,d exceptions: %s\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:487)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:462)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:366)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("_H", "_H");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("_H", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path1, path1);
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("_H", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean0);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`,`inm6LB;DWJ0(_4{.");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("`,`inm6LB;DWJ0(_4{.", "`,`inm6LB;DWJ0(_4{.", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("`,`inm6LB;DWJ0(_4{.", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("`,`inm6LB;DWJ0(_4{.", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/`,`inm6LB;DWJ0(_4{./`,`inm6LB;DWJ0(_4{.0`,`inm6LB;DWJ0(_4{.", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("`,`inm6LB;DWJ0(_4{.0`,`inm6LB;DWJ0(_4{.", file0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/`,`inm6LB;DWJ0(_4{.", file0.getParent());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      MockFile mockFile1 = new MockFile(file0, "b<fL_[=}xB(A");
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path0 = mockFile1.toPath();
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("`,`inm6LB;DWJ0(_4{.", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("`,`inm6LB;DWJ0(_4{.", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/`,`inm6LB;DWJ0(_4{./`,`inm6LB;DWJ0(_4{.0`,`inm6LB;DWJ0(_4{.", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("`,`inm6LB;DWJ0(_4{.0`,`inm6LB;DWJ0(_4{.", file0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/`,`inm6LB;DWJ0(_4{.", file0.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals("b<fL_[=}xB(A", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/`,`inm6LB;DWJ0(_4{./`,`inm6LB;DWJ0(_4{.0`,`inm6LB;DWJ0(_4{./b<fL_[=}xB(A", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/`,`inm6LB;DWJ0(_4{./`,`inm6LB;DWJ0(_4{.0`,`inm6LB;DWJ0(_4{.", mockFile1.getParent());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertNotNull(path0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      
      DeleteOption[] deleteOptionArray0 = null;
      try { 
        PathUtils.deleteDirectory(path0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0, 202, linkOptionArray0, fileVisitOptionArray0);
      assertEquals(4, linkOptionArray0.length);
      assertEquals(6, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("posix:permissions", "posix:permissions");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.canWrite());
      assertEquals("posix:permissions", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/posix:permissions", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/posix:permissions/posix:permissions", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(path0);
      
      try { 
        PathUtils.readBasicFileAttributes(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Path path0 = null;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      String string0 = "G_ajO4J";
      MockFile mockFile0 = new MockFile("G_ajO4J", "org.apache.commons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/G_ajO4J", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/G_ajO4J/org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertNotNull(path1);
      
      try { 
        PathUtils.isEmptyDirectory(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          MockFile mockFile0 = new MockFile("_H", "_H");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(path1.equals((Object)path0));
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("_H", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("_H", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertFalse(boolean0);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          boolean boolean1 = PathUtils.directoryAndFileContentEquals(path1, path0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertTrue(boolean1 == boolean0);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("_H", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertFalse(boolean1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          MockFile mockFile1 = new MockFile("_H");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path1, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/_H/_H\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:487)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("_H", "_H");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("_H", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("_H", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H/_H", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_H", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(path0, path1);
      
      MockFile mockFile1 = new MockFile("Unexpected mismatch.");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path2 = mockFile1.toPath();
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertEquals("Unexpected mismatch.", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertEquals("Unexpected mismatch.", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isAbsolute());
      assertNotNull(path2);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      
      try { 
        PathUtils.countDirectory(path2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("", "file");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals("/file", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("file", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.current();
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotNull(path2);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path2);
      assertTrue(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path0, path2);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 1);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      Path path3 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertTrue(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      assertEquals(1, fileAttributeArray0.length);
      assertNull(path3);
      assertNotSame(path0, path1);
      assertNotSame(path0, path2);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, path2);
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      MockFile mockFile1 = new MockFile("filter");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path4 = mockFile1.toPath();
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path4.equals((Object)path1));
      assertFalse(path4.equals((Object)path0));
      assertFalse(path4.equals((Object)path2));
      assertFalse(mockFile1.exists());
      assertEquals("filter", mockFile1.getName());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.length());
      assertEquals("filter", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNotNull(path4);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path4, path1);
      assertNotSame(path4, path0);
      assertNotSame(path4, path2);
      
      try { 
        PathUtils.cleanDirectory(path4);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      assertSame(linkOption1, linkOption0);
      
      linkOptionArray0[2] = linkOption1;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray1 = LinkOption.values();
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertEquals(1, linkOptionArray1.length);
      assertNotNull(linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      
      fileVisitOptionArray0[1] = fileVisitOption1;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0);
      assertFalse(boolean0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray1, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.deleteFile(path0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("", "rl_{");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.io.file.PathUtils");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path1 = mockFile1.toPath();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("rl_{", mockFile0.getName());
      assertEquals("/rl_{", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertEquals("/rl_{", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/rl_{/org.apache.commons.io.file.PathUtils", mockFile1.toString());
      assertNotNull(path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("rl_{", mockFile0.getName());
      assertEquals("/rl_{", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertEquals("/rl_{", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/rl_{/org.apache.commons.io.file.PathUtils", mockFile1.toString());
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean1 = PathUtils.isNewer(path1, 1L, linkOptionArray0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertEquals(6, linkOptionArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("rl_{", mockFile0.getName());
      assertEquals("/rl_{", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertEquals("/rl_{", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/rl_{/org.apache.commons.io.file.PathUtils", mockFile1.toString());
      assertFalse(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.isEmpty(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("c,eN:%KI@%:\t6", "c,eN:%KI@%:\t6");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c,eN:%KI@%:\t6/c,eN:%KI@%:\t6", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c,eN:%KI@%:\t6", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("c,eN:%KI@%:\t6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean0 = PathUtils.isNewer(path1, (-1994L), linkOptionArray0);
      assertFalse(path1.equals((Object)path0));
      assertEquals(7, linkOptionArray0.length);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c,eN:%KI@%:\t6/c,eN:%KI@%:\t6", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c,eN:%KI@%:\t6", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("c,eN:%KI@%:\t6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean0);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      MockFile mockFile0 = new MockFile("|ttN<j |uz", "|ttN<j |uz");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/|ttN<j |uz", mockFile0.getParent());
      assertEquals("|ttN<j |uz", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/|ttN<j |uz/|ttN<j |uz", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(path0);
      
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Path path0 = null;
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MockURI.create("NW##CJrwU7M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in fragment at index 3: NW##CJrwU7M
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.URI("");
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      assertTrue(uRI1.equals((Object)uRI0));
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNotNull(uRI1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("Tj!NlC}:AH^Z$ iHPXW");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.isDirectory());
      assertEquals("Tj!NlC}:AH^Z$ iHPXW", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("Tj!NlC}:AH^Z$ iHPXW", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.copyDirectory(path1, path0, (CopyOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Advice for ");
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean1 = PathUtils.isNewer(path0, 2113L, linkOptionArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = PathUtils.isEmpty(path0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(0, fileVisitOptionArray0.length);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, set0, (-748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      MockFile mockFile0 = new MockFile("", ":eZyw}E2#91uMS7x,f");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("qu~6&V1Ng?-$Is>b", ":eZyw}E2#91uMS7x,f", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals(":eZyw}E2#91uMS7x,f", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/:eZyw}E2#91uMS7x,f", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/:eZyw}E2#91uMS7x,f", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      MockFile mockFile1 = new MockFile(file0, "qu~6&V1Ng?-$Is>b");
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path0 = mockFile1.toPath();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals(":eZyw}E2#91uMS7x,f", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/:eZyw}E2#91uMS7x,f", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/:eZyw}E2#91uMS7x,f", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("qu~6&V1Ng?-$Is>b", mockFile1.getName());
      assertTrue(mockFile1.isFile());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      
      Path path1 = PathUtils.current();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      fileVisitOptionArray0[3] = fileVisitOption1;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption3;
      fileVisitOptionArray0[5] = fileVisitOption0;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      assertEquals(6, fileVisitOptionArray0.length);
      assertEquals(5, linkOptionArray0.length);
      assertTrue(mockFile0.canRead());
      assertEquals(":eZyw}E2#91uMS7x,f", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/:eZyw}E2#91uMS7x,f", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/:eZyw}E2#91uMS7x,f", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("qu~6&V1Ng?-$Is>b", mockFile1.getName());
      assertTrue(mockFile1.isFile());
      assertEquals("/:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b0:eZyw}E2#91uMS7x,f/qu~6&V1Ng?-$Is>b", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("rl_{", "dk;W");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{/dk;W", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("dk;W", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{/dk;W", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("dk;W", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{/dk;W", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("dk;W", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("posix:permissions", "posix:permissions");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/posix:permissions", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals("posix:permissions", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/posix:permissions/posix:permissions", mockFile0.toString());
      assertNotNull(path0);
      
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      MockFile mockFile0 = new MockFile("GZZ1olsyj2", "GZZ1olsyj2");
      assertNotNull(mockFile0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2/GZZ1olsyj2", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2", mockFile0.getParent());
      assertEquals("GZZ1olsyj2", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2/GZZ1olsyj2", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2", mockFile0.getParent());
      assertEquals("GZZ1olsyj2", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2/GZZ1olsyj2", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2", mockFile0.getParent());
      assertEquals("GZZ1olsyj2", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(boolean1);
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P1hS");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("P1hS", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("P1hS", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(path0);
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          MockFile mockFile0 = new MockFile("rl_{", "\"57G5F)_wCS");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(path1.equals((Object)path0));
          assertEquals("\"57G5F)_wCS", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{/\"57G5F)_wCS", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{", mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertEquals("\"57G5F)_wCS", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{/\"57G5F)_wCS", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rl_{", mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(boolean0);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path1, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\"57G5F)_wCS\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("|ttN<j |uz", "|ttN<j |uz");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/|ttN<j |uz/|ttN<j |uz", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/|ttN<j |uz", mockFile0.getParent());
      assertEquals("|ttN<j |uz", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/|ttN<j |uz/|ttN<j |uz", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/|ttN<j |uz", mockFile0.getParent());
      assertEquals("|ttN<j |uz", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'iyq!H^", "'iyq!H^");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'iyq!H^", mockFile0.getParent());
      assertEquals("'iyq!H^", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'iyq!H^/'iyq!H^", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'iyq!H^", mockFile0.getParent());
      assertEquals("'iyq!H^", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'iyq!H^/'iyq!H^", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{3YzPjYAj}5");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isAbsolute());
      assertEquals("{3YzPjYAj}5", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("{3YzPjYAj}5", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(path0);
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("collector", "collector");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isHidden());
      assertEquals("collector", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector/collector", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertNotNull(path0);
      
      boolean boolean1 = PathUtils.fileContentEquals(path0, path0);
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals("collector", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector/collector", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertTrue(boolean1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean2 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(mockFile0.isHidden());
      assertEquals("collector", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector/collector", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(boolean2);
      
      Path path1 = PathUtils.current();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption0;
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(2, fileVisitOptionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("p");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[6];
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(6, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters((PathFilter) prefixFileFilter0, (PathFilter) prefixFileFilter0);
      assertNotNull(accumulatorPathVisitor0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      stringArray0[2] = "p";
      stringArray0[3] = "p";
      stringArray0[4] = "p";
      stringArray0[5] = "p";
      stringArray0[6] = "p";
      stringArray0[7] = "p";
      stringArray0[8] = "p";
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, "p", stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      MockFile mockFile0 = new MockFile("GZZ1olsyj2", "GZZ1olsyj2");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("GZZ1olsyj2", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2/GZZ1olsyj2", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertEquals("GZZ1olsyj2", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2/GZZ1olsyj2", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean0);
      
      try { 
        MockURI.URI("org.apache.commons.io.file.PathUtils$1", "", "' after copy to '", (-2306), "' after copy to '", "' after copy to '", "GZZ1olsyj2");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.commons.io.file.PathUtils$1://@' after copy to ':-2306'%20after%20copy%20to%20'?'%20after%20copy%20to%20'#GZZ1olsyj2
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("U=wnD");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("U=wnD", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("U=wnD", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path1);
      assertFalse(path1.equals((Object)path0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("U=wnD", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("U=wnD", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(boolean0);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
          assertNull(list0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[7] = linkOption7;
          LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[8] = linkOption8;
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertEquals(9, linkOptionArray0.length);
          assertTrue(boolean0);
          
          Path path1 = PathUtils.current();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path1, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:87)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:171)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:230)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertEquals(9, linkOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      List<AclEntry> list1 = PathUtils.getAclEntryList(path0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CopyDirectoryVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      // Undeclared exception!
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Path path0 = null;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      fileVisitOptionArray0[3] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertEquals(4, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:417)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:365)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:87)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:171)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:230)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertEquals(0, linkOptionArray0.length);
          assertTrue(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:87)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:171)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:230)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      DeleteOption[] deleteOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption2;
      fileVisitOptionArray0[4] = fileVisitOption0;
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[6] = fileVisitOption0;
      fileVisitOptionArray0[7] = fileVisitOption0;
      fileVisitOptionArray0[8] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertEquals(9, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(path0));
      
      LinkedHashSet<Path> linkedHashSet1 = new LinkedHashSet<Path>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(path0));
      
      boolean boolean1 = linkedHashSet1.add(path0);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(boolean1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.contains(path0));
      
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption6);
      assertSame(linkOption6, linkOption2);
      assertSame(linkOption6, linkOption0);
      assertSame(linkOption6, linkOption4);
      assertSame(linkOption6, linkOption1);
      assertSame(linkOption6, linkOption5);
      assertSame(linkOption6, linkOption3);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = ":4S3./LH~r`5p@hLY";
          MockFile mockFile0 = new MockFile(":4S3./LH~r`5p@hLY");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canRead());
          assertEquals(":4S3./LH~r`5p@hLY", mockFile0.toString());
          assertEquals("LH~r`5p@hLY", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertEquals(":4S3.", mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertNotNull(path0);
          
          FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          fileAttributeArray0[7] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \":4S3.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:311)
             // sun.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("filter", "filter");
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.exists());
          assertEquals("/tmp/filter0filter", file0.toString());
          assertTrue(file0.isFile());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isDirectory());
          assertEquals("filter0filter", file0.getName());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canWrite());
          assertNotNull(file0);
          
          MockFile mockFile0 = new MockFile(file0, "filter");
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.exists());
          assertEquals("/tmp/filter0filter", file0.toString());
          assertTrue(file0.isFile());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isDirectory());
          assertEquals("filter0filter", file0.getName());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canWrite());
          assertEquals("filter", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertEquals("/tmp/filter0filter", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("/tmp/filter0filter/filter", mockFile0.toString());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertNotNull(path0);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/filter0filter\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:311)
             // sun.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(2, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(path0));
      
      boolean boolean1 = linkedHashSet0.add(path0);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(path0));
      
      Comparator<Path> comparator0 = (Comparator<Path>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedHashSet0.contains(path0));
      assertTrue(list0.contains(path0));
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.isEmptyFile(path0);
          assertFalse(boolean0);
          
          boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertFalse(boolean1 == boolean0);
          assertTrue(boolean1);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter();
      assertNotNull(orFileFilter0);
      
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      assertEquals("false", falseFileFilter0.toString());
      assertNotNull(falseFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      Path[] pathArray1 = PathUtils.filter(falseFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(4, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertEquals("false", falseFileFilter0.toString());
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, orFileFilter0, (-932915833), true, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("t8q[QSr>lT-]v_b/&");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("&", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("t8q[QSr>lT-]v_b/&", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("t8q[QSr>lT-]v_b", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.cleanDirectory(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      assertNotNull(directoryFileFilter0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter(directoryFileFilter0, directoryFileFilter0);
      assertNotNull(andFileFilter0);
      
      List<IOFileFilter> list0 = andFileFilter0.getFileFilters();
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(orFileFilter0);
      
      Path[] pathArray0 = new Path[5];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      MockFile mockFile0 = new MockFile(";ljoR-\"%9z0-HVH ");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.canWrite());
      assertEquals(";ljoR-\"%9z0-HVH ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(";ljoR-\"%9z0-HVH ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      pathArray0[4] = path1;
      Path[] pathArray1 = PathUtils.filter(orFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(4, pathArray1.length);
      assertEquals(5, pathArray0.length);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertNotSame(pathArray0, pathArray1);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (-104L), (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-2401), linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-372), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("collector");
          assertNotNull(mockFile0);
          
          boolean boolean0 = mockFile0.mkdir();
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("collector", mockFile0.getName());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals("collector", mockFile0.toString());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertFalse(boolean0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("collector", mockFile0.getName());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals("collector", mockFile0.toString());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"collector\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:487)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:462)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:342)
             // sun.reflect.GeneratedMethodAccessor121.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("collector", "collector");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.exists());
          assertEquals("collector", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector", mockFile0.getParent());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/collector/collector", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/collector/collector\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:487)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:462)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:342)
             // sun.reflect.GeneratedMethodAccessor121.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-108);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)115, (byte) (-1), (byte)7, (byte)2, (byte) (-108)}, byteArray0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean1 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, linkOptionArray0.length);
      assertTrue(boolean1);
      assertNotSame(path0, path1);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertTrue(path0.equals((Object)path1));
      assertNotNull(counters_PathCounters0);
      assertNotSame(path0, path1);
      
      CopyDirectoryVisitor copyDirectoryVisitor0 = new CopyDirectoryVisitor(counters_PathCounters0, path0, path1, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertEquals(4, linkOptionArray0.length);
      assertNotNull(copyDirectoryVisitor0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(copyDirectoryVisitor0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      URI uRI0 = MockURI.aFTPURI;
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"ftp\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      MockFile mockFile0 = new MockFile("gGk{");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile0.exists());
      assertEquals("gGk{", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("gGk{", mockFile0.getName());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesUnchecked(path1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: gGk{
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("#hEmLZ^M^nL.H/");
      assertNotNull(prefixFileFilter0);
      
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      assertNotNull(hiddenFileFilter0);
      
      Path[] pathArray0 = new Path[6];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      pathArray0[5] = path0;
      // Undeclared exception!
      try { 
        PathUtils.filter(hiddenFileFilter0, pathArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("org.apache.commons.io.file.PathUtils$RelativeSortedPaths");
          assertNotNull(prefixFileFilter0);
          
          Path[] pathArray0 = new Path[1];
          pathArray0[0] = path1;
          Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
          assertFalse(pathArray1.equals((Object)pathArray0));
          assertEquals(1, pathArray0.length);
          assertEquals(0, pathArray1.length);
          assertNotNull(pathArray1);
          assertNotSame(pathArray0, pathArray1);
          assertNotSame(pathArray1, pathArray0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption1;
          linkOptionArray0[1] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path1);
          assertTrue(path1.equals((Object)path0));
          assertTrue(boolean0);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path1, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:417)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("org.apache.commons.io.file.PathUtils$RelativeSortedPaths");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path1;
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption0;
      boolean boolean0 = PathUtils.isEmpty(path1);
      assertTrue(path1.equals((Object)path0));
      assertFalse(boolean0);
      assertNotSame(path1, path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      FileVisitOption fileVisitOption8 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[8] = fileVisitOption8;
      Stream<Path> stream0 = PathUtils.walk(path1, prefixFileFilter0, 0, false, fileVisitOptionArray0);
      assertTrue(path1.equals((Object)path0));
      assertEquals(9, fileVisitOptionArray0.length);
      assertNotNull(stream0);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, notFileFilter0, (-121), true, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertTrue(path1.equals((Object)path0));
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, linkOptionArray0.length);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean1);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path[] pathArray0 = new Path[0];
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      assertNotNull(directoryFileFilter0);
      
      Path[] pathArray0 = PathUtils.filter(directoryFileFilter0, (Path[]) null);
      assertEquals(0, pathArray0.length);
      assertNotNull(pathArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = PathUtils.isEmptyDirectory(path0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-zCvm;T-DDqlxUm7r");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = PathUtils.isNewer(path0, (-1L), linkOptionArray0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean4);
      
      boolean boolean5 = PathUtils.isEmpty(path0);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.directoryContentEquals(path0, path1);
          assertTrue(path0.equals((Object)path1));
          assertTrue(path1.equals((Object)path0));
          assertTrue(boolean1 == boolean0);
          assertTrue(boolean1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          linkOptionArray0[0] = linkOption0;
          boolean boolean2 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertTrue(path0.equals((Object)path1));
          assertTrue(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          assertEquals(1, linkOptionArray0.length);
          assertTrue(boolean2);
          assertNotSame(path0, path1);
          
          boolean boolean3 = PathUtils.isEmptyFile(path0);
          assertTrue(path0.equals((Object)path1));
          assertFalse(boolean3 == boolean0);
          assertFalse(boolean3 == boolean1);
          assertFalse(boolean3 == boolean2);
          assertFalse(boolean3);
          assertNotSame(path0, path1);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:133)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:214)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption3;
      linkOptionArray0[6] = linkOption0;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption5;
      // Undeclared exception!
      try { 
        PathUtils.isDirectory(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(path0, (LinkOption[]) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = PathUtils.isEmptyDirectory(path0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      
      StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
      assertSame(standardDeleteOption3, standardDeleteOption2);
      assertSame(standardDeleteOption3, standardDeleteOption1);
      assertSame(standardDeleteOption3, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption4 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption4);
      assertSame(standardDeleteOption4, standardDeleteOption0);
      assertSame(standardDeleteOption4, standardDeleteOption1);
      assertSame(standardDeleteOption4, standardDeleteOption3);
      assertSame(standardDeleteOption4, standardDeleteOption2);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[2] = linkOptionArray0[0];
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list1 = accumulatorPathVisitor0.getFileList();
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.contains(path0));
      
      List<Path> list2 = PathUtils.relativize(list1, path0, false, (Comparator<? super Path>) null);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertFalse(list1.contains(path0));
      assertFalse(list2.contains(path0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains(path0));
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "Rk*x~";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertEquals(2, linkOptionArray0.length);
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertTrue(path0.equals((Object)path1));
      assertNotNull(basicFileAttributes0);
      assertNotSame(path0, path1);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(path1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path1, true, comparator0);
      assertTrue(path1.equals((Object)path0));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(path1, path0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(path1));
      assertFalse(list1.contains(path1));
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertTrue(path0.equals((Object)path1));
      assertNotNull(counters_PathCounters0);
      assertNotSame(path0, path1);
      
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      assertNotNull(sizeFileFilter0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      Path path2 = PathUtils.createParentDirectories(path1, fileAttributeArray0);
      assertTrue(path1.equals((Object)path0));
      assertEquals(2, fileAttributeArray0.length);
      assertNull(path2);
      assertNotSame(path1, path0);
      
      CopyDirectoryVisitor copyDirectoryVisitor0 = new CopyDirectoryVisitor(counters_PathCounters0, sizeFileFilter0, sizeFileFilter0, (Path) null, path0, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertEquals(2, linkOptionArray0.length);
      assertNotNull(copyDirectoryVisitor0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(copyDirectoryVisitor0, "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CopyDirectoryVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.createParentDirectories(path1, (FileAttribute<?>[]) null);
      assertTrue(path1.equals((Object)path0));
      assertNull(path2);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertEquals(2, linkOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, path1, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          assertEquals("some", uRL0.getHost());
          assertEquals("some", uRL0.getAuthority());
          assertNull(uRL0.getUserInfo());
          assertEquals((-1), uRL0.getPort());
          assertEquals("file", uRL0.getProtocol());
          assertNull(uRL0.getQuery());
          assertEquals((-1), uRL0.getDefaultPort());
          assertNull(uRL0.getRef());
          assertNotNull(uRL0);
          
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals(0, linkOptionArray0.length);
          assertFalse(boolean0);
          
          boolean boolean1 = PathUtils.isNewer(path0, 1L, linkOptionArray0);
          assertFalse(boolean1 == boolean0);
          assertEquals(0, linkOptionArray0.length);
          assertTrue(boolean1);
          
          Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
          assertNotNull(counters_PathCounters0);
          
          CopyDirectoryVisitor copyDirectoryVisitor0 = new CopyDirectoryVisitor(counters_PathCounters0, path0, path0, linkOptionArray0);
          assertEquals(0, linkOptionArray0.length);
          assertNotNull(copyDirectoryVisitor0);
          
          CopyDirectoryVisitor copyDirectoryVisitor1 = new CopyDirectoryVisitor(counters_PathCounters0, path0, path0, linkOptionArray0);
          assertTrue(copyDirectoryVisitor1.equals((Object)copyDirectoryVisitor0));
          assertEquals(0, linkOptionArray0.length);
          assertNotNull(copyDirectoryVisitor1);
          
          // Undeclared exception!
          try { 
            PathUtils.visitFileTree(copyDirectoryVisitor1, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:87)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:171)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.createParentDirectories(path1, (FileAttribute<?>[]) null);
      assertTrue(path1.equals((Object)path0));
      assertNull(path2);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertEquals(2, linkOptionArray0.length);
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption1);
      assertSame(standardCopyOption1, standardCopyOption0);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      boolean boolean0 = false;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize((Collection<Path>) null, path0, false, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[2] = linkOptionArray0[0];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeFiles(path0, false, comparator0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(path0));
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path0, false, comparator1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption1);
      assertSame(standardCopyOption1, standardCopyOption0);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      StandardCopyOption standardCopyOption2 = StandardCopyOption.REPLACE_EXISTING;
      assertFalse(standardCopyOption2.equals((Object)standardCopyOption0));
      assertFalse(standardCopyOption2.equals((Object)standardCopyOption1));
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption2);
      assertNotSame(standardCopyOption2, standardCopyOption0);
      assertNotSame(standardCopyOption2, standardCopyOption1);
      
      copyOptionArray0[2] = (CopyOption) standardCopyOption2;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)70;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-104), (byte)82, (byte) (-88), (byte)2, (byte) (-111), (byte) (-27), (byte) (-119), (byte)70}, byteArray0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      boolean boolean1 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, linkOptionArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = PathUtils.isDirectory((Path) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      Path path2 = PathUtils.current();
      assertTrue(path2.equals((Object)path0));
      assertNotNull(path2);
      assertNotSame(path2, path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertTrue(path0.equals((Object)path2));
      assertNull(list0);
      assertNotSame(path0, path2);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      boolean boolean0 = PathUtils.directoryContentEquals(path2, (Path) null, 1354, linkOptionArray0, fileVisitOptionArray0);
      assertTrue(path2.equals((Object)path0));
      assertEquals(4, linkOptionArray0.length);
      assertEquals(7, fileVisitOptionArray0.length);
      assertFalse(boolean0);
      assertNotSame(path2, path0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        PathUtils.copyFile(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      Path path0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("XA|>I'HL/R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.XA|>I'HL/R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("v");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption1);
      assertSame(standardCopyOption1, standardCopyOption0);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      StandardCopyOption standardCopyOption2 = StandardCopyOption.REPLACE_EXISTING;
      assertFalse(standardCopyOption2.equals((Object)standardCopyOption1));
      assertFalse(standardCopyOption2.equals((Object)standardCopyOption0));
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption2);
      assertNotSame(standardCopyOption2, standardCopyOption1);
      assertNotSame(standardCopyOption2, standardCopyOption0);
      
      copyOptionArray0[2] = (CopyOption) standardCopyOption2;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption2;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[0];
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(0, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray1 = null;
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, 1L, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      pathArray0[0] = path0;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      pathArray0[1] = null;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(4, pathArray0.length);
      assertEquals(3, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      CopyOption[] copyOptionArray0 = null;
      try { 
        MockURL.URL("Can't compare directories, only files: ", "Can't compare directories, only files: ", "Can't compare directories, only files: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: can't compare directories, only files: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("SENSITIVE");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertNotNull(pathEqualsFileFilter0);
      
      Path[] pathArray0 = new Path[2];
      pathArray0[1] = path0;
      Path[] pathArray1 = PathUtils.filter(pathEqualsFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(2, pathArray0.length);
      assertEquals(1, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("org.apache.commons.io.file.PathUtils$RelativeSortedPaths");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path1;
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption4;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption3;
      linkOptionArray0[5] = linkOption3;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption5;
      linkOptionArray0[7] = linkOption1;
      linkOptionArray0[8] = linkOption3;
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(path0.equals((Object)path1));
      assertEquals(9, linkOptionArray0.length);
      assertTrue(boolean0);
      assertNotSame(path0, path1);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("XA|>I'HL/R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.XA|>I'HL/R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Path path0 = null;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path1);
      assertNotNull(basicFileAttributes0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(list0);
      assertEquals(0, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(prefixFileFilter0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter(prefixFileFilter0, prefixFileFilter0);
      assertEquals(0, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(orFileFilter0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      assertSame(linkOption1, linkOption0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        StandardCopyOption.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(6, linkOptionArray0.length);
      assertFalse(boolean0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path1, set0, 3507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(fileVisitOption0));
      
      boolean boolean1 = linkedHashSet0.add(fileVisitOption0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(fileVisitOption0));
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFile(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
      assertNotNull(prefixFileFilter0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyFile(path0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesUnchecked((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesUnchecked((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(6, fileVisitOptionArray0.length);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(fileVisitOption5));
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[8];
          Path path1 = PathUtils.current();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.directoryContentEquals(path0, path1);
          assertTrue(path0.equals((Object)path1));
          assertTrue(path1.equals((Object)path0));
          assertTrue(boolean1 == boolean0);
          assertTrue(boolean1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path1, path1, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("file", uRI1.getScheme());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertNotNull(uRI1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path1 = mockFile1.toPath();
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("file", uRI1.getScheme());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/tmp", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("foo.bar", mockFile1.getName());
      assertEquals("/tmp/foo.bar", mockFile1.toString());
      assertNotNull(path1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(path0.equals((Object)path1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertEquals(0, linkOptionArray0.length);
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("file", uRI1.getScheme());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/tmp", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("foo.bar", mockFile1.getName());
      assertEquals("/tmp/foo.bar", mockFile1.toString());
      assertFalse(boolean0);
      assertNotSame(path0, path1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(path0, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path0);
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:133)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:214)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:200)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
          assertFalse(boolean0);
          
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertFalse(boolean1 == boolean0);
          assertTrue(boolean1);
          
          LinkOption[] linkOptionArray1 = new LinkOption[8];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption1;
          linkOptionArray1[1] = linkOption4;
          linkOptionArray1[2] = linkOption3;
          linkOptionArray1[3] = linkOption2;
          linkOptionArray1[4] = linkOption5;
          linkOptionArray1[5] = linkOption3;
          linkOptionArray1[6] = linkOption2;
          linkOptionArray1[7] = linkOption0;
          boolean boolean2 = PathUtils.directoryContentEquals(path0, path0);
          assertFalse(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          assertTrue(boolean2);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      // Undeclared exception!
      try { 
        PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
          assertNotNull(prefixFileFilter0);
          
          boolean boolean0 = PathUtils.isEmpty(path0);
          assertFalse(boolean0);
          
          boolean boolean1 = PathUtils.isEmptyFile(path0);
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:133)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:214)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:200)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          linkOptionArray0[0] = linkOption1;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption1;
          linkOptionArray0[3] = linkOption0;
          linkOptionArray0[4] = linkOption0;
          linkOptionArray0[5] = linkOption0;
          boolean boolean0 = PathUtils.isNewer(path0, 2394L, linkOptionArray0);
          assertEquals(6, linkOptionArray0.length);
          assertTrue(boolean0);
          
          MockFile mockFile0 = new MockFile(".*{[0-9]+}.*");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(path1.equals((Object)path0));
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals(".*{[0-9]+}.*", mockFile0.getName());
          assertTrue(mockFile0.isHidden());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(".*{[0-9]+}.*", mockFile0.toString());
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          boolean boolean1 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertFalse(boolean1 == boolean0);
          assertEquals(6, linkOptionArray0.length);
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals(".*{[0-9]+}.*", mockFile0.getName());
          assertTrue(mockFile0.isHidden());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(".*{[0-9]+}.*", mockFile0.toString());
          assertFalse(boolean1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path1, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".*{[0-9]+}.*\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.createParentDirectories(path1, (FileAttribute<?>[]) null);
      assertTrue(path1.equals((Object)path0));
      assertNull(path2);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path1, linkOptionArray0);
      assertTrue(path1.equals((Object)path0));
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean0);
      assertNotSame(path1, path0);
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, path1);
      assertTrue(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("v");
      Path[] pathArray0 = new Path[0];
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertEquals(0, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      PathUtils.filter(trueFileFilter0, (Path[]) null);
      // Undeclared exception!
      try { 
        LinkOption.valueOf(">3.(l-]%n~rT='P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.>3.(l-]%n~rT='P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockURL.getFileExample();
      Path path0 = PathUtils.current();
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
      Path[] pathArray0 = new Path[0];
      PathUtils.filter(prefixFileFilter0, pathArray0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption3;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption1;
      linkOptionArray0[4] = linkOption1;
      linkOptionArray0[5] = linkOption2;
      linkOptionArray0[6] = linkOption2;
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.isEmptyFile(path0);
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream(path0, (PathFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("A", "A");
          Path path0 = mockFile0.toPath();
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/A/A\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:487)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:392)
             // sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockURL.getFileExample();
          Path path0 = PathUtils.current();
          CopyOption[] copyOptionArray0 = new CopyOption[3];
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          copyOptionArray0[0] = (CopyOption) standardCopyOption0;
          StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
          copyOptionArray0[1] = (CopyOption) standardCopyOption1;
          StandardCopyOption standardCopyOption2 = StandardCopyOption.REPLACE_EXISTING;
          copyOptionArray0[2] = (CopyOption) standardCopyOption2;
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
          StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
          StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
          StandardDeleteOption standardDeleteOption4 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[4] = (DeleteOption) standardDeleteOption4;
          StandardDeleteOption standardDeleteOption5 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[5] = (DeleteOption) standardDeleteOption5;
          StandardDeleteOption standardDeleteOption6 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[6] = (DeleteOption) standardDeleteOption6;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Path path0 = PathUtils.current();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      AndFileFilter andFileFilter0 = new AndFileFilter();
      andFileFilter0.toString();
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, andFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, notFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Path path0 = PathUtils.current();
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, 24704L, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Path path0 = PathUtils.current();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Path path0 = PathUtils.current();
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      StandardCopyOption standardCopyOption2 = StandardCopyOption.REPLACE_EXISTING;
      copyOptionArray0[2] = (CopyOption) standardCopyOption2;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Path path0 = PathUtils.current();
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      PathUtils.readBasicFileAttributes(path0);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String string0 = "M:PT";
      MockFile mockFile0 = new MockFile("M:PT");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockURL.getFileExample();
          StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
          MockFile mockFile0 = new MockFile("GZZ1olsyj2", "GZZ1olsyj2");
          Path path0 = mockFile0.toPath();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          PathUtils.isDirectory(path0, linkOptionArray0);
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/GZZ1olsyj2/GZZ1olsyj2\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:487)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:462)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:342)
             // sun.reflect.GeneratedMethodAccessor121.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Path path0 = PathUtils.current();
      // Undeclared exception!
      try { 
        PathUtils.isDirectory(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      PathUtils.isDirectory(path0, linkOptionArray0);
      PathUtils.isEmptyDirectory(path0);
      // Undeclared exception!
      try { 
        AccumulatorPathVisitor.withLongCounters((PathFilter) null, (PathFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isNewer(path0, 1152921504606846976L, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean2 = PathUtils.isNewer(path0, 2147483647L, linkOptionArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isNewer(path0, 2113L, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          PathUtils.isRegularFile(path0, linkOptionArray0);
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Path path0 = PathUtils.current();
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, false, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // sun.reflect.GeneratedMethodAccessor122.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = null;
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // sun.reflect.GeneratedMethodAccessor122.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:417)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:365)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:342)
             // sun.reflect.GeneratedMethodAccessor121.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          CopyOption[] copyOptionArray0 = null;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:265)
             // sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:133)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:214)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:200)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.readBasicFileAttributes(path0);
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:417)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:403)
             // sun.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:417)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:403)
             // sun.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.createParentDirectories((Path) null, (FileAttribute<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }
}
