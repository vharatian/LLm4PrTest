/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:18:01 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileCleaningTracker;
import org.apache.commons.io.FileDeleteStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileCleaningTracker_ESTest extends FileCleaningTracker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((String) null, (Object) "UiO2y~FQhH2+Yj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      int int0 = fileCleaningTracker0.getTrackCount();
      assertEquals(0, int0);
      
      String string0 = null;
      String string1 = "";
      fileCleaningTracker0.track("", (Object) "9+?KkD3_#-'b");
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("");
      assertNotNull(fileDeleteStrategy0);
      
      String string2 = fileDeleteStrategy0.toString();
      assertEquals("FileDeleteStrategy[]", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((String) null, (Object) null, fileDeleteStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      fileCleaningTracker0.exitWhenFinished();
      fileCleaningTracker0.exitWhenFinished();
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("");
      assertNotNull(fileDeleteStrategy0);
      
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((File) mockFile0, (Object) mockFile0, fileDeleteStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      fileCleaningTracker0.exitWhenFinished = true;
      int int0 = fileCleaningTracker0.getTrackCount();
      assertEquals(0, int0);
      
      fileCleaningTracker0.reaper = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      fileCleaningTracker0.exitWhenFinished();
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      assertNotNull(fileDeleteStrategy0);
      
      String string0 = fileDeleteStrategy0.toString();
      assertEquals("FileDeleteStrategy[Normal]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track(":", object0, fileDeleteStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      //  // Unstable assertion: assertNotNull(fileCleaningTracker0);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      String string0 = "F[HV0Z";
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("F[HV0Z");
      //  // Unstable assertion: assertNotNull(fileDeleteStrategy0);
      
      MockFile mockFile0 = new MockFile("yxrYgW");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("dirFilter", ")U+eK", (File) mockFile0);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(file0, mockFile0);
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile0));
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("dirFilter0)U+eK", file0.getName());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK", file0.toString());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertNotNull(file0);
      
      MockFile mockFile1 = new MockFile(file0, "F[HV0Z");
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile0));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)mockFile0));
      //  // Unstable assertion: assertNotNull(mockFile1);
      
      boolean boolean0 = fileDeleteStrategy0.deleteQuietly(mockFile1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertNotSame(file0, mockFile1);
      //  // Unstable assertion: assertNotSame(file0, mockFile0);
      //  // Unstable assertion: assertNotSame(mockFile1, file0);
      //  // Unstable assertion: assertNotSame(mockFile1, mockFile0);
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile0));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)mockFile0));
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("dirFilter0)U+eK", file0.getName());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK", file0.toString());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertTrue(mockFile1.isFile());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK/F[HV0Z", mockFile1.toString());
      //  // Unstable assertion: assertTrue(mockFile1.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile1.lastModified());
      //  // Unstable assertion: assertFalse(mockFile1.canWrite());
      //  // Unstable assertion: assertFalse(mockFile1.canExecute());
      //  // Unstable assertion: assertEquals("F[HV0Z", mockFile1.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile1.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile1.length());
      //  // Unstable assertion: assertFalse(mockFile1.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile1.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile1.isDirectory());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK", mockFile1.getParent());
      //  // Unstable assertion: assertFalse(mockFile1.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile1.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile1.isHidden());
      
      String string1 = fileDeleteStrategy0.toString();
      //  // Unstable assertion: assertEquals("FileDeleteStrategy[F[HV0Z]", string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      
      boolean boolean1 = mockFile1.setExecutable(false, true);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertNotSame(file0, mockFile1);
      //  // Unstable assertion: assertNotSame(file0, mockFile0);
      //  // Unstable assertion: assertNotSame(mockFile1, file0);
      //  // Unstable assertion: assertNotSame(mockFile1, mockFile0);
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile0));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)mockFile0));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("dirFilter0)U+eK", file0.getName());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK", file0.toString());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertTrue(mockFile1.isFile());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK/F[HV0Z", mockFile1.toString());
      //  // Unstable assertion: assertTrue(mockFile1.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile1.lastModified());
      //  // Unstable assertion: assertFalse(mockFile1.canWrite());
      //  // Unstable assertion: assertFalse(mockFile1.canExecute());
      //  // Unstable assertion: assertEquals("F[HV0Z", mockFile1.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile1.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile1.length());
      //  // Unstable assertion: assertFalse(mockFile1.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile1.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile1.isDirectory());
      //  // Unstable assertion: assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yxrYgW/dirFilter0)U+eK", mockFile1.getParent());
      //  // Unstable assertion: assertFalse(mockFile1.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile1.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile1.isHidden());
      
      MockThread mockThread0 = new MockThread("FileDeleteStrategy[F[HV0Z]");
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      fileCleaningTracker0.reaper = (Thread) mockThread0;
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(fileCleaningTracker0.reaper.isInterrupted());
      //  // Unstable assertion: assertEquals(0, fileCleaningTracker0.reaper.countStackFrames());
      //  // Unstable assertion: assertFalse(fileCleaningTracker0.reaper.isDaemon());
      
      boolean boolean2 = mockFile0.setExecutable(true);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.isDirectory());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("yxrYgW", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      
      fileCleaningTracker0.exitWhenFinished();
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track("yxrYgW", object0, fileDeleteStrategy0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
          assertNotNull(fileCleaningTracker0);
          
          int int0 = fileCleaningTracker0.getTrackCount();
          assertEquals(0, int0);
          
          String string0 = "";
          String string1 = "org.apache.commons.io.filefilter.HiddenFileFilter";
          MockFile mockFile0 = new MockFile("", "org.apache.commons.io.filefilter.HiddenFileFilter");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.io.filefilter.HiddenFileFilter");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          Object object0 = new Object();
          assertNotNull(object0);
          
          FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy0 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
          assertNotNull(fileDeleteStrategy_ForceFileDeleteStrategy0);
          
          String string2 = fileDeleteStrategy_ForceFileDeleteStrategy0.toString();
          assertEquals("FileDeleteStrategy[Force]", string2);
          assertFalse(string2.equals((Object)string0));
          assertFalse(string2.equals((Object)string1));
          assertNotNull(string2);
          
          fileDeleteStrategy_ForceFileDeleteStrategy0.delete(mockFile1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertTrue(mockFile1.isAbsolute());
          assertTrue(mockFile1.isFile());
          assertEquals("/org.apache.commons.io.filefilter.HiddenFileFilter/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile1.toString());
          assertFalse(mockFile1.isHidden());
          assertFalse(mockFile1.canExecute());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals("/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile1.getParent());
          assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", mockFile1.getName());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.canWrite());
          assertEquals(0L, mockFile1.length());
          
          boolean boolean0 = mockFile0.setExecutable(false, false);
          assertFalse(boolean0);
          assertNotSame(mockFile0, mockFile1);
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          
          fileCleaningTracker0.track("org.apache.commons.io.filefilter.HiddenFileFilter", object0, (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
          String string3 = "U$3y'tXcQ;A2nMi$2]";
          FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("U$3y'tXcQ;A2nMi$2]");
          assertNotNull(fileDeleteStrategy0);
          
          // Undeclared exception!
          try { 
            fileDeleteStrategy0.doDelete(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/org.apache.commons.io.filefilter.HiddenFileFilter\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // org.apache.commons.io.FileDeleteStrategy.doDelete(FileDeleteStrategy.java:147)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("Not a valid bootstrap method ");
      assertNotNull(fileDeleteStrategy0);
      
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((File) null, object0, fileDeleteStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      List<String> list0 = fileCleaningTracker0.getDeleteFailures();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      fileCleaningTracker0.track("", (Object) "");
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy0 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      assertNotNull(fileDeleteStrategy_ForceFileDeleteStrategy0);
      
      fileCleaningTracker0.track((File) mockFile0, object0, (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      assertNotNull(fileDeleteStrategy0);
      
      fileCleaningTracker0.track(".gW&/mxWADZ/vQ`>", (Object) ".gW&/mxWADZ/vQ`>", fileDeleteStrategy0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      fileCleaningTracker0.track((File) mockFile0, (Object) uRI0);
      fileCleaningTracker0.exitWhenFinished();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      Object object0 = new Object();
      fileCleaningTracker0.track("", object0);
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy0 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      MockFile mockFile0 = new MockFile("org.apache.commons.io.FileCleaningTracker$Reaper", "[<~|9Y");
      MockFile mockFile1 = new MockFile("~\"5@y[~*}f! =");
      fileCleaningTracker0.track((File) mockFile1, (Object) "[<~|9Y", (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
      MockFile mockFile2 = new MockFile(mockFile0, "org.apache.commons.io.FileCleaningTracker$Reaper");
      mockFile0.setReadable(true, true);
      fileDeleteStrategy_ForceFileDeleteStrategy0.delete(mockFile2);
      mockFile0.mkdirs();
      fileCleaningTracker0.track("[<~|9Y", (Object) "[<~|9Y", (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
      List<String> list0 = fileCleaningTracker0.getDeleteFailures();
      mockFile2.setReadable(true);
      fileCleaningTracker0.track((File) mockFile2, (Object) null);
      fileCleaningTracker0.track((File) mockFile0, (Object) "[<~|9Y");
      fileCleaningTracker0.getTrackCount();
      fileCleaningTracker0.track((File) mockFile2, (Object) "[<~|9Y");
      List<String> list1 = fileCleaningTracker0.getDeleteFailures();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      fileCleaningTracker0.track("UiO2y~FQhH2+Yj", (Object) "UiO2y~FQhH2+Yj");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      fileCleaningTracker0.exitWhenFinished();
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track("GeVpfY8q\"BUaJ", (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }
}
