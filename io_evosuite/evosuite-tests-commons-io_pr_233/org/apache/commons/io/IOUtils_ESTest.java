/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:25:36 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.MalformedInputException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "ov");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(149);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      try { 
        IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) dataOutputStream0, 13L, (-1L));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 13 actual: 2
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[5];
      IOUtils.read((Reader) charArrayReader0, charArray1);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0, 127);
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 7 actual: 2
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("Kv'", charset0);
      byte[] byteArray0 = new byte[6];
      try { 
        IOUtils.readFully(inputStream0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 6 actual: 3
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0, (long) (byte)0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter(215834723);
      byte[] byteArray0 = new byte[5];
      IOUtils.write(byteArray0, (Writer) stringWriter0, charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "$R<-zD4wz&h");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOUtils.write("T}im-X", (OutputStream) mockPrintStream0, (String) null);
      assertEquals(6L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "$R<-zD4wz&h");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOUtils.write((CharSequence) null, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.copy((InputStream) mockFileInputStream0, (Writer) stringWriter0, (String) null);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      String string0 = IOUtils.toString((Reader) lineNumberReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Bytes to skip must not be negative: ");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      assertEquals(36, inputStream0.available());
      
      String string0 = IOUtils.toString((InputStream) pushbackInputStream0);
      assertEquals("Bytes to skip must not be negative: ", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 17);
      String string0 = IOUtils.toString((InputStream) bufferedInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "K", (String) null);
      assertEquals(1, inputStream0.available());
      
      String string0 = IOUtils.toString(inputStream0, (String) null);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2147028769, (-3058));
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      char[] charArray0 = IOUtils.toCharArray((Reader) inputStreamReader0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "*wD4JDB!w(+3-pR");
      assertEquals(15, inputStream0.available());
      
      char[] charArray0 = IOUtils.toCharArray(inputStream0, charset0);
      assertEquals(15, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("*-/q_>x#OZP/olv2YP");
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = IOUtils.read((Reader) charArrayReader0, charArray0);
      assertEquals(3, int0);
      
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, charset0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, (String) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = IOUtils.resourceToString("", charset0, classLoader0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      assertEquals(735, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      List<String> list0 = IOUtils.readLines((InputStream) byteArrayInputStream0, charset0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Bytes to skip must not be negative: ");
      IOUtils.readFully(inputStream0, 0);
      assertEquals(36, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = IOUtils.read((Reader) null, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\n", charset0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      LineIterator lineIterator0 = IOUtils.lineIterator(inputStream1, charset0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = IOUtils.length(charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = IOUtils.getCharArray();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 50, 50);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.common.jimfs.JimfsPath");
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1679, (byte) (-87));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "$R<-zD4wz&h");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println("$R<-zD4wz&h");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      long long0 = IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) mockPrintStream0);
      assertEquals(90L, mockFile0.length());
      assertEquals(78L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = IOUtils.read((Reader) charArrayReader0, charArray0);
      assertEquals(3, int0);
      
      StringWriter stringWriter0 = new StringWriter(3);
      long long0 = IOUtils.copy((Reader) charArrayReader0, (Appendable) stringWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 434, (byte)0);
      long long0 = IOUtils.consume(byteArrayInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst((Object) null);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, (String) null, (OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[1];
      try { 
        IOUtils.write(charArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0, "L");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // L
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[4];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write(charArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[5];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) mockPrintWriter0, "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Size cannot be greater than Integer max value: ");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write(stringBuffer0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("TBlArn^");
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "SC");
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{W^l ]o~B3eu=yJK84", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write(")g{[}K", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.write("+Sqn_Y", (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile(";361~{0`,!H!", ";361~{0`,!H!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.write("", (OutputStream) mockFileOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.write("net.bytebuddy.asm.Advice$NoExceptionHandler", (OutputStream) mockPrintStream0, "OVERRIDE_READ_ONLY");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // OVERRIDE_READ_ONLY
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("(ST^u*l(x", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(DW]TDj6;", false);
      try { 
        IOUtils.write("", (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write((CharSequence) "\n", (OutputStream) pipedOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "SC", (OutputStream) byteArrayOutputStream0, "SC");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // SC
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{W^l ]o~B3eu=yJK84", true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      try { 
        IOUtils.write((CharSequence) stringBuffer0, (OutputStream) mockFileOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "8o8Wqu");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 8o8Wqu
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        IOUtils.toString((InputStream) bufferedInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("Kv'", "Kv'");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Kv'
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "h'S]'0O@3m9H>~", "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), (byte)89);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null, "ov");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ov
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        IOUtils.toCharArray((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      try { 
        IOUtils.toByteArray(uRLConnection0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) charArrayReader0, "{W^l ]o~B3eu=yJK84");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {W^l ]o~B3eu=yJK84
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, (-293));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) charArrayReader0, (-3329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream(inputStream0, (-1900));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1900
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) mockFileInputStream0, 47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) null, 735L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-271), 2258);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) byteArrayInputStream0, 2147483647L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 10);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      try { 
        IOUtils.skipFully((InputStream) bufferedInputStream0, 2147483647L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" does not declare a parameter with index ", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) fileChannel0, 1461L);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      try { 
        IOUtils.skip((ReadableByteChannel) fileChannel0, 4L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      try { 
        IOUtils.skip((Reader) inputStreamReader0, 166L);
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
      try { 
        IOUtils.skip((Reader) inputStreamReader0, (long) 4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 9);
      try { 
        IOUtils.skip((InputStream) pushbackInputStream0, 825L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("inputStream");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: inputStream
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.resourceToString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("+`MLEv", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: +`MLEv
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      try { 
        IOUtils.resourceToByteArray("", classLoader1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.readLines((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "|8nDB(O3!T0#/1%~;", charset0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readLines(inputStream1, "SVk");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // SVk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0, "}-YWzs*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }-YWzs*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2464);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 9);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) bufferedReader0, (char[]) null, 2464, 149);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2441);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, (char[]) null, (-1895), 3530753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) pipedReader0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[2];
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "bTcI9'%al$.", charset0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, byteArray0, 2487, 2329);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, (byte[]) null, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "$R<-zD4wz&h");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) mockFileInputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 15);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Bytes to skip must not be negative: ");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) pushbackInputStream0, (-3118));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("inputStream", (String) null);
      try { 
        IOUtils.readFully(inputStream0, 47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 47 actual: 11
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.close();
      try { 
        IOUtils.read((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("7/1-vI");
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 1771);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) bufferedInputStream0, (byte[]) null, 1771, 2034694062);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) sequenceInputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)110);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) charArrayWriter0, 2157L, (long) (byte)110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) pipedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.copy(uRL0, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = MockFile.createTempFile("|8nDB(O3!T0#/1%~;", "|8nDB(O3!T0#/1%~;");
      try { 
        IOUtils.copy(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) stringWriter0, charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) charArrayReader0, (OutputStream) byteArrayOutputStream0, "SC");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // SC
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" @P6", false);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (OutputStream) mockFileOutputStream0, " @P6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  @P6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.close();
      try { 
        IOUtils.copy((Reader) charArrayReader0, (OutputStream) byteArrayOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("appendable", "appendable", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) dataInputStream0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedReader pipedReader0 = new PipedReader();
      InputStream inputStream0 = IOUtils.toInputStream("org.apache.commons.io.file.DeletingPathVisitor", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      try { 
        IOUtils.contentEqualsIgnoreEOL(inputStreamReader0, pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#<\"L0V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Closeable[] closeableArray0 = new Closeable[5];
      closeableArray0[0] = (Closeable) mockFileOutputStream0;
      try { 
        IOUtils.close(closeableArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.close((Closeable) mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#<\"L0V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        IOUtils.close((Closeable) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.byteArray((-801));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) pipedWriter0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, (byte)1, (byte)1);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) charArrayReader0, (int) '\u0000');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, 1659);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("%");
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) mockPrintStream0, (-604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, (-4261));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "{W^l ]o~B3eu=yJK84");
      // Undeclared exception!
      try { 
        IOUtils.buffer(inputStream0, (-2525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Bytes to skip must not be negative: ");
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null, "Bytes to skip must not be negative: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Bytes to skip must not be negative: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("file");
      IOUtils.write("", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8)dOi7!cGg<", false);
      IOUtils.write("GdH9UPb2K!)#J@B/", (OutputStream) mockFileOutputStream0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{W^l ]o~B3eu=yNJK84");
      IOUtils.write((CharSequence) "{W^l ]o~B3eu=yNJK84", (OutputStream) mockFileOutputStream0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{W^l ]o~B3eu=yJK84", true);
      IOUtils.write((char[]) null, (OutputStream) mockFileOutputStream0, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{W^l ]o~B3eu=yJK84", false);
      char[] charArray0 = new char[0];
      try { 
        IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\n");
      assertEquals(1, inputStream0.available());
      
      String string0 = IOUtils.toString(inputStream0, (Charset) null);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toString((InputStream) pipedInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, charset0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Chars to skip: ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) mockFileInputStream0, (-3329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -3329
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        IOUtils.toByteArray((InputStream) mockFileInputStream0, (int) (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 0, expected: 1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) mockFileInputStream0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, (byte)1, (byte)1);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0, (int) 'F');
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "fi(G", charset0);
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      long long0 = IOUtils.skip((Reader) inputStreamReader0, 32L);
      assertEquals(0, inputStream0.available());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", charset0);
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      long long0 = IOUtils.skip((Reader) inputStreamReader0, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) null, 222L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0, charsetDecoder0);
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) inputStreamReader0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, 3L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "|8nDB(O3!T0#/1%~;", charset0);
      assertEquals(17, inputStream0.available());
      
      IOUtils.toBufferedInputStream(inputStream0);
      long long0 = IOUtils.skip(inputStream0, (long) 4);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("", (ClassLoader) null);
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToURL("N$hP@H_Oiq", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: N$hP@H_Oiq
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, byteArray0, (-1), 2487);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 2487 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, (byte)1, (byte)1);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0, (int) 'F');
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) bufferedReader0, charArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, (byte)1, (byte)1);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) charArrayReader0, charArray0, (int) (byte)1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, (byte[]) null, 2184, 8192);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      byte[] byteArray0 = new byte[6];
      int int0 = IOUtils.read((InputStream) bufferedInputStream0, byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, inputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, (int) (byte)51, (int) (byte)51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      StringWriter stringWriter0 = new StringWriter();
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      char[] charArray0 = new char[2];
      long long0 = IOUtils.copyLarge((Reader) lineNumberReader0, (Writer) stringWriter0, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = IOUtils.toInputStream("");
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      byte[] byteArray0 = new byte[0];
      try { 
        IOUtils.copyLarge(inputStream1, (OutputStream) byteArrayOutputStream0, 1461L, 2157L, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 1461 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 47);
      int int0 = IOUtils.copy((Reader) pushbackReader0, (Writer) stringWriter0);
      assertEquals("\u0000", stringWriter0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IOUtils.closeQuietly((Closeable) null, (Consumer<IOException>) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "$R<-zD4wz&h");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Consumer<IOException> consumer0 = (Consumer<IOException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IOUtils.closeQuietly((Closeable) mockPrintStream0, consumer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      IOUtils.close(uRLConnection0);
      assertFalse(uRLConnection0.getDefaultAllowUserInteraction());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringReader stringReader0 = new StringReader("file");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0, 10);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.copy((Reader) bufferedReader0, (OutputStream) filterOutputStream0, charset0);
      assertEquals("file", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1349);
      MockFile mockFile0 = new MockFile("mh", "&aquSaF]w+O}fmG{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      try { 
        IOUtils.copy((InputStream) pipedInputStream0, (OutputStream) mockFileOutputStream0, 1349);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      IOUtils.closeQuietly((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter((byte)1);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) stringWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray(4);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("4=]t6z;", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 4=]t6z;
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.io.file.CleaningPathVisitor");
      Writer writer0 = IOUtils.writer(mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Writer writer0 = IOUtils.writer(stringBuffer0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "\n", (Writer) mockPrintWriter0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.io.file.CleaningPathVisitor");
      IOUtils.writeLines((Collection<?>) null, "org.apache.commons.io.file.CleaningPathVisitor", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, (String) null, (Writer) null);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "", (OutputStream) bufferedOutputStream0);
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "bTcI9'%al$.", (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Charset charset0 = Charset.defaultCharset();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, (String) null, (OutputStream) null, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      IOUtils.writeLines((Collection<?>) null, "h9J6'H$J/m", (OutputStream) byteArrayOutputStream0, charset0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CartesianProductTest can not have a non-empty display name.");
      IOUtils.writeChunked(charArray0, (Writer) mockPrintWriter0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      IOUtils.writeChunked(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q>d.'/8vl >bD");
      IOUtils.writeChunked((byte[]) null, (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IOUtils.write(stringBuffer0, (Writer) stringWriter0);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((StringBuffer) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{W^l ]o~B3eu=yqK84", true);
      IOUtils.write((StringBuffer) null, (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YDJC");
      IOUtils.write((String) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2118);
      IOUtils.write((String) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((CharSequence) "", (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      IOUtils.write((CharSequence) null, (OutputStream) objectOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      IOUtils.write(charArray0, (Writer) mockPrintWriter0);
      assertEquals("\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[0];
      IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((byte[]) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      IOUtils.write((byte[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pz5Fu-%e8\"");
      String string0 = IOUtils.toString((Reader) stringReader0);
      assertEquals("Pz5Fu-%e8\"", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toByteArray((Reader) pipedReader0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "UNp~", charset0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(inputStream0, (-612L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -612
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "#<\"L0V", charset0);
      try { 
        IOUtils.toByteArray(inputStream0, 9L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 6, expected: 9
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*%JTSkx+ Y_|-~@G{");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, (-612));
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, (-2593L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -2593
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = MockFile.createTempFile("pPj,|_0#l", "pPj,|_0#l");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) dataInputStream0, (-1703L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1703
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", expected: ");
      StringReader stringReader0 = new StringReader("4");
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) mockPrintWriter0, 28L, (-2305L));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 28 actual: 1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", charset0);
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      IOUtils.skip((Reader) inputStreamReader0, 0L);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) charArrayReader0, (-269L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -269
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, 1192L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        IOUtils.skipFully((InputStream) mockFileInputStream0, 611L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 611 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "fil9");
      long long0 = IOUtils.skip(inputStream0, 1L);
      assertEquals(3, inputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOUtils.skipFully((InputStream) pipedInputStream0, 0L);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, (-2003L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -2003
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Bytes to skip must not be negative: ");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertTrue(list0.contains("Bytes to skip must not be negative: "));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2464);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 9);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) bufferedReader0, (char[]) null, 2464, (-1895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1895
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 4);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) pushbackInputStream0, byteArray0, (int) (byte)63, (-892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -892
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "UNp~");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("Kv'");
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) stringWriter0, (-1604L), 343L);
      assertEquals("Kv'", stringWriter0.toString());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      long long0 = IOUtils.copyLarge((Reader) null, (Writer) null, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Kv'");
      StringReader stringReader0 = new StringReader("Kv'");
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) mockPrintWriter0, (-124L), (-124L));
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long0 = IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) pipedOutputStream0, (-975L), (-3135L));
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\n", charset0);
      assertEquals(1, inputStream0.available());
      
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      long long0 = IOUtils.copyLarge(inputStream1, (OutputStream) pipedOutputStream0, (-1L), 0L, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\n", charset0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.copyLarge(inputStream1, (OutputStream) pipedOutputStream0, (-3407L), 1771L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = MockFile.createTempFile("|8nDB(O3!T0#/1%~;", "|8nDB(O3!T0#/1%~;");
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = MockFile.createTempFile("e5eBJ03x", "e5eBJ03x");
      URL uRL0 = IOUtils.resourceToURL("file");
      long long0 = IOUtils.copy(uRL0, file0);
      assertEquals(671L, file0.length());
      assertEquals(671L, long0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringWriter stringWriter0 = new StringWriter(3);
      long long0 = IOUtils.copy((Reader) charArrayReader0, (Appendable) stringWriter0);
      assertEquals("\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL((Reader) null, (Reader) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 64);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(charArrayReader0, lineNumberReader0);
      assertFalse(boolean0);
      assertEquals(0, lineNumberReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|8nDB(O3!T0#/1%~;");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      bufferedReader0.readLine();
      boolean boolean0 = IOUtils.contentEquals((Reader) bufferedReader0, (Reader) stringReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = IOUtils.contentEquals((Reader) null, (Reader) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2427);
      boolean boolean0 = IOUtils.contentEquals((InputStream) null, (InputStream) bufferedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("appendable");
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream0);
      assertEquals(10, inputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(3530753);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) pushbackInputStream0, inputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      IOConsumer<IOException> iOConsumer0 = (IOConsumer<IOException>) mock(IOConsumer.class, new ViolatedAssumptionAnswer());
      IOUtils.close((Closeable) pipedWriter0, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[2];
      IOUtils.close(closeableArray0);
      assertEquals(2, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      IOUtils.close((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Selector selector0 = Selector.open();
      IOUtils.close((Closeable) selector0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0, 1024);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0, 1024);
      assertSame(bufferedWriter0, bufferedWriter1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1367);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) charArrayWriter0);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h'S]'0O@3m9H>~");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      LineNumberReader lineNumberReader1 = (LineNumberReader)IOUtils.buffer((Reader) lineNumberReader0, 1);
      assertEquals(0, lineNumberReader1.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kv'");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3vj'%!&JU?T;h!X");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockFileOutputStream0, 1016);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, (-188));
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Size cannot be greater than Integer max value: ", " must be static.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0);
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) bufferedOutputStream0, byteArray0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2507);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0);
      assertSame(bufferedInputStream0, bufferedInputStream1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 4);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0, 4);
      assertSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) charArrayWriter0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      // Undeclared exception!
      try { 
        IOUtils.toCharArray(inputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 92, 1942);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, 152);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)36, 860);
      List<String> list0 = IOUtils.readLines((InputStream) byteArrayInputStream0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "|8nDB(O3!T0#/1%~;", charset0);
      StringWriter stringWriter0 = new StringWriter(70);
      IOUtils.copy(inputStream0, (Writer) stringWriter0);
      assertEquals("|8nDB(O3!T0#/1%~;", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("file", "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) pipedInputStream0, "={ST+b(7{IC0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ={ST+b(7{IC0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket(4209, 4209, (InetAddress) null);
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertTrue(mockServerSocket0.isBound());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "java.lang.invoke.LambdaMetafactory");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // java.lang.invoke.LambdaMetafactory
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "*2+>A}*[}kmC");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // *2+>A}*[}kmC
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = MockFile.createTempFile("Kv'", "Kv'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) mockFileInputStream0, (Writer) stringWriter0, "Kv'");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Kv'
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'R(;OgZO\"ii*:");
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) byteArrayOutputStream0, "}S51nq?GCO=N'1+./");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }S51nq?GCO=N'1+./
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!Y,fT_J");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "' during file creation", (OutputStream) null, "' during file creation");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' during file creation
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) bufferedReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) pipedOutputStream0, 1503L, 1503L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) pipedReader0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      IOUtils.closeQuietly((Reader) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      IOUtils.closeQuietly((Selector) null);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Size cannot be greater than Integer max value: ", " must be static.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      int int0 = IOUtils.read((InputStream) mockFileInputStream0, byteArray0);
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write("&c`ueF", (OutputStream) byteArrayOutputStream0, "Could not resolve parameter of type %s.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Could not resolve parameter of type %s.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("F 3$<Xl*");
      IOUtils.closeQuietly(inputStream0);
      assertEquals(8, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Resource not found: ");
      assertEquals(20, inputStream0.available());
      
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(111);
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, 111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) pipedReader0, "xG");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // xG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "*wD4JDB!w(+3-pR");
      // Undeclared exception!
      try { 
        IOUtils.toString(inputStream0, "*wD4JDB!w(+3-pR");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // *wD4JDB!w(+3-pR
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e");
      IOUtils.closeQuietly((Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.resourceToString("", charset0);
      assertEquals("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nfile\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nfunction\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nStandardLineSeparator.class\nStreamIterator.class\nTaggedIOException.class\nThreadMonitor.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("bTcI9'%al$.");
      assertEquals(12, inputStream0.available());
      
      long long0 = IOUtils.consume(inputStream0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("'=i");
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) stringBuffer0, "'=i");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // '=i
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", charset0);
      List<String> list0 = IOUtils.readLines(inputStream0, (String) null);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      IOUtils.closeQuietly((Socket) null);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "N=@ yvV4tZNGf:/~:@u");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // N=@ yvV4tZNGf:/~:@u
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(704);
      try { 
        IOUtils.toCharArray((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) null, 8192L, 8192L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InputStream inputStream0 = IOUtils.toInputStream(">VW.|EN1hBb");
      IOUtils.readFully(inputStream0, byteArray0);
      assertEquals(9, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("pPj,|_0#l");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: pPj,|_0#l
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((char[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fil9");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0);
      assertArrayEquals(new byte[] {(byte)102, (byte)105, (byte)108, (byte)57}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (OutputStream) byteArrayOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|8nDB(O3!T0#/1%~;");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) bufferedReader0, (Reader) stringReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[2];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(2, closeableArray0.length);
  }
}
