/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:27:43 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.io.LineIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LineIterator_ESTest extends LineIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      String string0 = lineIterator0.nextLine();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      String string0 = lineIterator0.next();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      boolean boolean0 = lineIterator0.isValidLine("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      boolean boolean0 = lineIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("utbP#|]}68(]_");
      stringReader0.close();
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      // Undeclared exception!
      try { 
        lineIterator0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}Y[lk");
      stringReader0.close();
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      // Undeclared exception!
      try { 
        lineIterator0.hasNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.LineIterator");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      String string0 = lineIterator0.nextLine();
      assertEquals("org.apache.commons.io.LineIterator", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nbSO");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      lineIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        lineIterator0.nextLine();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more lines
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nbSO");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      lineIterator0.close();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      // Undeclared exception!
      try { 
        lineIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more lines
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nbSO");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      lineIterator0.forEachRemaining(consumer1);
      lineIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.LineIterator");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      lineIterator0.hasNext();
      boolean boolean0 = lineIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">nw:");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineIterator lineIterator0 = new LineIterator(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineIterator lineIterator0 = null;
      try {
        lineIterator0 = new LineIterator((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reader must not be null
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      LineIterator.closeQuietly(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Length to read: ");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      String string0 = lineIterator0.next();
      assertEquals("Length to read: ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      // Undeclared exception!
      try { 
        lineIterator0.nextLine();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      LineIterator lineIterator0 = new LineIterator(stringReader0);
      // Undeclared exception!
      try { 
        lineIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove not supported
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }
}
