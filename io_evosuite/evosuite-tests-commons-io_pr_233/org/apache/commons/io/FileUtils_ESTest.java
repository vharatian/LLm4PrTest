/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:22:19 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, "`1&%>=I4R<)<~lXU,#");
      FileUtils.toFile(uRL1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      CopyOption[] copyOptionArray0 = new CopyOption[8];
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      copyOptionArray0[3] = (CopyOption) standardCopyOption0;
      copyOptionArray0[4] = (CopyOption) standardCopyOption0;
      copyOptionArray0[5] = (CopyOption) standardCopyOption0;
      copyOptionArray0[6] = (CopyOption) standardCopyOption0;
      copyOptionArray0[7] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("Cannot move directory: ", 1230L);
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      FileUtils.copyDirectory(file0, file1, (FileFilter) magicNumberFileFilter0, false, copyOptionArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "Kd6)N{mmU:gp");
      Path path0 = mockFile0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) pathEqualsFileFilter0, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      FileUtils.writeStringToFile(file0, (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      FileUtils.writeStringToFile(file0, " must be static.");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/' Expected length: /' Expected length: ");
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, "/tmp//home/azureuser/LLm4PrTest/ io_experiments/' Expected length: /' Expected length: ", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      Stack<Object> stack0 = new Stack<Object>();
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      byte[] byteArray0 = new byte[21];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)5, (int) (byte)5);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", (String) null, file0);
      FileUtils.write(file1, (CharSequence) "Pr,Pxy$pRB2J", (String) null, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "Kd6)N{mmU:gp");
      Stack<String> stack0 = new Stack<String>();
      IOCase iOCase0 = IOCase.SYSTEM;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stack0, iOCase0);
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) wildcardFileFilter0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File[] fileArray0 = new File[0];
      FileUtils.toURLs(fileArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = file0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "Kd6)N{mmU:gp");
      URL uRL0 = mockFile0.toURL();
      FileUtils.write((File) mockFile0, (CharSequence) "Kd6)N{mmU:gp");
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ must be static.0 must be static.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " must be static.");
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile(file0, byteArray0);
      FileUtils.readLines(file0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) " must be static.", charset0);
      FileUtils.readFileToString(file0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = MockFile.createTempFile("last-modified", "CW6TuL\"", (File) null);
      FileUtils.openInputStream(file0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lastModifiedUnchecked(file0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(6000L, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      FileUtils.iterateFilesAndDirs(file0, sizeFileFilter0, prefixFileFilter0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      FileUtils.iterateFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NameFileFilter nameFileFilter0 = new NameFileFilter("/home/azureuser/LLm4PrTest/ io_experiments/6}*w/D'geP^0Y-oLL");
      FileUtils.iterateFiles(file0, (IOFileFilter) nameFileFilter0, (IOFileFilter) nameFileFilter0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(5322, 5322, 5322);
      FileUtils.isFileOlder(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isFileOlder(file0, file0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate(1586015820, 24, 851, (-4196), 47, (-1952257860));
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.isFileNewer(file0, file1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, file0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      FileUtils.getTempDirectory();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/home/azureuser";
      stringArray0[1] = "/home/azureuser";
      stringArray0[2] = "/home/azureuser";
      stringArray0[3] = "/home/azureuser";
      stringArray0[4] = "/home/azureuser";
      stringArray0[5] = "/home/azureuser";
      stringArray0[6] = "/home/azureuser";
      stringArray0[7] = "/home/azureuser";
      stringArray0[8] = "/home/azureuser";
      File file0 = FileUtils.getFile(stringArray0);
      MockFile.createTempFile("/home/azureuser", "/home/azureuser", file0);
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot move directory: ");
      FileUtils.writeStringToFile((File) mockFile0, "Cannot move directory: ", false);
      String[] stringArray0 = new String[0];
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockFile mockFile0 = new MockFile(" glxa@]_7~^CRV z}~");
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.directoryContains(file1, file0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".");
      MockFile mockFile1 = new MockFile(mockFile0, ".");
      FileUtils.createParentDirectories(mockFile1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      arrayList0.add(file0);
      FileUtils.convertFileCollectionToFileArray(arrayList0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ must be static.0 must be static.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " must be static.");
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      FileUtils.checksumCRC32(file0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "Wmayb* h?Gh5e<AMt3", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/Zome/azureusr/LLm4PrTest/ io_expeeiments/:78{mCu;/:78{mCu;", charset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/6}*w/D'geP^0Y-oLL", "dos:system", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dos:system
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srdcFile");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "srdcFile", "srdcFile");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // srdcFile
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/ must be static.0 must be static.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "md,?'T)^`Ufax=BQi");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      File file1 = FileUtils.createParentDirectories(file0);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file1, (Collection<?>) set0, " must be static.", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("File system element for parameter '");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) set0, "File system element for parameter '", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":-kUQ");
      MockFile.createTempFile(":-kUQ", ":-kUQ", (File) mockFile0);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, ":-kUQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: :-kUQ
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/Kd6)N{mmU:gp");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "destinationDir", (Collection<?>) null, false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // destinationDir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      ArrayList<DataInputStream> arrayList0 = new ArrayList<DataInputStream>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/`32[qp~(i6V", (Collection<?>) arrayList0, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/`32[qp~(i6V
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Ps)k,Xc9lgq", (Collection<?>) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayList<ChronoUnit> arrayList0 = new ArrayList<ChronoUnit>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "Ps)k,Xc9lgq", (Collection<?>) arrayList0, "Ps)k,Xc9lgq", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sIcFile");
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "sIcFile", (Collection<?>) treeSet0, "sIcFile");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sIcFile
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "&H!@Y", (Collection<?>) treeSet0, "org.junitpioneer.vintage.ExpectedExceptionExtension");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "CartesianProductTest can only take exactly one type of arguments source.", (Collection<?>) treeSet0, "CartesianProductTest can only take exactly one type of arguments source.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile("Can only convert file URL to a File: ", "Can only convert file URL to a File: ");
      MockFile mockFile0 = new MockFile(file0, "Can only convert file URL to a File: ");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        FileUtils.writeLines((File) mockFile0, "@~AH>v\"", (Collection<?>) linkedHashSet0, "@~AH>v\"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/Can only convert file URL to a File: 0Can only convert file URL to a File: '.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/Kd6)N{mmU:gp", "j");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "j", (Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // j
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/Kd6)N{mmU:gp", "/tmp/Kd6)N{mmU:gp");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "/tmp/Kd6)N{mmU:gp", (Collection<?>) stack0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp/Kd6)N{mmU:gp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (String) null, (Collection<?>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("/tmp/ must be static.0 must be static.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, 37, 37, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 680, 680, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("/tmp/ must be static.0 must be static.");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-121), 874, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -121
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, 113, 113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-1), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      byte[] byteArray0 = new byte[2];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-121), (-1446));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "Cannot move directory: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "0 bytes", charset0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "lcM)ap$UXZE_/XFLG6-", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$HIU", "$HIU");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "$HIU", "/home/azureuser/home/azureuser/azureuser", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/home/azureuser/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser", (String) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.co6mons.io.file.Counters");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "TInV", "K");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // K
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-3174));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.toURLs((File[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // files
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = MockFile.createTempFile("l~ Uup", "l~ Uup");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/l~ Uup0l~ Uup'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/foo.bar'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qQhA^#Q=X(dJgD";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'qQhA^#Q=X(dJgD'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b+N]~";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.io.filefilter.IOFileFilter";
      stringArray0[3] = "QLzTzm.{8;<ok+{m8dd";
      stringArray0[4] = "wI_)^*2f";
      stringArray0[5] = "C/.JFs[8";
      stringArray0[6] = "";
      File file1 = FileUtils.getFile(file0, stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/tmp/b+N]~/org.apache.commons.io.filefilter.IOFileFilter/QLzTzm.{8;<ok+{m8dd/wI_)^*2f/C/.JFs[8'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "org.junitpioneer.jupiter.params.DoubleRange");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.params.DoubleRange
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "6:");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("Array Size=", "Array Size=");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "Array Size=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Array Size=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("Failed to delete original file '", "y:xd");
      try { 
        FileUtils.moveToDirectory(file1, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/tmp/Failed to delete original file '0y:xd'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" must be static.");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source ' must be static.' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/LLm4PrTest/ io_experiments/}K2,/#,}hU<)9ku MQ8/lastAccessTime/@/}K2,/#,}hU<)9ku MQ8/lastAccessTime/@/tmp", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/}K2,/#,}hU<)9ku MQ8/lastAccessTime/@/}K2,/#,}hU<)9ku MQ8/lastAccessTime/@/tmp");
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, mockFile0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '!MOI' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter", "/tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq");
      byte[] byteArray0 = new byte[4];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, false);
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.IOFileFilter/tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/C#~X4jli-.,d[Yk/FHd0Array Size='
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Negaaive initial s1ze: /Negaaive initial s1ze: ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(ageFileFilter0);
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, pathVisitorFileFilter0, pathVisitorFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" must be static.", " must be static.");
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (String[]) null, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/ must be static./ must be static.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      IOCase iOCase0 = IOCase.INSENSITIVE;
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0, iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) nameFileFilter0, (IOFileFilter) nameFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "Array Size=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Array Size=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srdcFile");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // srdcFile
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile("Gt*I9:G)Bq4-~AxJD", (String) null);
      try { 
        FileUtils.lastModified(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pfUh");
      MockFile.createTempFile("pfUh", "pfUh", (File) mockFile0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // pfUh
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".(-oC+J_VJ \"n", ".(-oC+J_VJ \"n");
      mockFile0.createNewFile();
      Period period0 = Period.of(541, 2831, 541);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) localDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/.(-oC+J_VJ \"n/.(-oC+J_VJ \"n
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      MockFile mockFile1 = new MockFile(mockFile0, "!MOI");
      FileUtils.createParentDirectories(mockFile1);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile1, (File) mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // !MOI
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = MockFile.createTempFile("hASmE", "hASmE");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, 1099511627741L);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/hASmE0hASmE
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      MockFile.createTempFile("!MOI", "!MOI", (File) mockFile0);
      Instant instant0 = MockInstant.ofEpochMilli((-960L));
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, instant0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // !MOI
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '!MOI'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, 7037325457721137464L);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/ must be static.0 must be static.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = MockFile.createTempFile(" glxa@]_7~^CRV z}~", " glxa@]_7~^CRV z}~", (File) null);
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/C#~X4jli-.,d[Yk/FHd0Array Size='
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zoneId", "zoneId");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0, 1644, 1644);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 643, (-2120305968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 32, 32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 47);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pushbackInputStream0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      linkedHashSet0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/&H!@Y/&H!@Y'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI", "!MOI");
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = MockFile.createTempFile(" glxa@]_7~^CRV z}~", " glxa@]_7~^CRV z}~", (File) null);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srcFile");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'srcFile'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("WD(*[A,");
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      FileUtils.deleteQuietly(file0);
      try { 
        FileUtils.copyFile(file0, file0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/Kd6)N{mmU:gp", "/tmp/Kd6)N{mmU:gp");
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/&H!@Y/&H!@Y'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) mockFile0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuseD", "/home/azureuseD");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuseD/home/azureuseD'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/&H!@Y/&H!@Y'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '!MOI'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getTempDirectory();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter(linkedList0, iOCase0);
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) nameFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negative initial size: ", "Negative initial size: ");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Negative initial size: /Negative initial size: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0, 1755767590862L);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) magicNumberFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srdcFile", "srdcFile");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/srdcFile/srdcFile'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) directoryFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      Vector<String> vector0 = new Vector<String>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(vector0, iOCase0);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U\"~2wPD1", "U\"~2wPD1");
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      OrFileFilter orFileFilter0 = new OrFileFilter(canReadFileFilter0, canReadFileFilter0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) orFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/U\"~2wPD1/U\"~2wPD1'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" must be static.");
      try { 
        FileUtils.checksum(mockFile0, (Checksum) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: ' must be static.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = MockFile.createTempFile("<0vVc?9RZz", ":");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeStringToFile(file0, ":", (Charset) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "?%@", charset0, false);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmi/K{6)N{mmU:gp", "/tmi/K{6)N{mmU:gp");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "java.io.tmpdir", (Collection<?>) stack0, "", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // java.io.tmpdir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      byte[] byteArray0 = new byte[8];
      FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte)0, 323, true);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".(-oC+J_VJ \"n";
      File file0 = FileUtils.getFile(stringArray0);
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 78, 78, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      FileUtils.streamFiles(file0, false, stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&H!@Y", "&H!@Y");
      try { 
        FileUtils.streamFiles(mockFile0, true, (String[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/`32[qp~(i6V", "/home/azureuser/LLm4PrTest/ io_experiments/`32[qp~(i6V");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readFileToString(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"&k");
      FileUtils.openOutputStream((File) mockFile0, true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = MockFile.createTempFile("l~ Uup", "l~ Uup");
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/l~ Uup0l~ Uup'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile mockFile0 = new MockFile("' Expected length: ", "' Expected length: ");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1193)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2227)
             // sun.reflect.GeneratedMethodAccessor357.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      MockFile mockFile1 = new MockFile(mockFile0, "!MOI");
      File file0 = FileUtils.createParentDirectories(mockFile1);
      try { 
        FileUtils.moveDirectory(file0, mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser/LLm4PrTest/ io_experiments/!MOI to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/!MOI/!MOI
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":-kUQ");
      FileUtils.isSymlink(mockFile0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hASmE", "hASmE");
      FileUtils.isFileOlder((File) mockFile0, 1099511627741L);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isFileOlder(file0, 2361L);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, 1125899906842624L);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      PipedInputStream pipedInputStream0 = new PipedInputStream(19);
      try { 
        FileUtils.copyToFile(pipedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zoneId", "cUI4EU> eSa");
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.DeletingPathVisitor", "zoneId", (File) mockFile0);
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("C#~X4jli-.,d[Yk/FHd", 1230L);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) magicNumberFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/zoneId/cUI4EU> eSa/org.apache.commons.io.file.DeletingPathVisitor0zoneId'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("Cannot move directory: ", 1230L);
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file1, (FileFilter) magicNumberFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:323)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File file0 = MockFile.createTempFile("LD|*mf]5w<p", "LD|*mf]5w<p");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "LD|*mf]5w<p", "]", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDateTime<?>) null, (ZoneId) zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochMilli(851);
      FileUtils.isFileNewer(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdir(file0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, "file");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'sourceDir' is not a directory: '/tmp/C#~X4jli-.,d[Yk/FHd0Array Size='
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.lastModified(file0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "Array Size=", charset0, false);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' does not exist", "' does not exist");
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("Source '", "@CartesianProductTest not found.", file0);
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file1, (byte[]) null, (int) (byte)5, (int) (byte)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1317));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, (byte)5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aSX)'");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'aSX)'' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter", "/tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq");
      FileUtils.touch(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.touch(file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL[] uRLArray0 = new URL[4];
      URL uRL0 = MockURL.getFtpExample();
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("Failed to delete original file '", "y:xd");
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("/tmp/Kd6)N{mmU:gp", "");
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(mockFile0);
      assertEquals((byte)3, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = MockFile.createTempFile("Negative initial size: ", "Negative initial size: ");
      File file1 = FileUtils.createParentDirectories(file0);
      long long0 = FileUtils.sizeOfDirectory(file1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Negaaive initial s1ze: /Negaaive initial s1ze: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = MockFile.createTempFile(" glxa@]_7~^CRV z}~", " glxa@]_7~^CRV z}~", (File) null);
      file0.setReadOnly();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'file is not writable: '/tmp/ glxa@]_7~^CRV z}~0 glxa@]_7~^CRV z}~'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = MockFile.createTempFile("WD(*[A,", "WD(*[A,");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/tmp/WD(*[A,0WD(*[A,'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("/tmp/Kd6)N{mmU:gp", "/tmp/Kd6)N{mmU:gp");
          File file0 = MockFile.createTempFile("/tmp/Kd6)N{mmU:gp", "content-type");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/Kd6)N{mmU:gp/tmp/Kd6)N{mmU:gp/Kd6)N{mmU:gp0content-type\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2307)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2282)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2337)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2362)
             // sun.reflect.GeneratedMethodAccessor325.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          URL uRL0 = MockURL.getFileExample();
          File file1 = FileUtils.toFile(uRL0);
          // Undeclared exception!
          try { 
            FileUtils.moveDirectoryToDirectory(file0, file1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1193)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2227)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2261)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFileExample();
      File file1 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/fake/but/wellformed/url' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/ must be static.0 must be static.' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter", "/tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.IOFileFilter/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("Failed to delete original file '", "y:xd");
      Path path0 = file0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file1, (FileFilter) pathEqualsFileFilter0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/Failed to delete original file '0y:xd'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      boolean boolean0 = FileUtils.isFileOlder(file1, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmi/K{6)N{mmU:gp", "/tmi/K{6)N{mmU:gp");
      Instant instant0 = MockInstant.ofEpochSecond(1011L, 1011L);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, (-2929L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate(24, 1586015820, 301, (-1), (-1952257859), (-2083858970));
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The list of names must not be null", "The list of names must not be null");
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[2];
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOptionArray0[3];
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(mockFile0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "qQhA^#Q=X(dJgD";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile("nfwe4sD>r;(H\"", "nfwe4sD>r;(H\"", file0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/nfwe4sD>r;(H\"0nfwe4sD>r;(H\"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1311)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:698)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:629)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:530)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:729)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:986)
             // sun.reflect.GeneratedMethodAccessor279.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;");
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyToDirectory(file0, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(" EB", "`<_c)h&^");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/zoneId/cUI4EU> eSa/home/azureuser/LLm4PrTest/ io_experiments/zoneId/cUI4EU> eSa/org.apache.commons.io.file.DeletingPathVisitor0zoneId", "/home/azureuser/LLm4PrTest/ io_experiments/zoneId/cUI4EU> eSa/home/azureuser/LLm4PrTest/ io_experiments/zoneId/cUI4EU> eSa/org.apache.commons.io.file.DeletingPathVisitor0zoneId");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "qQhA^#Q=X(dJgD";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.deleteDirectory(file0);
      assertEquals("qQhA^#Q=X(dJgD", file0.getName());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum", "checksum");
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("m'Q0B4e%EN=sN=Sj");
      assertEquals("m'Q0B4e%EN=sN=Sj", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HashSet<File> hashSet0 = new HashSet<File>();
      hashSet0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) hashSet0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      HashSet<File> hashSet0 = new HashSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) hashSet0, file0);
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      Enumeration<DataInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
      assertEquals("Ps)k,Xc9lgq", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      File file0 = MockFile.createTempFile("/tmp/tmp/Kd6)N{mmU:gp0content-pype", "/tmp/tmp/Kd6)N{mmU:gp0content-pype", (File) mockFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long0 = FileUtils.copyFile(file0, (OutputStream) pipedOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile(":%H}]", "sHtmL$+jy2k4keWIYA");
          File file0 = MockFile.createTempFile("4a*=lv(Q|C$)", "hG;!6");
          File file1 = MockFile.createTempFile("destination", "lE$K4W:Dt7:^gFJ", (File) mockFile0);
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/:%H}]/sHtmL$+jy2k4keWIYA/destination1lE$K4W:Dt7:^gFJ\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:755)
             // sun.reflect.GeneratedMethodAccessor271.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      FileUtils.copyDirectory(file1, file0, false);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          File file1 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveDirectoryToDirectory(file1, file0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:323)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1191)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2227)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2261)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":-kUQ");
      File file0 = MockFile.createTempFile(":-kUQ", ":-kUQ", (File) mockFile0);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, ";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3rac/i5e");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, mockFile0, "9@RXp!paWeZM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = MockFile.createTempFile("p<f HtO?ptw", "p<f HtO?ptw", (File) null);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "p<f HtO?ptw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("AMLkPY5l", "AMLkPY5l");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.forceDeleteOnExit(file1);
      assertFalse(file1.isFile());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      long long0 = FileUtils.checksumCRC32(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_EB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 EB", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = MockFile.createTempFile("C#~X4jli-.,d[Yk/FHd", "Array Size=");
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp/C#~X4jli-.,d[Yk/FHd0Array Size=' (file1='/tmp/C#~X4jli-.,d[Yk/FHd0Array Size=', file2='/tmp/C#~X4jli-.,d[Yk/FHd0Array Size=')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srdcFile");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      NameFileFilter nameFileFilter0 = new NameFileFilter("srdcFile");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) notFileFilter0, (IOFileFilter) nameFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // srdcFile
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "Q{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      List<String> list0 = FileUtils.readLines(file0);
      assertFalse(list0.contains(" must be static."));
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(arrayList0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      FileUtils.write(file0, (CharSequence) "m'Q0B4e/%EN=sN=Sj", false);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) suffixFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = MockFile.createTempFile("WD(*[A,", "$");
      String string0 = FileUtils.readFileToString(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "Ps)k,Xc9lgq", (Collection<?>) treeSet0, "CartesianProductTest can only take exactly one type of arguments source.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ps)k,Xc9lgq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) stack0, "3-*", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/azureuser");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/home/azureuser/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (int) (byte)5, (int) (byte)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negaaive initial s1ze: ", "Negaaive initial s1ze: ");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1570L, false);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, sizeFileFilter0, sizeFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // !MOI
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "FVwu$b a");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // FVwu$b a
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negative initial size: ", "Negative initial size: ");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile((File) mockFile0, "!MOI", charset0);
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "/tmp/tmp/Kd6)N{mmU:gp0content-type", (Collection<?>) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!MOI");
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, "`1&%>=I4R<)<~lXU,#");
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3rac/i5e");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "3rac/i5e", "3rac/i5e");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 3rac/i5e
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "WBs^{{^~|h0.nm|N");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: 'WBs^{{^~|h0.nm|N'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      File file0 = MockFile.createTempFile("WD(*[A,", "f$");
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) directoryFileFilter0, (IOFileFilter) directoryFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/WD(*[A,0f$
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Negative initial size: ", "Negative initial size: ");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Negative initial size: /Negative initial size: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/azureuser/azureuser", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.listFiles(file0, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = MockFile.createTempFile("Gb09:pbI", "Gb09:pbI", (File) null);
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, hiddenFileFilter0, hiddenFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/Gb09:pbI0Gb09:pbI
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "The magic number cannot be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) trueFileFilter0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sIcFile");
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, false);
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1024L, FileUtils.ONE_KB);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "A-ay)H", (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      byte[] byteArray0 = new byte[11];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdirParent(file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(783L);
      assertEquals("783 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;/azureuser", "/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser/LLm4PrTest/ io_experiments/:78{mCu;/:78{mCu;/azureuser", "Negaaive initial s1ze: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Negaaive initial s1ze: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1586015820, 24, 4754, 987, 1784, 987);
      File file0 = MockFile.createTempFile(" must be static.", " must be static.");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) mockDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/ must be static.0 must be static.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ps)k,Xc9lgq", "Ps)k,Xc9lgq");
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) thaiBuddhistDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/Ps)k,Xc9lgq0Ps)k,Xc9lgq
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }
}
