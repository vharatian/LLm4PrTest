/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:29:49 GMT 2025
 */

package org.apache.commons.io.comparator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.comparator.AbstractFileComparator;
import org.apache.commons.io.comparator.CompositeFileComparator;
import org.apache.commons.io.comparator.ExtensionFileComparator;
import org.apache.commons.io.comparator.LastModifiedFileComparator;
import org.apache.commons.io.comparator.SizeFileComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractFileComparator_ESTest extends AbstractFileComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Comparator<File>> linkedHashSet0 = new LinkedHashSet<Comparator<File>>();
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(linkedHashSet0);
      String string0 = compositeFileComparator0.toString();
      assertEquals("CompositeFileComparator{}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<File> comparator0 = LastModifiedFileComparator.LASTMODIFIED_COMPARATOR;
      File[] fileArray0 = new File[1];
      File[] fileArray1 = ((AbstractFileComparator) comparator0).sort(fileArray0);
      assertEquals(1, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      ExtensionFileComparator extensionFileComparator0 = new ExtensionFileComparator(iOCase0);
      File[] fileArray0 = new File[0];
      File[] fileArray1 = extensionFileComparator0.sort(fileArray0);
      assertSame(fileArray1, fileArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      ExtensionFileComparator extensionFileComparator0 = new ExtensionFileComparator(iOCase0);
      Vector<File> vector0 = new Vector<File>();
      MockFile mockFile0 = new MockFile("");
      vector0.add(0, (File) mockFile0);
      List<File> list0 = extensionFileComparator0.sort((List<File>) vector0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LastModifiedFileComparator lastModifiedFileComparator0 = new LastModifiedFileComparator();
      File[] fileArray0 = new File[2];
      MockFile mockFile0 = new MockFile(fileArray0[0], "PathFileComparator[caseSensitivity=Sensitive]");
      fileArray0[1] = (File) mockFile0;
      // Undeclared exception!
      try { 
        lastModifiedFileComparator0.sort(fileArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // PathFileComparator[caseSensitivity=Sensitive]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SizeFileComparator sizeFileComparator0 = new SizeFileComparator();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      linkedList0.add((File) null);
      linkedList0.offerLast((File) null);
      // Undeclared exception!
      try { 
        sizeFileComparator0.sort((List<File>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.comparator.SizeFileComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LastModifiedFileComparator lastModifiedFileComparator0 = new LastModifiedFileComparator();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      MockFile mockFile0 = new MockFile("#X+k&P:3dnu", "#X+k&P:3dnu");
      arrayList0.add((File) mockFile0);
      arrayList0.add((File) mockFile0);
      // Undeclared exception!
      try { 
        lastModifiedFileComparator0.sort((List<File>) arrayList0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/#X+k&P:3dnu/#X+k&P:3dnu
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtensionFileComparator extensionFileComparator0 = new ExtensionFileComparator();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      List<File> list0 = extensionFileComparator0.sort((List<File>) arrayList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LastModifiedFileComparator lastModifiedFileComparator0 = new LastModifiedFileComparator();
      File[] fileArray0 = new File[2];
      // Undeclared exception!
      try { 
        lastModifiedFileComparator0.sort(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<File> comparator0 = LastModifiedFileComparator.LASTMODIFIED_COMPARATOR;
      File[] fileArray0 = ((AbstractFileComparator) comparator0).sort((File[]) null);
      assertNull(fileArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SizeFileComparator sizeFileComparator0 = new SizeFileComparator();
      List<File> list0 = sizeFileComparator0.sort((List<File>) null);
      assertNull(list0);
  }
}
