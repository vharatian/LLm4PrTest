/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:39:04 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.stream.Stream;
import org.apache.commons.io.CloseableURLConnection;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOTriFunction;
import org.apache.commons.io.input.QueueInputStream;
import org.apache.commons.io.input.RandomAccessFileInputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockPrintWriter0, (-4718L), (long) 5724);
      assertEquals("NU*uK", charArrayWriter0.toString());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) deferredFileOutputStream0, (long) (-1), 1125899906842624L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFtpExample();
          MockFile mockFile0 = new MockFile((File) null, "o");
          // Undeclared exception!
          try { 
            IOUtils.copy(uRL0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"o\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.IOUtils.copy(IOUtils.java:1411)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write(" to a subdirectory of itself: ", (Writer) stringWriter0);
      assertEquals(" to a subdirectory of itself: ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[8];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(455);
      IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$bA:8C$0k4miw(d%<");
      byte[] byteArray0 = new byte[5];
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0, (String) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J96D]kvnsb}VESb]/", true);
      IOUtils.write(", expected: ", (OutputStream) mockFileOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(".}msvKB8N@");
      IOUtils.write((CharSequence) "=#]}|", (OutputStream) mockPrintStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      deferredFileOutputStream_Builder0.setThreshold(480);
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      StringReader stringReader0 = new StringReader("org.apache.commons.io.input.Tailer$1");
      IOUtils.copy((Reader) stringReader0, (OutputStream) deferredFileOutputStream0, (String) null);
      assertEquals(36L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("#oP^>m}*dH");
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      char[] charArray0 = IOUtils.toCharArray((Reader) lineNumberReader0);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, 92);
      char[] charArray0 = IOUtils.toCharArray((Reader) pushbackReader0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertArrayEquals(new char[] {'N', 'U', '*', 'u', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      inputStreamReader0.read();
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) lineNumberReader0, charset0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "qI.:^Zr");
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      assertNotNull(inputStream1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.toString(uRL0, charset0);
      assertEquals("build\nByteOrderMark.class\nByteOrderParser.class\nchannels\ncharset\nCharsets.class\nCloseableURLConnection.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nfile\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nfunction\nHexDump.class\ninput\nIO.class\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\npackage-info.class\nRandomAccessFileMode.class\nRandomAccessFiles.class\nserialization\nStandardLineSeparator.class\nStreamIterator.class\nTaggedIOException.class\nThreadMonitor.class\nThreadUtils.class\nUncheckedIOExceptions.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".}msvKB8N@");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "O!hk'|[T");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = IOUtils.readLines(inputStream0, charset0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ".}msvKB8N@");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ".class");
      IOUtils.readFully(inputStream0, 1);
      assertEquals(5, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(2862);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.read(iOTriFunction0, byteArray0, (int) (byte)0, 3633);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Ranges have a nonempty intersection: ");
      byte[] byteArray0 = new byte[4];
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(33, inputStream0.available());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getScratchByteArrayWriteOnly();
      int int0 = IOUtils.length(byteArray0);
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) pipedWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) charArrayWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "isRegularFile");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      inputStreamReader0.read();
      InputStreamReader inputStreamReader1 = new InputStreamReader(inputStream0, charsetDecoder0);
      long long0 = IOUtils.consume((Reader) inputStreamReader1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2165);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(queueInputStream0, queueInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      long long0 = IOUtils.consume((InputStream) pushbackInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("o<}3(Mc!hn");
      long long0 = IOUtils.consume(inputStream0);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray(7);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "org.apache.commons.io.build.AbstractOriginSupplier");
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 7);
      assertNotNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) arrayDeque0, "", (OutputStream) byteArrayOutputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0, 47);
      bufferedWriter0.close();
      char[] charArray0 = new char[3];
      try { 
        IOUtils.writeChunked(charArray0, (Writer) bufferedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[0];
      try { 
        IOUtils.write(charArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) stringWriter0, "org.apache.commons.io.function.IOBaseStreamAdapter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.function.IOBaseStreamAdapter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[3];
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write(byteArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write("isRegularFile", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write("", (OutputStream) byteArrayOutputStream0, "org.apache.commons.io.build.AbstractOrigin");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.build.AbstractOrigin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write(", expected: ", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "isRegularFile", (OutputStream) deferredFileOutputStream0, "isRegularFile");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // isRegularFile
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URI uRI0 = MockURL.toURI(uRL0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URI uRI0 = MockURI.URI("Ih", "NU*uK", "Ih");
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: ih
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<ObjectInputStream> stack0 = new Stack<ObjectInputStream>();
      Enumeration<ObjectInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) sequenceInputStream0, "4XR.bm[\"Qyblmm");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4XR.bm[\"Qyblmm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2840), 885);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      try { 
        IOUtils.toString((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("Predicates.", "Predicates.");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Predicates.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "input", "input");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // input
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toCharArray((InputStream) mockFileInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W g,7E`NVu!");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 8192L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) queueInputStream0, (-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1078
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("`sI`X5M~?|h:pxz-", "`sI`X5M~?|h:pxz-");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) mockFileReader0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("`sI`X5M~?|h:pxz-");
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream(inputStream0, (-449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -449
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-81), 63);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) null, 881L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.skipFully((Reader) pipedReader0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.skipFully((InputStream) pipedInputStream0, 2147483647L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder1 = deferredFileOutputStream_Builder0.setSuffix("t-YgsDCjU}Y.PIG");
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder2 = deferredFileOutputStream_Builder1.setSuffix("t-YgsDCjU}Y.PIG");
      MockFile mockFile0 = new MockFile("t-YgsDCjU}Y.PIG", "t-YgsDCjU}Y.PIG");
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder3 = deferredFileOutputStream_Builder2.setDirectory((File) mockFile0);
      Path path0 = mockFile0.toPath();
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder4 = deferredFileOutputStream_Builder3.setDirectory(path0);
      File file0 = MockFile.createTempFile("O!hk'|[T", "");
      file0.toPath();
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder5 = deferredFileOutputStream_Builder4.setOutputFile(file0);
      deferredFileOutputStream_Builder5.setPrefix("org.apache.commons.io.input.Tailer$1");
      int int0 = 480;
      deferredFileOutputStream_Builder1.setThreshold(480);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0, 480);
      byte[] byteArray0 = new byte[0];
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream1, (long) 480, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = IOUtils.getScratchByteArray();
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(supplier0).get();
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, 869L, supplier0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(queueInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) bufferedInputStream0, (-117L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -117
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("#pr$')=T{&`#n(F-M");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: #pr$')=T{&`#n(F-M
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      // Undeclared exception!
      try { 
        IOUtils.readLines((Reader) lineNumberReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0, "w{2XikZ4*  6-dj");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // w{2XikZ4*  6-dj
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("java.io.BufferedReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, (byte[]) null, (-963), 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, byteArray0, (-963), (int) (byte)20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, (byte)125);
      pipedReader0.close();
      try { 
        IOUtils.read((Reader) pipedReader0, (char[]) null, (int) (byte) (-51), (int) (byte)125);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) queueInputStream0, (byte[]) null, 1099, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      try { 
        IOUtils.read((InputStream) pipedInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) byteArrayOutputStream0, 13L, 13L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.copyLarge((InputStream) pipedInputStream0, (OutputStream) byteArrayOutputStream0, (-3926L), (-3926L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = mockFile0.toURL();
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, (OutputStream) deferredFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.copy(uRL0, (OutputStream) deferredFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "isRegularFile");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      try { 
        IOUtils.copy((Reader) inputStreamReader0, (Appendable) pipedWriter0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) stringWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      MockFile mockFile0 = new MockFile("", "com.google.common.base.Suppliers$SupplierFunctionImpl");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) mockFileReader0, (Writer) mockFileWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "isRegularFile");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      try { 
        IOUtils.copy((Reader) inputStreamReader0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) mockFileInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((ByteArrayOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, 1375);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) stringWriter0, (-305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, 5349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      IOUtils.write(stringBuffer0, (OutputStream) objectOutputStream0, (String) null);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("E23", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2165);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write("", (OutputStream) byteArrayOutputStream0, charset0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("7ER|QU", "input");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((CharSequence) "7ER|QU", (OutputStream) objectOutputStream0, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("GEEIa#");
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[3];
      IOUtils.write(charArray0, (OutputStream) mockPrintStream0, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toString((InputStream) pushbackInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = MockFile.createTempFile("`sI`X5M~?|h:pxz-", "`sI`X5M~?|h:pxz-");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      mockFileReader0.close();
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toByteArray((Reader) mockFileReader0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 4331);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, (int) (byte)0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "o}3(Mchn");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      try { 
        IOUtils.skipFully((Reader) inputStreamReader0, 1152921504606846968L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1152921504606846968 actual: 8
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      IOUtils.skipFully((Reader) inputStreamReader0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Cannot read more than %,d into a byte array");
      try { 
        IOUtils.skipFully(inputStream0, 2747L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 2747 actual: 43
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOUtils.skipFully((InputStream) pipedInputStream0, (long) 0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0, 480);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) byteArray1).when(supplier0).get();
      long long0 = IOUtils.skip(inputStream1, (long) 480, supplier0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2165);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(queueInputStream0, queueInputStream0);
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long long0 = IOUtils.skip((InputStream) sequenceInputStream0, 0L, supplier0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, (-53L), supplier0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -53
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("MC=C(zs$Vdv", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: MC=C(zs$Vdv
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0, (-2142825331), (-2142825331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2142825331
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = new Integer((-2147138392));
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      byte[] byteArray0 = new byte[2];
      int int0 = IOUtils.read(iOTriFunction0, byteArray0, 2067475462, Integer.MAX_VALUE);
      assertEquals((-2147138392), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.read((IOTriFunction<byte[], Integer, Integer, Integer>) null, (byte[]) null, 187, (-656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -656
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      int int0 = IOUtils.read((InputStream) queueInputStream0, byteArray0, 10, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) queueInputStream0, byteArray0, 10, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("`sI`X5M~?|h:pxz-");
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) stringWriter0, (long) (byte) (-1), (long) (byte) (-94), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("H:[o5XO/");
      char[] charArray0 = new char[2];
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) stringWriter0, 2280L, (long) 181, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 2280 actual: 8
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("`sI`X5M~?|h:pxz-");
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) stringWriter0, (long) (byte) (-1), (long) (byte)0, (char[]) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "qI.:^Zr");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[8];
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0, charArray0);
      assertEquals("qI.:^Zr", stringWriter0.toString());
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      deferredFileOutputStream_Builder0.setThreshold(58);
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "isRegularFile");
      byte[] byteArray0 = new byte[1];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) deferredFileOutputStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "isRegularFile");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) deferredFileOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "!j>ZC-</");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      ByteBuffer byteBuffer0 = charset0.encode("application/octet-stream");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) stringWriter0, charBuffer0);
      assertEquals(8, charBuffer0.limit());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) null, (Consumer<IOException>) stream_Builder0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) pipedInputStream0, (Consumer<IOException>) stream_Builder0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      IOUtils.close((URLConnection) closeableURLConnection0);
      assertTrue(closeableURLConnection0.getDefaultUseCaches());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URI uRI0 = MockURI.create("Suppliers.memoize(");
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "isRegularFile");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      try { 
        IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-127), (-127));
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) byteArrayInputStream0);
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) bufferedInputStream0, charset0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = MockFile.createTempFile("`sI`X5M~?|h:pxz-", "`sI`X5M~?|h:pxz-");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockFile mockFile0 = new MockFile("`sI`X5M~?|h:pxz-");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.toByteArray((Reader) mockFileReader0, charset0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) mockFileReader0, (-2147221150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0, charset0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("java.io.BufferedReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("tjs$,2H", charset0);
      assertEquals(7, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.byteArray((-360));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("Ep5fF#[_#Qhw'", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Ep5fF#[_#Qhw'
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-365729413));
      arrayDeque0.add(byteArrayOutputStream0);
      IOUtils.writeLines((Collection<?>) arrayDeque0, "6]g1;&X=AjW+yVH.", (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals(56, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ha9BuaH");
      IOUtils.writeChunked(charArray0, (Writer) mockPrintWriter0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IOUtils.writeChunked((char[]) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(181);
      byte[] byteArray0 = new byte[9];
      IOUtils.writeChunked(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(9, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(191);
      IOUtils.writeChunked((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("R");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write(stringBuffer0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.write((StringBuffer) null, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(".}msvKB8N@");
      IOUtils.write((StringBuffer) null, (OutputStream) mockPrintStream0, "");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      IOUtils.write((String) null, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(181);
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((CharSequence) stringBuilder0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = MockFile.createTempFile("qI.:^Zr", "o<}3(Mc!hn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((CharSequence) null, (OutputStream) objectOutputStream0, charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      IOUtils.write(charArray0, (Writer) stringWriter0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.write((char[]) null, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("r>2gH4^s2qvp.R");
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((char[]) null, (OutputStream) mockPrintStream0, charset0);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      IOUtils.write((byte[]) null, (Writer) outputStreamWriter0, charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(181);
      byte[] byteArray0 = new byte[9];
      IOUtils.write(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(9, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      IOUtils.write((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      String string0 = IOUtils.toString(uRL0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "O!hk'|[T");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, 2L);
      assertEquals(6, inputStream0.available());
      assertArrayEquals(new byte[] {(byte)79, (byte)33}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ".}msvKB8N@");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(inputStream0, (-1802L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1802
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "O!hk'|[T");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, 0L);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ".}msvKB8N@");
      try { 
        IOUtils.toByteArray(inputStream0, 1203L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 10, expected: 1203
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 240);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) lineNumberReader0, 2128);
      assertSame(bufferedReader1, lineNumberReader0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(6338);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      LineNumberReader lineNumberReader1 = (LineNumberReader)IOUtils.toBufferedReader((Reader) lineNumberReader0);
      assertEquals(0, lineNumberReader1.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      IOUtils.skipFully(inputStream0, (long) (byte)0, (Supplier<byte[]>) null);
      assertEquals(5, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, (-1L), supplier0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) pipedInputStream0, 404L, (Supplier<byte[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) pipedReader0, (-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -14
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) pipedInputStream0, (-1594L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1594
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToByteArray("ha9BuaH", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: ha9BuaH
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[8];
      IOUtils.readFully((Reader) null, charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0, (-2147028575), (-2147028575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2147028575
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      int int0 = IOUtils.read((Reader) pipedReader0, (char[]) null, 3633, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(187);
      // Undeclared exception!
      try { 
        IOUtils.readFully((ReadableByteChannel) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      int int0 = IOUtils.read(iOTriFunction0, byteArray0, (int) (byte)8, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, byteArray0, 286, (int) (byte) (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -30
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOUtils.readFully((InputStream) pipedInputStream0, byteArray0, (-963), (int) (byte)0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "com.google.common.base.CharMatcher$1");
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = IOUtils.length(charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "o}3(Mchn");
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      StringWriter stringWriter0 = new StringWriter();
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) stringWriter0, (-1560L), (-435L));
      assertEquals("o}3(Mchn", stringWriter0.toString());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      InputStream inputStream0 = IOUtils.toInputStream("W g,7E`NVu!");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      try { 
        IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) stringWriter0, 12L, (-5378L));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 12 actual: 11
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStream inputStream0 = IOUtils.toInputStream("NU*uK");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockPrintWriter0, (long) (byte)0, 4L);
      assertEquals("NU*u", charArrayWriter0.toString());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "xhP1kVbzBz@mi*2");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) null, (long) 7, (long) 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      InputStream inputStream0 = IOUtils.toInputStream("W g,7E`NVu!");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) stringWriter0, (long) 7, 0L);
      assertEquals(0, inputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) null, (-1L), 2862933555777941757L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" tY9hJrnDx)}0vjFS");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " tY9hJrnDx)}0vjFS");
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, 7L, 7L);
      assertEquals(3, inputStream0.available());
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("tsa)eZ'f2DO((ON");
      MockPrintStream mockPrintStream0 = new MockPrintStream("tsa)eZ'f2DO((ON");
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, (long) (byte)0, 8192L);
      assertEquals(0, inputStream0.available());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      long long0 = IOUtils.copyLarge((InputStream) bufferedInputStream0, (OutputStream) byteArrayOutputStream0, (long) 0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\")");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\")");
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, (-1666L), (-1666L));
      assertEquals(0, inputStream0.available());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 7);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(pipedReader0, pipedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("com.google.common.jimfs.AttributeProvider");
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream0);
      assertEquals(41, inputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      boolean boolean0 = IOUtils.contentEquals((InputStream) dataInputStream0, (InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[8];
      Stream<Closeable> stream0 = Stream.of(closeableArray0);
      IOUtils.closeQuietly(stream0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      IOUtils.closeQuietly((Stream<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SynchronousQueue<Closeable> synchronousQueue0 = new SynchronousQueue<Closeable>(false);
      IOUtils.closeQuietly((Iterable<Closeable>) synchronousQueue0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      IOUtils.closeQuietly((Iterable<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      IOUtils.close(uRLConnection0);
      assertEquals(0L, uRLConnection0.getIfModifiedSince());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) stringWriter0, iOConsumer0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      IOUtils.close((Closeable) null, (IOConsumer<IOException>) null);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      IOUtils.close((Closeable) inputStream0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0, 1375);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      try { 
        IOUtils.copyLarge((Reader) bufferedReader0, (Writer) bufferedWriter0, 3029L, 2147483647L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0, 139);
      assertSame(bufferedWriter1, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 912);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, 76);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 1023);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, (-1006));
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o}3(Mchn");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) filterOutputStream0, (-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 1023);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) byteArrayOutputStream0);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) pushbackInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) stringWriter0, ".}msvKB8N@");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .}msvKB8N@
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      IOUtils.clear();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "READ_ONLY");
      // Undeclared exception!
      try { 
        IOUtils.toCharArray(inputStream0, "Oa|_rJT");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Oa|_rJT
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0, 191);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("o<}3(Mc!hn");
      File file0 = MockFile.createTempFile("qI.:^Zr", "o<}3(Mc!hn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      IOUtils.copy(inputStream0, (Writer) outputStreamWriter0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) pipedInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.consume((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader(".}msvKB8N@");
      long long0 = IOUtils.copy((Reader) stringReader0, (Appendable) stringWriter0);
      assertEquals(".}msvKB8N@", stringWriter0.toString());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket(191, 2146737475);
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertTrue(mockServerSocket0.isBound());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "? 7vw,s\"gQp#_0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ? 7vw,s\"gQp#_0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "QLCRU9]=FmIcIt@H");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // QLCRU9]=FmIcIt@H
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = MockFile.createTempFile("7ER|QU", "input");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      IOUtils.closeQuietly((OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ".}msvKB8N@");
      // Undeclared exception!
      try { 
        IOUtils.toString(inputStream0, "iQWp");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // iQWp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) null, (Writer) null, "iR[Q{Ed");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // iR[Q{Ed
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("o<}3(Mc!hn");
      IOUtils.write((CharSequence) "o<}3(Mc!hn", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, (long) 7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("RNb\"h");
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(".}msvKB8N@");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) ".}msvKB8N@", (OutputStream) mockPrintStream0, "=#]}|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =#]}|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expected: ");
      IOUtils.writeLines((Collection<?>) priorityQueue0, (String) null, (OutputStream) mockPrintStream0);
      assertFalse(priorityQueue0.contains(", expected: "));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockFile mockFile0 = new MockFile("q&Es7EoG<!1aW");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("&INW}pxt?Pj@}b>f/|v", "", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockFileReader mockFileReader0 = new MockFileReader(mockFile1);
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) mockFileReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write(stringBuffer0, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("tsa)eZ'f2DO((ON");
      StringReader stringReader0 = new StringReader("}|R>uLt,=O|k");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) stringReader0, (OutputStream) mockPrintStream0, "Mw('OY.v:tvWC");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Mw('OY.v:tvWC
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = MockFile.createTempFile("`sI`X5M~?|h:pxz-", "`sI`X5M~?|h:pxz-");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) mockFileReader0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.closeQuietly((Reader) charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Selector selector0 = Selector.open();
      IOUtils.closeQuietly(selector0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) sequenceInputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        IOUtils.write("", (OutputStream) byteArrayOutputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("input");
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "xhP1kVbzBz@mi*2");
      IOUtils.closeQuietly(inputStream0);
      assertEquals(15, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ".}msvKB8N@");
      try { 
        IOUtils.readFully(inputStream0, 114);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 114 actual: 10
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      LineIterator lineIterator0 = IOUtils.lineIterator((InputStream) pipedInputStream0, charset0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("Y;{]zB_=L!gJxY<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Y;{]zB_=L!gJxY<
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(86);
      IOUtils.closeQuietly((Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("NU*uK", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: NU*uK
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        IOUtils.consume((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      IOUtils.close((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, "outputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // outputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      IOUtils.closeQuietly((Socket) null);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "D)|S3;w");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // D)|S3;w
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toCharArray((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArrayWriteOnly();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      assertEquals(912, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "o}3(Mchn");
      assertEquals(8, inputStream0.available());
      
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("o}3(Mchn", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URI uRI0 = MockURL.toURI(uRL0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.closeQuietly((Closeable) pipedWriter0);
  }
}
