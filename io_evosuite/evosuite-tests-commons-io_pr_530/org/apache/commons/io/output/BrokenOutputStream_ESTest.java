/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:10:31 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.function.Supplier;
import org.apache.commons.io.output.BrokenOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BrokenOutputStream_ESTest extends BrokenOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(0);
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(0);
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-286));
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(0);
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-2126));
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(3576);
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-1028));
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-2046));
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(3);
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(8232);
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(1416);
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(99);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(0);
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-2473));
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(110, true, true, 110, 110);
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(110);
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write(66);
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-1));
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream((Supplier<Throwable>) null);
      // Undeclared exception!
      try { 
        brokenOutputStream0.write((-1809));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.BrokenOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(5377, false, false, 5377, 5377);
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream((IOException) null);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Erase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BrokenOutputStream brokenOutputStream0 = BrokenOutputStream.INSTANCE;
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken output stream
         //
         verifyException("org.apache.commons.io.output.BrokenOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(757, false, false, 757, 757);
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream();
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken output stream
         //
         verifyException("org.apache.commons.io.output.BrokenOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenOutputStream0.flush();
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream();
      try { 
        brokenOutputStream0.write(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken output stream
         //
         verifyException("org.apache.commons.io.output.BrokenOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BrokenOutputStream brokenOutputStream0 = new BrokenOutputStream((IOException) null);
      // Undeclared exception!
      try { 
        brokenOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Erase", e);
      }
  }
}
