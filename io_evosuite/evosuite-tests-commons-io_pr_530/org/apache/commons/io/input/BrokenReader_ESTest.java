/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:08:22 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.function.Supplier;
import org.apache.commons.io.input.BrokenReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BrokenReader_ESTest extends BrokenReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenReader brokenReader0 = new BrokenReader(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(64L);
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenReader brokenReader0 = new BrokenReader(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenReader brokenReader0 = new BrokenReader(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip((-483L));
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip((-1939L));
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenReader brokenReader0 = new BrokenReader(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenReader brokenReader0 = new BrokenReader(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(2073L);
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenReader brokenReader0 = new BrokenReader(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip((-1L));
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenReader brokenReader0 = new BrokenReader(sQLException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenReader brokenReader0 = new BrokenReader(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenReader brokenReader0 = new BrokenReader(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(790L);
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      BrokenReader brokenReader0 = new BrokenReader(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0);
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenReader brokenReader0 = new BrokenReader(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenReader0.skip((-1L));
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenReader brokenReader0 = new BrokenReader(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenReader0.skip(0L);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.skip((-378L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenReader brokenReader0 = new BrokenReader(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenReader brokenReader0 = new BrokenReader(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenReader brokenReader0 = new BrokenReader(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenReader brokenReader0 = new BrokenReader(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenReader brokenReader0 = new BrokenReader(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenReader brokenReader0 = new BrokenReader(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenReader brokenReader0 = new BrokenReader(sQLException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenReader brokenReader0 = new BrokenReader(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenReader brokenReader0 = new BrokenReader(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      BrokenReader brokenReader0 = new BrokenReader(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenReader brokenReader0 = new BrokenReader(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenReader brokenReader0 = new BrokenReader(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Throwable) null);
      // Undeclared exception!
      try { 
        brokenReader0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Erase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenReader brokenReader0 = new BrokenReader(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenReader brokenReader0 = new BrokenReader(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenReader brokenReader0 = new BrokenReader(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenReader brokenReader0 = new BrokenReader(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenReader brokenReader0 = new BrokenReader(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenReader brokenReader0 = new BrokenReader(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenReader brokenReader0 = new BrokenReader(sQLException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenReader brokenReader0 = new BrokenReader(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenReader brokenReader0 = new BrokenReader(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      BrokenReader brokenReader0 = new BrokenReader(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenReader brokenReader0 = new BrokenReader(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenReader brokenReader0 = new BrokenReader(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Supplier<Throwable>) null);
      // Undeclared exception!
      try { 
        brokenReader0.ready();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("83Ep", "83Ep");
      BrokenReader brokenReader0 = new BrokenReader(sQLWarning0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, (-3255), (-3255));
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("evictionCount", "evictionCount", 0);
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, (-12931), (-12931));
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1);
      BrokenReader brokenReader0 = new BrokenReader(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 2583, 1);
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ty*B;Jo(&)K");
      BrokenReader brokenReader0 = new BrokenReader(sQLSyntaxErrorException0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, 2, 2);
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      BrokenReader brokenReader0 = new BrokenReader(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, (-1703), (-1703));
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, (-212), (-212));
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.io.file.StandardDeleteOption");
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientConnectionException0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, 240, 240);
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-1089));
      BrokenReader brokenReader0 = new BrokenReader(sQLInvalidAuthorizationSpecException0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, (int) '\'', (-1089));
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      BrokenReader brokenReader0 = new BrokenReader(sQLIntegrityConstraintViolationException0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, (-1), (-1));
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenReader brokenReader0 = new BrokenReader(sQLFeatureNotSupportedException0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, 0, 0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenReader brokenReader0 = new BrokenReader(sQLException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenReader brokenReader0 = new BrokenReader(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenReader brokenReader0 = new BrokenReader(sQLClientInfoException0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, 0, 0);
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1181, true, true, 1181, 1181);
      BrokenReader brokenReader0 = new BrokenReader(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 1181, (-57));
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenReader brokenReader0 = new BrokenReader(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 40, (-1407));
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      MockThrowable mockThrowable0 = new MockThrowable(dataTruncation0);
      BrokenReader brokenReader0 = new BrokenReader(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Supplier<Throwable>) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        brokenReader0.read(charArray0, (-291), (-291));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenReader brokenReader0 = new BrokenReader(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenReader0.mark((-632));
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(1604);
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(0);
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark((-862048943));
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark((-1619));
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenReader brokenReader0 = new BrokenReader(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(1251);
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenReader brokenReader0 = new BrokenReader(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(2093);
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(615);
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(65536);
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenReader brokenReader0 = new BrokenReader(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(0);
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenReader brokenReader0 = new BrokenReader(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(0);
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenReader brokenReader0 = new BrokenReader(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenReader brokenReader0 = new BrokenReader(sQLException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark((-1669));
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Vap2TA2uWN4", "Vap2TA2uWN4");
      BrokenReader brokenReader0 = new BrokenReader(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(151);
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenReader brokenReader0 = new BrokenReader(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(1786);
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      BrokenReader brokenReader0 = new BrokenReader(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(0);
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenReader brokenReader0 = new BrokenReader(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(8232);
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenReader brokenReader0 = new BrokenReader(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenReader0.mark(3958);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Throwable) null);
      // Undeclared exception!
      try { 
        brokenReader0.mark(1418);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Erase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BrokenReader brokenReader0 = new BrokenReader(sQLWarning0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLWarning");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BrokenReader brokenReader0 = new BrokenReader(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BrokenReader brokenReader0 = new BrokenReader(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BrokenReader brokenReader0 = new BrokenReader(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BrokenReader brokenReader0 = new BrokenReader(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BrokenReader brokenReader0 = new BrokenReader(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BrokenReader brokenReader0 = new BrokenReader(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BrokenReader brokenReader0 = new BrokenReader(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      BrokenReader brokenReader0 = new BrokenReader(sQLException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BrokenReader brokenReader0 = new BrokenReader(sQLDataException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLDataException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BrokenReader brokenReader0 = new BrokenReader(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      BrokenReader brokenReader0 = new BrokenReader(dataTruncation0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: DataTruncation");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BrokenReader brokenReader0 = new BrokenReader(batchUpdateException0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: BatchUpdateException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BrokenReader brokenReader0 = new BrokenReader(mockThrowable0);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BrokenReader brokenReader0 = BrokenReader.INSTANCE;
      try { 
        brokenReader0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((Throwable) null);
      // Undeclared exception!
      try { 
        brokenReader0.skip((-4240L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Erase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader((IOException) null);
      // Undeclared exception!
      try { 
        brokenReader0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Erase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.mark(2867);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BrokenReader brokenReader0 = BrokenReader.INSTANCE;
      try { 
        brokenReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BrokenReader brokenReader0 = new BrokenReader();
      try { 
        brokenReader0.read((char[]) null, 1463, 1463);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken reader
         //
         verifyException("org.apache.commons.io.input.BrokenReader", e);
      }
  }
}
