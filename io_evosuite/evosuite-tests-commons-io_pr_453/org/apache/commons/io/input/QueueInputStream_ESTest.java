/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:30:10 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import org.apache.commons.io.input.QueueInputStream;
import org.apache.commons.io.output.QueueOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QueueInputStream_ESTest extends QueueInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = QueueInputStream.builder();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Duration duration0 = chronoUnit0.getDuration();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setTimeout(duration0);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(2749);
      linkedBlockingDeque0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(linkedBlockingDeque0);
      int int0 = queueInputStream0.read();
      assertEquals(189, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QueueInputStream queueInputStream0 = null;
      try {
        queueInputStream0 = new QueueInputStream((BlockingQueue<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // blockingQueue
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      int int0 = queueInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(0);
      linkedBlockingDeque0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(linkedBlockingDeque0);
      int int0 = queueInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      Duration duration0 = Duration.ofNanos((-1715L));
      // Undeclared exception!
      try { 
        queueInputStream_Builder0.setTimeout(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout must not be negative
         //
         verifyException("org.apache.commons.io.input.QueueInputStream$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      Duration duration0 = Duration.ofSeconds((long) 0);
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setTimeout(duration0);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setTimeout((Duration) null);
      assertSame(queueInputStream_Builder1, queueInputStream_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      BlockingQueue<Integer> blockingQueue0 = queueInputStream0.getBlockingQueue();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setBlockingQueue(blockingQueue0);
      assertSame(queueInputStream_Builder1, queueInputStream_Builder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = QueueInputStream.builder();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setBlockingQueue((BlockingQueue<Integer>) null);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      QueueOutputStream queueOutputStream0 = queueInputStream0.newQueueOutputStream();
      assertNotNull(queueOutputStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      Duration duration0 = queueInputStream0.getTimeout();
      assertNotNull(duration0);
  }
}
