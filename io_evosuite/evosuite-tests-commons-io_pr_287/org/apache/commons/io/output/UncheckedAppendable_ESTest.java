/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:08:23 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.io.output.UncheckedAppendable;
import org.apache.commons.io.output.UncheckedAppendableImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UncheckedAppendable_ESTest extends UncheckedAppendable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.io.filefilter.OrFileFilter");
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(mockPrintWriter0);
      UncheckedAppendable uncheckedAppendable0 = UncheckedAppendable.on(uncheckedAppendableImpl0);
      assertNotSame(uncheckedAppendableImpl0, uncheckedAppendable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        UncheckedAppendable.on((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }
}
