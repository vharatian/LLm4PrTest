/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:40:38 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.commons.io.input.CharSequenceReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceReader_ESTest extends CharSequenceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Object object0 = new Object();
      stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      char[] charArray0 = new char[8];
      int int0 = charSequenceReader0.read(charArray0, 0, 1);
      assertEquals(1, int0);
      
      long long0 = charSequenceReader0.skip(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(862);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0, 2084322364);
      long long0 = charSequenceReader0.skip(1860L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Object object0 = new Object();
      stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      char[] charArray0 = new char[8];
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(8, int0);
      
      int int1 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("YnWA5j.Aos7");
      stringBuilder1.append('A');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder1);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("YnWA5j.Aos7");
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("YnWA5j.Aos7");
      char[] charArray0 = new char[4];
      int int0 = charSequenceReader0.read(charArray0);
      assertArrayEquals(new char[] {'Y', 'n', 'W', 'A'}, charArray0);
      assertEquals(4, int0);
      
      int int1 = charSequenceReader0.read(charBuffer0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("kGy", Integer.MAX_VALUE);
      assertFalse(charSequenceReader0.ready());
      
      char[] charArray0 = new char[0];
      int int0 = charSequenceReader0.read(charArray0, 467, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0, 895);
      assertFalse(charSequenceReader0.ready());
      
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0, 895);
      boolean boolean0 = charSequenceReader0.ready();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null, 0, Integer.MAX_VALUE);
      assertFalse(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1);
      charSequenceReader0.toString();
      assertTrue(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      stringBuffer0.insert(0, '!');
      long long0 = charSequenceReader0.skip(10L);
      assertEquals(1L, long0);
      assertFalse(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[7];
      int int0 = charSequenceReader0.read(charArray0, (-28), (-28));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 0);
      int int0 = charSequenceReader0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1511);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read((char[]) null, 1511, 1511);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      char[] charArray0 = new char[3];
      stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 2147483611, 2147483611);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader(stringBuffer0, (-405));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index is less than zero: -405
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      // Undeclared exception!
      try { 
        charSequenceReader0.skip((-1196L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of characters to skip is less than zero: -1196
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      long long0 = charSequenceReader0.skip(0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[0];
      int int0 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("A+Q\"}qsf?f5v<hJE");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 2970, 2970);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=2970, length=2970
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2597);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-1133), 2597);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-1133, length=2597
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("A5'L7(Jp^~LW");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-1139), (-1139));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-1139, length=-1139
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((float) 0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      assertFalse(charSequenceReader0.ready());
      
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((float) 0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read();
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      assertFalse(charSequenceReader0.ready());
      
      stringBuilder0.insert(0, 0);
      boolean boolean0 = charSequenceReader0.ready();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      boolean boolean0 = charSequenceReader0.ready();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader((CharSequence) null, 3192, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index is less than start 3192: 1
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null);
      charSequenceReader0.mark(1);
      assertFalse(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      charSequenceReader0.reset();
      assertFalse(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      charSequenceReader0.toString();
      assertFalse(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      boolean boolean0 = charSequenceReader0.markSupported();
      assertTrue(boolean0);
      assertFalse(charSequenceReader0.ready());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null);
      charSequenceReader0.close();
      assertFalse(charSequenceReader0.ready());
  }
}
