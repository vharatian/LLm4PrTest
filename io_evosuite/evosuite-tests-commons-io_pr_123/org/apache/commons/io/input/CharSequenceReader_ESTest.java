/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:37:53 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.io.input.CharSequenceReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceReader_ESTest extends CharSequenceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.append(1837L);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      int int0 = charSequenceReader0.read();
      assertEquals(49, int0);
      
      long long0 = charSequenceReader0.skip(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null, 1, 1);
      long long0 = charSequenceReader0.skip(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      long long0 = charSequenceReader0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[2];
      StringBuilder stringBuilder1 = stringBuilder0.append((-2727.0F));
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1, 0);
      long long0 = charSequenceReader0.skip(2L);
      assertEquals(2L, long0);
      
      int int0 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[2];
      StringBuilder stringBuilder1 = stringBuilder0.append((-2727.0F));
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1, 0);
      int int0 = charSequenceReader0.read(charArray0);
      assertArrayEquals(new char[] {'-', '2'}, charArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(", offset=");
      char[] charArray0 = new char[8];
      int int0 = charSequenceReader0.read();
      assertEquals(44, int0);
      
      int int1 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(", offset=");
      char[] charArray0 = new char[23];
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("");
      char[] charArray0 = new char[0];
      int int0 = charSequenceReader0.read(charArray0, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null, 1, 1);
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null, 1, 1);
      String string0 = charSequenceReader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(", offset=");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[3];
      int int0 = charSequenceReader0.read(charArray0, 0, 1);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1, 0);
      int int0 = charSequenceReader0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5, #ff%et=");
      // Undeclared exception!
      try { 
        charSequenceReader0.read((char[]) null, 14, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(", offset=");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 2146486673, 2146486673);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null);
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      // Undeclared exception!
      try { 
        charSequenceReader0.skip((-463L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of characters to skip is less than zero: -463
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(", offset=");
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 940, 102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=8, offset=940, length=102
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(".nzg");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-1551), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-1551, length=0
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[2];
      StringBuilder stringBuilder1 = stringBuilder0.append((-2727.0F));
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1, 0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 0, (-647));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=2, offset=0, length=-647
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 2);
      charSequenceReader0.read(charBuffer0);
      int int0 = charSequenceReader0.read(charArray0, 1160, 69);
      assertEquals(2, charBuffer0.remaining());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader(", offset=", 10, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index is less than start 10: -1
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader(" oSfSset=", (-3274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index is less than zero: -3274
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null, 3287);
      charSequenceReader0.mark(3287);
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0, 0);
      charSequenceReader0.reset();
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 2);
      String string0 = charSequenceReader0.toString();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0, 0);
      boolean boolean0 = charSequenceReader0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      charSequenceReader0.close();
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(570);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(570, int0);
  }
}
