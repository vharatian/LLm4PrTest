/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:27:39 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.commons.io.input.CharSequenceReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceReader_ESTest extends CharSequenceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      char[] charArray0 = new char[7];
      Object object0 = new Object();
      stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(7, int0);
      
      long long0 = charSequenceReader0.skip('U');
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 78);
      long long0 = charSequenceReader0.skip(2251);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      char[] charArray0 = new char[10];
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder1);
      long long0 = charSequenceReader0.skip(1L);
      assertEquals(1L, long0);
      
      int int0 = charSequenceReader0.read(charArray0);
      assertArrayEquals(new char[] {'a', 'v', 'a', '.', 'l', 'a', 'n', 'g', '.', 'O'}, charArray0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 78);
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 78);
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re", 1, 1);
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0, 0);
      stringBuffer0.appendCodePoint(0);
      String string0 = charSequenceReader0.toString();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0, 0);
      int int0 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re", 1);
      int int0 = charSequenceReader0.read(charArray0, 0, 1);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("lO_T~");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      int int0 = charSequenceReader0.read();
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.insert(0, 0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",W^%pCl^+-Vz![D0");
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 1075, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader(stringBuffer0, (-1191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start index is less than zero: -1191
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1065);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      long long0 = charSequenceReader0.skip(1065);
      assertEquals(1065L, long0);
      
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Object object0 = new Object();
      stringBuilder0.append(object0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      long long0 = charSequenceReader0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.skip((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of characters to skip is less than zero: -1
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      long long0 = charSequenceReader0.skip(0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      stringBuffer0.append(0.0F);
      char[] charArray0 = new char[0];
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("5F$re");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re", 1);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re");
      char[] charArray0 = new char[13];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, 1241, 1241);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=13, offset=1241, length=1241
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-991), 2146725623);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-991, length=2146725623
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-991), (-991));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-991, length=-991
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      char[] charArray0 = new char[0];
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1065);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read();
      int int0 = charSequenceReader0.read(charBuffer0);
      assertEquals(1, charBuffer0.length());
      assertEquals(1064, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader((CharSequence) null);
      int int0 = charSequenceReader0.read((char[]) null, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader(stringBuffer0, 0, (-3538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index is less than start 0: -3538
         //
         verifyException("org.apache.commons.io.input.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      charSequenceReader0.mark(0);
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuilder0);
      charSequenceReader0.reset();
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(stringBuffer0);
      String string0 = charSequenceReader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re", 1);
      boolean boolean0 = charSequenceReader0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = new CharSequenceReader("5F$re", 1);
      charSequenceReader0.close();
      assertTrue(charSequenceReader0.markSupported());
  }
}
