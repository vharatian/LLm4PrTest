/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:52:12 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.Instant;
import java.util.LinkedList;
import java.util.regex.Pattern;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathMatcherFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOFileFilter_ESTest extends IOFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      IOFileFilter iOFileFilter0 = falseFileFilter0.or((IOFileFilter) null);
      assertNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      IOFileFilter iOFileFilter0 = trueFileFilter0.INSTANCE.and((IOFileFilter) null);
      assertNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) trueFileFilter0);
      IOFileFilter iOFileFilter0 = trueFileFilter0.INSTANCE.and(delegateFileFilter0);
      assertSame(delegateFileFilter0, iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      MockFile mockFile0 = new MockFile("~6<,r!-X!_`", "");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = notFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      AndFileFilter andFileFilter0 = new AndFileFilter(linkedList0);
      MockFile mockFile0 = new MockFile("FikC3s", "FikC3s");
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[4];
      iOFileFilterArray0[0] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[3] = (IOFileFilter) andFileFilter0;
      andFileFilter0.addFileFilter(iOFileFilterArray0);
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        andFileFilter0.matches(path0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(23L);
      IOFileFilter iOFileFilter0 = directoryFileFilter0.INSTANCE.or(sizeFileFilter0);
      // Undeclared exception!
      try { 
        iOFileFilter0.matches((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("9&10j8b@", 83);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, Path> function1 = (Function<String, Path>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Path, String> converter0 = Converter.from((Function<? super Path, ? extends String>) function0, (Function<? super String, ? extends Path>) function1);
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0, converter0);
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        regexFileFilter0.matches(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        hiddenFileFilter0.matches(path0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        notFileFilter0.accept(path0, basicFileAttributes0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) trueFileFilter0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[2];
      iOFileFilterArray0[0] = (IOFileFilter) prefixFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) delegateFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = orFileFilter0.accept((Path) null, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      IOFileFilter iOFileFilter0 = prefixFileFilter0.negate();
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      boolean boolean0 = trueFileFilter0.matches((Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) trueFileFilter0);
      MockFile mockFile0 = new MockFile("");
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(delegateFileFilter0);
      boolean boolean0 = pathVisitorFileFilter0.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) andFileFilter0);
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(delegateFileFilter0);
      MockFile mockFile0 = new MockFile("", "");
      boolean boolean0 = pathVisitorFileFilter0.accept((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((Instant) null);
      PathMatcherFileFilter pathMatcherFileFilter0 = new PathMatcherFileFilter(ageFileFilter0);
      MockFile mockFile0 = new MockFile("6k");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pathMatcherFileFilter0.accept(path0, basicFileAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) directoryFileFilter0);
      boolean boolean0 = delegateFileFilter0.matches((Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      // Undeclared exception!
      try { 
        directoryFileFilter0.INSTANCE.and((IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      // Undeclared exception!
      try { 
        directoryFileFilter0.or((IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }
}
