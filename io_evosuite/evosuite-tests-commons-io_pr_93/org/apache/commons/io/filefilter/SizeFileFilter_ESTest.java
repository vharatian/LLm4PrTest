/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:24:46 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SizeFileFilter_ESTest extends SizeFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("a");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("a");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      boolean boolean0 = sizeFileFilter0.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = null;
      try {
        sizeFileFilter0 = new SizeFileFilter((-1697L), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1829L, true);
      String string0 = sizeFileFilter0.toString();
      assertEquals("SizeFileFilter(>=1829)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L, false);
      String string0 = sizeFileFilter0.toString();
      assertEquals("SizeFileFilter(<0)", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fntZU:sPc_", "fntZU:sPc_");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1959L);
      boolean boolean0 = sizeFileFilter0.accept((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      boolean boolean0 = sizeFileFilter0.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = null;
      try {
        sizeFileFilter0 = new SizeFileFilter((-24L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(923L);
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }
}
