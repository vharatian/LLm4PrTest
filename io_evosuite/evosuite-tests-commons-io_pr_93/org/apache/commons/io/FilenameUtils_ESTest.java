/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:17:23 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch(".", "?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getPath("L+p%\"Uoc>qJ)f");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.getPath("~H]|]h##[6a9#)i%o");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("xyD^MvE", "~2>J,G`R-1(a=V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("l=UA^");
      assertEquals("l=UA^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("h9}F3>-[sT-E7 l_", "e:/Jrn7+<aYb,z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension(".H]|]h#6a9#)i%o");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("::", true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = FilenameUtils.normalize((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = FilenameUtils.normalize("^[a-zA-Z0-9][a-zA-Z0-9-]*$", false);
      assertEquals("^[a-zA-Z0-9][a-zA-Z0-9-]*$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = FilenameUtils.normalize("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = FilenameUtils.normalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("/6d$'|_.");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = FilenameUtils.getPath("-SK6k#S'[/Directory must not be null");
      assertEquals("-SK6k#S'[/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = FilenameUtils.getName("{[.#_Mf-W|6/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator(".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("net.bytebuddy.build.HashCodeAndEqualsPlugin");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("", "-FpP]b{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("Directory must not be null", "s.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "-~7^A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch(".", "Not an annotation type: ", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("m661_%?-uSJ8.Uaa?", "*9Wu!{u_gy[", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("Vqek?c*2mQXp\"iTi,Az", "Vqek?c*2mQXp\"iTi,Az", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("j*m/j*m", "j*m", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("80 Xh:Er>^q-*", "80 Xh:Er>^q-*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("L=a-%,|bM/", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, "rcAyvyl:>!5d\"&^g%C", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      // Undeclared exception!
      try { 
        FilenameUtils.equals("{[.#_Mf-W|6/c", ":", true, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals("", "", true, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("OSOw??#so'0w", "zf{3'S|j6JmhZ_NVc['", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, "", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, false, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        FilenameUtils.equals(":", ":", true, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals(" I8Y?O", (String) null, true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("g:qaM#/S");
      assertEquals("g:qaM#/S", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FilenameUtils.getExtension(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("z:F\"kgG-5}*5oGb");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = FilenameUtils.getName("M6Eu~r+<;>'8f#-djp/,Q2`~Q({P\"");
      assertEquals(",Q2`~Q({P\"", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("/HJ2]`<As)kZieI'X");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~}O}");
      assertEquals("~}O}/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("HBA$WoMJ0[:R?Xrm@E");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/ckP^$bqz~%dZ-E<d");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("M6Eu~r+<;>'8f#-djp");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("=:#uE<8U-P]dF");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~H]|]h##[6a9#)i%o");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(":[\"Na");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      assertEquals("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = FilenameUtils.concat("~|/", "NTFS ADS separator (':') in file name is forbidden.");
      assertEquals("~|/NTFS ADS separator (':') in file name is forbidden.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("YLGhO/w[F8</");
      assertEquals("YLGhO/w[F8<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = FilenameUtils.concat("#\"}+ve(cx3-K", ".");
      assertEquals("#\"}+ve(cx3-K/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("ROAE|%xX?**i1Zes");
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("Not an annotation type: ", "*::&.Ul/o!HvK7C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem(":G{??iMH(?G^t", ":G{??iMH(?G^t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("1)", "", (IOCase) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("?IUywQs");
      boolean boolean0 = FilenameUtils.isExtension("?IUywQs", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "";
      boolean boolean0 = FilenameUtils.isExtension("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = FilenameUtils.isExtension("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("TargetMethodAnnotationDrivenBinder$DelegationProcessor", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = FilenameUtils.isExtension(stringArray0[0], stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension(".", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension(".", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("\\+yD", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalizedOnSystem("A^T\"[]KI/Wef;]%", "*::&.Ul/o!HvK7C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension(".", ".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("net.bytebud&y.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator(":-D<dxT%7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("YLGhO/w{[8</");
      assertNotNull(string0);
      assertEquals("YLGhO/w{[8<", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = FilenameUtils.getPath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FilenameUtils.getPath(".:G*Z\" qw");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = FilenameUtils.getPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("~");
      assertEquals("~/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix(".:GS*Z\" $w");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("J_");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("//K/+/");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("\\KH+");
      assertNotNull(string0);
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\/^K");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = FilenameUtils.normalize("\\+");
      assertNotNull(string0);
      assertEquals("/+", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = FilenameUtils.concat("\\)/", "\\)/");
      assertEquals("/)/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = FilenameUtils.concat("/:veAoOkiCtjIfI", "#");
      assertEquals("/:veAoOkiCtjIfI/#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("u:8P");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("T:");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("|:hA4{%dX`M^k");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~7C0@/");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("*::&.Ul/o!HvK7C");
      assertEquals("*::&.Ul\\o!HvK7C", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains(")", ")");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("o>00CnI9m2J.c{5|", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.directoryContains((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "BAj8QI<,\"G]~");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = FilenameUtils.concat("LC$..", "LC$..");
      assertEquals("LC$../LC$..", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalized("=:#uE<8U-P]dF", "=:#uE<8U-P]dF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("*", true);
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("~H5]hw#[a9#)i%o", false);
      assertEquals("~H5]hw#[a9#)i%o\\", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("K");
      assertEquals("K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized(")", ")");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator(".//(:>6r]Ek$Am");
      assertNotNull(string0);
      assertEquals("(:>6r]Ek$Am", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = FilenameUtils.concat(".", ".");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("A}", "A}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("/");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("A^T\"[]KI/%ef;]%");
      assertEquals("A^T\"[]KI/", string0);
      assertNotNull(string0);
  }
}
