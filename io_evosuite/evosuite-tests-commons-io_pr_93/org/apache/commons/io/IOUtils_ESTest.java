/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:20:35 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream(" actual: ", charset0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0, 1904);
      try { 
        IOUtils.toByteArray((InputStream) pushbackInputStream0, 1904);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size. current: 9, expected: 1904
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) byteArrayInputStream0, 244);
      int int0 = IOUtils.read((InputStream) bufferedInputStream0, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) lineNumberReader0, (Writer) charArrayWriter0, 0L, 724L);
      assertEquals("\u0000\u0000\u0000\u0000", charArrayWriter0.toString());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("", "INSENSITIVE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0, (long) (byte)0, 4096L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 99);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      IOUtils.write(stringBuffer0, (OutputStream) mockPrintStream0, (String) null);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.writeLines((Collection<?>) set0, (String) null, (OutputStream) pipedOutputStream0, charset0);
      assertEquals(56, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(46);
      IOUtils.write((byte[]) null, (Writer) stringWriter0, (String) null);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "C&(S8d']/$9l&=1NO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOUtils.write("C&(S8d']/$9l&=1NO", (OutputStream) mockPrintStream0, (String) null);
      assertEquals(17L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nTaggedIOException.class\nThreadMonitor.class\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1675);
      IOUtils.write((CharSequence) "ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nTaggedIOException.class\nThreadMonitor.class\n", (OutputStream) bufferedOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "=:f<13z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1413);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      InputStream inputStream0 = MockURL.openStream(uRL0);
      IOUtils.copy(inputStream0, (Writer) mockPrintWriter0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("", "=:f<13z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      IOUtils.closeQuietly((OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      String string0 = IOUtils.toString((Reader) inputStreamReader0);
      assertEquals(" actual: ", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.toString(inputStream0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\uFFFD/\uFFFD\uFFFD\u0000");
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("\uFFFD/\uFFFD\uFFFD\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1208), (byte) (-120));
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("\n", (String) null);
      assertEquals(1, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "(", (String) null);
      assertEquals(1, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\r\n");
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream1);
      char[] charArray0 = IOUtils.toCharArray((Reader) inputStreamReader0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("bgwx");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      IOUtils.contentEquals((InputStream) bufferedInputStream0, inputStream0);
      assertEquals(0, inputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) pushbackInputStream0, charset0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.common.jimfs.AttributeService$SimpleFileAttribute");
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(60, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = IOUtils.toCharArray((InputStream) sequenceInputStream0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("_,-fGt1^V,uz");
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Length must not be negative: ");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0, charset0);
      assertEquals(29, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("Chars to skip: ", charset0);
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) inputStreamReader0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\uFFFD/\uFFFD\uFFFD\u0000");
      IOUtils.toByteArray(inputStream0, 1L);
      assertEquals(10, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) sequenceInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 441, (byte) (-94));
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)2);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = IOUtils.resourceToString("", charset0, classLoader0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      assertEquals(672, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.common.jimfs.AttributeService$SimpleFileAttribute");
      byte[] byteArray0 = new byte[0];
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      IOUtils.lineIterator((InputStream) dataInputStream0, (String) null);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(2980L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jR59ti~E*usx k>-)3");
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockPrintWriter0, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 1);
      bufferedReader0.read();
      bufferedReader0.skip(1L);
      StringWriter stringWriter0 = new StringWriter(1);
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0, (-4775L), (-2794L), charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, 1606);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" actual: ");
      char[] charArray0 = new char[8];
      bufferedReader0.read(charArray0);
      byte[] byteArray0 = new byte[9];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, (-1092L), 2048L, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "87]");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, 1606);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" actual: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      char[] charArray0 = new char[1];
      IOUtils.readFully((Reader) bufferedReader0, charArray0);
      assertEquals(0, inputStream0.available());
      
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) mockPrintWriter0, charBuffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\r\n");
      IOUtils.toBufferedInputStream(inputStream0);
      MockFile mockFile0 = new MockFile("\r\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3493);
      long long0 = IOUtils.copy(inputStream0, (OutputStream) bufferedOutputStream0, 3493);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, "G", (OutputStream) null, "G");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // G
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, (String) null, (OutputStream) pipedOutputStream0, "Wem]vYrV-#D;+)B");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Wem]vYrV-#D;+)B
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerLast(object0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, "MxktV>|@jK|5Pdyu", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!Yu", true);
      mockFileOutputStream0.close();
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) stringWriter0, "D+");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // D+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = MockFile.createTempFile("uY[a`[9@ZEgAn68.!", "org.apache.commons.io.IOUtils");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "uY[a`[9@ZEgAn68.!");
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) filterOutputStream0, "org.apache.commons.io.IOUtils");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.IOUtils
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write((CharSequence) "(", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) null, (OutputStream) mockFileOutputStream0, "D1wEpUa:E");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // D1wEpUa:E
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(")1.!", (String) null, 2143607323, "rBfgK[", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-669), 1523);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) inputStreamReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.toString(inputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("B0`pSV", "44`2YX:+Ty[$5uKM[KW");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 44`2YX:+Ty[$5uKM[KW
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) charBuffer0, "vBIG");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // vBIG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((Reader) mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toCharArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "GMT", (String) null, 79, (String) null, "", "");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      try { 
        IOUtils.toByteArray((Reader) inputStreamReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, (long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      try { 
        IOUtils.toByteArray(inputStream0, 2081L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size. current: 0, expected: 2081
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, 1303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) mockFileReader0, (-1487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("", charset0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream(inputStream0, (-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -162
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 6);
      try { 
        IOUtils.toBufferedInputStream((InputStream) bufferedInputStream0, 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        IOUtils.toBufferedInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile("&Dk\"", "&Dk\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) fileChannel0, 265L);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      openOptionArray0[2] = (OpenOption) standardOpenOption0;
      openOptionArray0[3] = (OpenOption) standardOpenOption0;
      openOptionArray0[4] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      try { 
        IOUtils.skipFully((ReadableByteChannel) fileChannel0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) null, (long) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) pipedReader0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      try { 
        IOUtils.skipFully((Reader) inputStreamReader0, (long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      try { 
        IOUtils.skip((ReadableByteChannel) fileChannel0, (long) 783);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) null, 2039L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      try { 
        IOUtils.skip((Reader) pipedReader0, (long) 127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("Bytes to skip: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Bytes to skip: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("aD]o-BX>o034p&", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: aD]o-BX>o034p&
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToByteArray("t1S{q;\u00079Z~.![vV", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: t1S{q;\u00079Z~.![vV
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) pushbackInputStream0, "OERh");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // OERh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      bufferedInputStream0.close();
      try { 
        IOUtils.readLines((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((ReadableByteChannel) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", offset=");
      char[] charArray0 = new char[10];
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0, 783, 783);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", offset=");
      char[] charArray0 = new char[10];
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      bufferedReader0.close();
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0, 9, 9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      char[] charArray0 = new char[1];
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, byteArray0, (-876), 973);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      byte[] byteArray0 = new byte[7];
      try { 
        IOUtils.readFully((InputStream) pushbackInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "di^-,+2XMvR%H^");
      IOUtils.toByteArray(inputStream0);
      try { 
        IOUtils.readFully(inputStream0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        IOUtils.readFully((InputStream) pushbackInputStream0, 1404);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) lineNumberReader0, charArray0, 2081, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[3];
      PipedReader pipedReader0 = new PipedReader(2048);
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0, 1073741824, 7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) pipedInputStream0, byteArray0, 65, 65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      byte[] byteArray0 = new byte[5];
      try { 
        IOUtils.read((InputStream) pushbackInputStream0, byteArray0, (-334), (int) (byte)109);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("bay", charset0);
      // Undeclared exception!
      try { 
        IOUtils.lineIterator(inputStream0, "bay");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // bay
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("uY[a`[9@ZEgAn68.!");
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 4, 6);
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockFileWriter0, (long) 6, 94L, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 6 actual: 1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) null, 361L, 5225L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7waAYe8k/1~H}#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) mockPrintStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockFile mockFile0 = new MockFile("", "SDKj}bg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      try { 
        IOUtils.copyLarge((InputStream) pipedInputStream0, (OutputStream) mockFileOutputStream0, 1L, (-1265L), byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      byte[] byteArray0 = new byte[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.commonjimfs.AttributeService$SimpleFilettribute");
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, 762L, 762L, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 762 actual: 58
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-669), 1523);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, (long) (-669), (long) 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        IOUtils.copyLarge((InputStream) pushbackInputStream0, (OutputStream) null, 0L, (-1L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) stringBuilder0, (CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) bufferedReader0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 65);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 65);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      try { 
        IOUtils.copy((Reader) bufferedReader0, (Appendable) stringWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.copy((Reader) pipedReader0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 67);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 67);
      MockFile mockFile0 = new MockFile("org.apache.commons.io.IOUtils", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      try { 
        IOUtils.copy((InputStream) bufferedInputStream0, (Writer) mockPrintWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("l@Hu}5`bSUr`xZ[", charset0);
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream1, 1745);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      try { 
        IOUtils.copy((InputStream) sequenceInputStream0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      try { 
        IOUtils.contentEquals((InputStream) bufferedInputStream0, (InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      // Undeclared exception!
      try { 
        IOUtils.closeQuietly((OutputStream) bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, 1236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) stringReader0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":>", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) mockPrintStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte) (-86));
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) byteArrayInputStream0, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3yVx", "3yVx");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "3yVx", (OutputStream) mockFileOutputStream0, (Charset) null);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("&Dk\"");
      File file0 = MockFile.createTempFile("&Dk\"", "&Dk\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) bufferedOutputStream0, "uY[a`[9@ZEgAn68.!");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // uY[a`[9@ZEgAn68.!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write("", (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.write("Size cannot be greater than Integer max value: ", (OutputStream) pipedOutputStream0, charset0);
      assertEquals(47, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((char[]) null, (OutputStream) bufferedOutputStream0, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1821);
      char[] charArray0 = new char[1];
      IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0, charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      byte[] byteArray0 = new byte[6];
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0, (Charset) null);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toString((InputStream) pushbackInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("X5\"GX$$=y;p@+/W![(", charset0);
      String string0 = IOUtils.toString(inputStream0, charset0);
      assertEquals("X5\"GX$$=y;p@+/W![(", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0, charset0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) lineNumberReader0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) null, 0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) mockFileInputStream0, (-3405));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -3405
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, (byte)0, (byte)0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0, 127);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      IOUtils.skipFully((Reader) inputStreamReader0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0, 3);
      IOUtils.skipFully((InputStream) pushbackInputStream0, (long) 3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, (long) 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      long long0 = IOUtils.skip((Reader) lineNumberReader0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream(" actual: ", charset0);
      long long0 = IOUtils.skip(inputStream0, (long) 2798);
      assertEquals(0, inputStream0.available());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      long long0 = IOUtils.skip(inputStream0, (long) 1);
      assertEquals(57, inputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        IOUtils.skip((InputStream) bufferedInputStream0, (long) 46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("", (ClassLoader) null);
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToURL("o[:r", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: o[:r
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      int int0 = IOUtils.read((Reader) lineNumberReader0, charArray0, 2081, (int) '\u0000');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, charArray0, 46, (-398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -398
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, charArray0, 46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, byteArray0, 2087, 1078);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = IOUtils.read((InputStream) pipedInputStream0, byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, (byte[]) null, (int) (byte)85, (int) (byte)85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Writer writer0 = IOUtils.writer(stringBuffer0);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) pipedReader0);
      char[] charArray0 = new char[2];
      try { 
        IOUtils.copyLarge((Reader) bufferedReader0, writer0, (-780L), (long) 472, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 1);
      StringWriter stringWriter0 = new StringWriter(1);
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0, (-4775L), (-2794L), charArray0);
      assertEquals("\u0000\u0000", stringWriter0.toString());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("@S&?r\"]HVPO", true);
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) mockFileWriter0, charArray0);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" actual: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) mockPrintWriter0, charBuffer0);
      assertEquals(" ", charBuffer0.toString());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" actual: ");
      byte[] byteArray0 = new byte[9];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, (-1092L), 2048L, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5,0", "5,0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) mockFileOutputStream0, (long) (-889), (long) (-889), byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("'-{G6");
      File file0 = MockFile.createTempFile("!/xT1Kobd9d~", "'-{G6");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[3];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockFileOutputStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("})HX)B4NQI*F>5WQviZ");
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 729);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 1024);
      StringWriter stringWriter0 = new StringWriter(1024);
      int int0 = IOUtils.copy((Reader) lineNumberReader0, (Writer) stringWriter0);
      assertEquals("})HX)B4NQI*F>5WQviZ", stringWriter0.toString());
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IOUtils.closeQuietly((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOUtils.closeQuietly((Closeable) bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      IOUtils.close(uRLConnection0);
      assertTrue(uRLConnection0.getUseCaches());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      IOUtils.close((URLConnection) null);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((URI) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      IOUtils.copy(inputStream0, (Writer) pipedWriter0, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringReader stringReader0 = new StringReader("");
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^Kiz@/j?@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 8);
      IOUtils.copy((Reader) bufferedReader0, (OutputStream) mockPrintStream0, (Charset) null);
      assertEquals(7L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\r\n");
      assertEquals(2, inputStream0.available());
      
      MockFile mockFile0 = new MockFile("\r\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3493);
      long long0 = IOUtils.copy(inputStream0, (OutputStream) bufferedOutputStream0, 3493);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      try { 
        IOUtils.copyLarge((InputStream) pushbackInputStream0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("u`ZO%P^P'nd~PU&I ", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: u`ZO%P^P'nd~PU&I 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "application/octet-stream");
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = IOUtils.length(charArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      linkedHashSet0.add(standardOpenOption0);
      StringWriter stringWriter0 = new StringWriter(1025);
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "(r", (Writer) stringWriter0);
      assertTrue(linkedHashSet0.contains(standardOpenOption0));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter(46);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 46);
      IOUtils.writeLines((Collection<?>) linkedList0, (String) null, (Writer) bufferedWriter0);
      assertFalse(linkedList0.contains(46));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.writeLines((Collection<?>) null, "com.google.common.jimfs.AttributeService$SimpleFileAttribute", (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.writeLines((Collection<?>) set0, (String) null, (OutputStream) pipedOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ds+]0G", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      IOUtils.writeLines((Collection<?>) null, "C?Jm\"!.=n}b", (OutputStream) mockFileOutputStream0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringWriter stringWriter0 = new StringWriter(2048);
      IOUtils.writeChunked(charArray0, (Writer) stringWriter0);
      assertEquals("\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.writeChunked((char[]) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.commonjimfs.AttributeService$SimpleFilettribute");
      IOUtils.writeChunked(byteArray0, (OutputStream) mockPrintStream0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      IOUtils.writeChunked((byte[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      IOUtils.write(stringBuffer0, (Writer) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      IOUtils.write((StringBuffer) null, (Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      IOUtils.write((CharSequence) "(", (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      IOUtils.write((CharSequence) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter((byte)0);
      char[] charArray0 = new char[0];
      IOUtils.write(charArray0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((char[]) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      IOUtils.write((char[]) null, (OutputStream) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1025);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((byte[]) null, (Writer) stringWriter0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      IOUtils.write((byte[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      try { 
        IOUtils.toString((Reader) inputStreamReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      String string0 = IOUtils.toString((Reader) inputStreamReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 2704);
      try { 
        IOUtils.toByteArray((Reader) bufferedReader0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0, 3);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) pushbackInputStream0, 3);
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, byteArray0, 3, (-2144278447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2144278447
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\n");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0, (long) (byte)0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\n");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(inputStream0, (-472L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -472
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, 1606);
      IOUtils.toBufferedReader((Reader) bufferedReader0, 1606);
      assertEquals(9, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      OpenOption[] openOptionArray0 = new OpenOption[1];
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) fileChannel0, (-376L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -376
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, (long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) pushbackInputStream0, (-856L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -856
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.skip((Reader) charArrayReader0, (long) 'g');
      try { 
        IOUtils.skipFully((Reader) charArrayReader0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) charArrayReader0, (-203L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -203
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, 9L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) null, 452L, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 452 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream(" actual: ", charset0);
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/ TEQ\";SA\"");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertTrue(list0.contains("/ TEQ\";SA\""));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0, 1);
      bufferedReader0.read();
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 2 actual: 1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 1821);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) pushbackReader0, charArray0, (-619), (-619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -619
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) " actual: ", charset0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0, 3);
      try { 
        IOUtils.readFully((InputStream) pushbackInputStream0, 127);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 127 actual: 9
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("]3iu{si5F],PA");
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, (byte[]) null, 44, (-2245));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2245
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, 1L, 1L);
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) mockFileReader0, (Writer) null, (-37L), 5225L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, (-1265L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copy((Reader) lineNumberReader0, (Appendable) charArrayWriter0);
      assertEquals(4, charArrayWriter0.size());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0, (-41L), (-1222L));
      assertEquals(0, inputStream0.available());
      assertEquals(58L, long0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      MockFile mockFile0 = new MockFile("com.google.commonjimfs.AttributeService$SimpleFilettribute", "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[2];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockFileOutputStream0, (long) (byte)8, 1L, byteArray0);
      assertEquals(49, inputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("INSENSITIVE");
      // Undeclared exception!
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) null, (long) (byte)0, 4872L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) bufferedOutputStream0, 1L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(lineNumberReader0, lineNumberReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0, 1821);
      // Undeclared exception!
      try { 
        IOUtils.contentEqualsIgnoreEOL(bufferedReader0, mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      boolean boolean0 = IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) inputStreamReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Charset charset0 = Charset.defaultCharset();
      StringBuilder stringBuilder0 = new StringBuilder();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      try { 
        IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      assertEquals(58, inputStream0.available());
      
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      InputStream inputStream1 = IOUtils.toInputStream("com.google.commonjimfs.AttributeService$SimpleFilettribute");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream1);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) bufferedInputStream0, (InputStream) pushbackInputStream0);
      assertEquals(0, inputStream1.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("iuq", charset0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 613);
      boolean boolean0 = IOUtils.contentEquals(inputStream0, (InputStream) bufferedInputStream0);
      assertEquals(0, inputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      InputStream inputStream0 = MockURL.openStream(uRL0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) bufferedInputStream0, (InputStream) bufferedInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("y5a,LT#`K|l_pt", 3);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      IOUtils.closeQuietly((Socket) mockSocket0);
      assertTrue(mockSocket0.isClosed());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      IOUtils.closeQuietly((Socket) null);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertFalse(mockServerSocket0.isBound());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      IOUtils.closeQuietly((ServerSocket) null);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Selector selector0 = Selector.open();
      IOUtils.closeQuietly(selector0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[4];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(4, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) charBuffer0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3353);
      Writer writer0 = IOUtils.writer(charArrayWriter0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.commonjimfs.AttributeService$SimpleFilettribute", "com.google.commonjimfs.AttributeService$SimpleFilettribute");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1498);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0, 99);
      assertSame(bufferedWriter1, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Skip count must be non-negative, actual: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) mockPrintWriter0, (-889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0);
      assertSame(bufferedWriter1, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0, 1821);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, 745);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 1);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, 48);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cannot cache the value of a method with parameters: ", "Cannot cache the value of a method with parameters: ", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockFileOutputStream0, 47);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.bytebuddy.build.Plugin$ForElementMatcher");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockPrintStream0);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("iuq", charset0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 613);
      IOUtils.buffer((InputStream) bufferedInputStream0, 2126834766);
      assertEquals(3, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, 3025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream(" actual: ", charset0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 613);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0);
      assertEquals(9, inputStream0.available());
      assertSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pushbackInputStream0);
      try { 
        IOUtils.skipFully((InputStream) bufferedInputStream0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) stringWriter0, "D`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // D`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "org.apache.commons.io.IOUtils");
      // Undeclared exception!
      try { 
        IOUtils.toCharArray(inputStream0, ":>~I(&w_#V2cjG");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // :>~I(&w_#V2cjG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      List<String> list0 = IOUtils.readLines((InputStream) pushbackInputStream0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) null, (Writer) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, "IF_ANNOTATED");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // IF_ANNOTATED
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) pipedInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      long long0 = IOUtils.copy((Reader) stringReader0, (Appendable) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URI) null, "gSI{Q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // gSI{Q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      String string0 = IOUtils.toString(uRL0, (String) null);
      assertEquals("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nTaggedIOException.class\nThreadMonitor.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.readLines((InputStream) pushbackInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toString((InputStream) pipedInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((CharSequence) "com.google.commonjimfs.AttributeService$SimpleFilettribute", (OutputStream) byteArrayOutputStream0);
      assertEquals(58, byteArrayOutputStream0.size());
      assertEquals("com.google.commonjimfs.AttributeService$SimpleFilettribute", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "(", (OutputStream) null, "com.google.common.jimfs.AttributeService$SimpleFileAttribute");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com.google.common.jimfs.AttributeService$SimpleFileAttribute
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) pipedOutputStream0, 2355);
      IOUtils.writeLines((Collection<?>) linkedList0, "", (OutputStream) bufferedOutputStream0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      IOUtils.writeLines((Collection<?>) linkedList0, (String) null, (OutputStream) pipedOutputStream0, (String) null);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('/', IOUtils.DIR_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) pipedReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(" actual: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(46);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.write(stringBuffer0, (OutputStream) pipedOutputStream0);
      assertEquals(9, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0, charsetDecoder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("J");
      IOUtils.copy((Reader) inputStreamReader0, (OutputStream) mockPrintStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      long long0 = IOUtils.copyLarge((InputStream) null, (OutputStream) null, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      IOUtils.closeQuietly((Reader) null);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("\"`/\"+n~ElMW/JdO2~aE", (OutputStream) null, "\"`/\"+n~ElMW/JdO2~aE");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"`/\"+n~ElMW/JdO2~aE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[6];
      IOUtils.write(byteArray0, (Writer) stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) mockFileInputStream0, (-2626));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LineIterator lineIterator0 = IOUtils.lineIterator((InputStream) byteArrayInputStream0, (Charset) null);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 1);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) bufferedReader0, "-5ufqtc4U0i");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -5ufqtc4U0i
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.closeQuietly((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.bytebuddy.build.Plugin$ForElementMatcher");
      IOUtils.write("net.bytebuddy.build.Plugin$ForElementMatcher", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.resourceToString("", charset0);
      assertEquals("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nTaggedIOException.class\nThreadMonitor.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "(", ";S< h7K9@@(gGd\"wg");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;S< h7K9@@(gGd\"wg
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) null, "Unexpected read size. current: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Unexpected read size. current: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, "i'Amn 8xO2y%*3b");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // i'Amn 8xO2y%*3b
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "}U-HJ81N2+)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }U-HJ81N2+)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      char[] charArray0 = IOUtils.toCharArray((Reader) mockFileReader0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) null, (long) (byte)85, (-203L));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 85 actual: 1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "di^-,+2XMvR%H^");
      IOUtils.readFully(inputStream0, byteArray0);
      assertEquals(13, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray(" actual: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found:  actual: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream(" actual: ");
      IOUtils.write(charArray0, (OutputStream) mockPrintStream0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) mockFileReader0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      Proxy proxy0 = Proxy.NO_PROXY;
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0, proxy0);
      byte[] byteArray0 = IOUtils.toByteArray(uRLConnection0);
      assertEquals(672, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      URI uRI0 = MockURI.URI("/eM");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }
}
