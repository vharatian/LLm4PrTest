/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:40:37 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AndFileFilter_ESTest extends AndFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      boolean boolean0 = andFileFilter0.removeFileFilter(notFileFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[3];
      iOFileFilterArray0[0] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) orFileFilter0;
      orFileFilter0.addFileFilter(iOFileFilterArray0);
      AndFileFilter andFileFilter0 = new AndFileFilter(orFileFilter0, orFileFilter0);
      // Undeclared exception!
      try { 
        andFileFilter0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      // Undeclared exception!
      try { 
        andFileFilter0.setFileFilters((List<IOFileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter(iOFileFilterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter(orFileFilter0, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter((List<IOFileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[7];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      IOCase iOCase0 = IOCase.SENSITIVE;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list0, iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[3] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[4] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[5] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[6] = (IOFileFilter) andFileFilter0;
      andFileFilter0.addFileFilter(iOFileFilterArray0);
      // Undeclared exception!
      try { 
        andFileFilter0.accept((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.SuffixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("net.bytebuddy.description.NamedElement");
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) wildcardFileFilter0);
      linkedList0.add((IOFileFilter) delegateFileFilter0);
      linkedList0.add((IOFileFilter) delegateFileFilter0);
      andFileFilter0.setFileFilters(linkedList0);
      String string0 = andFileFilter0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      andFileFilter0.addFileFilter((IOFileFilter) trueFileFilter0);
      String string0 = andFileFilter0.toString();
      assertEquals("AndFileFilter(true)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[7];
      // Undeclared exception!
      try { 
        andFileFilter0.addFileFilter(iOFileFilterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("net.bytebuddy.description.NamedElement");
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) wildcardFileFilter0);
      linkedList0.add((IOFileFilter) delegateFileFilter0);
      andFileFilter0.setFileFilters(linkedList0);
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = andFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = andFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      andFileFilter0.addFileFilter((IOFileFilter) trueFileFilter0);
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = andFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      AndFileFilter andFileFilter0 = new AndFileFilter(orFileFilter0, orFileFilter0);
      MockFile mockFile0 = new MockFile("Em I=_yQ");
      boolean boolean0 = andFileFilter0.accept((File) mockFile0, "Em I=_yQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      boolean boolean0 = andFileFilter0.accept((File) mockFile0, "net.bytebuddy.description.NamedElement");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      MockFile mockFile0 = new MockFile("");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(1679L);
      andFileFilter0.addFileFilter((IOFileFilter) ageFileFilter0);
      boolean boolean0 = andFileFilter0.accept((File) mockFile0, "7u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("net.bytebuddy.description.NamedElement");
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) wildcardFileFilter0);
      linkedList0.add((IOFileFilter) delegateFileFilter0);
      andFileFilter0.setFileFilters(linkedList0);
      boolean boolean0 = andFileFilter0.accept((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      MockFile mockFile0 = new MockFile("$--;5NtF}Sb.}}7", "AndFileFilter(NOT (org.apache.commons.io.filefilter.CanWriteFileFilter@0000000002))");
      boolean boolean0 = andFileFilter0.accept((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      andFileFilter0.addFileFilter((IOFileFilter) trueFileFilter0);
      boolean boolean0 = andFileFilter0.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      List<IOFileFilter> list0 = andFileFilter0.getFileFilters();
      AndFileFilter andFileFilter1 = new AndFileFilter(list0);
      assertFalse(andFileFilter1.equals((Object)andFileFilter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[0];
      AndFileFilter andFileFilter0 = new AndFileFilter(iOFileFilterArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("");
      AndFileFilter andFileFilter0 = new AndFileFilter(suffixFileFilter0, suffixFileFilter0);
      boolean boolean0 = andFileFilter0.removeFileFilter(suffixFileFilter0);
      assertTrue(boolean0);
  }
}
