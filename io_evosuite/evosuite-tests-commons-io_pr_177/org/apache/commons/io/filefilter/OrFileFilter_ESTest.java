/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:44:21 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OrFileFilter_ESTest extends OrFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      IOFileFilter iOFileFilter0 = orFileFilter0.or(directoryFileFilter0);
      assertNotSame(orFileFilter0, iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      OrFileFilter orFileFilter0 = new OrFileFilter(hiddenFileFilter0, hiddenFileFilter0);
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      boolean boolean0 = orFileFilter0.removeFileFilter(falseFileFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      OrFileFilter orFileFilter0 = new OrFileFilter(andFileFilter0, andFileFilter0);
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[6];
      iOFileFilterArray0[0] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[3] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[4] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[5] = (IOFileFilter) andFileFilter0;
      orFileFilter0.addFileFilter(iOFileFilterArray0);
      // Undeclared exception!
      orFileFilter0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[3];
      iOFileFilterArray0[0] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) andFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) andFileFilter0;
      andFileFilter0.addFileFilter(iOFileFilterArray0);
      OrFileFilter orFileFilter0 = new OrFileFilter(andFileFilter0, andFileFilter0);
      // Undeclared exception!
      try { 
        orFileFilter0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        orFileFilter0.setFileFilters((List<IOFileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilters
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        orFileFilter0.addFileFilter((IOFileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilters
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        orFileFilter0.addFileFilter((IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CanWriteFileFilter canWriteFileFilter0 = new CanWriteFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      iOFileFilterArray0[0] = (IOFileFilter) canWriteFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      // Undeclared exception!
      try { 
        orFileFilter0.accept((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      OrFileFilter orFileFilter0 = new OrFileFilter(hiddenFileFilter0, hiddenFileFilter0);
      MockFile mockFile0 = new MockFile("Invalid IOCase name: ");
      // Undeclared exception!
      try { 
        orFileFilter0.accept((File) mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      OrFileFilter orFileFilter0 = new OrFileFilter(andFileFilter0, andFileFilter0);
      // Undeclared exception!
      try { 
        orFileFilter0.accept((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.CanReadFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      OrFileFilter orFileFilter0 = null;
      try {
        orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrFileFilter orFileFilter0 = null;
      try {
        orFileFilter0 = new OrFileFilter((IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("qT7", iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      orFileFilter0.addFileFilter((IOFileFilter) directoryFileFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("qT7", iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      orFileFilter0.addFileFilter(iOFileFilterArray0);
      String string0 = orFileFilter0.toString();
      assertEquals("OrFileFilter(SuffixFileFilter(qT7),SuffixFileFilter(qT7))", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("qT7", iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      File file0 = MockFile.createTempFile("qT7", "OD");
      MockFile mockFile0 = new MockFile(file0, "qT7");
      Path path0 = mockFile0.toPath();
      FileVisitResult fileVisitResult0 = orFileFilter0.accept(path0, (BasicFileAttributes) null);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("qT7", iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      File file0 = MockFile.createTempFile("qT7", "OD");
      Path path0 = file0.toPath();
      FileVisitResult fileVisitResult0 = orFileFilter0.accept(path0, (BasicFileAttributes) null);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      OrFileFilter orFileFilter0 = new OrFileFilter(linkedList0);
      FileVisitResult fileVisitResult0 = orFileFilter0.accept((Path) null, (BasicFileAttributes) null);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("qT7", iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      File file0 = MockFile.createTempFile("qT7", "OD");
      boolean boolean0 = orFileFilter0.accept(file0, "qT7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      OrFileFilter orFileFilter0 = new OrFileFilter(andFileFilter0, andFileFilter0);
      boolean boolean0 = orFileFilter0.accept((File) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[3];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("3J#dz~Xf");
      iOFileFilterArray0[0] = (IOFileFilter) prefixFileFilter0;
      MockFile mockFile0 = new MockFile("s+MDW:|-]R%4c?j(");
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      iOFileFilterArray0[1] = (IOFileFilter) trueFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter();
      iOFileFilterArray0[2] = (IOFileFilter) orFileFilter0;
      OrFileFilter orFileFilter1 = new OrFileFilter(iOFileFilterArray0);
      boolean boolean0 = orFileFilter1.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      OrFileFilter orFileFilter0 = new OrFileFilter(andFileFilter0, andFileFilter0);
      MockFile mockFile0 = new MockFile("/q+2xWo#JhG$1)\"|J");
      boolean boolean0 = orFileFilter0.accept((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      OrFileFilter orFileFilter0 = new OrFileFilter(andFileFilter0, andFileFilter0);
      List<IOFileFilter> list0 = orFileFilter0.getFileFilters();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      LinkedList<IOFileFilter> linkedList0 = new LinkedList<IOFileFilter>();
      orFileFilter0.setFileFilters(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrFileFilter orFileFilter0 = null;
      try {
        orFileFilter0 = new OrFileFilter((List<IOFileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("qT7", iOCase0);
      iOFileFilterArray0[0] = (IOFileFilter) suffixFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      boolean boolean0 = orFileFilter0.removeFileFilter(suffixFileFilter0);
      assertTrue(boolean0);
  }
}
