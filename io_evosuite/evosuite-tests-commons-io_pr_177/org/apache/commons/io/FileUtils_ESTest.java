/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:38:21 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FileEqualsFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize((-185634244800000000L));
      assertEquals("-185634244800000000 bytes", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.io.filefilter.PathEqualsFileFilter");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileUtils.copyDirectory(file0, (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.io.filefilter.PathEqualsFileFilter", mockFile0.toString());
      assertEquals("org.apache.commons.io.filefilter.PathEqualsFileFilter", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      FileUtils.writeStringToFile(file0, "fileFilter", false);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(10L, file0.length());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      FileUtils.writeStringToFile(file0, (String) null, (String) null, false);
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp", "/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp", file0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp0/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!", file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp0/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp", file1.toString());
      assertEquals("tmp", file1.getName());
      assertTrue(file1.isAbsolute());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp"));
      
      FileUtils.writeLines(file1, (Collection<?>) hashSet0, true);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp0/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!", file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp0/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp", file1.toString());
      assertEquals("tmp", file1.getName());
      assertTrue(file1.isAbsolute());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp"));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("C%I=pJz)xt;{^[E"));
      
      FileUtils.writeLines(file0, (Collection<?>) priorityQueue0);
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("C%I=pJz)xt;{^[E"));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\"qn["));
      
      FileUtils.writeLines(file0, (String) null, (Collection<?>) linkedList0, "File does not exist: ");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("File does not exist: "));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("dQOtination"));
      
      FileUtils.writeLines(file0, (String) null, (Collection<?>) arrayList0);
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("dQOtination"));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile(file0, byteArray0, 3, 17);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(3L, file0.length());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[5];
      FileUtils.writeByteArrayToFile(file0, byteArray0);
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(5L, file0.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "YVmO?x{RsaRA");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "YVmO?x{RsaRA", (String) null);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(12L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("YVmO?x{RsaRA", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/YVmO?x{RsaRA", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("0 bytes", "0 bytes", file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("0 bytes00 bytes", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser/0 bytes00 bytes", file1.toString());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      FileUtils.write(file1, (CharSequence) "destination");
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals("0 bytes00 bytes", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser/0 bytes00 bytes", file1.toString());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals(11L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertNotNull(uRLArray0);
      assertEquals(0, fileArray0.length);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      URL uRL0 = file0.toURL();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      File file1 = FileUtils.toFile(uRL0);
      assertTrue(file1.equals((Object)file0));
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser", file1.toString());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertEquals("/home", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[9];
      Stream<File> stream0 = FileUtils.streamFiles(file0, true, stringArray0);
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertNotNull(stream0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      FileUtils.copyToFile(byteArrayInputStream0, mockFile0);
      assertEquals(3L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("ZdQOtination", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ZdQOtination", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(mockFile0);
      assertEquals(3L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("ZdQOtination", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ZdQOtination", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals((byte)3, bigInteger0.byteValue());
      assertEquals((short)3, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("cxB", file0.getName());
      assertNotNull(file0);
      
      List<String> list0 = FileUtils.readLines(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("cxB", file0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("-VpS)~#)W|/cxB"));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ve5eyF>'=#8VY;/l\"=");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "ve5eyF>'=#8VY;/l\"=", charset0, true);
      assertEquals("ve5eyF>'=#8VY;", mockFile0.getParent());
      assertEquals("l\"=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(18L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ve5eyF>'=#8VY;/l\"=", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string0 = FileUtils.readFileToString((File) mockFile0, charset0);
      assertEquals("ve5eyF>'=#8VY;", mockFile0.getParent());
      assertEquals("l\"=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(18L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ve5eyF>'=#8VY;/l\"=", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("ve5eyF>'=#8VY;/l\"=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[3];
      FileUtils.writeByteArrayToFile(file0, byteArray0, true);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(3L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(3L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(3, fileInputStream0.available());
      assertNotNull(fileInputStream0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertNotNull(file0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter();
      assertNotNull(orFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, orFileFilter0, orFileFilter0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      Path path0 = file0.toPath();
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(pathEqualsFileFilter0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      NameFileFilter nameFileFilter0 = new NameFileFilter(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(nameFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) nameFileFilter0, (IOFileFilter) pathEqualsFileFilter0);
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      Stack<IOFileFilter> stack0 = new Stack<IOFileFilter>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(orFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) orFileFilter0, (IOFileFilter) orFileFilter0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate((-1457), (-1457), 2067475462, (-979), (-979));
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Wed Jan 06 12:41:00 GMT 5660877", mockDate0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      assertNotNull(minguoDate0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) minguoDate0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.plusSeconds(instant0, 665L);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(boolean0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      boolean boolean0 = file0.delete();
      assertFalse(file0.exists());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)90, (byte)90, (byte)90, 255, 4);
      assertNotNull(mockDate0);
      
      boolean boolean1 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(file0.exists());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals("Wed Oct 08 15:04:00 GMT 1997", mockDate0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.ofEpochSecond(130L);
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/home/azureuser//home/azureuser/azureuser";
      stringArray0[1] = "/home/azureuser";
      stringArray0[2] = ".7b%P\"!";
      File file0 = FileUtils.getFile(stringArray0);
      assertTrue(file0.isHidden());
      assertFalse(file0.exists());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/azureuser/home/azureuser/azureuser/home/azureuser/.7b%P\"!", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("/home/azureuser/home/azureuser/azureuser/home/azureuser", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(".7b%P\"!", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = ".";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      stringArray0[6] = ".";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file1.exists());
      assertTrue(file1.isHidden());
      assertEquals(".", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertEquals("/home/azureuser/./././././.", file1.getParent());
      assertFalse(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canExecute());
      assertFalse(file1.canWrite());
      assertEquals("/home/azureuser/././././././.", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isFile());
      assertNotNull(file1);
      assertEquals(7, stringArray0.length);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' after copy to '");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("' after copy to '", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("' after copy to '", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("' after copy to '", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("' after copy to '", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      assertEquals(0, stringArray0.length);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file1.getParent());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals("/home/azureuser", file1.toString());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertEquals("azureuser", file1.getName());
      assertFalse(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertNotNull(file1);
      assertEquals(0, stringArray0.length);
      assertSame(file0, file1);
      assertSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("/tmp", "/tmp", file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/tmp0/tmp", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals("tmp", file1.getName());
      assertEquals("/home/azureuser/tmp0", file1.getParent());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = FileUtils.directoryContains(file0, file1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/tmp0/tmp", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals("tmp", file1.getName());
      assertEquals("/home/azureuser/tmp0", file1.getParent());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertTrue(boolean0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean0 = stack0.add(file0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[/home/azureuser]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(boolean0);
      
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(stack0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[/home/azureuser]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(fileArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[5];
      FileUtils.writeByteArrayToFile(file0, byteArray0, false);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(5L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      Checksum checksum0 = FileUtils.checksum(file0, cRC32_0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(5L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(3324180253L, cRC32_0.getValue());
      assertEquals(3324180253L, checksum0.getValue());
      assertNotNull(checksum0);
      assertSame(cRC32_0, checksum0);
      assertSame(checksum0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "java.io.tmpdir", (Charset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      try { 
        FileUtils.writeStringToFile(file0, "Unable to delete file: ", charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/azureuser//home/azureuser/azureuser", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      try { 
        FileUtils.writeStringToFile(file0, "dQOtination", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "ftp", "dirFilter", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dirFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination", "ZdQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "ZdQOtination", "ZdQOtination");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ZdQOtination
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = MockFile.createTempFile("W!u)11Xq_}B", "W!u)11Xq_}B");
      assertEquals("/tmp/W!u)11Xq_}B0W!u)11Xq_}B", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals("W!u)11Xq_}B0W!u)11Xq_}B", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.writeStringToFile(file0, (String) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<File> arrayList0 = new ArrayList<File>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayList0, "dQOtination", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      try { 
        FileUtils.writeLines(file0, (Collection<?>) stack0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TreeSet<File> treeSet0 = new TreeSet<File>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("cxB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertNotNull(file0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("-VpS)~#)W|/cxB"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "-VpS)~#)W|/cxB", (Collection<?>) treeSet0, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -VpS)~#)W|/cxB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "S2t#=M[3", (Collection<?>) treeSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("-VpS)~#)W|/cxB"));
      
      try { 
        FileUtils.writeLines((File) mockFile0, "-VpS)~#)W|/cxB", (Collection<?>) linkedList0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/-VpS)~#)W|/cxB/-VpS)~#)W|' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("cxB", file0.getName());
      assertNotNull(file0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("-VpS)~#)W|/cxB"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "-VpS)~#)W|/cxB", (Collection<?>) hashSet0, "-VpS)~#)W|/cxB", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -VpS)~#)W|/cxB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "<K/%R_BF,'3", (Collection<?>) treeSet0, "<K/%R_BF,'3", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains("dQOtination"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "dQOtination", (Collection<?>) stack0, ".YU^QRQVsD;_-");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dQOtination
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("TheHarray of nImes must not be null", "TheHarray of nImes must not be null");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("TheHarray of nImes must not be null0TheHarray of nImes must not be null", file0.getName());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/TheHarray of nImes must not be null0TheHarray of nImes must not be null", file0.toString());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      TreeSet<File> treeSet0 = new TreeSet<File>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "TheHarray of nImes must not be null", (Collection<?>) treeSet0, "PvN^Qq/:8\"Z-f0,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // TheHarray of nImes must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("ZdQOtination"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "ZdQOtination", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ZdQOtination
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d1QOtination");
      assertNotNull(mockFile0);
      
      LinkedHashSet<MockFile> linkedHashSet0 = new LinkedHashSet<MockFile>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(mockFile0));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "/home/azureuser", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      try { 
        FileUtils.writeLines(file0, "/home/azureuser", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte) (-119), 16, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -119
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile(" does not exist", "Exactly one type of input must be provided in the @");
      assertEquals(" does not exist0Exactly one type of input must be provided in the @", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/ does not exist0Exactly one type of input must be provided in the @", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[2];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (-455), (int) (byte) (-1), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, 17, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (int) (byte)65, 1618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (-2880), (int) (byte)39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2880
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp/tmpg/tmp/tmp/tmpg/tmp/tmp", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "AM=yj?`]Bl%^fmDA5]", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "file", "zl?@l^8j=}Eb", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // zl?@l^8j=}Eb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "IF0&`)9a|", "g");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      try { 
        FileUtils.write(file0, (CharSequence) "File does not exist: ", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-2671));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.toURLs((File[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination", "ZdQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/ZdQOtination/ZdQOtination does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/-VpS)~#)W|/cxB/-VpS)~#)W|/cxB does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!F]=w&&$x", "!F]=w&&$x");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/!F]=w&&$x/!F]=w&&$x does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readLines((File) mockFile0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'ZdQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtina2uion", "dQOtina2uion");
      assertEquals("dQOtina2uion0dQOtina2uion", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/dQOtina2uion0dQOtina2uion", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "4");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("364 bytes", "&?=9u?");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readLines((File) mockFile0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/364 bytes/&?=9u?' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("7JDN\"EqT", "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter");
      assertEquals("org.apache.commons.io.filefilter.PathEqualsFileFilter", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter", file0.toString());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      File file1 = mockFile0.getCanonicalFile();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.equals((Object)mockFile0));
      assertEquals("org.apache.commons.io.filefilter.PathEqualsFileFilter", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commons.io.filefilter.PathEqualsFileFilter", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter", file1.toString());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("org.apache.commons.io.filefilter.PathEqualsFileFilter", file1.getName());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments", file1.getParent());
      assertFalse(file1.canWrite());
      assertNotNull(file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      
      try { 
        FileUtils.readLines(file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp/7JDN\"EqT0/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.PathEqualsFileFilter' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "ftp");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp/chronoLocalDate0\"qn[/ftp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "dQOtination");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dQOtination
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'ZdQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("loM]<1K4nSc", "SqW$f0lRbvzs,\"");
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("loM]<1K4nSc0SqW$f0lRbvzs,\"", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/loM]<1K4nSc0SqW$f0lRbvzs,\"", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, file0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals("cxB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      assertNotNull(emptyFileFilter0);
      
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) emptyFileFilter0);
      assertNotNull(delegateFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, emptyFileFilter0, delegateFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      FileUtils.listFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("a7y", "/tmp/tmp/tmp/tmp", file0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file1.canRead());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertEquals("/tmp/a7y0/tmp/tmp/tmp", file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals("/tmp/a7y0/tmp/tmp/tmp/tmp", file1.toString());
      assertTrue(file1.isFile());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals("tmp", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file1, stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/a7y0/tmp/tmp/tmp/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (String[]) null, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      Path path0 = file0.toPath();
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(pathEqualsFileFilter0);
      
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.negate();
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(iOFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, iOFileFilter0, iOFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/dQOtination0dQOtination
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "org.apache.commons.io.file.Counters", file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file1.length());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals("/home/azureuser/home/azureuser/LLm4PrTest", file1.getParent());
      assertEquals("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments0org.apache.commons.io.file.Counters", file1.toString());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals(" io_experiments0org.apache.commons.io.file.Counters", file1.getName());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file1, "org.apache.commons.io.file.Counters");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.file.Counters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "C%I=pJz)xt;{^[E");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // C%I=pJz)xt;{^[E
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IF0&`)9a|", "IF0&`)9a|");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lineIterator((File) mockFile0, "C%I=pJz)xt;{^[E");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/IF0&`)9a|/IF0&`)9a|' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("/J8", "/J8");
      assertTrue(file0.canExecute());
      assertEquals("/tmp/J80/J8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/J80", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("J8", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[5];
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0, iOCase0);
      assertNotNull(nameFileFilter0);
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, (IOFileFilter) null, nameFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.io.tmpdir", "java.io.tmpdir");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[0];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0);
      assertNotNull(wildcardFileFilter0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, wildcardFileFilter0, wildcardFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/java.io.tmpdir/java.io.tmpdir
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: ZdQOtination
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P4:,)610ydZrXV57V}");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      LocalTime localTime0 = MockLocalTime.of((int) (byte)2, (int) (byte)2);
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) null, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"qn[", "chronoLocalDate");
      assertNotNull(mockFile0);
      
      FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\"qn[", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\"qn[/chronoLocalDate", mockFile0.toString());
      assertEquals("chronoLocalDate", mockFile0.getName());
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 1048576L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      assertNotNull(thaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDate) thaiBuddhistDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/8";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/8", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertEquals("8", file0.getName());
      assertNotNull(file0);
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/8 does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertEquals("cxB", file0.getName());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 126, 126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-2060145584), (int) (byte)45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 126, 126);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(bufferedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = MockFile.createTempFile("' are the same", "C%I=pJz)xt;{^[E");
      assertEquals("/tmp/' are the same0C%I=pJz)xt;{^[E", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertEquals("' are the same0C%I=pJz)xt;{^[E", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(bufferedInputStream0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("cxB", file0.getName());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setWritable(false);
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/azureuser' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' is a directory");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1117), 1592);
      assertEquals(1117, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(1117, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pushbackInputStream0, mockFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setReadOnly();
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Unable to delete file: ");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`%");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '`%' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("IF0&`)9a|");
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"qn[", "Tg8");
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("\"qn[0Tg8", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/\"qn[0Tg8", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Tg8";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("\"qn[0Tg8", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/\"qn[0Tg8", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("Tg8", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals("/tmp/\"qn[0Tg8", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertEquals("/tmp/\"qn[0Tg8/Tg8", file1.toString());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertNotNull(file1);
      assertEquals(2, stringArray0.length);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      try { 
        FileUtils.copyFile(file1, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/\"qn[0Tg8/Tg8' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/' and destination '/' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/Edl(LZIdo#v", "/tmp/Edl(LZIdo#v");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/Edl(LZIdo#v/tmp/Edl(LZIdo#v' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TheHarray of nImes must not be null");
      assertNotNull(mockFile0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("TheHarray of nImes must not be null"));
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list0, iOCase0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(suffixFileFilter0);
      assertFalse(list0.contains("TheHarray of nImes must not be null"));
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) suffixFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'TheHarray of nImes must not be null' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[8];
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      assertNotNull(prefixFileFilter0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) prefixFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      ArrayList<File> arrayList0 = new ArrayList<File>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayList0, "dQOtination", true);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("dQOtination", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dQOtination", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      FileEqualsFileFilter fileEqualsFileFilter0 = new FileEqualsFileFilter(mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("dQOtination", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dQOtination", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertNotNull(fileEqualsFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) fileEqualsFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB");
      assertNotNull(mockFile0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter();
      assertNotNull(orFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) null, (FileFilter) orFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) andFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/dQOtination0dQOtination is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQ]tination", "dQ]tination");
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/dQ]tination0dQ]tination", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("dQ]tination0dQ]tination", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setReadable(false);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/dQ]tination0dQ]tination", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("dQ]tination0dQ]tination", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(boolean0);
      
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertEquals(1L, adler32_0.getValue());
      assertNotNull(adler32_0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, (Checksum) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser is not a file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      FileUtils.writeStringToFile(file0, " to a subdirectory of itself: ", (Charset) null, false);
      assertEquals(30L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("dQOtination"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "Yi", (Collection<?>) arrayList0, "/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination0dQOtination", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Yi
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2939);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2939, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2939, charBuffer0.limit());
      assertEquals(2939, charBuffer0.length());
      assertEquals(2939, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      try { 
        FileUtils.write(file0, (CharSequence) charBuffer0, charset0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("url", file0.getName());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.canRead());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[2];
      try { 
        FileUtils.streamFiles(file0, true, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("cxB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.streamFiles(file0, true, (String[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = FileUtils.readFileToString(file0, charset0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("h`;=#vdmG", (String) null, file0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser", file1.getParent());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertEquals("/home/azureuser/h`;=#vdmG0.tmp", file1.toString());
      assertEquals("h`;=#vdmG0.tmp", file1.getName());
      assertTrue(file1.isFile());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.io.tmpdir";
      File file2 = FileUtils.getFile(file1, stringArray0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser", file1.getParent());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertEquals("/home/azureuser/h`;=#vdmG0.tmp", file1.toString());
      assertEquals("h`;=#vdmG0.tmp", file1.getName());
      assertTrue(file1.isFile());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isHidden());
      assertEquals("/home/azureuser/h`;=#vdmG0.tmp", file2.getParent());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertFalse(file2.exists());
      assertEquals("java.io.tmpdir", file2.getName());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("/home/azureuser/h`;=#vdmG0.tmp/java.io.tmpdir", file2.toString());
      assertFalse(file2.canWrite());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getFreeSpace());
      assertNotNull(file2);
      assertEquals(1, stringArray0.length);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertNotSame(file1, file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      try { 
        FileUtils.openOutputStream(file2, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/h`;=#vdmG0.tmp' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("dQOtination", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dQOtination", mockFile0.getParent());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Vi<!!22[");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("Vi<!!22[", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Vi<!!22[", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)}|/cxB", "-VpS)~#)}|/cxB");
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|/cxB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("cxB", file0.getName());
      assertNotNull(file0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, true);
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|/cxB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("cxB", file0.getName());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "user.home");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("cxB0user.home", file0.getName());
      assertEquals("/tmp/-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/-VpS)~#)W|/cxB0user.home", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setReadable(false, false);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("cxB0user.home", file0.getName());
      assertEquals("/tmp/-VpS)~#)W|", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/-VpS)~#)W|/cxB0user.home", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(boolean0);
      
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/-VpS)~#)W|/cxB0user.home' cannot be read
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/-VpS)~#)W|/cxB0-VpS)~#)W|", file0.getParent());
      assertEquals("cxB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0, fileInputStream0.available());
      assertNotNull(fileInputStream0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZQOtination", "GZQOtination");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/GZQOtination/GZQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = MockFile.createTempFile("~~WwOwi7-U!+p=ZwF", "6gOSWFrS;Lq");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/~~WwOwi7-U!+p=ZwF06gOSWFrS;Lq", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("~~WwOwi7-U!+p=ZwF06gOSWFrS;Lq", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      try { 
        FileUtils.moveFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/~~WwOwi7-U!+p=ZwF06gOSWFrS;Lq' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      assertEquals("C%I=pJz)xt;{^[E0IF0&`)9a|", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/C%I=pJz)xt;{^[E0IF0&`)9a|", file0.toString());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("v'&'2yQHsgcKtsBl", " does not exist");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/v'&'2yQHsgcKtsBl/ does not exist' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("", "Can't compare directories, only files");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertTrue(file0.canRead());
          assertEquals("/", file0.getParent());
          assertEquals("tmp", file0.getName());
          assertFalse(file0.isFile());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertEquals("/tmp", file0.toString());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.isDirectory());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertNotNull(file0);
          
          MockFile mockFile0 = new MockFile(")&e];%HD|", "u.hQyDIC,f,!");
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(mockFile0);
          
          FileUtils.moveToDirectory(file0, mockFile0, true);
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.lastModified());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isFile());
          assertEquals("/", file0.getParent());
          assertEquals("tmp", file0.getName());
          assertFalse(file0.canRead());
          assertFalse(file0.exists());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertEquals("/tmp", file0.toString());
          assertFalse(file0.canExecute());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.canWrite());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isDirectory());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canWrite());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!", mockFile0.toString());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isFile());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|", mockFile0.getParent());
          assertEquals("u.hQyDIC,f,!", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(mockFile0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:488)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1327)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:294)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1124)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2106)
             // sun.reflect.GeneratedMethodAccessor321.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("[y^*isZE", "[y^*isZE");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/[y^*isZE/[y^*isZE
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (-2428L));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, (-2764L));
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/J8");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (-1100L));
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/J8", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("J8", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, 1125899906842624L);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setReadOnly();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(file0, "DicIQ]5.mI/\"a");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.forceMkdir(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory /home/azureuser/DicIQ]5.mI/\"a
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      FileUtils.forceMkdir(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "DicIQ]5.mI/\"a");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileUtils.forceMkdir(mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("\"a", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/DicIQ]5.mI", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/azureuser/DicIQ]5.mI/\"a", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("Failed to delete original file '", " 0UB");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileUtils.copyToDirectory(file0, (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Failed to delete original file '", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(" 0UB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Failed to delete original file '/ 0UB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      FileUtils.deleteDirectory(file0);
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      assertNotNull(mockFile0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      try { 
        FileUtils.copyToFile(bufferedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = MockFile.createTempFile("' exists but is not a directory", "' exists but is not a directory", (File) null);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("' exists but is not a directory0' exists but is not a directory", file0.getName());
      assertEquals("/tmp/' exists but is not a directory0' exists but is not a directory", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/' exists but is not a directory0' exists but is not a directory' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V?>", "!\u0003_xdQ!l\"32z>U)-O");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/V?>/!\u0003_xdQ!l\"32z>U)-O' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = MockFile.createTempFile("31`\"Fm", "dQOtination");
      assertEquals("31`\"Fm0dQOtination", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/31`\"Fm0dQOtination", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "dQOtination");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertNotNull(linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      
      try { 
        FileUtils.copyFile(file0, (File) mockFile0, true, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/31`\"Fm0dQOtination' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/dQOtination0dQOtination' and destination '/tmp/dQOtination0dQOtination' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "ftp");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/chronoLocalDate0\"qn[' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      assertNotNull(orFileFilter0);
      
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("uJ>e+a^jA}6J&'z}$^", "Chars to skip: ");
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("uJ>e+a^jA}6J&'z}$^0Chars to skip: ", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals("/tmp/uJ>e+a^jA}6J&'z}$^0Chars to skip: ", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isFile());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      try { 
        FileUtils.copyDirectory(file0, file1, (FileFilter) orFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/uJ>e+a^jA}6J&'z}$^0Chars to skip: ' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[6];
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      assertNotNull(wildcardFileFilter0);
      assertEquals(6, stringArray0.length);
      
      CopyOption[] copyOptionArray0 = new CopyOption[7];
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          assertEquals("/home", file0.getParent());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.isDirectory());
          assertEquals("/home/azureuser", file0.toString());
          assertTrue(file0.canExecute());
          assertEquals("azureuser", file0.getName());
          assertEquals(0L, file0.length());
          assertFalse(file0.isFile());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertNotNull(file0);
          
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:878)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:155)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:922)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:435)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:392)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1327)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:294)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      FileUtils.cleanDirectory(file0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      Checksum checksum0 = FileUtils.checksum(file0, cRC32_0);
      assertEquals("/tmp/dQOtination0dQOtination", file0.toString());
      assertEquals("dQOtination0dQOtination", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, checksum0.getValue());
      assertNotNull(checksum0);
      assertSame(cRC32_0, checksum0);
      assertSame(checksum0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals("0 bytes", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals("1 GB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("chronoLocalDate0\"qn[", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp/chronoLocalDate0\"qn[", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "<as&a6?", "\n", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", "/tmp", (File) null);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/tmp0", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp/tmp0/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/tmp0", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp/tmp0/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P4:,)610ydZrXV57V}");
      assertNotNull(mockFile0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      assertNotNull(notFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'P4:,)610ydZrXV57V}' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      File file0 = MockFile.createTempFile("P[pal)ys@e", "\u0001^t", (File) null);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      FileUtils.write(file0, (CharSequence) "\u0001^t", (String) null, false);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(3L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = MockFile.createTempFile("MANIFEST", "MANIFEST");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/MANIFEST0MANIFEST", file0.toString());
      assertEquals("MANIFEST0MANIFEST", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isSymlink(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/MANIFEST0MANIFEST", file0.toString());
      assertEquals("MANIFEST0MANIFEST", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.lineIterator(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.ofEpochSecond(130L);
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("StdIo_System_In", iOCase0);
      assertNotNull(prefixFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) prefixFileFilter0, (IOFileFilter) prefixFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GZQOtination", "GZQOtination");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "GZQOtination", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination", "ZdQOtination");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, 310, 1753, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      try { 
        FileUtils.write(file0, (CharSequence) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "DicIQ]5.mI/\"a");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      FileUtils.waitFor(mockFile0, 0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 540);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'ZdQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      file0.setReadOnly();
      try { 
        FileUtils.touch(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to set the last modification time for /tmp/-VpS)~#)W|/cxB0-VpS)~#)W|/cxB
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = MockFile.createTempFile("H56A]!uwC 3-IKa>4r", "RPj$t");
      FileUtils.touch(file0);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[2];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(2, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (String[]) null, true);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockFile.createTempFile("/mp//tmpmp", "/mp//tmpmp");
      File file0 = FileUtils.getTempDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser is not a file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQ]tination", "dQ]tination");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtina2uion", "dQOtina2uion");
      List<String> list0 = FileUtils.readLines(file0, (Charset) null);
      assertFalse(list0.contains("dQOtina2uion"));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = MockFile.createTempFile("' exists but is not a directory", "' exists but is not a directory", (File) null);
      String string0 = FileUtils.readFileToString(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
      byte[] byteArray1 = FileUtils.readFileToByteArray(mockFile0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "YVmO?x{RsaRA");
      File file0 = MockFile.createTempFile("YVmO?x{RsaRA", "YVmO?x{RsaRA", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "W");
      try { 
        FileUtils.touch(mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/tmp/YVmO?x{RsaRA/YVmO?x{RsaRA0YVmO?x{RsaRA' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      file0.setWritable(false);
      try { 
        FileUtils.write(file0, (CharSequence) "dQOtination", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/dQOtination0dQOtination' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest", "' cannot be read");
      MockFile mockFile0 = new MockFile("' cannot be read", "' cannot be read");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/' cannot be read/' cannot be read' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/dQOtination0dQOtination' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "9',.L4<]e?b70Ho#");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/chronoLocalDate09',.L4<]e?b70Ho#' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = MockFile.createTempFile("W!u)11Xq_}B", "W!u)11Xq_}B");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/W!u)11Xq_}B0W!u)11Xq_}B' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(")&e];%HD|", "u.hQyDIC,f,!");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not create destination directories '/home/azureuser/LLm4PrTest/ io_experiments/)&e];%HD|/u.hQyDIC,f,!'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = MockFile.createTempFile("-rJVpS)~#)W|/cxB", "-rJVpS)~#)W|/cxB");
      MockFile mockFile0 = new MockFile("' cannot be read");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '' cannot be read' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = MockFile.createTempFile("The array of names must not be null", "The array of names must not be null");
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/The array of names must not be null0The array of names must not be null' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateEpochDay(626000L);
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      boolean boolean0 = FileUtils.isFileOlder(file0, chronoLocalDate0, localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 2110L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFile mockFile0 = new MockFile("collector");
      Clock clock0 = MockClock.systemUTC();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "sourceFile";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|cxB");
      FileUtils.forceMkdirParent(mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.forceMkdirParent(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory -VpS)~#)W|
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = MockFile.createTempFile("chronoLocalDate", "\"qn[");
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /tmp/chronoLocalDate0\"qn[ exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      FileUtils.forceMkdirParent(file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = MockFile.createTempFile("|[)8#>#5#k1CK,HV,", "|[)8#>#5#k1CK,HV,", (File) null);
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("uJ>e+a^jA}6J&'z}$^");
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) orFileFilter0, false, copyOptionArray0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile("source", "source");
          MockFile mockFile0 = new MockFile("source");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/source/tmp/source0source\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1297)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1262)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:675)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:602)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:503)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:474)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2105)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2142)
             // sun.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      MockFile mockFile0 = new MockFile(file0, "DicIQ]5.mI/\"a");
      OrFileFilter orFileFilter0 = new OrFileFilter();
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyDirectory(file1, (File) mockFile0, (FileFilter) orFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/DicIQ]5.mI/\"a' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ey^*isZE", "ey^*isZE");
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      FileUtils.deleteQuietly(file0);
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, true);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileUtils.deleteDirectory(mockFile0);
      assertEquals("/tmp/foo.bar", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      File[] fileArray0 = new File[7];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      MockFile mockFile0 = new MockFile(fileArray0[1], "^[a-zA-Z0-9][a-zA-Z0-9-]*$");
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = file0;
      fileArray0[4] = file0;
      fileArray0[5] = file0;
      fileArray0[6] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(7, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("ZdQOtination");
      assertEquals("ZdQOtination", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("/home/azureuser/{|'i r jF; iKa/ALWAYS/tmp/home/azureuser/tmp/Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/DicIQ]5.mI/\"a/;300q_<DR/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/*v>/T1^YM^PD[CloM[M]/Can't compare directories, only files/azureuser");
      assertEquals("/home/azureuser/{|'i r jF; iKa/ALWAYS/tmp/home/azureuser/tmp/Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/DicIQ]5.mI/\"a/;300q_<DR/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/*v>/T1^YM^PD[CloM[M]/Can't compare directories, only files/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtina2uion", "dQOtina2uion");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/dQOtina2uion0dQOtina2uion' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)}|/cxB", "-VpS)~#)}|/cxB");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-VpS)~#)}|/cxB");
      long long0 = FileUtils.copyFile(file0, (OutputStream) mockFileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("TheHarray of nImes must not be null", "TheHarray of nImes must not be null");
          File file1 = MockFile.createTempFile("TheHarray of nImes must not be null", "TheHarray of nImes must not be null");
          LinkOption[] linkOptionArray0 = LinkOption.values();
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, file1, true, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/TheHarray of nImes must not be null1TheHarray of nImes must not be null\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1297)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:812)
             // sun.reflect.GeneratedMethodAccessor304.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      File file0 = MockFile.createTempFile("TheHarray of nImes must not be null", "TheHarray of nImes must not be null");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TheHarray of nImes must not be null";
      stringArray0[1] = "TheHarray of nImes must not be null";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveFile(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/TheHarray of nImes must not be null0TheHarray of nImes must not be null/TheHarray of nImes must not be null' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
          MockFile mockFile0 = new MockFile("dQOtination");
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/dQOtination/dQOtination0dQOtination\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1297)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:812)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:767)
             // org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:890)
             // org.apache.commons.io.FileUtils.copyFileToDirectory(FileUtils.java:856)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:945)
             // sun.reflect.GeneratedMethodAccessor283.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "file");
          MockFile mockFile0 = new MockFile("ftp");
          // Undeclared exception!
          try { 
            FileUtils.moveFile(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"ftp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1297)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:812)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:767)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:739)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2172)
             // sun.reflect.GeneratedMethodAccessor302.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)}|/cxB", "-VpS)~#)}|/cxB");
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|/cxB' and destination '/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|/cxB' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)}|/cxB", "-VpS)~#)}|/cxB");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source '/tmp/-VpS)~#)}|/cxB0-VpS)~#)}|/cxB' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' is a directory");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '' is a directory' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "DicIQ]5.mI/\"a");
      OrFileFilter orFileFilter0 = new OrFileFilter();
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) orFileFilter0);
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      File file1 = MockFile.createTempFile("dQOtination", "dQOtination");
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "&`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("eG79", "eG79");
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "/home/azureuser/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/ftp");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = MockFile.createTempFile("GZQOtination", "GZQOtination");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "GZQOtination");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "/home/azureuser//home/azureuser/azureuser");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      File file0 = MockFile.createTempFile("dQOtination", "nb?FG=1F5&7>fF");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "dQOtination");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/ -Vr$S83QL@HL~/:>`WQ", "file", (File) null);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "org.apache.commons.io.filefilter.FileEqualsFileFilter");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "&`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "/homeIazureuser");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = MockFile.createTempFile("The array of names must not be null", "The array of names must not be null");
      File file1 = MockFile.createTempFile("The array of names must not be null", "The array of names must not be null");
      boolean boolean0 = FileUtils.contentEquals(file1, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("F@m;6F-N7P!!C", "F@m;6F-N7P!!C", file0);
      try { 
        FileUtils.contentEquals(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.contentEquals(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "/tmp");
      boolean boolean0 = FileUtils.contentEquals(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = MockFile.createTempFile("' exists but is not a directory", "' exists but is not a directory", (File) null);
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = MockFile.createTempFile("The array of names must not be null", "The array of names must not be null");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("s=ource", "s=ource");
      FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "/tmp//tmp/tmp");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      File file0 = MockFile.createTempFile("-VpS)~#)W|/cxB", "-VpS)~#)W|/cxB");
      FileUtils.writeStringToFile(file0, "-VpS)~#)W|/cxB");
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(stack0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      FileUtils.write((File) mockFile0, (CharSequence) "ZdQOtination", false);
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination 'ZdQOtination' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/C%I=pJz)xt;{^[E0IF0&`)9a| is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate(16, 47, 0);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HashSet<SequenceInputStream> hashSet0 = new HashSet<SequenceInputStream>();
      try { 
        FileUtils.writeLines(file0, "org.junitpioneer.jupiter.AbstractEntryBasedExtension", (Collection<?>) hashSet0, "org.junitpioneer.jupiter.AbstractEntryBasedExtension");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) treeSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, 313, 313);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "^|Oq2^~9Cms");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^|Oq2^~9Cms
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      IOCase iOCase0 = IOCase.SENSITIVE;
      NameFileFilter nameFileFilter0 = new NameFileFilter("<ZYS<T", iOCase0);
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, nameFileFilter0, nameFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "net.bytebuddy.asm.Advice$WithCustomMapping");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // net.bytebuddy.asm.Advice$WithCustomMapping
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "dQOtination", charset0);
      String string0 = FileUtils.readFileToString(file0);
      assertEquals("dQOtination", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQOtination", "dQOtination");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "dQOtination", (Collection<?>) treeSet0, false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dQOtination
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "C%I=pJz)xt;{^[E");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, "C%I=pJz)xt;{^[E");
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P4:,)610ydZrXV57V}");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'P4:,)610ydZrXV57V}' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "P|xuXM<pIix%4p", "Failed setLastModified on ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Failed setLastModified on 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "/tmp//tmp/tmp");
      long long0 = FileUtils.checksumCRC32(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")3@n");
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(")3@n");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) prefixFileFilter0, (IOFileFilter) prefixFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: )3@n
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'file' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "q", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = MockFile.createTempFile("The array of names must not be null", "");
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b<=nNf", "m^,Vw!b[");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/b<=nNf/m^,Vw!b[ does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZdQOtination");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'ZdQOtination' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1073741824L, FileUtils.ONE_GB);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Cannot move directory: ", (Collection<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[5E", "IF0&`)9a|");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "g", charset0);
      assertEquals(1L, file0.length());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/C%I=pJz)xt;{^[E/ftp", "file", (File) null);
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = MockFile.createTempFile("dQOtination", "dQOtination");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "dQOtination", "To~.cep2%\"ocQT7&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // To~.cep2%\"ocQT7&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = MockFile.createTempFile("C%I=pJz)xt;{^[E", "IF0&`)9a|");
      MockDate mockDate0 = new MockDate((-2764L));
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }
}
