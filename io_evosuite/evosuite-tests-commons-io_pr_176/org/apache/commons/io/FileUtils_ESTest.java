/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:49:31 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.NoSuchFileException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.fileflter.NotFileFilter", "org.apache.commons.io.fileflter.NotFileFilter");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "org.apache.commons.io.fileflter.NotFileFilter", charset0, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.forceDelete(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/.local/share/nano\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.postVisitDirectory(DeletingPathVisitor.java:140)
             // org.apache.commons.io.file.DeletingPathVisitor.postVisitDirectory(DeletingPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2688)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:922)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:435)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:392)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1370)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      FileUtils.writeStringToFile(file0, "jG", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.fileflter.NotFileFilter", "org.apache.commons.io.fileflter.NotFileFilter");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileUtils.writeLines(file0, (Collection<?>) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) treeSet0, (String) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      FileUtils.writeLines(file0, (Collection<?>) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedHashSet<ChronoLocalDate> linkedHashSet0 = new LinkedHashSet<ChronoLocalDate>();
      MockFile mockFile0 = new MockFile("cG2_xrXU{HM|VOUH*1");
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) linkedHashSet0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ");
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1972));
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) stringBuffer0, charset0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q";
      stringArray0[1] = "pb:";
      stringArray0[2] = "ftp";
      stringArray0[3] = "/=0|@5";
      stringArray0[4] = "'}zKZaebz";
      stringArray0[5] = ".nLU<cR'%?D_";
      File file0 = FileUtils.getFile(stringArray0);
      URL uRL0 = file0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", "file", "file");
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 0, 4166);
      FileUtils.sizeOfAsBigInteger(mockFile0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileUtils.writeStringToFile((File) mockFile0, "file");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("file");
      FileUtils.readLines((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileUtils.copyInputStreamToFile(byteArrayInputStream0, file0);
      FileUtils.readLines(file0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileUtils.writeStringToFile((File) mockFile0, "file");
      FileUtils.openInputStream(mockFile0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      FileUtils.listFiles(file0, (IOFileFilter) prefixFileFilter0, (IOFileFilter) prefixFileFilter0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 0, 4166);
      FileUtils.lineIterator((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[5];
      FileUtils.iterateFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", iOCase0);
      FileUtils.iterateFiles(file0, (IOFileFilter) suffixFileFilter0, (IOFileFilter) suffixFileFilter0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isSymlink(file0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockDate mockDate0 = new MockDate(2147483647L);
      FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(x2~l$-&:RMzYBOHG", "(x2~l$-&:RMzYBOHG");
      File file0 = MockFile.createTempFile("(x2~l$-&:RMzYBOHG", "(x2~l$-&:RMzYBOHG", (File) mockFile0);
      MockDate mockDate0 = new MockDate(565L);
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setExecutable(false, true);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".nLU<cR'%?D_";
      stringArray0[1] = ".nLU<cR'%?D_";
      stringArray0[2] = ".nLU<cR'%?D_";
      stringArray0[3] = ".nLU<cR'%?D_";
      stringArray0[4] = ".nLU<cR'%?D_";
      stringArray0[5] = ".nLU<cR'%?D_";
      stringArray0[6] = ".nLU<cR'%?D_";
      stringArray0[7] = ".nLU<cR'%?D_";
      stringArray0[8] = ".nLU<cR'%?D_";
      File file1 = FileUtils.getFile(stringArray0);
      FileUtils.moveToDirectory(file0, file1, true);
      FileUtils.getTempDirectory();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q";
      stringArray0[1] = "pb:";
      stringArray0[2] = "ftp";
      stringArray0[3] = "/=0|@5";
      stringArray0[4] = "'}zKZaebz";
      stringArray0[5] = ".nLU<cR'%?D_";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      String[] stringArray0 = new String[0];
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("(dq!z", "O|DBa7W*WaOn", (File) mockFile0);
      FileUtils.directoryContains(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          FileUtils.deleteQuietly(file0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileUtils.decodeUrl("/home/azureuser");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o '%#7");
      FileUtils.copyFile(file0, (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      File file0 = FileUtils.getTempDirectory();
      vector0.add(file0);
      FileUtils.convertFileCollectionToFileArray(vector0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      FileUtils.checksumCRC32(file0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "4^!F");
      FileUtils.checksum(file0, (Checksum) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "4^!F");
      CRC32 cRC32_0 = new CRC32();
      FileUtils.checksum(file0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "]~P},n_gI=k`Zz98", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File[] fileArray0 = new File[7];
      File file0 = FileUtils.getUserDirectory();
      fileArray0[1] = file0;
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(fileArray0[1], "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/=]w*j9'\"4s%|_FL$ZI/azureuser", charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "Cannot apply non-operational plugin", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "", "last-modified", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // last-modified
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "net.bytebuddy.description.NamedElement", "net.bytebuddy.description.NamedElement");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.description.NamedElement
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, ":+O3@ZL/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "tg\"z[R5#v%[Pv");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = new Vector<String>(2151, 1213);
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) vector0, "qzj9Ue,bpUar", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.filefilter.NotFileFilter", "org.apache.commons.io.filefilter.NotFileFilter");
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "org.junitpioneer.jupiter.StdIoExtension", (Collection<?>) hashSet0, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.StdIoExtension
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      TreeSet<ChronoField> treeSet0 = new TreeSet<ChronoField>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "/home/azureuser", (Collection<?>) treeSet0, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedHashSet<ChronoLocalDate> linkedHashSet0 = new LinkedHashSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "cG2_xrXU{HM|VOUH*1", (Collection<?>) linkedHashSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "ftp", (Collection<?>) stack0, "+^v[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayList<Proxy.Type> arrayList0 = new ArrayList<Proxy.Type>();
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeLines(file0, "zoneId", (Collection<?>) arrayList0, "zoneId", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=]w*j9'\"4s%|_FL$ZI");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "=]w*j9'\"4s%|_FL$ZI", (Collection<?>) null, "=]w*j9'\"4s%|_FL$ZI");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =]w*j9'\"4s%|_FL$ZI
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedHashSet<ChronoLocalDate> linkedHashSet0 = new LinkedHashSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Cannot create URL for ", (Collection<?>) linkedHashSet0, "Cannot create URL for ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#DOhX<},RM:");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "http", (Collection<?>) null);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // http
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, ",Dk\"'Oz[", (Collection<?>) priorityQueue0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,Dk\"'Oz[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)0, (int) (byte)3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      byte[] byteArray0 = new byte[6];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte)111, (-2), false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)103, (int) (byte)103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte) (-91), 1240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-5453), (-5453));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[2];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/home/azureuser/LLm4PrTest/ io_experiments/?/tmp", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/?/tmp");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "", "ftp", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ftp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) null, "org.apache.commons.io.filefilter.TrueFileFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.TrueFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "-}0 ", "-}0 ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -}0 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) charBuffer0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.write(file0, (CharSequence) "file", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.write(file0, (CharSequence) "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/?/tmp", "/home/azureuser/LLm4PrTest/ io_experiments/?/tmp");
      try { 
        FileUtils.touch(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/?/tmp/home/azureuser/LLm4PrTest/ io_experiments/?' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.toURLs((File[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/cG2_xrX:{HM|VOUH*10cG2_xrX:{HM|VOUH*1 is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' and destination '");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and destination ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file", "file");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/file/file' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "Backup");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Backup
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/home/azureuser' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "ftp");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ftp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~Q");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '~Q' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'E' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/azureuser' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, file0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=]w*j9'\"4s%|_FL$ZI");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '=]w*j9'\"4s%|_FL$ZI' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'E' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/p@(@ewkz;iZZ/p@(@ewkz;iZZ/azureuser");
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/p@(@ewkz;iZZ/p@(@ewkz;iZZ/azureuser", iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(mockFile0, nameFileFilter0, nameFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/p@(@ewkz;iZZ/p@(@ewkz;iZZ/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, "d#n.K]'&F.mbF,4%(");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cG2_xrXU{HM|VOUH*1", "cG2_xrXU{HM|VOUH*1");
      try { 
        FileUtils.lineIterator((File) mockFile0, "cG2_xrXU{HM|VOUH*1");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/cG2_xrXU{HM|VOUH*1/cG2_xrXU{HM|VOUH*1' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/fQvUSjO/96\"+A'Dn'6.x&#W|27,/azureuser/LLm4PrTest");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/fQvUSjO/96\"+A'Dn'6.x&#W|27,/azureuser/LLm4PrTest' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(",Dk\"'Oz[", 1542L);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, magicNumberFileFilter0, magicNumberFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("TkbS#^K", "7By8n0c*K");
      NameFileFilter nameFileFilter0 = new NameFileFilter("7By8n0c*K");
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, nameFileFilter0, nameFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/TkbS#^K07By8n0c*K
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+_N?4?,s4Sv\"U");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: +_N?4?,s4Sv\"U
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0, false);
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(1L, true);
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[3];
      iOFileFilterArray0[0] = (IOFileFilter) ageFileFilter0;
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      iOFileFilterArray0[1] = (IOFileFilter) falseFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) ageFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) orFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (ChronoLocalDate) minguoDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/-}0 /-}0  does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/-}0 /-}0  does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFile((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.getFile((File) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3*jaUXx!9[}o,N)8");
      File file0 = MockFile.createTempFile("The list of names must not be null", "java.io.tmpdir", (File) mockFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "file";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.forceMkdirParent(file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /home/azureuser/LLm4PrTest/ io_experiments/3*jaUXx!9[}o,N)8/The list of names must not be null0java.io.tmpdir exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/home/azureuser0/home/azureuser is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.directoryContains(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/cG2_xrX:{HM|VOUH*10cG2_xrX:{HM|VOUH*1 is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0, 90, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Fw%w)dCgpj\"3REa(", "#if0");
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0, (-607), (-607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 90, 90);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>(1763);
      arrayDeque0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>((-855019709));
      arrayDeque0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/file0file' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bhQ", "bhQ");
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      arrayDeque0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/bhQ/bhQ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = MockFile.createTempFile("Illegal range. Equal from and to will produce an empty range.", "-}0 ");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/Illegal range. Equal from and to will produce an empty range.0-}0 ' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("##VSi01VC+C-6vZ>i");
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5", "-909 bytes");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/5/-909 bytes' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = MockFile.createTempFile("index (%s) must be >= 0 and < name count (%s)", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/.nLU<cR'%?D_/tmp");
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/index (%s) must be >= 0 and < name count (%s)0/tmp/home/azureuser/LLm4PrTest/ io_experiments/.nLU<cR'%?D_/tmp' and destination '/tmp/index (%s) must be >= 0 and < name count (%s)0/tmp/home/azureuser/LLm4PrTest/ io_experiments/.nLU<cR'%?D_/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = MockFile.createTempFile(">fQ~NcHT-'3}K?z_mM", "'`");
      MockFile mockFile0 = new MockFile(file0, "'`");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/>fQ~NcHT-'3}K?z_mM0'`/'`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/file0file' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/fake/but/wellformed/url", "/fake/but/wellformed/url");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) null, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ");
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) directoryFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '-}0 ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(1392409281320L);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) null, (FileFilter) ageFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file", "file");
      AndFileFilter andFileFilter0 = new AndFileFilter();
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) andFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/file/file' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest", "/home/azureuser/LLm4PrTest");
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/home/azureuser/LLm4PrTest0/home/azureuser/LLm4PrTest' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rwe@hE@85.<*4P");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'rwe@hE@85.<*4P' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      file0.setReadable(false);
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "Ahz,UQ<3K ", charset0, true);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b}O0|{Trar&)\"[@0w~W";
      stringArray0[1] = "http";
      File file0 = FileUtils.getFile(stringArray0);
      ArrayList<File> arrayList0 = new ArrayList<File>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "file", (Collection<?>) arrayList0, ")+`i}B9Bts0Ce{{|@7", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3 KB";
      File file1 = FileUtils.getFile(file0, stringArray0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file1, byteArray0, (-2369), 3413, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.write(file0, (CharSequence) ",Y9:DlD$\f+w'X-Y", (Charset) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      String[] stringArray0 = new String[8];
      try { 
        FileUtils.streamFiles(mockFile0, true, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("w0c(nU'MS/~cU:", "w0c(nU'MS/~cU:");
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Don't clear/set the same entry more than once.", ",");
      FileUtils.openOutputStream((File) mockFile0, false);
      FileUtils.readFileToString((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#EM?MgT%nFa@";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.openOutputStream(file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/tmp/cG2_xrX:{HM|VOUH*10cG2_xrX:{HM|VOUH*1' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      FileUtils.openOutputStream(file0, true);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~Q");
      FileUtils.openOutputStream((File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#DOhX<},RM:");
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '#DOhX<},RM:' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".nLU<cR'%?D_";
      stringArray0[1] = ".nLU<cR'%?D_";
      stringArray0[2] = ".nLU<cR'%?D_";
      stringArray0[3] = ".nLU<cR'%?D_";
      stringArray0[4] = ".nLU<cR'%?D_";
      stringArray0[5] = ".nLU<cR'%?D_";
      stringArray0[6] = ".nLU<cR'%?D_";
      stringArray0[7] = ".nLU<cR'%?D_";
      stringArray0[8] = ".nLU<cR'%?D_";
      File file1 = FileUtils.getFile(stringArray0);
      FileUtils.moveToDirectory(file0, file1, true);
      try { 
        FileUtils.moveFileToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".nLU<cR'%?D_";
      stringArray0[1] = ".nLU<cR'%?D_";
      stringArray0[2] = ".nLU<cR'%?D_";
      stringArray0[3] = ".nLU<cR'%?D_";
      stringArray0[4] = ".nLU<cR'%?D_";
      stringArray0[5] = ".nLU<cR'%?D_";
      stringArray0[6] = ".nLU<cR'%?D_";
      stringArray0[7] = ".nLU<cR'%?D_";
      stringArray0[8] = ".nLU<cR'%?D_";
      File file1 = FileUtils.getFile(stringArray0);
      FileUtils.moveToDirectory(file0, file1, true);
      try { 
        FileUtils.moveFileToDirectory(file1, file0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/tmp' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          File file0 = FileUtils.toFile(uRL0);
          FileUtils.openOutputStream(file0);
          MockFile mockFile0 = new MockFile("orO-g?}5KiuZ7fRh", "soH'v;Jueis?d");
          // Undeclared exception!
          try { 
            FileUtils.moveFile(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/orO-g?}5KiuZ7fRh/soH'v;Jueis?d\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:843)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:793)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:760)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2214)
             // sun.reflect.GeneratedMethodAccessor347.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file", "file");
      FileUtils.touch(mockFile0);
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/file/file' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/home";
      stringArray0[1] = "/tmp/home/azureuser/LLm4PrTest/ io_experiments/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/tmp";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveDirectory(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/home/tmp/home/azureuser/LLm4PrTest/ io_experiments/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/.nLU<cR'%?D_/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eEJnG23M!0B|xC", "eEJnG23M!0B|xC");
      FileUtils.isFileOlder((File) mockFile0, 608L);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileOlder(file0, 1911L);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=]w*j9'\"4s%|_FL$ZI");
      FileUtils.isFileNewer((File) mockFile0, (long) (-1221));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdir(file0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      FileUtils.forceMkdir(file0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "net.bytebuddy.dynamic.loading.InjectionClassLoader";
      stringArray0[1] = " is not a file";
      stringArray0[2] = "j;DJhi3))vqE6)?i;";
      stringArray0[3] = "eYo_Q";
      stringArray0[4] = "L|D!R&V>6C4BKo4P$";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.copyToFile(sequenceInputStream0, file0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " is not a file";
      stringArray0[1] = "net.bytebuddy.dynamic.loading.InjectionClassLoader";
      stringArray0[2] = "j;DJhi3))vqE6)?i;";
      stringArray0[3] = "O#CT;48j6HdW\b$";
      stringArray0[4] = " is not a file";
      stringArray0[5] = "j;DJhi3))vqE6)?i;";
      File file0 = FileUtils.getFile(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        FileUtils.copyToFile(pipedInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+", "  T(HxX;b_RPA{");
      FileUtils.writeStringToFile((File) mockFile0, "  T(HxX;b_RPA{");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/+/  T(HxX;b_RPA{' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '-}0 ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "PZ", ";tGk da\"@@zwHG^", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;tGk da\"@@zwHG^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond((-507L), 1118000L);
      FileUtils.isFileNewer(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) ",Dk\"'Oz[", "yh{GkD*.eOaA", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // yh{GkD*.eOaA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      Period period0 = Period.ofYears(56);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.now();
      FileUtils.isFileOlder(file0, (ChronoLocalDate) localDate0, localTime0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O[z9,v+UP@");
      byte[] byteArray0 = new byte[7];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = MockFile.createTempFile("wbM<'@jt'Mw,`|~lOL", "wbM<'@jt'Mw,`|~lOL");
      Instant instant0 = MockInstant.ofEpochMilli(102L);
      FileUtils.isFileOlder(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) null, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#DOhX<},RM:");
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "http", (Collection<?>) null, "http");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // http
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      MockFile mockFile0 = new MockFile(file0, "file");
      // Undeclared exception!
      FileUtils.waitFor(mockFile0, 0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cG2_xX:{HM|VOUH*1", "cG2_xX:{HM|VOUH*1");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1221));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      boolean boolean0 = FileUtils.waitFor(file0, (-1221));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/home/azureuser' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      FileUtils.touch(file0);
      assertEquals("file0file", file0.getName());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Stream<File> stream0 = FileUtils.streamFiles(file0, false, (String[]) null);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File[] fileArray0 = FileUtils.EMPTY_FILE_ARRAY;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertSame(fileArray1, fileArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile.createTempFile("<(]`;D", "<(]`;D", file0);
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file", ", expected: ");
      FileUtils.writeStringToFile((File) mockFile0, "\"l21 e2=Qw?ny'fJ+n");
      long long0 = FileUtils.sizeOf(mockFile0);
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp is not a file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/cG2_xrX:{HM|VOUH*10cG2_xrX:{HM|VOUH*1 is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = FileUtils.readLines(file0, charset0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      Charset charset0 = Charset.defaultCharset();
      String string0 = FileUtils.readFileToString(file0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      File file0 = MockFile.createTempFile("q<23YFGxJ0f}IRg@~", "isSymbolicLink");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayDeque0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileUtils.writeStringToFile((File) mockFile0, "file");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mockFile0.setReadOnly();
      try { 
        FileUtils.writeLines((File) mockFile0, " does not exist", (Collection<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File 'file' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      Charset charset0 = Charset.defaultCharset();
      file0.setReadable(false, false);
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/cG2_xrX:{HM|VOUH*10cG2_xrX:{HM|VOUH*1' cannot be read
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "4^!F");
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      MockFile mockFile0 = new MockFile(file0, "file");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not create destination directories '/tmp/file0file/file'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      MockFile mockFile0 = new MockFile("c&bk}`oJ'$C@ic");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory 'c&bk}`oJ'$C@ic' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = MockFile.createTempFile(" does not exist", " does not exist");
      try { 
        FileUtils.moveFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/ does not exist0 does not exist' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/file0file' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration0net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory 'file' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.createNewFile();
      MockFile mockFile0 = new MockFile("QVV=e_", "nOv.G+=I");
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to delete original directory '/tmp' after copy to '/home/azureuser/LLm4PrTest/ io_experiments/QVV=e_/nOv.G+=I'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("QVV=e_", "nOv.G+=I");
      FileUtils.moveDirectory(file0, mockFile0);
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/home/azureuser";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = MockFile.createTempFile(" ,2qW~3", " ,2qW~3");
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/ ,2qW~30 ,2qW~3' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, 1911L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /tmp/file0file exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdirParent(file0);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cG2_xrXU{HM|VOUH*1", "cG2_xrXU{HM|VOUH*1");
      FileUtils.forceMkdirParent(mockFile0);
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      FileUtils.forceDeleteOnExit(file0);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", file0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration0net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1302)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:691)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:615)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:511)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:730)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:987)
             // sun.reflect.GeneratedMethodAccessor283.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getFileExample();
      File file1 = FileUtils.toFile(uRL0);
      FileUtils.copyDirectory(file0, file1);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/azureuser' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ");
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = MockFile.createTempFile("creationTime", "creationTime");
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertEquals(0L, file0.lastModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".nLU<cR'%?D_";
      stringArray0[1] = ".nLU<cR'%?D_";
      stringArray0[2] = ".nLU<cR'%?D_";
      stringArray0[3] = ".nLU<cR'%?D_";
      stringArray0[4] = ".nLU<cR'%?D_";
      stringArray0[5] = ".nLU<cR'%?D_";
      stringArray0[6] = ".nLU<cR'%?D_";
      stringArray0[7] = ".nLU<cR'%?D_";
      stringArray0[8] = ".nLU<cR'%?D_";
      File file1 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.moveToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete directory /tmp.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~Q");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals("~Q", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=]w*j9'\"4s%|_FL$ZI");
      File[] fileArray0 = new File[7];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      fileArray0[4] = (File) mockFile0;
      fileArray0[5] = (File) mockFile0;
      fileArray0[6] = (File) mockFile0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(7, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      File[] fileArray0 = new File[5];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      fileArray0[3] = file0;
      fileArray0[4] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(5, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileUtils.copyToDirectory((Iterable<File>) linkedList0, file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/,Dk\"'Oz[0,Dk\"'Oz[' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",Y9:DlD$\f+w'X-Y", true);
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      FileUtils.writeStringToFile((File) mockFile0, "-}0 ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.junitpioneer.jupiter.params.DoubleRange");
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) mockFileOutputStream0);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "4^!F");
      MockFile mockFile0 = new MockFile(file0, "/fake/but/wellformed/url/home/azureuser");
      try { 
        FileUtils.copyFile(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser04^!F/fake/but/wellformed/url/home' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
          MockFile mockFile0 = new MockFile(",Dk\"'Oz[");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/,Dk\"'Oz[/,Dk\"'Oz[0,Dk\"'Oz[\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:843)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:793)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:760)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2214)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2251)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2276)
             // sun.reflect.GeneratedMethodAccessor339.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("file", "j,s", file0);
      try { 
        FileUtils.copyToDirectory(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/file0j,s' and destination '/tmp/file0j,s' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>(9);
      arrayDeque0.add(file0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?<9ACpPYn", "ile '");
      File file0 = MockFile.createTempFile("/home/azureuser/.nLU<cR'%?D_0.tmp", "/home/azureuser/.nLU<cR'%?D_0.tmp", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/?<9ACpPYn/ile '/home/azureuser/.nLU<cR'%?D_0.tmp0/home/azureuser/.nLU<cR'%?D_0.tmp' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source '/tmp/file0file' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = MockFile.createTempFile("fil", "fil");
      MockFile mockFile0 = new MockFile(file0, "fil");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/fil0fil/fil' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "/home/azureuser");
      AndFileFilter andFileFilter0 = new AndFileFilter();
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) andFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "/tmp/home/azureuser04^!F");
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file1, "/tmp/home/azureuser04^!F");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest io_experiments", "/home/azureuser/LLm4PrTest io_experiments");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "/home/azureuser/LLm4PrTest io_experiments");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest io_experiments");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "/home/azureuser/LLm4PrTest io_experiments");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cG2_xrXU{HM|VOUH*1", "cG2_xrXU{HM|VOUH*1");
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "$VALUES");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "Y:cI9!R2&=nk#h0e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "File ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEquals(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = MockFile.createTempFile("kX+0'}Je#]{U3", "kX+0'}Je#]{U3");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("--;'KUA)&gd9mUwmQQ");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:878)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:155)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:922)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:435)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:392)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1370)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:294)
             // sun.reflect.GeneratedMethodAccessor360.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      File file0 = MockFile.createTempFile(",Dk\"'Oz[", ",Dk\"'Oz[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      Adler32 adler32_0 = new Adler32();
      Checksum checksum0 = FileUtils.checksum(file0, adler32_0);
      assertSame(adler32_0, checksum0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("10 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_EB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 EB", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",-La.>`eXu]/T");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File ',-La.>`eXu]/T' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(stack0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b}O0|{Trar&)\"[@0wW";
      stringArray0[1] = "http";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      FileUtils.write(file0, (CharSequence) "http", true);
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/b}O0|{Trar&)\"[@0wW/http", file0.toString());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      AndFileFilter andFileFilter0 = new AndFileFilter();
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) andFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/file0file' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeLines(file0, "Tc4i6ov^6(a+g\"T", (Collection<?>) null, "Tc4i6ov^6(a+g\"T");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      MockFile mockFile0 = new MockFile("x9wvx*$$YvDf", "CBNdqX<|r");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/x9wvx*$$YvDf/CBNdqX<|r
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ");
      Vector<String> vector0 = new Vector<String>(2151, 1213);
      FileUtils.writeLines((File) mockFile0, (Collection<?>) vector0, "qzj9Ue,bpUar", true);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=]w*j9'\"4s%|_FL$ZI");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (-3862), 2168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "cG2_xrX:{HM|VOUH*1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // cG2_xrX:{HM|VOUH*1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest io_experiments", "/home/azureuser/LLm4PrTest io_experiments");
      FileUtils.copyInputStreamToFile((InputStream) null, file0);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockFile mockFile0 = new MockFile("il");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // il does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      File file0 = FileUtils.getUserDirectory();
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, emptyFileFilter0, emptyFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (String[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "=7BF?pnW hJiMx!|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =7BF?pnW hJiMx!|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.build.Plugin$Factory$UsingReflection");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'net.bytebuddy.build.Plugin$Factory$UsingReflection' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/--;'KUA)&gd9mUwmQQ/azureuser", "/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/--;'KUA)&gd9mUwmQQ/azureuser");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      FileUtils.writeStringToFile(file0, "WfApB~f", (String) null);
      assertEquals(7L, file0.length());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "cG2_xrX:{HM|VOUH*1", charset0);
      URL uRL0 = file0.toURL();
      File file1 = FileUtils.toFile(uRL0);
      assertNotNull(file1);
      assertEquals(18L, file1.length());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedList<Proxy.Type> linkedList0 = new LinkedList<Proxy.Type>();
      try { 
        FileUtils.writeLines(file0, "str2", (Collection<?>) linkedList0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      try { 
        FileUtils.writeLines(file0, (Collection<?>) list0, "/home/azureuser/fake/but/wellformed/url");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-}0 ", "-}0 ");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/-}0 /-}0 ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "' Expected length: ", "' Expected length: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' Expected length: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&o~%dh/z?4Q{8b7S", "&o~%dh/z?4Q{8b7S");
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/&o~%dh/z?4Q{8b7S/&o~%dh/z?4Q{8b7S does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      NameFileFilter nameFileFilter0 = new NameFileFilter("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) nameFileFilter0, (IOFileFilter) nameFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "jG", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, falseFileFilter0, falseFileFilter0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/home/azureuser/LLm4PrTest/ io_experiments/QVV=e_/nOv.G+=I", (String) null);
      FileUtils.write(file0, (CharSequence) null);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyToDirectory(file0, file0);
      assertEquals("/tmp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ArrayList<Proxy.Type> arrayList0 = new ArrayList<Proxy.Type>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1152921504606846976L, FileUtils.ONE_EB);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "|OtX2/:k]]am", (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write(file0, (CharSequence) stringBuffer0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = MockFile.createTempFile("?=mQxui;{'6%", "?=mQxui;{'6%");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(3988L);
      assertEquals("3 KB", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file");
      FileUtils.write(file0, (CharSequence) "file", (String) null);
      assertEquals(4L, file0.length());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(x2~l$-&:RMzYBOHG", "(x2~l$-&:RMzYBOHG");
      MockDate mockDate0 = new MockDate(565L);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      File file0 = MockFile.createTempFile("cG2_xrX:{HM|VOUH*1", "cG2_xrX:{HM|VOUH*1");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) japaneseDate0);
      assertFalse(boolean0);
  }
}
