/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:58:14 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import org.apache.commons.io.output.AbstractByteArrayOutputStream;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractByteArrayOutputStream_ESTest extends AbstractByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(21);
      byteArrayOutputStream0.count = 21;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      byteArrayOutputStream0.toString(charset0);
      assertEquals(42, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = (-934);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toInputStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length cannot be negative
         //
         verifyException("org.apache.commons.io.input.UnsynchronizedByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[6];
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      java.io.ByteArrayOutputStream byteArrayOutputStream0 = new java.io.ByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeTo(byteArrayOutputStream0);
      assertEquals(6, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl((-1528));
      DataOutputStream dataOutputStream0 = new DataOutputStream(unsynchronizedByteArrayOutputStream0);
      dataOutputStream0.writeShort((-1528));
      byteArrayOutputStream0.write((-1528));
      byteArrayOutputStream0.writeToImpl(unsynchronizedByteArrayOutputStream0);
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(unsynchronizedByteArrayOutputStream0);
      dataOutputStream0.writeInt(16);
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.needNewBuffer(0);
      byteArrayOutputStream0.resetImpl();
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.needNewBuffer(342);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      byteArrayOutputStream0.resetImpl();
      byteArrayOutputStream0.needNewBuffer(0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.writeImpl(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3066);
      byteArrayOutputStream0.count = 3066;
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.writeImpl(inputStream0);
      assertEquals(6132, byteArrayOutputStream0.size());
      assertEquals(3066, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.write(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(21);
      byteArrayOutputStream0.count = 21;
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.write(inputStream0);
      assertEquals(42, byteArrayOutputStream0.size());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(21);
      byteArrayOutputStream0.count = 21;
      String string0 = byteArrayOutputStream0.toString();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3110);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream((AbstractByteArrayOutputStream.InputStreamConstructor<SequenceInputStream>) null);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(21);
      byteArrayOutputStream0.count = 21;
      byte[] byteArray0 = byteArrayOutputStream0.toByteArrayImpl();
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write(0);
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.needNewBuffer((-2739));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write((-938));
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl(unsynchronizedByteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteArrayOutputStream0.writeToImpl(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, (-1313), (byte) (-48));
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo(byteArrayOutputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byteArrayOutputStream0.needNewBuffer(1411);
      unsynchronizedByteArrayOutputStream0.write((-703));
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeTo(byteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$}].]nGI6.} $?m");
      try { 
        byteArrayOutputStream0.writeTo(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl((byte[]) null, 255, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = byteArrayOutputStream0.toByteArrayImpl();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(byteArray0, 9974, 1175);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      byteArrayOutputStream1.writeImpl(inputStream0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(21);
      byte[] byteArray0 = byteArrayOutputStream0.toByteArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1637), 21);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        byteArrayOutputStream0.writeImpl(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = (-329);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl((-329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -329
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write((byte[]) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = byteArrayOutputStream0.toByteArray();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, (-2698), (-2698));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      byteArrayOutputStream0.needNewBuffer(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(9965);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write((InputStream) pipedInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        unsynchronizedByteArrayOutputStream0.write((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = 1586015820;
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(1586015820);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1586015820
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = (-1276);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toString("");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = (-1137);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toByteArrayImpl();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = (-1917);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toByteArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 3073;
      byte[] byteArray0 = byteArrayOutputStream0.toByteArray();
      assertEquals(3073, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write((-703));
      try { 
        unsynchronizedByteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 2034694062;
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 1246;
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(9977);
      byteArrayOutputStream0.writeTo(byteArrayOutputStream1);
      assertEquals(1024, byteArrayOutputStream1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(3066);
      unsynchronizedByteArrayOutputStream0.writeImpl(3066);
      unsynchronizedByteArrayOutputStream0.toInputStream();
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
      
      unsynchronizedByteArrayOutputStream0.resetImpl();
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3066);
      byteArrayOutputStream0.count = 3066;
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      InputStream inputStream1 = UnsynchronizedByteArrayOutputStream.toBufferedInputStream(inputStream0);
      assertNotSame(inputStream0, inputStream1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      byteArrayOutputStream0.count = 26;
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write(26);
      unsynchronizedByteArrayOutputStream0.writeTo(byteArrayOutputStream0);
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.needNewBuffer(0);
      byteArrayOutputStream0.resetImpl();
      byteArrayOutputStream0.needNewBuffer(342);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(3066);
      String string0 = unsynchronizedByteArrayOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      InputStream inputStream1 = ByteArrayOutputStream.toBufferedInputStream(inputStream0);
      assertSame(inputStream1, inputStream0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteArrayOutputStream0.toString(charset0);
      assertEquals("", string0);
  }
}
