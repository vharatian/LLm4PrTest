/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:11:24 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.input.ReaderInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ReaderInputStream_ESTest extends ReaderInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7C:QP62P05sv");
      byte[] byteArray0 = new byte[9];
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      int int0 = readerInputStream0.read(byteArray0, 4, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("99W{waP1Ohy})#");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0, charsetEncoder0, 6);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("99W{waP1;Ohy})#");
      Charset charset0 = Charset.defaultCharset();
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0, charset0, (byte)51);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0, charset0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[14];
      int int0 = readerInputStream0.read(byteArray0, 0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      float float0 = ReaderInputStream.minBufferSize(charsetEncoder0);
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      int int0 = ReaderInputStream.checkMinBufferSize(charsetEncoder0, 128);
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read((byte[]) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[7C:QP62P05sv");
      byte[] byteArray0 = new byte[7];
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, 1610612736, 1610612736);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[7C:QP62P05sv");
      byte[] byteArray0 = new byte[7];
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      stringReader0.close();
      try { 
        readerInputStream0.read(byteArray0, 1610612736, 1610612736);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = new byte[4];
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0, charsetEncoder0, (byte)30);
      readerInputStream0.read(byteArray0);
      ReaderInputStream readerInputStream1 = new ReaderInputStream(stringReader0, charsetEncoder0);
      // Undeclared exception!
      try { 
        readerInputStream1.read(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = FLUSHED, new state = CODING_END
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9W{@lu1;Shy)#");
      stringReader0.close();
      byte[] byteArray0 = new byte[2];
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      try { 
        readerInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      readerInputStream0.close();
      try { 
        readerInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReaderInputStream.minBufferSize((CharsetEncoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReaderInputStream.checkMinBufferSize((CharsetEncoder) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      // Undeclared exception!
      try { 
        ReaderInputStream.checkMinBufferSize(charsetEncoder0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -1 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0&D");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, (CharsetEncoder) null, 766);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, charsetEncoder0, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -13 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (Charset) null, (-148));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("skipOan");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, "skipOan", 998);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // skipOan
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, "}", 125);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, "X");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")0I");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[1];
      int int0 = readerInputStream0.read(byteArray0, 0, 1);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[1];
      int int0 = readerInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("99W{waP1;Ohy})#");
      byte[] byteArray0 = new byte[3];
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      int int0 = readerInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)57, (byte)87}, byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      int int0 = readerInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, 1125, 1125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size=0, offset=1125, length=1125
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, (-3019), 76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size=0, offset=-3019, length=76
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, (-752), (-752));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size=0, offset=-752, length=-752
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      int int0 = readerInputStream0.read();
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      long long0 = readerInputStream0.skip(3286L);
      assertEquals(131L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      readerInputStream0.read();
      // Undeclared exception!
      try { 
        readerInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = FLUSHED, new state = CODING_END
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, charset0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size 0 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (CharsetEncoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (String) null, 185);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }
}
