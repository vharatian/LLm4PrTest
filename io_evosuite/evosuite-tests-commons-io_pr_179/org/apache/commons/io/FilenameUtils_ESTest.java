/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:33:28 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("{Z9{r\u0006");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("\u0000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.getPath("~Ul6p/");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = FilenameUtils.normalize("k60yO>`zPp#znp*G");
      assertEquals("k60yO>`zPp#znp*G", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = FilenameUtils.concat("g:", "g:");
      assertEquals("g:/g:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = FilenameUtils.concat("Uom]", "C~r+~..");
      assertNotNull(string0);
      assertEquals("Uom]/C~r+~..", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = FilenameUtils.normalize("u", false);
      assertEquals("u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = FilenameUtils.normalize("-:_>|8+UWwPt;8kh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = FilenameUtils.normalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("/");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("}");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("org.junitpioneer.jupiter.params.FloatRange/[KS1vrc9U$$");
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = FilenameUtils.getName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "?B(CkGG>ol5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = FilenameUtils.concat("//", "EW9kDD^o.[7oDj2=L/Yx%on!YClIa");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("yF", "", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("e%J`~ $aVn]*&u", "Advice for ", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("u%8W.Jg ^Vg]e(%!2*");
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch(string0, "u%8W.Jg ^Vg]e(%!2*/u%8W", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("LF{ *HNM-3(", "LF{ *HNM-3(", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("';{xn)[", "*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("?", "?", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("BA|gsYq0An'", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, "M|zxn[", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("ho3KWLb^%0lT\"i#1<K9", "::", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("::", "'7BVHM I<3Q<pbrM", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("*", "*", false, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, "TMFM)e05g**", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, false, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("p$gQ-A,", (String) null, false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("Jg ^Vg]e(%!2*");
      assertEquals("Jg ^Vg]e(%!2*", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals("DoubleRange", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FilenameUtils.getName("2T:");
      assertEquals("2T:", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("//J/L9Z`TC#FG^zyT");
      assertNotNull(string0);
      assertEquals("//J", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = FilenameUtils.getPath("#&1OF7H84D9/%sxC");
      assertNotNull(string0);
      assertEquals("#&1OF7H84D9/", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~Ul6p");
      assertEquals("~Ul6p/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("U:/yKNp6~]n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("zqCbPZZ+AIV-#y.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("//J/L9Z`TC#FG^zyT");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("//");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("IO7wJ]5}0G!8\".RW[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/:FVIBLe?gs");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("g:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("-:_5|wWUWPt;8kh");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~uT-YKB-GIG/].H");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(":@");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix(",[kSR8KYC\" ");
      assertEquals(",[kSR8KYC\" ", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = FilenameUtils.concat("Directory must not be null", ".");
      assertNotNull(string0);
      assertEquals("Directory must not be null/", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = FilenameUtils.concat("//", "7Ay8y:iA'\\uN");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("~D/", "| }zMRi**=g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("Direc$ory must`not be null", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("L9{X*H?M<Ip", "L9{X*H?M<Ip");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-1| ]73|%");
      boolean boolean0 = FilenameUtils.isExtension("-1| ]73|%", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension("'.", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension(" TKA%[z>XxJL MLz`Pp", (Collection<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = FilenameUtils.isExtension("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("_.ywi2cJ&'Wl_ 8Go", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("2", (String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[34];
      boolean boolean0 = FilenameUtils.isExtension(stringArray0[29], stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("q;Z5%yI^8.LJnI:{]b", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("2", "2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("CaQtesianProductTest can only take exactly one type of argumnts source", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("^[a-zA-Z0-9][a-zAnZ0-9-E*$", ":[Q;E+@&c<uAdhPCX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem((String) null, "0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("MCsf.sx&~q5U}@q");
      assertEquals("MCsf", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = FilenameUtils.isExtension("\"C<.z", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalized("\u0000", "\u0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("inline");
      assertEquals("inline", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("_:E0kN `c$.,6.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = FilenameUtils.getPath("~IAKW");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FilenameUtils.getPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("/`o");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("~.W69P:VUF:]Gx[");
      assertEquals("~.W69P:VUF:]Gx[/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("~/X|");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("/:");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("l:V[KN0b");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("^:2sifD");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~=]|WRm>=cVcQ7");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("kX|s9heAuKME", "~/X|", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("/");
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("//J/L9Z`T@|C#FG^zyT");
      assertEquals("\\\\J\\L9Z`T@|C#FG^zyT", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("\u0000");
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("Directory must not be null/Directory must not be null", "Directory must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("mxt^OXnz", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.directoryContains((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("j", "j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "g:");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = FilenameUtils.concat("\\NQ2'/\"&{", "\\NQ2'/\"&{");
      assertEquals("/NQ2'/\"&{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("~.W9P:VUF:]Gx[");
      assertNotNull(string0);
      assertEquals("~.W9P:VUF:]Gx[/", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("..", "..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = FilenameUtils.normalize("C.");
      assertEquals("C.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.concat(".", ".");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("[//", "[//");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("3ff-j{rz", true);
      assertNotNull(string0);
      assertEquals("3ff-j{rz", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("x4hwr*i ", false);
      assertNotNull(string0);
      assertEquals("x4hwr*i ", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = FilenameUtils.normalize("::", true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\JL9Z`T@|C#FG^zyT");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized(".:`7yG$td-", ".:`7yG$td-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("{0-9]+}", "\"4Syp|EGlm3S%GC]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = FilenameUtils.getPath("-:_5|wWfWPt;8kh");
      assertNull(string0);
  }
}
