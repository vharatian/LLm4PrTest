/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:27:12 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("?", "?", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertEquals("path name", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("~");
      assertNotNull(string0);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("~S/Hm&xurPrxCk!b");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = FilenameUtils.getPath("~rg|9[NH!-V]j");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = FilenameUtils.concat("~S/Hm&xurPrxCk!b", "~SHm&xurPrxCk!b");
      assertEquals("~SHm&xurPrxCk!b/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals("0.#", "", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("\\) 2O");
      assertNotNull(string0);
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("k:i[fi+5bR/V&UBq2");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("*", "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = FilenameUtils.normalize((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = FilenameUtils.normalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("/,>}GsYG-X>cDG1FX");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("}3Rhmv/");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("net.bytebuddy.description.type.TypeDescription$Generic");
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("`&9zbY4/}A^n5");
      assertEquals("`&9zbY4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = FilenameUtils.getPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = FilenameUtils.getName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("cR!e=,se)W'Nz>o6$b", "cR!e=,se)W'Nz>o6$b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("Df_dhe^u04", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "EC_Xay=]O=Wjxl_oYN");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "^Sr_(?=q:]w8", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("Cj*g!D{", "*/", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("Illegal range. There's no way to get from %s to %s with a step of %s.", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?zxertjX.{mMx ", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("\"8h_1@0&??[YO!O1", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, "", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals(".", ":", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals("::", "NTFS ADS separator (':') in file name is forbidden.", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("", "", false, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, "net.bytebuddy.build.Plugin$Compound", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, true, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.equals("'Sn+", (String) null, false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("pMs~$zX|sc.5$");
      assertEquals("pMs~$zX|sc", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("net.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertEquals("AuxiliaryType", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("vuyO/ua9YL8vb!mS");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = FilenameUtils.getName("Illegal range. Equal from and to will produce an empty range.");
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("\\Cd4>^L45o m?");
      assertNotNull(string0);
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("sJdQ:");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("RSij:");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("\\Cd4");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("//RSij/vM5N9 2|O");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("org");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/:La9St\"W$\"w;di4");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("^:2O$");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~M65$LM");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("?");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("::");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("net.bytebuddy.build.HashCodeAndEqualsPlugin");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = FilenameUtils.concat(" ty", ".");
      assertNotNull(string0);
      assertEquals(" ty/", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("24m8/M", "gq+h3qNz#Sl_xiZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("IDSU5a3**");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("iQD>q-':==Q^D0", "*k\"Q,8o+{e@RoH9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", "*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("Xc{^O{LZ;~Y(\"y[*?O?", "Xc{^O{LZ;~Y(\"y[*?O?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("p#<YaTOKY>*c#c[Y/p#<YaTOKY>*c#c[Y", "p#<YaTOKY>*c#c[Y", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("net.bytebuddy.build.Plugin$Compound");
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.build.Plugin$Compound", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.build.Plugin$Compound", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("~rg|9[NH!-V]j", (Collection<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("");
      boolean boolean0 = FilenameUtils.isExtension("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("'*&k]~w+coQ;", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.build.HashCodeAndEqualsPlugin$AnnotationOrderComparator", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.asm.Advice$OnNonDefaultValue", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("9kZ@U)*^", "::");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("<7I</..", ",CoMb[u1GlD&7+'aH;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = FilenameUtils.isExtension("x", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("-o}}\t#sv?Q?w}r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = FilenameUtils.getPath("Si[fiJ+5bR/k'7#q2");
      assertEquals("Si[fiJ+5bR/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~S");
      assertEquals("~S/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = FilenameUtils.getPath("\\uSi:vM5N9 2|O");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\ ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("//S/ 2");
      assertEquals("//S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("i:");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath(":pR]-N%w+w$n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~S/Hm&xurPrxCk!b");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("/REnX5SEh");
      assertEquals("\\REnX5SEh", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("cR!e=,se)W'Nz>o56$b");
      assertEquals("cR!e=,se)W'Nz>o56$b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("U", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("?Wq_\"T(6a", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.directoryContains((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("AgpHRb`+nJ,l/Ff;dI", "AgpHRb`+nJ,l/Ff;dI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "hM]B9[<?\"C");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = FilenameUtils.concat("\\S:}ov 2|O", "\\S:}ov 2|O");
      assertEquals("/S:}ov 2|O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = FilenameUtils.concat("inline", "<7I</..");
      assertEquals("inline/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = FilenameUtils.concat("<k7GIX<A}..", "<k7GIX<A}..");
      assertEquals("<k7GIX<A}../<k7GIX<A}..", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("..");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = FilenameUtils.concat(".", ".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = FilenameUtils.normalize("]B\\8Y");
      assertEquals("]B/8Y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = FilenameUtils.concat("i1w<foU,,p2W9t.)|/", "i1w<foU,,p2W9t.)|/");
      assertNotNull(string0);
      assertEquals("i1w<foU,,p2W9t.)|/i1w<foU,,p2W9t.)|/", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = FilenameUtils.normalize("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("&@)26{;4o", true);
      assertNotNull(string0);
      assertEquals("&@)26{;4o", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("x", false);
      assertEquals("x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = FilenameUtils.normalize("me]S`GX0D.p", true);
      assertNotNull(string0);
      assertEquals("me]S`GX0D.p", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("<7I</..", "<7I</..");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("+.");
      assertNotNull(string0);
      assertEquals("+.", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = FilenameUtils.concat("<7I</..", "<7I</..");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("9Q6dma,Gm", "9Q6dma,Gm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("\\Cd4>^L45o m");
      assertEquals("\\", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("h");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = FilenameUtils.getPath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("");
      assertNotNull(string0);
      assertEquals("", string0);
  }
}
