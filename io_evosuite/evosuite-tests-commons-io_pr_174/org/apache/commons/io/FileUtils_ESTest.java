/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:03:20 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.StandardCopyOption;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.MinguoDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(768);
      assertNotNull(zoneOffset0);
      
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      assertNotNull(clock0);
      
      Duration duration0 = Duration.ofDays(768);
      assertNotNull(duration0);
      
      Clock clock1 = MockClock.offset(clock0, duration0);
      assertFalse(clock1.equals((Object)clock0));
      assertNotNull(clock1);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock1);
      assertFalse(clock0.equals((Object)clock1));
      assertFalse(clock1.equals((Object)clock0));
      assertNotNull(hijrahDate0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0);
      assertFalse(boolean0);
      assertFalse(clock0.equals((Object)clock1));
      assertFalse(clock1.equals((Object)clock0));
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("%,d exceptions: %s");
      assertEquals("%,d exceptions: %s", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      File file0 = FileUtils.getTempDirectory();
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      FileUtils.copyDirectory(file0, (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      FileUtils.writeStringToFile((File) mockFile0, "=^n", true);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(3L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U6@?`L=cf[nB;dD~L", "U6@?`L=cf[nB;dD~L");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      FileUtils.writeStringToFile((File) mockFile0, "5", charset0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/U6@?`L=cf[nB;dD~L", mockFile0.getParent());
      assertEquals("U6@?`L=cf[nB;dD~L", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/U6@?`L=cf[nB;dD~L/U6@?`L=cf[nB;dD~L", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "'71;t:Iu");
      assertNotNull(mockFile0);
      
      FileUtils.writeStringToFile((File) mockFile0, "'71;t:Iu");
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(8L, mockFile0.length());
      assertEquals("/'71;t:Iu", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.getParent());
      assertEquals("'71;t:Iu", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("url", file0.getName());
      assertNotNull(file0);
      
      FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, false);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("url", file0.getName());
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d7%Pf><T[N`lim", "d7%Pf><T[N`lim");
      assertNotNull(mockFile0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("d7%Pf><T[N`lim"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayList0, "d7%Pf><T[N`lim", false);
      assertFalse(arrayList0.contains("d7%Pf><T[N`lim"));
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/d7%Pf><T[N`lim/d7%Pf><T[N`lim", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/d7%Pf><T[N`lim", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("d7%Pf><T[N`lim", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 2Xe}z");
      assertNotNull(mockFile0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("H{FgIP^ 2Xe}z"));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) stack0, true);
      assertFalse(stack0.contains(true));
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1>]Op}@r1wQ8%:w", "H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      Vector<File> vector0 = new Vector<File>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) vector0, "");
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/1>]Op}@r1wQ8%:w/H{FgIP^ 42Xe}z", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/1>]Op}@r1wQ8%:w", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "onR$aSFrg9ne";
      File file0 = FileUtils.getFile(stringArray0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("onR$aSFrg9ne", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("onR$aSFrg9ne", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(1, stringArray0.length);
      assertNotNull(file0);
      
      FileUtils.writeLines(file0, (String) null, (Collection<?>) null);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("onR$aSFrg9ne", file0.getName());
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("onR$aSFrg9ne", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("file");
          assertNotNull(mockFile0);
          
          File file0 = MockFile.createTempFile("file", "f&ile", (File) mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile0);
          assertFalse(file0.equals((Object)mockFile0));
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isFile());
          assertEquals("file", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("file", mockFile0.getName());
          assertEquals("file0f&ile", file0.getName());
          assertTrue(file0.exists());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/file", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/file/file0f&ile", file0.toString());
          assertNotNull(file0);
          
          boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
          assertFalse(boolean0);
          assertNotSame(mockFile0, file0);
          assertFalse(mockFile0.equals((Object)file0));
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isFile());
          assertEquals("file", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("file", mockFile0.getName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("zHicmjH*O62EBF%cnY", "/fake/but/wellf");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) fileFileFilter0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/zHicmjH*O62EBF%cnY/fake/but/wellf", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/zHicmjH*O62EBF%cnY/fake/but", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("wellf", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File[] fileArray0 = MockFile.listRoots();
      assertEquals(1, fileArray0.length);
      assertNotNull(fileArray0);
      
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(1, fileArray0.length);
      assertEquals(1, uRLArray0.length);
      assertNotNull(uRLArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = MockFile.createTempFile("yEj&{tuJ\"j\"w ?c", "2 KB");
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/yEj&{tuJ\"j\"w ?c02 KB", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("yEj&{tuJ\"j\"w ?c02 KB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[3];
      FileUtils.writeByteArrayToFile(file0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/yEj&{tuJ\"j\"w ?c02 KB", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("yEj&{tuJ\"j\"w ?c02 KB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(3L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(3, byteArray0.length);
      
      URL uRL0 = file0.toURL();
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/yEj&{tuJ\"j\"w ?c02 KB", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("yEj&{tuJ\"j\"w ?c02 KB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(3L, file0.length());
      assertTrue(file0.canExecute());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("c02 KB", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      File file1 = FileUtils.toFile(uRL0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file1.equals((Object)file0));
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/yEj&{tuJ\"j\"w ?c02 KB", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("yEj&{tuJ\"j\"w ?c02 KB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(3L, file0.length());
      assertTrue(file0.canExecute());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("c02 KB", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(3L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("yEj&{tuJ\"j\"w ?c02 KB", file1.getName());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("/tmp/yEj&{tuJ\"j\"w ?c02 KB", file1.toString());
      assertTrue(file1.isFile());
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", "", 4296, "qlb~m/g[.?*$ba");
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(":4296", uRL0.getAuthority());
      assertEquals("qlb~m/g[.", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("qlb~m/g[.?*$ba", uRL0.getFile());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(4296, uRL0.getPort());
      assertEquals("*$ba", uRL0.getQuery());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(":4296", uRL0.getAuthority());
      assertEquals("qlb~m/g[.", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("qlb~m/g[.?*$ba", uRL0.getFile());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(4296, uRL0.getPort());
      assertEquals("*$ba", uRL0.getQuery());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("qlb~m", file0.getParent());
      assertEquals("qlb~m/g[.?*$ba", file0.toString());
      assertFalse(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("g[.?*$ba", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      URL uRL0 = file0.toURL();
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      File file1 = FileUtils.toFile(uRL0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file1.equals((Object)file0));
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertEquals("/tmp", file1.toString());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals("tmp", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/", file1.getParent());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[7];
      Stream<File> stream0 = FileUtils.streamFiles(mockFile0, false, stringArray0);
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(7, stringArray0.length);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 2Xe}z");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "H{FgIP^ 2Xe}z");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 2Xe}z/H{FgIP^ 2Xe}z", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(1L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("H{FgIP^ 2Xe}z", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 2Xe}z", mockFile1.getParent());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1, byteArray0.length);
      
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 2Xe}z");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1, byteArray0.length);
      
      List<String> list0 = FileUtils.readLines((File) mockFile0);
      assertFalse(list0.contains("H{FgIP^ 2Xe}z"));
      assertFalse(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("H{FgIP^ 2Xe}z", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "net.bytebuddy.build.Plugin$Factory$UsingReflection", false);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(50L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = FileUtils.readFileToString((File) mockFile0, charset0);
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection", string0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(50L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' contains '");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[4];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("' contains '", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(4L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("' contains '", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(4, byteArray0.length);
      
      String string0 = FileUtils.readFileToString((File) mockFile0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertEquals("' contains '", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(4L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("' contains '", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(">M-_7>]4q'jzY6l", "", file0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals(">M-_7>]4q'jzY6l0", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/tmp/>M-_7>]4q'jzY6l0", file1.toString());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("/tmp", file1.getParent());
      assertNotNull(file1);
      
      FileUtils.write(file1, (CharSequence) "/home/azureuser", true);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals(">M-_7>]4q'jzY6l0", file1.getName());
      assertEquals(15L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/tmp/>M-_7>]4q'jzY6l0", file1.toString());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("/tmp", file1.getParent());
      
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals(">M-_7>]4q'jzY6l0", file1.getName());
      assertEquals(15L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/tmp/>M-_7>]4q'jzY6l0", file1.toString());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("/tmp", file1.getParent());
      assertEquals(15, fileInputStream0.available());
      assertNotNull(fileInputStream0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("ftp");
      assertNotNull(suffixFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, suffixFileFilter0, suffixFileFilter0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("' after copy to '", iOCase0);
      assertNotNull(prefixFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) prefixFileFilter0, (IOFileFilter) prefixFileFilter0);
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      
      LineIterator lineIterator0 = FileUtils.lineIterator((File) mockFile0, (String) null);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/gb31%'|tyi0[4)Vh+Z3", "/tmp/gb31%'|tyi0[4)Vh+Z3", (File) null);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/tmp/gb31%'|tyi0[4)Vh+Z30/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/tmp/gb31%'|tyi0[4)Vh+Z30/tmp/gb31%'|tyi0[4)Vh+Z3", file0.toString());
      assertEquals("gb31%'|tyi0[4)Vh+Z3", file0.getName());
      assertNotNull(file0);
      
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/tmp/gb31%'|tyi0[4)Vh+Z30/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/tmp/gb31%'|tyi0[4)Vh+Z30/tmp/gb31%'|tyi0[4)Vh+Z3", file0.toString());
      assertEquals("gb31%'|tyi0[4)Vh+Z3", file0.getName());
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, fileFileFilter0, fileFileFilter0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("", 123);
      assertNotNull(regexFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) regexFileFilter0, (IOFileFilter) regexFileFilter0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5K*ydzdX-@fGe", "5K*ydzdX-@fGe");
      assertNotNull(mockFile0);
      
      MockDate mockDate0 = new MockDate((-2712), (-2712), (-2712));
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/5K*ydzdX-@fGe", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/5K*ydzdX-@fGe/5K*ydzdX-@fGe", mockFile0.toString());
      assertEquals("5K*ydzdX-@fGe", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("Fri Jul 29 00:00:00 GMT 1047", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/tmp/home/azureuser0/home/azureuser", file0.toString());
      assertEquals("/tmp/home/azureuser0/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/tmp/home/azureuser0/home/azureuser", file0.toString());
      assertEquals("/tmp/home/azureuser0/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate((-115));
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertFalse(boolean0);
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H{FgIP^ 42Xe}z";
      stringArray0[1] = "H{FgIP^ 42Xe}z";
      stringArray0[2] = "$x81@f";
      File file1 = FileUtils.getFile(stringArray0);
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(3, stringArray0.length);
      assertNotNull(file1);
      
      FileUtils.moveToDirectory(file0, file1, true);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(3, stringArray0.length);
      
      File file2 = FileUtils.getTempDirectory();
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertEquals("tmp", file2.getName());
      assertEquals("/tmp", file2.toString());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("/", file2.getParent());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.canWrite());
      assertTrue(file2.isFile());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canExecute());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertNotNull(file2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/tmp";
      File file0 = FileUtils.getFile(stringArray0);
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(1, stringArray0.length);
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "' exists but is not a directory";
      stringArray0[1] = "sourceIterable";
      stringArray0[2] = ".";
      File file0 = FileUtils.getFile(stringArray0);
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isHidden());
      assertEquals(".", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' exists but is not a directory/sourceIterable/.", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' exists but is not a directory/sourceIterable", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals(3, stringArray0.length);
      assertNotNull(file0);
      
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isHidden());
      assertEquals(".", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' exists but is not a directory/sourceIterable/.", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' exists but is not a directory/sourceIterable", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertEquals(".", file1.getName());
      assertTrue(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' exists but is not a directory/sourceIterable/./' exists but is not a directory/sourceIterable", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' exists but is not a directory/sourceIterable/./' exists but is not a directory/sourceIterable/.", file1.toString());
      assertFalse(file1.canWrite());
      assertEquals(3, stringArray0.length);
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertSame(file0, file1);
      assertSame(file1, file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals("/", file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals("tmp", file1.getName());
      assertEquals("/tmp", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isFile());
      assertEquals(0, stringArray0.length);
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(")", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(")", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(")", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertEquals(")", file0.getName());
      assertFalse(file0.exists());
      assertNull(file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0, stringArray0.length);
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("}~%9U6I2o5FDWR+Q{I", "}~%9U6I2o5FDWR+Q{I");
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.canRead());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/}~%9U6I2o5FDWR+Q{I0}~%9U6I2o5FDWR+Q{I", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("}~%9U6I2o5FDWR+Q{I0}~%9U6I2o5FDWR+Q{I", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      
      boolean boolean0 = FileUtils.directoryContains(file0, file1);
      assertTrue(boolean0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertTrue(file1.canRead());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/}~%9U6I2o5FDWR+Q{I0}~%9U6I2o5FDWR+Q{I", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("}~%9U6I2o5FDWR+Q{I0}~%9U6I2o5FDWR+Q{I", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertNotNull(fileOutputStream0);
      
      fileOutputStream0.write(9);
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(fileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) mockPrintStream0);
      assertEquals(1L, long0);
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(2L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "", "iUVI8", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // iUVI8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("app9endable", "app9endable");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "/tmp/home/azureuser/tmp", "app9endable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // app9endable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, " is not a directory", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.writeStringToFile(file0, (String) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "http");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      try { 
        FileUtils.writeLines(file0, (Collection<?>) treeSet0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      TreeSet<File> treeSet0 = new TreeSet<File>();
      assertNotNull(treeSet0);
      
      try { 
        FileUtils.writeLines(file0, (Collection<?>) treeSet0, "user.home", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("net.bytebuddy.build.Plugin$Factory$UsingReflection", "JLyvyf\"^/DvWRT", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0JLyvyf\"^", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0JLyvyf\"^/DvWRT", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("DvWRT", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      LinkedList<File> linkedList0 = new LinkedList<File>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, "6#X&7\"L(");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("914 bytes");
      assertNotNull(mockFile0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("914 bytes"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "sourceDir", (Collection<?>) stack0, false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sourceDir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = file0.delete();
      assertTrue(boolean0);
      assertFalse(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "' after copy to '", (Collection<?>) arrayDeque0, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' after copy to '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "http", (Collection<?>) linkedHashSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector<Proxy.Type> vector0 = new Vector<Proxy.Type>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "fSZwCvu*o@Z*x\"^", (Collection<?>) vector0, "fSZwCvu*o@Z*x\"^", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("date", "date");
      assertNotNull(mockFile0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains("date"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "date", (Collection<?>) arrayDeque0, "($Tzvea@");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // date
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Z]f[WB3vOWRGP 238", (Collection<?>) treeSet0, "l+8N,A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("H{FgIP^ 42Xe}z"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "file", (Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "H{FgIP^ 42Xe}z", (Collection<?>) null);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // H{FgIP^ 42Xe}z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("net.bytebuddy.build.Plugin$Factory$UsingReflection", "net.bytebuddy.build.Plugin$Factory$UsingReflection", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        FileUtils.writeLines((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/file", (Collection<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File 'H{FgIP^ 42Xe}z' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-2355), 479, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d7%Pf><T[N`lim");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-391), 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -391
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-831), (-831));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("net.bytebuddy.build.Plugin$Factory$UsingReflection", "net.bytebuddy.build.Plugin$Factory$UsingReflection", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.toString());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.build.Plugin$Factory$UsingReflection/net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "H{FgIP^ 2Xe}z", charset0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File 'net.bytebuddy.build.Plugin$Factory$UsingReflection' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "file", "file", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "appendable", "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "1 MB", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "H{FgIP^ 42Xe}z", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("app9endap}ble", "app9endap}ble");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.touch(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /fake/but/wellformed/url does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("url", file0.getName());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /fake/but/wellformed/url does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The magic number must contain at least one byte", "The magic number must contain at least one byte");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/The magic number must contain at least one byte/The magic number must contain at least one byte' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) mockFile0, "5Nam0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 5Nam0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JHfqVpTqy<#jh", "JHfqVpTqy<#jh");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/JHfqVpTqy<#jh/JHfqVpTqy<#jh' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "/home");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("date", "date");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/date/date' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/net.bRtebuddy.description.type.TypeDescription$Generic/net.bRtebuddy.description.type.TypeDescription$Generic' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":H{FgIP^~2Xe}z", ":H{FgIP^~2Xe}z");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(mockFile0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'appendable' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("date");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'date' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertEquals("/tmp/home/azureuser0/home/azureuser", file0.toString());
      assertEquals("/tmp/home/azureuser0/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, notFileFilter0, notFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/home/azureuser0/home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile("' exists but is a directory", "\"&|h{(Vd}Z7=;WvUS");
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/' exists but is a directory0\"&|h{(Vd}Z7=;WvUS", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("' exists but is a directory0\"&|h{(Vd}Z7=;WvUS", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (String[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/' exists but is a directory0\"&|h{(Vd}Z7=;WvUS
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!QGhk98dg)~W,GY(B4";
      stringArray0[1] = "Brv?*JYNt!No5&GRHr";
      stringArray0[2] = "xK;X";
      stringArray0[3] = "/home/azureuser/LLm4PrTest/ io_experiments/R+SUL3YhDva4w>lfb/'O'[lM^Eh%{w4QYrm";
      stringArray0[4] = ">JM}*-_4`KscF#K'G|";
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(nameFileFilter0);
      
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(nameFileFilter0);
      assertEquals(5, stringArray0.length);
      assertNotNull(pathVisitorFileFilter0);
      
      // Undeclared exception!
      FileUtils.listFiles(file0, (IOFileFilter) pathVisitorFileFilter0, (IOFileFilter) pathVisitorFileFilter0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      assertNotNull(directoryFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (IOFileFilter) directoryFileFilter0, (IOFileFilter) directoryFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: H{FgIP^ 42Xe}z
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile("-][LR`]bm:k7U", "-][LR`]bm:k7U");
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/-][LR`]bm:k7U0-][LR`]bm:k7U", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("-][LR`]bm:k7U0-][LR`]bm:k7U", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "ftp");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ftp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("net.bytebuddy.build.Plugin$Factory$UsingReflection", "JLyvyf\"^/DvWRT", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0JLyvyf\"^", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("DvWRT", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/H{FgIP^ 42Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0JLyvyf\"^/DvWRT", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "]gh7D");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]gh7D
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "iF14_>@>uK ^>XpX-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "' Expected length: ";
      stringArray0[1] = "&B";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' Expected length: ", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("&B", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' Expected length: /&B", file0.toString());
      assertEquals(2, stringArray0.length);
      assertNotNull(file0);
      
      try { 
        FileUtils.lineIterator(file0, "&B");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/' Expected length: /&B' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U^Odwf*G4~28", "U^Odwf*G4~28");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/U^Odwf*G4~28/U^Odwf*G4~28' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.description.type.TypeDescription$Generic");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (String[]) null, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: net.bytebuddy.description.type.TypeDescription$Generic
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("url", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /fake/but/wellformed/url
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 2015L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Z|CwsD_'}");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/tmp/home/azureuser/LLm4PrTest/ io_experiments/lUy4b#rnP:F:sG/home/azureuser/LLm4PrTest/ io_experiments/gb31%'|tyi/home/azureuser/LLm4PrTest/ io_experiments/gb31%'|tyi/gb31%'|tyi";
      stringArray0[1] = "Unable to set the last modification time for ";
      stringArray0[2] = "w$mL.~";
      stringArray0[3] = "(FsxXv,g`OJ";
      stringArray0[4] = "^00d~AO%_B~f8+}V~M";
      stringArray0[5] = ":";
      stringArray0[6] = "/tmp/tmp/tmp";
      stringArray0[7] = "com.google.common.jimfs.BasicAttributeProvider";
      stringArray0[8] = "/home/azureuser/LLm4PrTest/ io_experiments/'/net.bytebuddy.build.Plugin$Factory$UsingReflection/net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection";
      File file0 = FileUtils.getFile(stringArray0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals("/tmp/home/azureuser/LLm4PrTest/ io_experiments/lUy4b#rnP:F:sG/home/azureuser/LLm4PrTest/ io_experiments/gb31%'|tyi/home/azureuser/LLm4PrTest/ io_experiments/gb31%'|tyi/gb31%'|tyi/Unable to set the last modification time for /w$mL.~/(FsxXv,g`OJ/^00d~AO%_B~f8+}V~M/:/tmp/tmp/tmp/com.google.common.jimfs.BasicAttributeProvider/home/azureuser/LLm4PrTest/ io_experiments/'/net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.getName());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/home/azureuser/LLm4PrTest/ io_experiments/lUy4b#rnP:F:sG/home/azureuser/LLm4PrTest/ io_experiments/gb31%'|tyi/home/azureuser/LLm4PrTest/ io_experiments/gb31%'|tyi/gb31%'|tyi/Unable to set the last modification time for /w$mL.~/(FsxXv,g`OJ/^00d~AO%_B~f8+}V~M/:/tmp/tmp/tmp/com.google.common.jimfs.BasicAttributeProvider/home/azureuser/LLm4PrTest/ io_experiments/'/net.bytebuddy.build.Plugin$Factory$UsingReflection/net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(9, stringArray0.length);
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/foo.bar does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 4352L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("file", "file");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.forceMkdirParent(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory /home/azureuser/LLm4PrTest/ io_experiments/file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/U <$*<Ft/U <$*<Ft/tmp");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/U <$*<Ft/U <$*<Ft/tmp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // H{FgIP^ 42Xe}z is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("date");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, (File) mockFile0, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 11, (-64484032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, 60, 60);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-25), 16);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.InjectionClassLoader");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pushbackInputStream0, mockFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add(file0);
      assertTrue(boolean0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.description.type.TypeDescription$Generic");
      assertNotNull(mockFile0);
      
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add(mockFile0);
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("net.bytebuddy.description.type.TypeDescription$Generic", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("net.bytebuddy.description.type.TypeDescription$Generic", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'net.bytebuddy.description.type.TypeDescription$Generic' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      assertFalse(file0.isHidden());
      assertEquals("/tmp/home/azureuser0/home/azureuser", file0.toString());
      assertEquals("/tmp/home/azureuser0/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/home/azureuser0/home/azureuser' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 396, (byte) (-68));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-393), byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(byteArrayInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "Pt");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 43);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(byteArrayInputStream0, mockFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",p10&?hcZ'm", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(fileOutputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.build.Plugin$Factory$UsingReflection", "net.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.build.Plugin$Factory$UsingReflection/net.bytebuddy.build.Plugin$Factory$UsingReflection' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unable to set the last modification time for ", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",p10&?hcZ'm");
      assertNotNull(mockFileOutputStream0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/7O.:8ck:g}#_@";
      stringArray0[1] = "ik!vb/";
      stringArray0[2] = "-ew)u@M}^vn}z";
      stringArray0[3] = "Ek|Q%:E &,?";
      stringArray0[4] = "##<ztkCZ;I&T#|BRVP";
      stringArray0[5] = "<=";
      stringArray0[6] = "' after copy to '";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals("/7O.:8ck:g}#_@/ik!vb/-ew)u@M}^vn}z/Ek|Q%:E &,?/##<ztkCZ;I&T#|BRVP/<=", file0.getParent());
      assertEquals("' after copy to '", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/7O.:8ck:g}#_@/ik!vb/-ew)u@M}^vn}z/Ek|Q%:E &,?/##<ztkCZ;I&T#|BRVP/<=/' after copy to '", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(7, stringArray0.length);
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/7O.:8ck:g}#_@/ik!vb/-ew)u@M}^vn}z/Ek|Q%:E &,?/##<ztkCZ;I&T#|BRVP/<=/' after copy to '' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("url", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("url", file0.getName());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Klu?";
      stringArray0[1] = "'U\"+_a";
      stringArray0[2] = "'U\"+_a";
      stringArray0[3] = "Klu?";
      stringArray0[4] = "'U\"+_a";
      stringArray0[5] = "Klu?";
      stringArray0[6] = "Klu?";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("Klu?", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Klu?/'U\"+_a/'U\"+_a/Klu?/'U\"+_a/Klu?", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Klu?/'U\"+_a/'U\"+_a/Klu?/'U\"+_a/Klu?/Klu?", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(7, stringArray0.length);
      assertNotNull(file0);
      
      // Undeclared exception!
      FileUtils.copyDirectoryToDirectory(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile("914 bytes", "914 bytes");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/914 bytes/914 bytes' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertEquals(3, standardCopyOptionArray0.length);
      assertNotNull(standardCopyOptionArray0);
      
      ArrayList<IOFileFilter> arrayList0 = new ArrayList<IOFileFilter>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      OrFileFilter orFileFilter0 = new OrFileFilter(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(orFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) orFileFilter0, false, (CopyOption[]) standardCopyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals("url", file0.getName());
      assertNotNull(file0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) andFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      assertEquals("false", falseFileFilter0.toString());
      assertNotNull(falseFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) falseFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http");
      assertNotNull(mockFile0);
      
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("", iOCase0);
      assertNotNull(wildcardFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) wildcardFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'http' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "'71;t:Iu");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/'71;t:Iu' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EEE, dd MMM yyyy HH:mm:ss 'GMT'", "H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/EEE, dd MMM yyyy HH:mm:ss 'GMT'/H{FgIP^ 42Xe}z does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertEquals(1L, adler32_0.getValue());
      assertNotNull(adler32_0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp is not a file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = MockFile.createTempFile(" does not exist", " does not exist");
      assertEquals(" does not exist0 does not exist", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/ does not exist0 does not exist", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.writeStringToFile(file0, "/fake/but/wellf", (Charset) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/file");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      FileUtils.writeStringToFile((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/file", charset0, false);
      assertEquals("file", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/file", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(47L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      Adler32 adler32_0 = new Adler32();
      assertEquals(1L, adler32_0.getValue());
      assertNotNull(adler32_0);
      
      Checksum checksum0 = FileUtils.checksum(mockFile0, adler32_0);
      assertSame(adler32_0, checksum0);
      assertSame(checksum0, adler32_0);
      assertEquals("file", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/file", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(47L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(2743472577L, adler32_0.getValue());
      assertEquals(2743472577L, checksum0.getValue());
      assertNotNull(checksum0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/fake/but/wellformed/url/azureuser");
      assertNotNull(mockFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("/fake/but/wellformed/url/azureuser"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "9[L.6k@@/N", (Collection<?>) linkedHashSet0, "9[L.6k@@/N", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9[L.6k@@/N
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFile mockFile0 = new MockFile("HNNgIP^ 42Xe}z", "Pt");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-2004318069), Integer.MAX_VALUE, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2004318069
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "Pt");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "H{FgIP^ 42Xe}z", charset0, true);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/Pt", mockFile0.toString());
      assertEquals("Pt", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(14L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertNotNull(file0);
      
      try { 
        FileUtils.streamFiles(file0, false, (String[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/azureuser", "$e|i5~p?/iFj(l");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/azureuser/$e|i5~p?/iFj(l", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp/azureuser/$e|i5~p?", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("iFj(l", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(fileOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      List<String> list0 = FileUtils.readLines((File) mockFile0, charset0);
      assertFalse(list0.contains("$e|i5~p?/iFj(l"));
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/azureuser/$e|i5~p?/iFj(l", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp/azureuser/$e|i5~p?", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("iFj(l", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = file0.delete();
      assertTrue(boolean0);
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, true);
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = MockFile.createTempFile("(xg|^WN", "Destination directory '");
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/(xg|^WN0Destination directory '", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("(xg|^WN0Destination directory '", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, false);
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/(xg|^WN0Destination directory '", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("(xg|^WN0Destination directory '", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertEquals("'", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("'", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      FileInputStream fileInputStream0 = FileUtils.openInputStream(mockFile0);
      assertEquals("'", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("'", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, fileInputStream0.available());
      assertNotNull(fileInputStream0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.toString());
      assertNotNull(file0);
      
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chronoZonedDateTime");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'chronoZonedDateTime' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "$<w0H} $1'k-Jj");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/$<w0H} $1'k-Jj
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 1392409281320L);
      assertFalse(boolean0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, 1000L);
      assertFalse(boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(",p10&?hcZ'm", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(fileOutputStream0);
      
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (-486L));
      assertTrue(boolean0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(",p10&?hcZ'm", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/azureuser");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (-89L));
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/azureuser", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("azureuser", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("appendable", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("appendable", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      boolean boolean1 = FileUtils.isFileNewer((File) mockFile0, 1392409281320L);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("appendable", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("appendable", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(fileOutputStream0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      FileUtils.copyToFile(mockFileInputStream0, mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals((-1), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "onR$aSFrg9ne";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals("onR$aSFrg9ne", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNull(file0.getParent());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("onR$aSFrg9ne", file0.toString());
      assertEquals(1, stringArray0.length);
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("iRQ(@7W4", "http");
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertEquals("/tmp/iRQ(@7W40http", file1.toString());
      assertEquals("iRQ(@7W40http", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertNotNull(file1);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/iRQ(@7W40http' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "^~Cxec^ROT");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/^~Cxec^ROT' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = MockFile.createTempFile("kcoVCUwuaU*0,{c/U", "^Z,gr'UDx!/%N^=sQ)");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp/kcoVCUwuaU*0,{c/U0^Z,gr'UDx!/%N^=sQ)", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("%N^=sQ)", file0.getName());
      assertEquals("/tmp/kcoVCUwuaU*0,{c/U0^Z,gr'UDx!", file0.getParent());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      File file1 = FileUtils.getUserDirectory();
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertEquals("azureuser", file1.getName());
      assertEquals("/home", file1.getParent());
      assertFalse(file1.isFile());
      assertEquals("/home/azureuser", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertNotNull(file1);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      try { 
        FileUtils.copyFile(file0, file1, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          assertNull(uRL0.getRef());
          assertEquals((-1), uRL0.getDefaultPort());
          assertEquals((-1), uRL0.getPort());
          assertEquals("file", uRL0.getProtocol());
          assertNull(uRL0.getUserInfo());
          assertEquals("some", uRL0.getHost());
          assertNull(uRL0.getQuery());
          assertEquals("some", uRL0.getAuthority());
          assertNotNull(uRL0);
          
          File file0 = FileUtils.toFile(uRL0);
          assertNull(uRL0.getRef());
          assertEquals((-1), uRL0.getDefaultPort());
          assertEquals((-1), uRL0.getPort());
          assertEquals("file", uRL0.getProtocol());
          assertNull(uRL0.getUserInfo());
          assertEquals("some", uRL0.getHost());
          assertNull(uRL0.getQuery());
          assertEquals("some", uRL0.getAuthority());
          assertTrue(file0.isFile());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("/fake/but/wellformed", file0.getParent());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.lastModified());
          assertFalse(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals("/fake/but/wellformed/url", file0.toString());
          assertFalse(file0.canRead());
          assertFalse(file0.canExecute());
          assertEquals("url", file0.getName());
          assertNotNull(file0);
          
          File file1 = MockFile.createTempFile("kcoVCUwuaU*0,{c/U", "^Z,gr'UDx!/%N^=sQ)");
          assertNotSame(file1, file0);
          assertFalse(file1.equals((Object)file0));
          assertFalse(file1.isDirectory());
          assertEquals(0L, file1.getTotalSpace());
          assertEquals(1392409281320L, file1.lastModified());
          assertTrue(file1.exists());
          assertEquals("/tmp/kcoVCUwuaU*0,{c/U0^Z,gr'UDx!", file1.getParent());
          assertEquals("%N^=sQ)", file1.getName());
          assertTrue(file1.isAbsolute());
          assertTrue(file1.isFile());
          assertTrue(file1.canExecute());
          assertTrue(file1.canWrite());
          assertTrue(file1.canRead());
          assertFalse(file1.isHidden());
          assertEquals(0L, file1.getUsableSpace());
          assertEquals("/tmp/kcoVCUwuaU*0,{c/U0^Z,gr'UDx!/%N^=sQ)", file1.toString());
          assertEquals(0L, file1.length());
          assertEquals(0L, file1.getFreeSpace());
          assertNotNull(file1);
          
          CopyOption[] copyOptionArray0 = new CopyOption[4];
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file1, file0, false, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/fake/but/wellformed/url\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:843)
             // sun.reflect.GeneratedMethodAccessor389.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = MockFile.createTempFile("QEIC`4C[,82ouc", "H{FgIP^ 42Xe}z");
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("QEIC`4C[,82ouc0H{FgIP^ 42Xe}z", file0.getName());
      assertEquals("/tmp/QEIC`4C[,82ouc0H{FgIP^ 42Xe}z", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/QEIC`4C[,82ouc0H{FgIP^ 42Xe}z' and destination '/tmp/QEIC`4C[,82ouc0H{FgIP^ 42Xe}z' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      assertNotNull(hiddenFileFilter0);
      
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertEquals(3, standardCopyOptionArray0.length);
      assertNotNull(standardCopyOptionArray0);
      
      File file1 = FileUtils.getTempDirectory();
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals("tmp", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals("/tmp", file1.toString());
      assertTrue(file1.canWrite());
      assertNotNull(file1);
      
      FileUtils.copyDirectory(file0, file1, (FileFilter) hiddenFileFilter0, true, (CopyOption[]) standardCopyOptionArray0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals("tmp", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals("/tmp", file1.toString());
      assertTrue(file1.canWrite());
      assertEquals(3, standardCopyOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      assertNotNull(hiddenFileFilter0);
      
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertEquals(3, standardCopyOptionArray0.length);
      assertNotNull(standardCopyOptionArray0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) hiddenFileFilter0, false, (CopyOption[]) standardCopyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertEquals(",p10&?hcZ'm", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNotNull(fileOutputStream0);
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("org.junitpioneer.jupiter.IssueExtension", 6);
      assertNotNull(regexFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) regexFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("H{FgIP^ W2Xe}z");
          assertNotNull(mockFile0);
          
          File file0 = MockFile.createTempFile("net.bytebuddy.build.Plugin$Factory$UsingReflection", "net.bytebuddy.build.Plugin$Factory$UsingReflection", (File) mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile0);
          assertFalse(file0.equals((Object)mockFile0));
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("H{FgIP^ W2Xe}z", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.isDirectory());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("H{FgIP^ W2Xe}z", mockFile0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.length());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.getName());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ W2Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection", file0.toString());
          assertFalse(file0.isHidden());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ W2Xe}z", file0.getParent());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertNotNull(file0);
          
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ W2Xe}z/net.bytebuddy.build.Plugin$Factory$UsingReflection0net.bytebuddy.build.Plugin$Factory$UsingReflection\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:488)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1370)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:294)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      FileUtils.cleanDirectory(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = MockFile.createTempFile(" does not exist", " does not exist");
      assertEquals(" does not exist0 does not exist", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/ does not exist0 does not exist", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      Checksum checksum0 = FileUtils.checksum(file0, cRC32_0);
      assertSame(cRC32_0, checksum0);
      assertSame(checksum0, cRC32_0);
      assertEquals(" does not exist0 does not exist", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/ does not exist0 does not exist", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, checksum0.getValue());
      assertNotNull(checksum0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      assertEquals((short)1024, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
      assertEquals((short)1024, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I.jH?:4siw:]m0EM>");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, (String) null, "I.jH?:4siw:]m0EM>", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // I.jH?:4siw:]m0EM>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0, false);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertNotNull(ageFileFilter0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) ageFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser", "/home/azureuser", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MinguoDate minguoDate0 = MockMinguoDate.now();
      assertNotNull(minguoDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) minguoDate0, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // localTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R=*dZKKGa^eQ");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isSymlink(file0);
      assertFalse(boolean0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      try { 
        FileUtils.lineIterator(file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "appendable", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      assertNotNull(mockFile0);
      
      Vector<Object> vector0 = new Vector<Object>(3, 3);
      assertFalse(vector0.contains(",p10&?hcZ'm"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(3, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, ",p10&?hcZ'm", (Collection<?>) vector0, ",p10&?hcZ'm");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,p10&?hcZ'm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, 1394, 1394);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":H{FgIP^~2Xe}z");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      FileUtils.waitFor(mockFile0, 0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.description.type.TypeDescription$Generic");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1171624110));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 479);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'appendable' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.touch(file0);
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      MockFile mockFile1 = new MockFile(mockFile0, "H{FgIP^ 42Xe}z");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile1, byteArray0);
      long long0 = FileUtils.sizeOf(mockFile0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      FileUtils.openOutputStream((File) mockFile0);
      long long0 = FileUtils.sizeOf(mockFile0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser is not a file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      List<String> list0 = FileUtils.readLines(file0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      mockFile0.createNewFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockFile mockFile0 = new MockFile("date", "date");
      FileUtils.touch(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = FileUtils.readFileToString((File) mockFile0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 2Xe}z");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      byte[] byteArray1 = FileUtils.readFileToByteArray(mockFile0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("/fake/but/wellfo");
      try { 
        FileUtils.openOutputStream((File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/fake/but' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      file0.setReadOnly();
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/home/azureuser0/home/azureuser' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/file", (String) null);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) null, charset0, true);
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      FileUtils.openOutputStream((File) mockFile0, true);
      mockFile0.setReadable(false);
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/net.bRtebuddy.description.type.TypeDescription$Generic/net.bRtebuddy.description.type.TypeDescription$Generic' cannot be read
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      mockFile0.createNewFile();
      byte[] byteArray0 = FileUtils.readFileToByteArray(mockFile0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      FileUtils.openOutputStream((File) mockFile0);
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/,p10&?hcZ'm/,p10&?hcZ'm' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser0/home/azureuser' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 2Xe}z");
      MockFile mockFile1 = new MockFile(mockFile0, "H{FgIP^ 2Xe}z");
      FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.moveFile(mockFile0, mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 2Xe}z' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.description.type.TypeDescription$Generic");
      FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'net.bytebuddy.description.type.TypeDescription$Generic' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("U <$*<Ft");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "2 KB");
      MockFile mockFile0 = new MockFile("U <$*<Ft", "U <$*<Ft");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not create destination directories '/home/azureuser/LLm4PrTest/ io_experiments/U <$*<Ft/U <$*<Ft'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/home/azureuser' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser0/home/azureuser' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser");
      FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/home/azureuser0/home/azureuser' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(11, 11, Integer.MAX_VALUE, 2998, 2146768058);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockFile mockFile0 = new MockFile("appendable");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdirParent(file0);
      assertEquals("tmp", file0.getName());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("neS%");
      try { 
        FileUtils.forceMkdir(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory neS%
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      mockFile0.createNewFile();
      try { 
        FileUtils.forceMkdir(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File H{FgIP^ 42Xe}z exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdir(file0);
      assertEquals("/home", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B)A=(,#P+");
      FileUtils.forceMkdir(mockFile0);
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("q\"u]@J*");
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile(" PB", " PB", file0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/ PB0 PB\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1302)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:691)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:615)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:511)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:730)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:987)
             // sun.reflect.GeneratedMethodAccessor280.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setWritable(false);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/azureuser' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      byte[] byteArray0 = new byte[3];
      FileUtils.writeByteArrayToFile(file0, byteArray0);
      File file1 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyDirectory(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/fake/but/wellformed/url' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFileExample();
      File file1 = FileUtils.toFile(uRL0);
      assertNotNull(file1);
      
      boolean boolean0 = FileUtils.directoryContains(file0, file1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertTrue(file0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      URL uRL0 = MockURL.getFileExample();
      File file1 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete directory /tmp.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("d7%Pf><T[N`lim");
      assertEquals("d7%Pf><T[N`lim", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(374);
      MockFile mockFile0 = new MockFile(" PB", "P#D$P4!8hr:W$!:3");
      try { 
        FileUtils.copyToFile(pipedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, (File) null);
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2034694062, 273);
      try { 
        FileUtils.copyInputStreamToFile(byteArrayInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      MockFile mockFile1 = new MockFile(mockFile0, "H{FgIP^ 42Xe}z");
      FileUtils.openOutputStream((File) mockFile1);
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File 'H{FgIP^ 42Xe}z' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 255, 255);
      FileUtils.copyInputStreamToFile(byteArrayInputStream0, mockFile0);
      assertEquals("H{FgIP^ 42Xe}z", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "'71;t:Iu");
      FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      File file0 = MockFile.createTempFile("net.bRt^buddy.description.type.TypeDescription$Generic", "net.bRt^buddy.description.type.TypeDescription$Generic");
      arrayDeque0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/net.bRt^buddy.description.type.TypeDescription$Generic0net.bRt^buddy.description.type.TypeDescription$Generic' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",p10&?hcZ'm", ",p10&?hcZ'm");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      MockFile mockFile1 = new MockFile("file", "file");
      FileUtils.write((File) mockFile1, (CharSequence) "file", false);
      try { 
        FileUtils.copyFile((File) mockFile1, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'file' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/home/azureuser0/home/azureuser' and destination '/tmp/home/azureuser0/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = MockFile.createTempFile(".y`)+|/(<{(P3*N{k@y", "appendable");
      MockFile mockFile0 = new MockFile(file0, "lv%)AUFfR=P9~#2W$/");
      try { 
        FileUtils.copyToDirectory(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/.y`)+|/(<{(P3*N{k@y0appendable/lv%)AUFfR=P9~#2W$' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = MockFile.createTempFile(" does not exist", " does not exist");
      File file1 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/ does not exist0 does not exist' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source 'H{FgIP^ 42Xe}z' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "date";
      stringArray0[1] = "date";
      stringArray0[2] = "date";
      stringArray0[3] = "%s %s";
      stringArray0[4] = "date";
      stringArray0[5] = "%s %s";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.copyDirectory(file0, file1, (FileFilter) hiddenFileFilter0, true, (CopyOption[]) standardCopyOptionArray0);
      assertEquals("/home/azureuser/date/date/date/%s %s/date/%s %s", file1.toString());
      assertEquals("/home/azureuser/date/date/date/%s %s/date", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/tmp/azureuser");
      mockFile0.createNewFile();
      try { 
        FileUtils.contentEqualsIgnoreEOL(mockFile0, file0, "/home/azureuser/tmp/azureuser");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      mockFile0.createNewFile();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "H{FgIP^ 42Xe}z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "onR$aSFrg9ne";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("iRQ(@7W4", "http");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file1, file0, "^W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "Issue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "/tmp/azureuser");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "H{FgIP^ 42Xe}z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("yEj&{tuJ\"j\"w ?c", "2 KB");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2 KB";
      stringArray0[1] = "gqVx.]{)hu!G1cb";
      stringArray0[2] = "-Qg";
      stringArray0[3] = "-Qg";
      File file2 = FileUtils.getFile(file0, stringArray0);
      file2.createNewFile();
      boolean boolean0 = FileUtils.contentEquals(file2, file1);
      assertEquals("/tmp/2 KB/gqVx.]{)hu!G1cb/-Qg/-Qg", file2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      mockFile0.createNewFile();
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2 KB";
      stringArray0[1] = "gqVx.]{)hu!G1cb";
      stringArray0[2] = "-Qg";
      stringArray0[3] = "-Qg";
      File file1 = FileUtils.getFile(file0, stringArray0);
      boolean boolean0 = FileUtils.contentEquals(file1, file0);
      assertFalse(boolean0);
      assertEquals("/tmp/2 KB/gqVx.]{)hu!G1cb/-Qg/-Qg", file1.toString());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      boolean boolean0 = FileUtils.contentEquals((File) null, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          File file0 = FileUtils.toFile(uRL0);
          File file1 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file1, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:878)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:155)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:922)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:435)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:392)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1370)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:294)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1164)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2149)
             // sun.reflect.GeneratedMethodAccessor318.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.description.type.TypeDescription$Generic");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      long long0 = FileUtils.checksumCRC32(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(914000L);
      assertEquals("892 KB", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("10 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_YB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1048576 EB", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/net.bRtebuddy.description.type.TypeDescription$Generic/net.bRtebuddy.description.type.TypeDescription$Generic' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(hashSet0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bRtebuddy.description.type.TypeDescription$Generic", "net.bRtebuddy.description.type.TypeDescription$Generic");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/net.bRtebuddy.description.type.TypeDescription$Generic/net.bRtebuddy.description.type.TypeDescription$Generic' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      MockFile mockFile0 = new MockFile("index (%s) must be >= 0 and < name count (%s)", "zoneId");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1238L);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/index (%s) must be >= 0 and < name count (%s)/zoneId' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "Pt");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/H{FgIP^ 42Xe}z/Pt' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      try { 
        FileUtils.writeLines(file0, "Failed to copy full contents from '", (Collection<?>) arrayDeque0, "Failed to copy full contents from '");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MockFile mockFile0 = new MockFile("f&ile");
      Stack<File> stack0 = new Stack<File>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) stack0);
      assertEquals("f&ile", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) hashSet0, "\"i", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null, (-2049870753), (-2049870753));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/tmp/tmp/tmp";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/7[jG1?McWwj-/oL/D?:Ll/Mc*,Z6#{~L]V(/tmp";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2110));
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) hijrahDate0);
      assertFalse(boolean0);
      assertEquals("/tmp/tmp/tmp/home/azureuser/LLm4PrTest/ io_experiments/7[jG1?McWwj-/oL/D?:Ll/Mc*,Z6#{~L]V(", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/home/azureuser0/home/azureuser is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      NameFileFilter nameFileFilter0 = new NameFileFilter("/hom");
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, nameFileFilter0, nameFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (String[]) null, true);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(file0, "[Z9`c", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeLines(file0, "URL coul) not be QNnverted to a File:o", (Collection<?>) hashSet0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z", "H{FgIP^ 42Xe}z");
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, "6#X&7\"L(");
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, " is not a directory", " is not a directory");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  is not a directory
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" does not exist");
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "eJ_0z7cl=aI]m[", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[4];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      FileUtils.write((File) mockFile0, (CharSequence) "/home/azureuser");
      assertEquals(15L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/fml}/home/azureuser/fml}/fml}", "='`n_+Jc");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/fml}/home/azureuser/fml}/fml}/='`n_+Jc does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyToDirectory(file0, file0);
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/tmp' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) hashSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1125899906842624L, FileUtils.ONE_PB);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "cmm@h19uG", (Collection<?>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H{FgIP^ 42Xe}z");
      FileUtils.write((File) mockFile0, (CharSequence) "H{FgIP^ 42Xe}z", (Charset) null);
      assertEquals(14L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]P");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "]P", "]P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/azureuser");
      MockDate mockDate0 = new MockDate(115, 115, 115);
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond((-1439L), (-1439L));
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertTrue(boolean0);
  }
}
