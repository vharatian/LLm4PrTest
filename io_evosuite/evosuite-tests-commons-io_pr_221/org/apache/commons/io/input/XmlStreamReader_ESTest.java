/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:46:26 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.NoSuchFileException;
import java.util.Enumeration;
import org.apache.commons.io.input.XmlStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class XmlStreamReader_ESTest extends XmlStreamReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 5);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "`");
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "BrMPAloOsuN6e", "application/xml-external-parsed-entity");
      assertEquals("application/xml-external-parsed-entity", string0);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(dataInputStream0, "text/e*3Pe*V&");
      xmlStreamReader0.calculateHttpEncoding("text/inputStream+xml", "ztS-", "(enldoMT`2mM.Y", "$7{C:}qI]G0B7~-", false);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)61, (byte)73);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, ";", true);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)45, (-149));
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true, (String) null);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 3530753);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null, true, "UTF-16LE");
      assertEquals("UTF-16LE", xmlStreamReader0.getDefaultEncoding());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0);
      char[] charArray0 = new char[1];
      int int0 = xmlStreamReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "7otxt/inputStream");
      // Undeclared exception!
      try { 
        xmlStreamReader0.read((char[]) null, (-380608488), 60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "txt/inputStream");
      try { 
        xmlStreamReader0.calculateHttpEncoding("#g&.)<", "Insensitive", "#g&.)<", "txt/inputStream", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, CT-MIME [#g&.)<] CT-Enc [null] BOM [Insensitive] XML guess [#g&.)<] XML prolog [txt/inputStream], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((URLConnection) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRLConnection0, "application/_I]lzaN");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, false, "Z~qd.k/%;,Xh=rPp7$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, "apptication/_I]lzaN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, true, "UTF-16BE");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-103), 3530753);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "text/htmltext/Bhc3r_Oak\"/0|ceBW", false, "text/htmltext/Bhc3r_Oak\"/0|ceBW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-63), (byte)48);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "N.k>)Z1;v`M:K?vR)", true, "N.k>)Z1;v`M:K?vR)");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, (String) null, true, "text/html9pbyIG`lk`k");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/_I]lzaN", false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [application/_I]lzaN] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "application/text/text/appliation/k55v|a", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-21), 235);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "ACE57L6XxwK}vtX/@", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "application/xml-external-parsed-entity", false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "l,/A0THp;r0Ea2kewCv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2379), 1831);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/UTF-16BE");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, "T!s8");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!X;yCU$|YPFR\"AI$qjG", "!X;yCU$|YPFR\"AI$qjG");
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      String string0 = xmlStreamReader0.calculateHttpEncoding("()` not found in ", "text/nAI/-^", "text/nAI/-^", "8{fK9.NQ", true);
      assertEquals("8{fK9.NQ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "apptication/_I]lzaN", false, "apptication/_I]lzaN");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [apptication/_I]lzaN] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "apptication/_V]lzaN", true, "apptication/_V]lzaN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-32LE", "UTF-32LE", "UTF-32LE");
      assertEquals("UTF-32LE", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0, "Za#.^^Q");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32LE", (String) null, "e}vX");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32LE] XML guess [null] XML prolog [e}vX] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(dataInputStream0, "%,d files, %,d directories, %,d bytes");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32LE", "%,d files, %,d directories, %,d bytes", "e=lQ/KH");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32LE] XML guess [%,d files, %,d directories, %,d bytes] XML prolog [e=lQ/KH] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/appl");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16LE", "", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16LE] XML guess [] XML prolog [] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16BE", "B:7D@1j6k1@+/", "UTF-16BE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16BE] XML guess [B:7D@1j6k1@+/] XML prolog [UTF-16BE] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "txt/inputStream");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", "UTF-8", "txt/inputStream");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [UTF-8] XML prolog [txt/inputStream] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null);
      try { 
        xmlStreamReader0.calculateRawEncoding("#T%pMG^3qMCw:_,-_#", (String) null, "[w'@V");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [#T%pMG^3qMCw:_,-_#] XML guess [null] XML prolog [[w'@V] unknown BOM
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "net.bytebuddy.build.ToStringPlugin");
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "net.bytebuddy.build.ToStringPlugin", (String) null);
      assertNotNull(string0);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, "txt/inputStream");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", "no", "url");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [no] XML prolog [url] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "Ap<:*117raZ", true);
      String string0 = xmlStreamReader0.calculateHttpEncoding("text/htmlnet.bytebuddy.asm.Advice$OnDefaultValue+xml", "text/htmltxt/inputStream", "o,fL", (String) null, true);
      assertNotNull(string0);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/xml", false, "9+-I]T=7:");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("text/application/k55v|a+xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("text/xml-external-parsed-entity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/text/text/appliatio/k55v|a+xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/_I]lzaN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/xml-external-parsed-entity", false, "application/xml-external-parsed-entity");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/xml-dtd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime("!X;yCU$|YPFR\"AI$qjG");
      assertEquals("!X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeEncoding("!X;yCU$|YPFR\"AI$qjG");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "apptication/_V]lzaN", true);
      // Undeclared exception!
      try { 
        xmlStreamReader0.read((char[]) null, 2, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "e*3Pe*V&");
      xmlStreamReader0.close();
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/htmltext/Bhc3r_Oak\"/0|ceBW", true);
      String string0 = xmlStreamReader0.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "");
      xmlStreamReader0.getDefaultEncoding();
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }
}
