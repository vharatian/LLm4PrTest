/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:48:43 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.NoSuchFileException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DeferredFileOutputStream_ESTest extends DeferredFileOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile(" TB", " TB", (File) null);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(571, " TB", (String) null, file0);
      assertTrue(deferredFileOutputStream0.isInMemory());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-11), (File) null);
      ByteArrayOutputStream byteArrayOutputStream0 = (ByteArrayOutputStream)deferredFileOutputStream0.getStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, (File) null);
      File file0 = deferredFileOutputStream0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile(" TB", " TB", (File) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ TB0 TB");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " TB");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, file0);
      File file1 = deferredFileOutputStream0.getFile();
      assertEquals(4L, file1.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, ".:|p=iO9");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1), 7, mockFile1);
      File file0 = deferredFileOutputStream0.getFile();
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2844, 3857, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4YKXs!OxWbLb#T+Q");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1620, 0, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("one of ", "6)C'qtkc6}xt-");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(573, 573, "one of ", "6)C'qtkc6}xt-", mockFile0);
      deferredFileOutputStream0.write(573);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fQ@l*uM\"2bv:");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-954), mockFile0);
      deferredFileOutputStream0.close();
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-205), (File) null);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-4248), (File) null);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.toInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1381), (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "", "", mockFile0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.filefilter.MagicNumberFileFilter", "org.apache.commons.io.filefilter.MagicNumberFileFilter");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(7, 7, "org.apache.commons.io.filefilter.MagicNumberFileFilter", "org.apache.commons.io.filefilter.MagicNumberFileFilter", file0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-22), (-22), (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -22
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("caj++}J");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1518, 1518, "caj++}J", "l0|?)=Z}^B<", mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("l0|?)=Z}^B<");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3458), 0, "caj++}J", "f+Z", mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1), 7, mockFile0);
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not closed
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p", "p");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-949), mockFile0);
      deferredFileOutputStream0.close();
      try { 
        deferredFileOutputStream0.toInputStream();
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1934), (File) null);
      try { 
        deferredFileOutputStream0.toInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not closed
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, (File) null);
      deferredFileOutputStream0.close();
      InputStream inputStream0 = deferredFileOutputStream0.toInputStream();
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(833, (File) null);
      deferredFileOutputStream0.close();
      DeferredFileOutputStream deferredFileOutputStream1 = new DeferredFileOutputStream((-1833), "", "", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("kg");
          DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(16, 90, mockFile0);
          // Undeclared exception!
          try { 
            deferredFileOutputStream0.thresholdReached();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"kg\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached(DeferredFileOutputStream.java:241)
             // sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-954), mockFile0);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1), 7, mockFile0);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(484, (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(484, 484, (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(833, (File) null);
      deferredFileOutputStream0.close();
      deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
      assertTrue(deferredFileOutputStream0.isInMemory());
  }
}
