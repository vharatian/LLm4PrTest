/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:41:00 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.StandardCopyOption;
import java.time.Instant;
import java.time.LocalTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoEra;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals("-72057594037927936 bytes", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{?0Hjwx";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("{?0Hjwx", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("{?0Hjwx", file0.getName());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile(file0, byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("{?0Hjwx", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(1L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("{?0Hjwx", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          assertTrue(file0.isDirectory());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("/tmp", file0.toString());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isFile());
          assertEquals("tmp", file0.getName());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/", file0.getParent());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertNotNull(file0);
          
          // Undeclared exception!
          try { 
            FileUtils.forceDelete(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Skip count must be non-negative, actual: "));
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, true);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(true));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Skip count must be non-negative, actual: ", "x}6Q<@W]v8`su5");
      assertNotNull(mockFile0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("x}6Q<@W]v8`su5"));
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, "destDir", false);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Skip count must be non-negative, actual: ", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Skip count must be non-negative, actual: /x}6Q<@W]v8`su5", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("x}6Q<@W]v8`su5", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("x}6Q<@W]v8`su5"));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "doesn't contain any substring.";
      stringArray0[1] = "idIckCP/U]y*1NbW<(B";
      stringArray0[2] = "*Zy@rbe";
      stringArray0[3] = "k6u%goGQ B'2";
      stringArray0[4] = "No advice defined by ";
      stringArray0[5] = "Can only convert file URL to a File: ";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertFalse(file1.equals((Object)file0));
      assertEquals(6, stringArray0.length);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser/doesn't contain any substring./idIckCP/U]y*1NbW<(B/*Zy@rbe/k6u%goGQ B'2/No advice defined by ", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertFalse(file1.canRead());
      assertEquals("Can only convert file URL to a File: ", file1.getName());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.exists());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/doesn't contain any substring./idIckCP/U]y*1NbW<(B/*Zy@rbe/k6u%goGQ B'2/No advice defined by /Can only convert file URL to a File: ", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertNotNull(file1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains("k6u%goGQ B'2"));
      
      FileUtils.writeLines(file1, (Collection<?>) vector0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(6, stringArray0.length);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/doesn't contain any substring./idIckCP/U]y*1NbW<(B/*Zy@rbe/k6u%goGQ B'2/No advice defined by ", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals("Can only convert file URL to a File: ", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/home/azureuser/doesn't contain any substring./idIckCP/U]y*1NbW<(B/*Zy@rbe/k6u%goGQ B'2/No advice defined by /Can only convert file URL to a File: ", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("k6u%goGQ B'2"));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AST~OhPgz@Fr9lX<", "/tmp/Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      ArrayDeque<Proxy.Type> arrayDeque0 = new ArrayDeque<Proxy.Type>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) arrayDeque0, true);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/AST~OhPgz@Fr9lX</tmp/Skip count must be non-negative, actual: ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/AST~OhPgz@Fr9lX</tmp", mockFile0.getParent());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "\"5R#q");
      assertNotNull(mockFile0);
      
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) linkedList0, "wo");
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("\"5R#q", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("\"5R#q", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Skip count must be non-negative, actual: "));
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) linkedList0);
      assertTrue(mockFile0.canExecute());
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Skip count must be non-negative, actual: "));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = file0.delete();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(boolean0);
      
      FileUtils.writeByteArrayToFile(file0, byteArray0, 0, (int) (byte)82);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(9L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sourceDir", "<<PyRMOgW:K\"");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "sourceDir", false);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceDir/<<PyRMOgW:K\"", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(9L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("<<PyRMOgW:K\"", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceDir", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) null, (String) null);
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Skip count must be non-negative, actual: ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = MockFile.createTempFile("T\"-", "L4r1|DBv]WaM1&qs~");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("T\"-0L4r1|DBv]WaM1&qs~", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/T\"-0L4r1|DBv]WaM1&qs~", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      FileUtils.write(file0, (CharSequence) "T\"-");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("T\"-0L4r1|DBv]WaM1&qs~", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/T\"-0L4r1|DBv]WaM1&qs~", file0.toString());
      assertEquals(3L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          assertEquals("tmp", file0.getName());
          assertEquals("/tmp", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertTrue(file0.isDirectory());
          assertTrue(file0.isAbsolute());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isFile());
          assertEquals(0L, file0.length());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertTrue(file0.canExecute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals("/", file0.getParent());
          assertNotNull(file0);
          
          File file1 = MockFile.createTempFile("Destination '", "8}Qmp,O|[^", (File) null);
          assertFalse(file1.equals((Object)file0));
          assertNotSame(file1, file0);
          assertFalse(file1.isHidden());
          assertEquals(0L, file1.getUsableSpace());
          assertTrue(file1.canExecute());
          assertEquals("/tmp", file1.getParent());
          assertTrue(file1.canRead());
          assertTrue(file1.isFile());
          assertEquals(1392409281320L, file1.lastModified());
          assertEquals("/tmp/Destination '08}Qmp,O|[^", file1.toString());
          assertTrue(file1.exists());
          assertEquals(0L, file1.getFreeSpace());
          assertEquals(0L, file1.length());
          assertEquals(0L, file1.getTotalSpace());
          assertEquals("Destination '08}Qmp,O|[^", file1.getName());
          assertFalse(file1.isDirectory());
          assertTrue(file1.canWrite());
          assertTrue(file1.isAbsolute());
          assertNotNull(file1);
          
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(file0.equals((Object)file1));
          assertNotSame(file0, file1);
          assertEquals("tmp", file0.getName());
          assertEquals("/tmp", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertTrue(file0.isDirectory());
          assertTrue(file0.isAbsolute());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isFile());
          assertEquals(0L, file0.length());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertTrue(file0.canExecute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals("/", file0.getParent());
          assertFalse(boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertEquals("/home", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals("/home/azureuser", file0.toString());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertEquals("azureuser", file0.getName());
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertNotNull(file0);
      
      File file1 = FileUtils.getTempDirectory();
      //  // Unstable assertion: assertFalse(file1.equals((Object)file0));
      //  // Unstable assertion: assertNotSame(file1, file0);
      //  // Unstable assertion: assertEquals("/", file1.getParent());
      //  // Unstable assertion: assertEquals("tmp", file1.getName());
      //  // Unstable assertion: assertEquals(0L, file1.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file1.length());
      //  // Unstable assertion: assertEquals("/tmp", file1.toString());
      //  // Unstable assertion: assertTrue(file1.canWrite());
      //  // Unstable assertion: assertFalse(file1.isFile());
      //  // Unstable assertion: assertTrue(file1.isAbsolute());
      //  // Unstable assertion: assertTrue(file1.canExecute());
      //  // Unstable assertion: assertTrue(file1.canRead());
      //  // Unstable assertion: assertEquals(1392409281320L, file1.lastModified());
      //  // Unstable assertion: assertEquals(0L, file1.getTotalSpace());
      //  // Unstable assertion: assertTrue(file1.isDirectory());
      //  // Unstable assertion: assertTrue(file1.exists());
      //  // Unstable assertion: assertFalse(file1.isHidden());
      //  // Unstable assertion: assertEquals(0L, file1.getUsableSpace());
      //  // Unstable assertion: assertNotNull(file1);
      
      FileUtils.copyDirectory(file1, file0, (FileFilter) null);
      //  // Unstable assertion: assertFalse(file0.equals((Object)file1));
      //  // Unstable assertion: assertFalse(file1.equals((Object)file0));
      //  // Unstable assertion: assertNotSame(file0, file1);
      //  // Unstable assertion: assertNotSame(file1, file0);
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertEquals("/home", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals("/home/azureuser", file0.toString());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertEquals(1755988609124L, file0.lastModified());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertEquals("azureuser", file0.getName());
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertEquals("/", file1.getParent());
      //  // Unstable assertion: assertEquals("tmp", file1.getName());
      //  // Unstable assertion: assertEquals(0L, file1.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file1.length());
      //  // Unstable assertion: assertEquals("/tmp", file1.toString());
      //  // Unstable assertion: assertTrue(file1.canWrite());
      //  // Unstable assertion: assertFalse(file1.isFile());
      //  // Unstable assertion: assertTrue(file1.isAbsolute());
      //  // Unstable assertion: assertTrue(file1.canExecute());
      //  // Unstable assertion: assertTrue(file1.canRead());
      //  // Unstable assertion: assertEquals(1392409281320L, file1.lastModified());
      //  // Unstable assertion: assertEquals(0L, file1.getTotalSpace());
      //  // Unstable assertion: assertTrue(file1.isDirectory());
      //  // Unstable assertion: assertTrue(file1.exists());
      //  // Unstable assertion: assertFalse(file1.isHidden());
      //  // Unstable assertion: assertEquals(0L, file1.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(3, fileArray0.length);
      assertEquals(3, uRLArray0.length);
      assertNotNull(uRLArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", (Object[]) null);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      long long0 = FileUtils.sizeOf(file0);
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(252L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "instant");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/instant", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("instant", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[5];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertEquals(5, stringArray0.length);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "%oME'C.V9");
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/%oME'C.V90%oME'C.V9", file0.toString());
      assertEquals("%oME'C.V90%oME'C.V9", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/%oME'C.V90%oME'C.V9", file0.toString());
      assertEquals("%oME'C.V90%oME'C.V9", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      NameFileFilter nameFileFilter0 = new NameFileFilter("org.apache.commons.io.filefilter.FileFileFilter");
      assertNotNull(nameFileFilter0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      assertNotNull(notFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, notFileFilter0, nameFileFilter0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate(1315, 1315, 1315);
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Sun Mar 07 00:00:00 GMT 3328", mockDate0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      assertTrue(boolean0);
      
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertEquals(".", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(".", file0.getName());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/tmp";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("org.apache.commons.io.file.Counters$LonPathCounters", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("org.apache.commons.io.file.Counters$LonPathCounters", mockFile0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("org.apache.commons.io.file.Counters$LonPathCounters", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("org.apache.commons.io.file.Counters$LonPathCounters", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/tmp//home/azureuser/LLm4PrTest/ io_experiments/qS/qS/tmp", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "ATCSoJ7ooyE'_<-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Character array is missing", "Character array is missing");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "xFXu~", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "*aY5UYCiR(e#5Fw", charset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/azureuseG/LLm4PrTest", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, ", value=", "org.apache.commons.io.output.StringBuilderWriter", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.output.StringBuilderWriter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "645bhzE", "645bhzE");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 645bhzE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser//azureuser", "/home/azureuser//azureuser");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("/home/azureuser//azureuser"));
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayList0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/azureuser/home/azureuser'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Skip count must be non-negative, actual: "));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "5X&AVqmA/cWGfgi185", (Collection<?>) hashSet0, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5X&AVqmA/cWGfgi185
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "#*c`b(WqWz$ew", (Collection<?>) priorityQueue0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h", "h");
      assertNotNull(mockFile0);
      
      LinkedHashSet<IsoEra> linkedHashSet0 = new LinkedHashSet<IsoEra>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "file2", (Collection<?>) linkedHashSet0, "file2", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "c%s=l[`f+)HBofKbkuL", (Collection<?>) treeSet0, "X@bDODS6~rMN]q{", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, ",TrR{Zp|XTE", (Collection<?>) priorityQueue0, ",TrR{Zp|XTE", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qS", "qS");
      assertNotNull(mockFile0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("qS"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "qS", (Collection<?>) hashSet0, "qS");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // qS
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(t4n", "\"5R#q");
      assertNotNull(mockFile0);
      
      LinkedHashSet<IsoEra> linkedHashSet0 = new LinkedHashSet<IsoEra>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "\"5R#q", (Collection<?>) linkedHashSet0, "\"5R#q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"5R#q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "5bCYyHp.9T6R/$}Qg", (Collection<?>) linkedList0, "$,'KV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Skip count must be non-negative, actual: "));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "Backup", (Collection<?>) priorityQueue0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Backup
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TreeSet<TextStyle> treeSet0 = new TreeSet<TextStyle>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "IF_ANNOTATED", (Collection<?>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)0, (int) (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte)37, (int) (byte)37, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (-7305), 1788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "NmT!]hITd");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("%oME'C.V90NmT!]hITd", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/%oME'C.V90NmT!]hITd", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (-2198), (int) (byte)47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2198
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Attempt to bind two handlers to ", "Attempt to bind two handlers to ");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 3, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) null, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "&file");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("o$W:BiRenmp46", "/hom");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[6];
      try { 
        FileUtils.streamFiles(mockFile0, true, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachelcommon5.io.file.Counters$LonPathCounters", "org.apachelcommon5.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/org.apachelcommon5.io.file.Counters$LonPathCounters/org.apachelcommon5.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "sourceDir");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sourceDir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DefaultLocale";
      stringArray0[1] = "com.google.common.jimfs.PosixAttributeProvider";
      stringArray0[2] = "mJ.vsV=.H";
      stringArray0[3] = "";
      stringArray0[4] = "]#v|1q_%Gml|";
      stringArray0[5] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("]#v|1q_%Gml|", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/DefaultLocale/com.google.common.jimfs.PosixAttributeProvider/mJ.vsV=.H", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/DefaultLocale/com.google.common.jimfs.PosixAttributeProvider/mJ.vsV=.H/]#v|1q_%Gml|", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "com.google.common.jimfs.PosixAttributeProvider");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.google.common.jimfs.PosixAttributeProvider
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File[] fileArray0 = new File[6];
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(fileArray0[2], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) mockFile0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/tmp//home/azureuser/tmp", false);
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/home/azureuser/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'org.apache.commons.io.file.Counters$LonPathCounters' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@oH*;</@g`h)k[<F");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '@oH*;</@g`h)k[<F' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'Skip count must be non-negative, actual: ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      FileUtils.listFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "+dVT@!U50N1B";
      stringArray0[2] = "Tz?7/";
      stringArray0[3] = "destFile";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("destFile", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/+dVT@!U50N1B/Tz?7/destFile", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/+dVT@!U50N1B/Tz?7", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/+dVT@!U50N1B/Tz?7/destFile
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(suffixFileFilter0);
      
      // Undeclared exception!
      FileUtils.listFiles(file0, (IOFileFilter) suffixFileFilter0, (IOFileFilter) suffixFileFilter0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      Pattern pattern0 = Pattern.compile("6,jW/x`5E?<AN\"TqUF");
      assertEquals("6,jW/x`5E?<AN\"TqUF", pattern0.pattern());
      assertEquals("6,jW/x`5E?<AN\"TqUF", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertEquals("6,jW/x`5E?<AN\"TqUF", pattern0.pattern());
      assertEquals("6,jW/x`5E?<AN\"TqUF", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(regexFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) regexFileFilter0, (IOFileFilter) regexFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lastModified(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, notFileFilter0, notFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      assertNotNull(emptyFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) emptyFileFilter0, (IOFileFilter) emptyFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~ZGL=Np");
      assertNotNull(mockFile0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(mockFile0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters$LongPathCounters", "DVm");
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/org.apache.commons.io.file.Counters$LongPathCounters0DVm", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("org.apache.commons.io.file.Counters$LongPathCounters0DVm", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) mockDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/org.apache.commons.io.file.Counters$LongPathCounters0DVm
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      LocalTime localTime0 = MockLocalTime.now();
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dos";
      stringArray0[1] = "Z2|TRYJ";
      stringArray0[2] = "GWn?346";
      stringArray0[3] = "http";
      stringArray0[4] = "/home/azureuser/tmp";
      stringArray0[5] = "{\"OnREsU;Nh@1";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dos/Z2|TRYJ/GWn?346/http/home/azureuser/tmp", file0.getParent());
      assertNotNull(file0);
      
      File file1 = FileUtils.createParentDirectories(file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals(6, stringArray0.length);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dos/Z2|TRYJ/GWn?346/http/home/azureuser/tmp", file0.getParent());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dos/Z2|TRYJ/GWn?346/http/home/azureuser", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isFile());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertEquals("tmp", file1.getName());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dos/Z2|TRYJ/GWn?346/http/home/azureuser/tmp", file1.toString());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertNotNull(file1);
      
      Instant instant0 = MockInstant.ofEpochMilli((-6701000L));
      assertNotNull(instant0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file1, instant0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/dos/Z2|TRYJ/GWn?346/http/home/azureuser/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<RN]tM\"[[w/-", "<RN]tM\"[[w/-");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/<RN]tM\"[[w/-/<RN]tM\"[[w/-'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dos:system";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("dos:system", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("dos:system", file0.getName());
      assertNull(file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("dos:system", "/tmp//tmp/tmp", file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals(1, stringArray0.length);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("dos:system", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("dos:system", file0.getName());
      assertTrue(file0.exists());
      assertNull(file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dos:system/dos:system0/tmp/tmp/tmp", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/dos:system/dos:system0/tmp/tmp", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canRead());
      assertEquals("tmp", file1.getName());
      assertNotNull(file1);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file1, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // dos:system
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (-6701000L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Attempt to bind two handlers to ", "Attempt to bind two handlers to ");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      assertNotNull(mockFile0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      FileUtils.writeStringToFile((File) mockFile0, "i]\"\"%!9'k-H1I6sp'#", charset0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(18L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("i]\"\"%!9'k-H1I6sp'#", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, instant0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.counters$longpathcounters", "org.apache.commons.io.file.counters$longpathcounters");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.counters$longpathcounters", mockFile0.getParent());
      assertEquals("org.apache.commons.io.file.counters$longpathcounters", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.counters$longpathcounters/org.apache.commons.io.file.counters$longpathcounters", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.file.counters$longpathcounters/org.apache.commons.io.file.counters$longpathcounters
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot dele?e file: ", "Cannot dele?e file: ");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File[] fileArray0 = new File[9];
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent(fileArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      assertNotNull(mockFile0);
      
      FileUtils.touch(mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("i]\"\"%!9'k-H1I6sp'#", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("Source '", "a0Z>>", file0);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canExecute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertEquals("/tmp/Source '0a0Z>>", file1.toString());
      assertTrue(file1.exists());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("Source '0a0Z>>", file1.getName());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertNotNull(file1);
      
      MockFile mockFile0 = new MockFile(file1, "a0Z>>");
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/Source '0a0Z>>'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-3508), 446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("org.apache.commons.io.file.Counters$LonPathCounters"));
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) hashSet0, "/home/azureuser/");
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.io.file.Counters$LonPathCounters", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.file.Counters$LonPathCounters", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("org.apache.commons.io.file.Counters$LonPathCounters"));
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: 'org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("url", file0.getName());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("KWp.sFrg+TO=*ooE'");
      assertNotNull(mockPrintStream0);
      
      MockFile mockFile0 = new MockFile("/io]}WQ]`#;]");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Lk%eS]#Vv");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[2] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      assertNotNull(mockFile0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("/tmp/azureuser", "/tmp/azureuser");
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file1, file0);
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertEquals("/tmp/tmp/azureuser0/tmp/azureuser", file1.toString());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/tmp/azureuser0/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals("azureuser", file1.getName());
      assertNotNull(file1);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: '/tmp/tmp/azureuser0/tmp/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("/home/azureuser//tmp/azureuser", "/home/azureuser//tmp/azureuser");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/tmp/azureuser/home/azureuser/tmp/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      assertEquals("true", trueFileFilter0.toString());
      assertNotNull(trueFileFilter0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) trueFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("*'KP/l>y", iOCase0);
      assertNotNull(prefixFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) prefixFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" does not declare a parameter with index ", "/home/azureuser/LLm4PrTest/ io_experiments/\"5R#q/home/azureuser/LLm4PrTest/ io_experiments0xJ:*j~.X5H\"tI");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[7];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(wildcardFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) wildcardFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/ does not declare a parameter with index /home/azureuser/LLm4PrTest/ io_experiments/\"5R#q/home/azureuser/LLm4PrTest/ io_experiments0xJ:*j~.X5H\"tI'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      File file0 = FileUtils.toFile(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertEquals("url", file0.getName());
      assertFalse(file0.canRead());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, ":ar)fG");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      File file1 = FileUtils.createParentDirectories(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("", file1.getName());
      assertTrue(file1.isDirectory());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.isFile());
      assertEquals("/", file1.toString());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertNotNull(file1);
      
      try { 
        FileUtils.copyDirectory(file1, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "NmT!]hITd");
      assertEquals("/tmp/%oME'C.V90NmT!]hITd", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("%oME'C.V90NmT!]hITd", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      File file1 = FileUtils.getTempDirectory();
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file1, file0);
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp", file1.toString());
      assertFalse(file1.isFile());
      assertEquals("tmp", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals("/", file1.getParent());
      assertNotNull(file1);
      
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file2' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      File file0 = MockFile.createTempFile("ih<,", "ih<,");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/ih<,0ih<,", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("ih<,0ih<,", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/ih<,0ih<,'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "%oME'C.V9");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("%oME'C.V90%oME'C.V9", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/%oME'C.V90%oME'C.V9", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "%oME'C.V9");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/%oME'C.V90%oME'C.V9", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("%oME'C.V90%oME'C.V9", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      Adler32 adler32_0 = new Adler32();
      assertEquals(1L, adler32_0.getValue());
      assertNotNull(adler32_0);
      
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, (Checksum) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser//azureuser", "/home/azureuser//azureuser");
      assertNotNull(mockFile0);
      
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals("/home/azureuser/azureuser/home/azureuser/azureuser", mockFile0.toString());
      assertEquals("azureuser", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/azureuser/home/azureuser", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/azureuser/home", file0.getParent());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser/azureuser/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, (Checksum) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser/azureuser/home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/", "/home/azureuser/");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.checksum(mockFile0, (Checksum) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = MockFile.createTempFile("orgapache.commons.io.file.Couters$LonPathCounters", "orgapache.commons.io.file.Couters$LonPathCounters");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/orgapache.commons.io.file.Couters$LonPathCounters0orgapache.commons.io.file.Couters$LonPathCounters", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("orgapache.commons.io.file.Couters$LonPathCounters0orgapache.commons.io.file.Couters$LonPathCounters", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      assertNotNull(treeSet0);
      
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>((SortedSet<? extends ChronoLocalDate>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "orgapache.commons.io.file.Couters$LonPathCounters", (Collection<?>) priorityQueue0, "LGb>h;4PTw=p@+", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // orgapache.commons.io.file.Couters$LonPathCounters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = MockFile.createTempFile("7vDPT1VK3#", "7vDPT1VK3#");
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("7vDPT1VK3#07vDPT1VK3#", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/7vDPT1VK3#07vDPT1VK3#", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte) (-90), 102, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[0];
      Stream<File> stream0 = FileUtils.streamFiles(file0, true, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Stream<File> stream0 = FileUtils.streamFiles(mockFile0, true, (String[]) null);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Attempt to bind two handlers to ", "Attempt to bind two handlers to ");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, true);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Attempt to bind two handlers to /Attempt to bind two handlers to ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Attempt to bind two handlers to ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Attempt to bind two handlers to ", mockFile0.getParent());
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("h", "h");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/h/h' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "NmT!]hITd");
      assertEquals("%oME'C.V90NmT!]hITd", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/%oME'C.V90NmT!]hITd", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/%oME'C.V90NmT!]hITd' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = MockFile.createTempFile("destDir", "' does not exist: '");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/destDir0' does not exist: '", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("destDir0' does not exist: '", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isSymlink(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/destDir0' does not exist: '", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("destDir0' does not exist: '", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "/home/azureuser/home/azureuser/azureuser");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 1656L);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("azureuser", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/home/azureuser/azureuser", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/home/azureuser", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (-1111023L));
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, 1099511562631863L);
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          assertTrue(file0.isDirectory());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertFalse(file0.isFile());
          assertTrue(file0.exists());
          assertEquals("azureuser", file0.getName());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.canWrite());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isHidden());
          assertEquals("/home/azureuser", file0.toString());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/home", file0.getParent());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertNotNull(file0);
          
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:323)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      FileUtils.cleanDirectory(file0);
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals("0 bytes", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals("1 GB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mK;u~v4s }|R2DS=");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "mK;u~v4s }|R2DS=", "T> ", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // T> 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter("R `qFd&*%r", iOCase0);
      assertNotNull(nameFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) nameFileFilter0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "KWp.sFrg+TO=*ooE'", "KWp.sFrg+TO=*ooE'", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // KWp.sFrg+TO=*ooE'
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = MockFile.createTempFile("destDir", "' does not exist: '");
      assertEquals("/tmp/destDir0' does not exist: '", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("destDir0' does not exist: '", file0.getName());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[1];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(prefixFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, prefixFileFilter0, prefixFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/destDir0' does not exist: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"5R#q", "");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp/\"5R#q0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("\"5R#q0", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "\"5R#q");
      assertNotNull(mockFile0);
      
      FileUtils.forceMkdir(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertEquals("\"5R#q", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"5R#q", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/azureuser");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lineIterator((File) mockFile0, "/home/azureuser/home/azureuser/azureuser");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertEquals("tmp", file0.getName());
      //  // Unstable assertion: assertEquals("/", file0.getParent());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/tmp", file0.toString());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertNotNull(file0);
      
      long long0 = FileUtils.lastModified(file0);
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertEquals("tmp", file0.getName());
      //  // Unstable assertion: assertEquals("/", file0.getParent());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/tmp", file0.toString());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertEquals(1755988609124L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.ofEpochMilli((-44L));
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("orgapache.commons.io.file.Couters$LonPathCounters", iOCase0);
      assertNotNull(regexFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) regexFileFilter0, (IOFileFilter) regexFileFilter0);
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "File canonical paths are equal: '%s' (file1='%s', file2='%s')", charset0, false);
      assertEquals("tmp", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp/home/azureuser", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(61L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/home/azureuser/tmp", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1755767590862L, long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "i]\"\"%!9'k-H1I6sp'#", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      assertNotNull(mockFile0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.apache.commons.io.file.Counters$LonPathCounters"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "org.apache.commons.io.file.Counters$LonPathCounters", (Collection<?>) vector0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.io.file.Counters$LonPathCounters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(3L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("tmp", mockFile0.getName());
      assertEquals("/tmp/home/azureuser", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/home/azureuser/tmp", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-6701));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, (-1935339759));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File[] fileArray0 = new File[10];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "%oME'C.V9");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/%oME'C.V90%oME'C.V9
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URL[] uRLArray0 = new URL[3];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(3, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile.createTempFile(":NoX~Q", (String) null, file0);
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "NmT!]hITd");
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = MockFile.createTempFile("*@I<)* r", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/:ar)fG/:ar)fG");
      File file1 = FileUtils.createParentDirectories(file0);
      long long0 = FileUtils.sizeOfDirectory(file1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFile mockFile0 = new MockFile("orgapache.commons.io.file.Couters$LonPathCounters");
      FileUtils.touch(mockFile0);
      FileUtils.sizeOf(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.touch(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed setLastModified(1392409281320) on '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("60\u0005zyWszGaCV", "60\u0005zyWszGaCV", file0);
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file1, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser/LLm4PrTest/ io_experiments'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add("org.apache.commons.io.file.Counters$LonPathCounters");
      FileUtils.writeLines((File) mockFile0, (Collection<?>) hashSet0, ",Wf3=");
      byte[] byteArray0 = FileUtils.readFileToByteArray(mockFile0);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, "");
      byte[] byteArray0 = FileUtils.readFileToByteArray(mockFile0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "org.apache.commons.io.file.Counters$LonPathCounters");
      MockFile mockFile0 = new MockFile(file0, "org.apache.commons.io.file.Counters$LonPathCounters");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '/tmp/%oME'C.V90org.apache.commons.io.file.Counters$LonPathCounters/org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("h", "h");
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/tmp//home/azureuser/tmp", false);
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(mockFile0, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2307)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2282)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2337)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2362)
             // sun.reflect.GeneratedMethodAccessor291.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile mockFile0 = new MockFile("h", "h");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1193)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2227)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2261)
             // sun.reflect.GeneratedMethodAccessor332.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/tmp//home/azureuser/tmp", false);
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser/tmp' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/home/azureuser");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "lastAccessTime");
      byte[] byteArray0 = new byte[3];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/home/azureuser'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Instant instant0 = MockInstant.ofEpochSecond(1099511627776L, 1755863896537L);
      Date date0 = Date.from(instant0);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("com.google.common.jimfs.AttributeProvider", "Character array is missing", file0);
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(file1, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals(0L, file1.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      FileUtils.forceMkdirParent(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chronoZonedDateTime", "chronoZonedDateTime");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/chronoZonedDateTime/chronoZonedDateTime", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.copyDirectory(file1, file0);
      assertEquals(1755863896537L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      assertFalse(file0.canRead());
      
      File file1 = FileUtils.getTempDirectory();
      assertFalse(file1.canWrite());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home", "user.home");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockFile mockFile0 = new MockFile("q7'{", "q7'{");
      FileUtils.deleteDirectory(mockFile0);
      assertTrue(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, 1595L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].");
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File file0 = FileUtils.getUserDirectory();
      linkedList0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedList0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory((Iterable<File>) linkedList0, file0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp/home/azureuser/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileUtils.copyInputStreamToFile(byteArrayInputStream0, mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("KWp.sFrg+TO=*ooE'");
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile("s2UT!", "s2UT!", file0);
          File file1 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyDirectoryToDirectory(file0, file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/s2UT!0s2UT!\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1311)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:698)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:629)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:530)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:729)
             // sun.reflect.GeneratedMethodAccessor269.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = FileUtils.createParentDirectories(mockFile0);
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          File file1 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file1, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:323)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1191)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2227)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2261)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2360)
             // sun.reflect.GeneratedMethodAccessor291.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "org.apache.commons.io.file.Counters$LonPathCounters");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "/tmp//home/azureuser/tmp");
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, file0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "m90^;xJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = MockFile.createTempFile("%oME'C.V9", "NmT!]hITd");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "NmT!]hITd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/tmp", "/tmp//home/azureuser/tmp");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, (String) null);
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot delete file: ", "Attempt to bind two handlers to ");
      MockFile mockFile1 = new MockFile("Attempt to bind two handlers to ", "Attempt to bind two handlers to ");
      MockFile.createTempFile("\"_%;go3g1qj>C6I", "W]FHbd=R?_43#3X|", (File) mockFile0);
      boolean boolean0 = FileUtils.contentEquals(mockFile1, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      boolean boolean0 = FileUtils.contentEquals((File) null, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J0sp>7]h`Jd");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(2147483647L);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_EB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 EB", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "/tmp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(hashSet0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = MockFile.createTempFile("*@I<)* r", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/:ar)fG/:ar)fG");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/*@I<)* r0/tmp/home/azureuser/LLm4PrTest/ io_experiments/:ar)fG/:ar)fG'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockDate mockDate0 = new MockDate((-483), (-483), (-483));
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedHashSet<IsoEra> linkedHashSet0 = new LinkedHashSet<IsoEra>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "o$w:birenmp46", (Collection<?>) linkedHashSet0, "o$w:birenmp46");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-2147483647), (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/i]\"\"%!9'k-H1I6sp'#/i]\"\"%!9'k-H1I6sp'#'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (String[]) null, true);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      File file0 = MockFile.createTempFile("The wildcard list must not be null", "The wildcard list must not be null");
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "The wildcard list must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The wildcard list must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      LocalTime localTime0 = MockLocalTime.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) thaiBuddhistDate0, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuseG/LLm4PrTest", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (String) null, (Collection<?>) linkedHashSet0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$LonPathCounters");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: 'org.apache.commons.io.file.Counters$LonPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser/LLm4PMTest/ io_experimets", "/home/azureuser/LLm4PMTest/ io_experimets");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PMTest/ io_experimets
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Skip count must be non-negative, actual: ");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      FileUtils.writeStringToFile((File) mockFile0, "i]\"\"%!9'k-H1I6sp'#", false);
      assertFalse(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("", iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, prefixFileFilter0, prefixFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1125899906842624L, FileUtils.ONE_PB);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "1gQ(k3oWR;(T\"", (Collection<?>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "net.bytebuddy.build.CachedReturnPlugin";
      stringArray0[1] = "Skip count must be non-negative, actual: ";
      stringArray0[2] = "x}6Q<@W]v8`su5";
      stringArray0[3] = "";
      stringArray0[4] = "7c";
      stringArray0[5] = "|%rh(=q|E@llr%]";
      stringArray0[6] = "XJ,&;3fx%1B[w}&$B+";
      stringArray0[7] = "mZU9[vo$!d";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "|%rh(=q|E@llr%]", charset0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.build.CachedReturnPlugin/Skip count must be non-negative, actual: /x}6Q<@W]v8`su5/7c/|%rh(=q|E@llr%]/XJ,&;3fx%1B[w}&$B+/mZU9[vo$!d", file0.toString());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdirParent(file0);
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "Buu\"}Lvj", "Buu\"}Lvj");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Buu\"}Lvj
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(1073741824L);
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i]\"\"%!9'k-H1I6sp'#", "i]\"\"%!9'k-H1I6sp'#");
      Instant instant0 = MockInstant.now();
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }
}
