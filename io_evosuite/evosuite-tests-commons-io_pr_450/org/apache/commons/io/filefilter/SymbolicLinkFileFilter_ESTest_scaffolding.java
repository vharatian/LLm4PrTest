/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Aug 23 18:35:44 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SymbolicLinkFileFilter_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.io.filefilter.SymbolicLinkFileFilter"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/ io_experiments"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SymbolicLinkFileFilter_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.io.filefilter.IOFileFilter",
      "org.apache.commons.io.filefilter.SymbolicLinkFileFilter",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.apache.commons.io.file.PathFilter",
      "org.apache.commons.io.function.IOSupplier",
      "org.apache.commons.io.file.PathVisitor"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.nio.file.attribute.BasicFileAttributes", false, SymbolicLinkFileFilter_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SymbolicLinkFileFilter_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.io.filefilter.IOFileFilter",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.apache.commons.io.filefilter.SymbolicLinkFileFilter",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "org.apache.commons.io.filefilter.PathVisitorFileFilter",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "org.apache.commons.io.input.Tailer",
      "org.apache.commons.io.build.AbstractSupplier",
      "org.apache.commons.io.build.AbstractOriginSupplier",
      "org.apache.commons.io.build.AbstractStreamBuilder",
      "org.apache.commons.io.input.Tailer$Builder",
      "org.apache.commons.io.filefilter.EmptyFileFilter",
      "org.apache.commons.io.input.TailerListenerAdapter",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "org.apache.commons.io.filefilter.AgeFileFilter",
      "org.apache.commons.io.filefilter.FalseFileFilter",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "org.apache.commons.io.filefilter.CanWriteFileFilter",
      "org.apache.commons.io.filefilter.CanReadFileFilter",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "org.apache.commons.io.input.XmlStreamReader$Builder",
      "org.apache.commons.io.Charsets",
      "org.apache.commons.io.build.AbstractOrigin",
      "org.apache.commons.io.build.AbstractOrigin$FileOrigin",
      "org.apache.commons.io.input.Tailer$TailablePath",
      "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "org.apache.commons.io.filefilter.CanExecuteFileFilter",
      "org.apache.commons.io.filefilter.HiddenFileFilter",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "org.apache.commons.io.build.AbstractOrigin$PathOrigin",
      "org.apache.commons.io.StandardLineSeparator",
      "org.apache.commons.io.IOUtils",
      "org.apache.commons.io.filefilter.DirectoryFileFilter",
      "org.apache.commons.io.FileUtils",
      "org.apache.commons.io.function.Uncheck",
      "org.apache.commons.io.filefilter.FileFileFilter",
      "org.apache.commons.io.filefilter.PathEqualsFileFilter",
      "org.apache.commons.io.filefilter.FileEqualsFileFilter",
      "org.apache.commons.io.build.AbstractOrigin$OutputStreamOrigin",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "org.apache.commons.io.output.WriterOutputStream$Builder",
      "org.apache.commons.io.build.AbstractOrigin$ReaderOrigin",
      "org.apache.commons.io.filefilter.WildcardFileFilter",
      "org.apache.commons.io.filefilter.WildcardFileFilter$Builder",
      "org.apache.commons.io.build.AbstractOrigin$URIOrigin",
      "org.apache.commons.io.input.MemoryMappedFileInputStream$Builder",
      "org.apache.commons.io.input.MemoryMappedFileInputStream",
      "org.apache.commons.io.build.AbstractOrigin$InputStreamOrigin",
      "org.apache.commons.io.function.Constants",
      "org.apache.commons.io.input.ReaderInputStream$Builder",
      "org.apache.commons.io.input.ReaderInputStream",
      "org.apache.commons.io.output.WriterOutputStream",
      "org.apache.commons.io.input.ReadAheadInputStream$Builder",
      "org.apache.commons.io.input.ReadAheadInputStream",
      "org.apache.commons.io.build.AbstractOrigin$WriterOrigin",
      "org.apache.commons.io.input.RandomAccessFileInputStream$Builder",
      "org.apache.commons.io.input.RandomAccessFileInputStream",
      "org.apache.commons.io.RandomAccessFileMode",
      "org.apache.commons.io.file.SimplePathVisitor",
      "org.apache.commons.io.file.NoopPathVisitor",
      "org.apache.commons.io.ByteOrderMark",
      "org.apache.commons.io.input.XmlStreamReader",
      "org.apache.commons.io.input.BufferedFileChannelInputStream$Builder",
      "org.apache.commons.io.input.BufferedFileChannelInputStream",
      "org.apache.commons.io.output.LockableFileWriter$Builder",
      "org.apache.commons.io.output.LockableFileWriter",
      "org.apache.commons.io.input.MessageDigestCalculatingInputStream$Builder",
      "org.apache.commons.io.input.ProxyInputStream",
      "org.apache.commons.io.input.ObservableInputStream",
      "org.apache.commons.io.input.MessageDigestCalculatingInputStream",
      "org.apache.commons.io.file.PathUtils",
      "org.apache.commons.io.output.DeferredFileOutputStream$Builder",
      "org.apache.commons.io.output.ThresholdingOutputStream",
      "org.apache.commons.io.output.DeferredFileOutputStream",
      "org.apache.commons.io.function.IOConsumer",
      "org.apache.commons.io.output.AbstractByteArrayOutputStream",
      "org.apache.commons.io.output.ByteArrayOutputStream",
      "org.apache.commons.io.input.BOMInputStream$Builder",
      "org.apache.commons.io.input.BOMInputStream",
      "org.apache.commons.io.output.FileWriterWithEncoding$Builder"
    );
  }
}
