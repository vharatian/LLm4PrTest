/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:35:44 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import org.apache.commons.io.filefilter.SymbolicLinkFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SymbolicLinkFileFilter_ESTest extends SymbolicLinkFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      File file0 = MockFile.createTempFile("rYh=cqHfl]D*PcXw-KJ", "o");
      Path path0 = file0.toPath();
      boolean boolean0 = symbolicLinkFileFilter0.isSymbolicLink(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      File file0 = MockFile.createTempFile("rYh=cqHfl]D*PcXw-KJ", "o");
      Path path0 = file0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult1 = symbolicLinkFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.SKIP_SUBTREE, fileVisitResult1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter();
      // Undeclared exception!
      try { 
        symbolicLinkFileFilter0.isSymbolicLink((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter();
      // Undeclared exception!
      try { 
        symbolicLinkFileFilter0.accept((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter();
      // Undeclared exception!
      try { 
        symbolicLinkFileFilter0.accept((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.SymbolicLinkFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      File file0 = MockFile.createTempFile("rYh=cqHfl]D*PcXw-KJ", "o");
      boolean boolean0 = symbolicLinkFileFilter0.accept(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter((FileVisitResult) null, (FileVisitResult) null);
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.SymbolicLinkFileFilter", "org.apache.commons.io.filefilter.SymbolicLinkFileFilter");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      symbolicLinkFileFilter0.accept(path0, basicFileAttributes0);
  }
}
