/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:37:56 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[7];
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 7 actual: 2
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)1);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, 3049);
      try { 
        IOUtils.readFully(inputStream0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 8 actual: 7
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[0];
      long long0 = IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) byteArrayOutputStream0, 0L, (long) 0, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("inputStream");
      char[] charArray0 = new char[7];
      IOUtils.write(charArray0, (OutputStream) mockPrintStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[9];
      IOUtils.write(byteArray0, (Writer) stringWriter0, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      byte[] byteArray0 = new byte[3];
      IOUtils.write(byteArray0, (Writer) bufferedWriter0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer();
      IOUtils.write(stringBuffer0, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write("QusO|x~>T\"yAxOh|<G", (OutputStream) byteArrayOutputStream0);
      assertEquals(18, byteArrayOutputStream0.size());
      assertEquals("QusO|x~>T\"yAxOh|<G", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          File file0 = MockFile.createTempFile("8G_5?I2@J46N1ffKH", "CLASS_FILE_SUFFIX");
          // Undeclared exception!
          try { 
            IOUtils.copy(uRL0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/8G_5?I2@J46N1ffKH0CLASS_FILE_SUFFIX\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.IOUtils.copy(IOUtils.java:1233)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1288L);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      IOUtils.copy((Reader) inputStreamReader0, (OutputStream) dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Chars to skip: ");
      String string0 = IOUtils.toString((Reader) stringReader0);
      assertEquals("Chars to skip: ", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Bytes to skip: ", (String) null);
      assertEquals(15, inputStream0.available());
      
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      String string0 = IOUtils.toString(inputStream1, (String) null);
      assertEquals("Bytes to skip: ", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", charset0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = IOUtils.toCharArray((Reader) inputStreamReader0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = IOUtils.toCharArray((InputStream) byteArrayInputStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)30, (-1414));
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, (byte)101);
      byte[] byteArray1 = IOUtils.toByteArray((Reader) pushbackReader0, charset0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0, 1L);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 88, 88);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(88, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      List<String> list0 = IOUtils.readLines((Reader) inputStreamReader0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.toString((InputStream) byteArrayInputStream0, charset0);
      List<String> list0 = IOUtils.readLines((InputStream) byteArrayInputStream0, charset0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      List<String> list0 = IOUtils.readLines((InputStream) byteArrayInputStream0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("content-length");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertTrue(list0.contains("content-length"));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1058, (byte)19);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      int int0 = IOUtils.read((InputStream) bufferedInputStream0, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = IOUtils.getCharArray();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      ByteBuffer byteBuffer0 = charset0.encode(";");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) charBuffer0, charBuffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      long long0 = IOUtils.consume(byteArrayInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray((int) (byte)50);
      assertEquals(50, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray((int) (byte)0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      linkedHashSet0.add(stringBuilder0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("inputStream");
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "inputStream", (OutputStream) mockPrintStream0, "inputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // inputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("33bO! N'D]H@");
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, "33bO! N'D]H@", (OutputStream) mockPrintStream0, "!C]@");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !C]@
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.writeChunked(charArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0, "org.apache.commons.io.output.ByteArrayOutputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.output.ByteArrayOutputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) stringWriter0, "npyhsOGlO");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // npyhsOGlO
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("adPXL0Uv5mor4", true);
      try { 
        IOUtils.write(byteArray0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((byte)92);
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write("I@h(+OJ9No0(vrn#Kq", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write("", (OutputStream) pipedOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write((CharSequence) "I@h(+OJ9No0(vrn#Kq", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "_NFR5B[q FHs#=Io{", (OutputStream) null, "bX07qMUJ:");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // bX07qMUJ:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L/fbY>5{8%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null, "%Ob");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %Ob
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((URL) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      try { 
        IOUtils.toString(uRI0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URI uRI0 = MockURI.URI("R../1Zf4", "Primitive values are not supposed to be proxied: ", "");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 92, (-2521));
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0, "Skip count must be non-negative, actual: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Skip count must be non-negative, actual: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("", "AxXFcQKY");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // AxXFcQKY
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) stringBuffer0, "net.bytebuddy.build.AccessControllerPlugin");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.build.AccessControllerPlugin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      try { 
        IOUtils.toByteArray(uRLConnection0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) inputStreamReader0, "net.bytebuddy.build.CachedReturnPlugin");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.build.CachedReturnPlugin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream(";l", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) inputStreamReader0, "{[0-9]+}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {[0-9]+}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      try { 
        IOUtils.toByteArray((Reader) bufferedReader0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2177), (byte)3);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, (int) (byte)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null, 1554);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      try { 
        IOUtils.skipFully((Reader) pushbackReader0, (long) 47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, 3474L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.skipFully((InputStream) pipedInputStream0, 2202L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: @DefaultLocale can only be used with language tag if language, country, and variant are not set
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToString((String) null, charset0, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.resourceToString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("dos:readonly", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: dos:readonly
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(8192);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, 8192);
      try { 
        IOUtils.readLines((Reader) pushbackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0, (-2734), 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-105), 1);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) byteArrayInputStream0, 6);
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charsetDecoder0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      inputStreamReader0.close();
      char[] charArray0 = new char[3];
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, byteArray0, (-1817), (int) (byte)16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0, 3811, 921);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, byteArray0, (int) (byte)92, (-2145604833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2145604833
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      try { 
        IOUtils.readFully((InputStream) pushbackInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, 1058);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      // Undeclared exception!
      try { 
        IOUtils.read((ReadableByteChannel) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, charArray0, (-2145547232), 323);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0, (int) (byte) (-1), (int) (byte)85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) byteArrayInputStream0, "net.bytebuddy.build.ToStringPlugin");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.build.ToStringPlugin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Chars to skip: ");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) pipedWriter0, (long) 8192, 1947L, (char[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 8192 actual: 15
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) charArrayWriter0, 2147483647L, (-1497L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        IOUtils.copyLarge((Reader) bufferedReader0, (Writer) charArrayWriter0, (-3756L), (-1114L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The wildard array mustnt be null");
      Consumer<IOException> consumer0 = (Consumer<IOException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IOUtils.closeQuietly((Closeable) inputStreamReader0, consumer0);
      try { 
        IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockFileWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Qz>zBVlTiLYY93?-", false);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) mockFileOutputStream0, 2380L, 2380L, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`", false);
      try { 
        IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0, 1528L, 902L, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 1528 actual: 20
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      IOUtils.copy((Reader) bufferedReader0, (Appendable) stringWriter0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|hb8Kq");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      PipedReader pipedReader0 = new PipedReader(3694);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      try { 
        IOUtils.copy((Reader) bufferedReader0, (Appendable) bufferedWriter0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Chars to skip: ");
      MockFile mockFile0 = new MockFile((File) null, "S");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Consumer<IOException> consumer0 = (Consumer<IOException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IOUtils.closeQuietly((Closeable) stringReader0, consumer0);
      try { 
        IOUtils.copy((Reader) stringReader0, (Writer) mockFileWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      File file0 = MockFile.createTempFile("lfs\"?=;N^6iQ|", (String) null);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      try { 
        IOUtils.contentEqualsIgnoreEOL(mockFileReader0, pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2599);
      IOUtils.close((Closeable) pushbackInputStream0, iOConsumer0);
      try { 
        IOUtils.consume(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, 508);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) pipedWriter0, (-640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) pipedReader0, (-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, (-2977));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, 2025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>(linkedHashSet0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("B");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockPrintStream0);
      IOUtils.writeLines((Collection<?>) linkedList0, "S", (OutputStream) bufferedOutputStream0, charset0);
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      IOUtils.write("", (OutputStream) byteArrayOutputStream0, (Charset) null);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((CharSequence) "", (OutputStream) byteArrayOutputStream0, charset0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("inputStream");
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[0];
      IOUtils.write(charArray0, (OutputStream) mockPrintStream0, charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = MockFile.createTempFile("_NFR5B[q FHs#=Ijo{", "_NFR5B[q FHs#=Ijo{");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0, charset0);
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      String string0 = IOUtils.toString(uRL0, (Charset) null);
      assertEquals("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nfile\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nfunction\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nStandardLineSeparator.class\nStreamIterator.class\nTaggedIOException.class\nThreadMonitor.class\nUncheckedIOExceptions.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)92, (byte)92);
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)33);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      byte[] byteArray1 = IOUtils.toByteArray((Reader) inputStreamReader0, charset0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toByteArray((Reader) pipedReader0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, 3140);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 20, expected: 3140
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, (-3863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -3863
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      try { 
        IOUtils.skipFully((Reader) inputStreamReader0, (long) (byte)107);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 107 actual: 1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.skipFully((Reader) charArrayReader0, 0L);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IOUtils.skipFully((InputStream) null, 0L);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      long long0 = IOUtils.skip((Reader) inputStreamReader0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D5ro'XliVCvo7?-j");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1601);
      long long0 = IOUtils.skip((Reader) bufferedReader0, 1600L);
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) bufferedReader0, (-2273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -2273
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)33);
      long long0 = IOUtils.skip(inputStream0, 1600L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      long long0 = IOUtils.skip((InputStream) byteArrayInputStream0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) null, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToURL("=Ou", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: =Ou
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("", (ClassLoader) null);
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      InputStream inputStream0 = MockURL.openStream(uRL0);
      IOUtils.readFully(inputStream0, 10);
      assertEquals(3, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      List<String> list0 = IOUtils.readLines((Reader) inputStreamReader0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = new char[6];
      int int0 = IOUtils.read((Reader) inputStreamReader0, charArray0, 1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I@h(+OJ9No0(vrn#Kq");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("I@h(+OJ9No0(vrn#Kq");
      byte[] byteArray0 = new byte[0];
      int int0 = IOUtils.read((InputStream) mockFileInputStream0, byteArray0, 47, 47);
      assertEquals(0, int0);
      assertEquals((-1), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, (-517), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, 9, (int) (byte)92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Resource not found: ", false);
      char[] charArray0 = new char[4];
      IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockFileWriter0, 0L, (long) (byte) (-105), charArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray1 = IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) null, (-402L), (-402L), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = new char[6];
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) null, (-3203L), (long) 1, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I@h(+OJ9No0(vrn#Kq");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 18);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockPrintWriter0, (long) 0, 0L, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (int) (byte)92);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ef");
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, byteArray0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IOUtils.close((URLConnection) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)92, (byte)92);
      IOUtils.close((Closeable) byteArrayInputStream0);
      assertEquals((-90), byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URI uRI0 = MockURI.URI("/za:38'7HA!", "/za:38'7HA!", "", "TL?9!,z_:", "");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ky3p-TH2-foDK!z;oi", "Length to read: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) null, (OutputStream) mockPrintStream0, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("?T'I>^%KVz]+4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      try { 
        IOUtils.copyLarge((InputStream) pipedInputStream0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IOUtils.closeQuietly((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      MockFileWriter mockFileWriter0 = new MockFileWriter("The wildard array mustnt be null");
      IOUtils.copy((InputStream) byteArrayInputStream0, (Writer) mockFileWriter0, charset0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The wildard array mustnt be null");
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockFileWriter0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.byteArray((-912));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("/H|}l#", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: /H|}l#
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Writer writer0 = IOUtils.writer(stringBuilder0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Resource not found: ", false);
      Writer writer0 = IOUtils.writer(mockFileWriter0);
      assertSame(mockFileWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add("");
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "t,R3GJ.(^#CMaT9<", (Writer) pipedWriter0);
      assertFalse(linkedHashSet0.contains("t,R3GJ.(^#CMaT9<"));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I@h(+OJ9No0(vrn#Kq");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      IOUtils.writeChunked(charArray0, (Writer) bufferedWriter0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.writeChunked((char[]) null, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.writeChunked(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(20, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.writeChunked((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringBuffer stringBuffer0 = new StringBuffer((byte)92);
      try { 
        IOUtils.write(stringBuffer0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2508);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      IOUtils.write((StringBuffer) null, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.write((String) null, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((String) null, (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "S");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      IOUtils.write((CharSequence) "d>R5 J/", (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = MockFile.createTempFile("_NFR5B[q FHs#=Ijo{", "_NFR5B[q FHs#=Ijo{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      char[] charArray0 = new char[7];
      IOUtils.write(charArray0, (Writer) mockPrintWriter0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.write((char[]) null, (Writer) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((char[]) null, (OutputStream) byteArrayOutputStream0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      File file0 = MockFile.createTempFile("org.apache.commons.io.filefilter.CanReadFileFilter", "Expected an interface instead of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      IOUtils.write(byteArray0, (OutputStream) mockPrintStream0);
      assertEquals(20L, file0.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      File file0 = MockFile.createTempFile("_NFR5B[q FHs#=Ijo{", "_NFR5B[q FHs#=Ijo{");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      String string0 = IOUtils.toString((Reader) mockFileReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, (String) null);
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, (long) 3166);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 20, expected: 3166
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0, 1);
      assertEquals(19, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0, (int) (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, (-516L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -516
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) sequenceInputStream0);
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, byteArray0, (-1010), 2617);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 2617 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("%s does not implement the CartesianAnnotationConsumer<T> interface.", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, 2022);
      assertSame(bufferedReader1, bufferedReader0);
      assertEquals(67, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) charArrayReader0, (-1093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qPp[4gYW=$g#D'9c21", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) fileChannel0, (-1452L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1452
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, (-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -7
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) bufferedReader0, (-1722L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1722
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      IOUtils.skipFully((ReadableByteChannel) null, 0L);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, 3098L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 13, 13);
      try { 
        IOUtils.skipFully((InputStream) byteArrayInputStream0, 15L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 15 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) byteArrayInputStream0, (long) (byte) (-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -116
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = IOUtils.readLines((InputStream) byteArrayInputStream0, charset0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = new char[3];
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 3 actual: 2
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) inputStreamReader0, charArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L(F");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) stringReader0, charArray0, 743, (-2516));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2516
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(215834723);
      // Undeclared exception!
      try { 
        IOUtils.read((ReadableByteChannel) datagramChannel0, byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      int int0 = IOUtils.read((ReadableByteChannel) datagramChannel0, byteBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, 616);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 616 actual: 20
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, 398, (-2143272894));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2143272894
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "\r\n");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = IOUtils.length(charArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("V~fPqINEZ]<y,");
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockFileWriter0, (-809L), (-11L));
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0, (-1452L), 1L, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, (-1312L), (long) (byte)92);
      assertEquals("\u0000\u0000\u0000", charArrayWriter0.toString());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      char[] charArray0 = new char[1];
      try { 
        IOUtils.copyLarge((Reader) bufferedReader0, (Writer) null, (-1452L), 1L, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      long long0 = IOUtils.copyLarge((Reader) pipedReader0, (Writer) pipedWriter0, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TPbs%pW6y@n0", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      long long0 = IOUtils.copyLarge((InputStream) null, (OutputStream) bufferedOutputStream0, (-1L), 338L, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yAVip$9K'5N$*", true);
      long long0 = IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0, 1L, 1391L, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      long long0 = IOUtils.copy(uRL0, (OutputStream) pipedOutputStream0);
      assertEquals(763, pipedInputStream0.available());
      assertEquals(763L, long0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Chars to skip: ");
      MockFile mockFile0 = new MockFile((File) null, "S");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      long long0 = IOUtils.copy((Reader) stringReader0, (Appendable) mockFileWriter0, charBuffer0);
      assertEquals(" ", charBuffer0.toString());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(inputStreamReader0, inputStreamReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = MockFile.createTempFile("_NFR5B[q FHs#=Ijo{", "_NFR5B[q FHs#=Ijo{");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      MockFileReader mockFileReader1 = new MockFileReader(file0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(mockFileReader1, mockFileReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "_NFR5B[q FHs#=Io{", (String) null);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) charArrayReader0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayReader0.read(charBuffer0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      pushbackReader0.unread(3236);
      boolean boolean0 = IOUtils.contentEquals((Reader) charArrayReader0, (Reader) pushbackReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(719L);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) pushbackReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) pushbackReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      boolean boolean0 = IOUtils.contentEquals((Reader) null, (Reader) inputStreamReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      boolean boolean0 = IOUtils.contentEquals((Reader) pipedReader0, (Reader) pipedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      IOUtils.copyLarge((InputStream) byteArrayInputStream0, (OutputStream) bufferedOutputStream0, (-1689L), (-1689L), byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, (InputStream) sequenceInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) sequenceInputStream0, (InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = IOUtils.contentEquals((InputStream) null, (InputStream) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, (InputStream) sequenceInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      IOUtils.write("\u4E2D\u56FD\u8A9E", (Writer) bufferedWriter0);
      Consumer<IOException> consumer0 = (Consumer<IOException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IOUtils.closeQuietly((Closeable) bufferedWriter0, consumer0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[2];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(2, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) null, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      IOUtils.close((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Closeable[] closeableArray0 = new Closeable[5];
      closeableArray0[2] = (Closeable) datagramChannel0;
      IOUtils.close(closeableArray0);
      assertEquals(5, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Chars to skip: ", false);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) mockFileWriter0, 518);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0, (-647));
      assertSame(bufferedWriter0, bufferedWriter1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) outputStreamWriter0, (int) (byte)92);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0);
      assertSame(bufferedWriter1, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, 1804);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0, 31);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 31);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) lineNumberReader0, (-645));
      assertSame(lineNumberReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, (-510));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D5ro'XliVCvo7?-j");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1601);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Resource not found: ", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, 13);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) byteArrayOutputStream0, (-495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3559);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0, 3559);
      assertSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) byteArrayInputStream0, (-492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Resource not found: ");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      BufferedInputStream bufferedInputStream1 = IOUtils.buffer((InputStream) bufferedInputStream0);
      assertEquals(20, inputStream0.available());
      assertSame(bufferedInputStream1, bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) stringWriter0, "net.bytebuddy.description.type.TypeDescription$Generic");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // net.bytebuddy.description.type.TypeDescription$Generic
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) sequenceInputStream0, "_NFR5B[q FHs#=Ijo{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _NFR5B[q FHs#=Ijo{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 8192);
      try { 
        IOUtils.toBufferedInputStream((InputStream) pushbackInputStream0, 8192);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) null, "Skip count must be non-negative, actual: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Skip count must be non-negative, actual: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray(":j$#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: :j$#
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "org.apache.commons.io.file.Counters$LongPathCounters");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.io.file.Counters$LongPathCounters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("<6.''Yu`@1/3PF`bv(X");
      IOUtils.closeQuietly((OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0, "P");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The wildard array mustnt be null");
      Writer writer0 = IOUtils.writer(mockPrintStream0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) byteArrayInputStream0, writer0, "The wildard array mustnt be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The wildard array mustnt be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("ph.:T3W+bR$?rRJ0#");
      IOUtils.write((CharSequence) "ph.:T3W+bR$?rRJ0#", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("+90,zv~}rY|y&=");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) byteArrayOutputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      MockFile mockFile0 = new MockFile("mwFf/sLp1.-f2r47}{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      IOUtils.writeLines((Collection<?>) linkedHashSet0, "))3x-hZ[Pxr+fnp", (OutputStream) mockFileOutputStream0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("<O5b\"m5ZsU");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IOUtils.writeLines((Collection<?>) linkedList0, "yoUGM", (OutputStream) mockPrintStream0, (String) null);
      assertFalse(linkedList0.contains("<O5b\"m5ZsU"));
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) pipedReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The wildard array mustnt be null");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) inputStreamReader0, (OutputStream) mockPrintStream0, "|bq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |bq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Selector selector0 = Selector.open();
      IOUtils.closeQuietly(selector0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = IOUtils.read((InputStream) byteArrayInputStream0, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Chars to skip: ");
      // Undeclared exception!
      try { 
        IOUtils.write("Chars to skip: ", (OutputStream) mockFileOutputStream0, "Chars to skip: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Chars to skip: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.closeQuietly((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, (-2122061305));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      LineIterator lineIterator0 = IOUtils.lineIterator((InputStream) byteArrayInputStream0, charset0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\u0000");
      assertEquals(1, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.closeQuietly((Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("G&sJIYq\"F.H\"DM", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = IOUtils.resourceToString("", (Charset) null);
      assertEquals("ByteOrderMark.class\nByteOrderParser.class\nCharsets.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nfile\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nfunction\nHexDump.class\ninput\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\nserialization\nStandardLineSeparator.class\nStreamIterator.class\nTaggedIOException.class\nThreadMonitor.class\nUncheckedIOExceptions.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      long long0 = IOUtils.consume(byteArrayInputStream0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) stringBuffer0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = MockFile.createTempFile("_NFR5B[q FHs#=Ijo{", "_NFR5B[q FHs#=Ijo{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) mockPrintStream0, "_NFR5B[q FHs#=Ijo{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _NFR5B[q FHs#=Ijo{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      Socket socket0 = socketChannel0.socket();
      IOUtils.closeQuietly(socket0);
      assertTrue(socket0.isInputShutdown());
      assertFalse(socketChannel0.isOpen());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      char[] charArray0 = IOUtils.toCharArray((Reader) inputStreamReader0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, 2147483647L, 2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 2147483647 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.copy((Reader) pipedReader0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToByteArray("B", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: B
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[0];
      try { 
        IOUtils.write(charArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = IOUtils.toInputStream("appendable");
      int int0 = IOUtils.copy(inputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals(10, byteArrayOutputStream0.size());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, (-2122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2122
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader((byte)92);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      try { 
        IOUtils.contentEquals((Reader) pipedReader0, (Reader) pushbackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1880);
      IOUtils.closeQuietly((Reader) pipedReader0);
  }
}
