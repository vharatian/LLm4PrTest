/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:02:20 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.CopyOption;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.NotDirectoryException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.PathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" is not static", " is not static");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(path0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      MockFile mockFile1 = new MockFile("");
      Path path1 = mockFile1.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.TERMINATE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      URI uRI0 = MockURI.aFileURI;
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("dos", "dos");
      Path path0 = file0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0, 127, linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      Path path0 = mockFile0.toPath();
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("}[3t !|}a2g0*?", "}[3t !|}a2g0*?");
      Path path0 = mockFile0.toPath();
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, path0, set0, 96);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, "", "", "Ee");
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>(10, 1.0F);
      linkedHashSet0.add((Path) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize(linkedHashSet0, (Path) null, true, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("creationTime", "creationTime");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-K1'9Y6_-{T)A", "-K1'9Y6_-{T)A");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("dos", "dos");
      Path path0 = file0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0, 3195, linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-208), linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.DeletingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8dW'gyH*b{KHh2dmD", "8dW'gyH*b{KHh2dmD");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Paths have different roots: %s, %s", "Paths have different roots: %s, %s");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      URL uRL0 = MockURL.getHttpExample();
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        PathUtils.copyFile(uRL0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.copyDirectory(path0, path0, (CopyOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = MockFile.createTempFile("dos", "dos");
      Path path0 = file0.toPath();
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<St|A`HB3$#ur{Z", "6j");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_%Ow]C<0|~", "_%Ow]C<0|~");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, (LinkOption[]) null, (OpenOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[0];
      linkOptionArray0[4] = linkOptionArray0[1];
      linkOptionArray0[5] = linkOptionArray0[1];
      linkOptionArray0[6] = linkOptionArray0[2];
      linkOptionArray0[7] = linkOptionArray0[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7z{ ?jhu719*B~D+z8");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";HBGP{&f?qQ/\"", ";HBGP{&f?qQ/\"");
      Path path0 = mockFile0.toPath();
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OHLusrO<#", "OHLusrO<#");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("net.bytebuddy.description.NamedElement");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"net.bytebuddy.description.NamedElement\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:282)
             // sun.reflect.GeneratedMethodAccessor133.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Vu", "Vu");
      Path path0 = mockFile0.toPath();
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, (Set<FileVisitOption>) linkedHashSet0, 1121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.EmptyFileFilter");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_%Ow]C<0|~", "_%Ow]C<0|~");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 215834723, (LinkOption[]) null, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>(10, 1.0F);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, (Path) null, true, comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedList0, path0, false, comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      File file0 = MockFile.createTempFile("dos", "dos");
      Path path0 = file0.toPath();
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.description.NamedElement");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      MockFile mockFile1 = new MockFile("", "PPG3'@\"%m)`ta$6`S");
      Path path1 = mockFile1.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOptionArray0[0];
      linkOptionArray0[3] = linkOptionArray0[0];
      linkOptionArray0[4] = linkOptionArray0[1];
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOptionArray0[2];
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E=ov#v");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^m8/ub<?|=x\"$|dd?11");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ISK6\"P", "MOL2JZJ\"n@;N");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NotDirectoryException");
      
      } catch(NotDirectoryException e) {
         //
         // /
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("&ywOP");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"&ywOP\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:282)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:254)
             // sun.reflect.GeneratedMethodAccessor132.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      MockFile mockFile1 = new MockFile("Cannot cache the value of a method with parameters: ", "s/tAM?");
      Path path1 = mockFile1.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      MockFile mockFile1 = new MockFile("Cannot cache the value of a method with parameters: ", "s/tAM?");
      Path path1 = mockFile1.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      File file0 = MockFile.createTempFile("d\"Q<|", "d\"Q<|");
      Path path0 = file0.toPath();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_van6HM,JCB8AJ?^j");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.delete(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.DeletingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, "zv", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
