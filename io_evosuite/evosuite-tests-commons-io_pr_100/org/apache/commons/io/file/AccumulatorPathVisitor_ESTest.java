/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:58:09 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Comparator;
import java.util.List;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AccumulatorPathVisitor_ESTest extends AccumulatorPathVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("#uEGex");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeFiles(path0, false, comparator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      List<Path> list0 = accumulatorPathVisitor0.relativizeDirectories(path0, false, (Comparator<? super Path>) null);
      assertTrue(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("#uEGex");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertTrue(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      assertTrue(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.visitFile((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("bindingMechanic", "bindingMechanic");
      Path path0 = mockFile0.toPath();
      accumulatorPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeFiles((Path) null, false, (Comparator<? super Path>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("M'");
      Path path0 = mockFile0.toPath();
      accumulatorPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
      MockFile mockFile1 = new MockFile(mockFile0, "M'");
      Path path1 = mockFile1.toPath();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeFiles(path1, true, (Comparator<? super Path>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn((-654L)).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      MockFile mockFile1 = new MockFile("", "");
      Path path1 = mockFile1.toPath();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeDirectories(path1, true, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = null;
      try {
        accumulatorPathVisitor0 = new AccumulatorPathVisitor((Counters.PathCounters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathCounter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor(counters_PathCounters0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeDirectories((Path) null, true, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("M'");
      Path path0 = mockFile0.toPath();
      accumulatorPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
      AccumulatorPathVisitor accumulatorPathVisitor1 = AccumulatorPathVisitor.withLongCounters();
      boolean boolean0 = accumulatorPathVisitor1.equals(accumulatorPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withLongCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals(countingPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals(accumulatorPathVisitor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      AccumulatorPathVisitor accumulatorPathVisitor1 = AccumulatorPathVisitor.withBigIntegerCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals(accumulatorPathVisitor1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      List<Path> list0 = accumulatorPathVisitor0.relativizeFiles(path0, false, (Comparator<? super Path>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeDirectories((Path) null, true, comparator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      accumulatorPathVisitor0.hashCode();
  }
}
