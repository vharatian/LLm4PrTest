/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:56:02 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.math.BigInteger;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) arrayList0, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3sK5S?t?{fPQz]c|", ":VB3jbw");
      byte[] byteArray0 = new byte[3];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 1, (int) (byte)5);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileUtils.write((File) mockFile0, (CharSequence) "$jn", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      FileUtils.write((File) mockFile0, (CharSequence) "f~,h,#Jpt)=A^G", (String) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      MockFile.createTempFile("1H?9Zp8i4:xz", "suppress", file0);
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/Directory '/home/azureuser/LLm4PrTest/ io_experiments/uQp?", "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/Directory '/home/azureuser/LLm4PrTest/ io_experiments/uQp?");
      byte[] byteArray0 = new byte[5];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, false);
      FileUtils.sizeOf(mockFile0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("$tQzc,r DW.7", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      FileUtils.readLines(file0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("_r&:s(=zBgF<vud#", "Dirctory '");
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readFileToString((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.build.HashCodeAndEqualsPlugin$ValueMatcher");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write((File) mockFile0, (CharSequence) "net.bytebuddy.build.HashCodeAndEqualsPlugin$ValueMatcher", charset0, true);
      FileUtils.readFileToString((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mj;{~H8d*H!*{v'*9", "Mj;{~H8d*H!*{v'*9");
      FileUtils.openOutputStream((File) mockFile0, false);
      FileUtils.readFileToString((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      FileUtils.writeStringToFile((File) mockFile0, "JVL5i");
      FileUtils.openInputStream(mockFile0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("file", iOCase0);
      FileUtils.listFiles(file0, (IOFileFilter) wildcardFileFilter0, (IOFileFilter) wildcardFileFilter0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileUtils.iterateFiles((File) mockFile0, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-144), (-3513), (-3513), (-144), (-968), (-968));
      FileUtils.isFileOlder(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("_r&:s(=zBgF<vud#", "Dirctory '");
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      String[] stringArray0 = new String[0];
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"&5R!M+r";
      File file0 = FileUtils.getFile(stringArray0);
      String[] stringArray1 = new String[0];
      FileUtils.getFile(file0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      File file0 = MockFile.createTempFile("' eJists but is not a directory", "' eJists but is not a directory", (File) mockFile0);
      FileUtils.directoryContains(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      byte[] byteArray0 = new byte[1];
      fileOutputStream0.write(byteArray0);
      FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("B!Uk", iOCase0);
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, prefixFileFilter0, prefixFileFilter0);
      FileUtils.convertFileCollectionToFileArray(collection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      CRC32 cRC32_0 = new CRC32();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(12);
      cRC32_0.update(byteBuffer0);
      FileUtils.checksum(file0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "B!Uk", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "DBm~JWcTL5XZqj>P37G", (Charset) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "org.apache.commons.io.file.Counters");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, " does not exist", "org.apache.commons.io.file.Counters");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.file.Counters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "^Y6'i2", " does not exist");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  does not exist
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) stack0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Stack<Object> stack0 = new Stack<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) stack0, "y^|dYi", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedHashSet0, "dC4}uu.NcsvJ~Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("user.home");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "qq", (Collection<?>) arrayList0, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // qq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "D>6:&^:=BY?'u", (Collection<?>) linkedHashSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%/");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "J", (Collection<?>) hashSet0, "}o", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      try { 
        FileUtils.writeLines(file0, "/tmp/org.apache.commons.io.file.Counters0<IZx]{7X3){0*o&", (Collection<?>) arrayList0, "Xm", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0", "/home/azureuser/LLm4PrTest/ io_experiments/H");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "Db", (Collection<?>) priorityQueue0, "X?s}4) N&[=");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Db
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/CO", "<IZx]e{M7X3){0*o&6");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "", (Collection<?>) stack0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "' exists but is read-only", (Collection<?>) stack0, "' exists but is read-only");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]{7X3){0*o&", "<IZx]{7X3){0*o&");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "<IZx]{7X3){0*o&", (Collection<?>) stack0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <IZx]{7X3){0*o&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/CO", (Collection<?>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, 360, 72, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte) (-3), (-2810));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = MockFile.createTempFile("$tQzc,r DW.7", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (-2100799218), (int) (byte)75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2100799218
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments");
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, 10, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]{7X3){0*o&");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("uSt[b8{9Q", "Dirctory '");
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.write(file0, (CharSequence) "8", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "10 bytes", charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB/home");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB/home", "/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB/home", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB/home
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "s0uz+D;%F$]", "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.touch(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.toURLs((File[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'fCle' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j16!^[\"!";
      stringArray0[1] = "j16!^[\"!";
      stringArray0[2] = "org.apache.commons.io.filefilter.FalseFileFilter";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "org.apache.commons.io.filefilter.FalseFileFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.FalseFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0", "Y>1y6N/0");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/Y>1y6N/0/Y>1y6N/0' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X38K){0*o&6");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "org.apache.commons.io.file.Counters");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.file.Counters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.fil.Counters", "org.apache.commons.io.fil.Counters");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.fil.Counters/org.apache.commons.io.fil.Counters' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.io.tmpdir", "java.io.tmpdir");
      MockFile mockFile1 = new MockFile(mockFile0, "java.io.tmpdir");
      mockFile1.createNewFile();
      try { 
        FileUtils.moveToDirectory(mockFile1, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/java.io.tmpdir/java.io.tmpdir/java.io.tmpdir' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, file0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB", "]6g@s%p9Gd");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB/]6g@s%p9Gd' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, directoryFileFilter0, directoryFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: fCle
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("CVS", "0");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "CVS");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // CVS
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("D0;<w:,n){75o8j\"=)", "Remove unsupported on LineIterator");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "' Expected length: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' Expected length: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "_&qEm`l^BY0ZU&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "(Yp?");
      try { 
        FileUtils.lineIterator((File) mockFile1, "_&qEm`l^BY0ZU&");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/(Yp?' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "File does not exist: ");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'File does not exist: ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, notFileFilter0, notFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(2001L, true);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, sizeFileFilter0, sizeFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp/foo.bar
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) andFileFilter0, (IOFileFilter) andFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[4];
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, (-1561), (-1561));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, 1016, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0");
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(sequenceInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyToFile((InputStream) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileUtils.touch(mockFile0);
      ArrayList<File> arrayList0 = new ArrayList<File>();
      arrayList0.add((File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayList0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination 'file' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      arrayList0.add(file0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayList0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      arrayList0.add((File) mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayList0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/foo.bar' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-99), 230);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(byteArrayInputStream0, mockFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/home/azureuser/LLm4PrTest/ io_experiments0/home/azureuser/LLm4PrTest/ io_experiments' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-a5", "-a5");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/-a5/-a5' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) fileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("10 bytes");
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<IZx]e{M7X3){0*o&6");
      FileUtils.writeStringToFile((File) mockFile0, "org<apachencommons.io.file.?ounters");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '<IZx]e{M7X3){0*o&6' and destination '<IZx]e{M7X3){0*o&6' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '' and destination '/home/azureuser/LLm4PrTest/ io_experiments' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "TI@E%pr-*";
      stringArray0[1] = "/home/azureuser/LLm4PrTest";
      stringArray0[2] = "user.home";
      stringArray0[3] = "TI@E%pr-*";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/TI@E%pr-*_/home/azureuser/LLm4PrTest/user.home/TI@E%pr-*' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("}rtg'FV56k|?a2%8");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0, (FileFilter) suffixFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K4di$32n]%t|5", "K4di$32n]%t|5");
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) canWriteFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/K4di$32n]%t|5/K4di$32n]%t|5' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1073741824L, true);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0", "Y>1y6N/0");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1771L);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Y>1y6N/0/Y>1y6N/0' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, cRC32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "+B[Wv4.";
      stringArray0[2] = "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst";
      stringArray0[3] = "' exists but is not a directory";
      File file1 = FileUtils.getFile(file0, stringArray0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file1, "' exists but is not a directory", (Collection<?>) hashSet0, "' exists but is not a directory", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' exists but is not a directory
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      byte[] byteArray0 = new byte[1];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)41, (-649), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileUtils.openOutputStream((File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      FileUtils.openOutputStream((File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = MockFile.createTempFile("Bytes to skip: ", "Bytes to skip: ");
      FileUtils.openOutputStream(file0, false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File 'fCle' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("(BG$;F%ti0DOba2~f+", "Directory '");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/(BG$;F%ti0DOba2~f+0Directory '' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("Directory '", "/(Yp?");
      mockFile0.setReadable(false, false);
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile1, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/Directory '/(Yp?' does not exist [createDestDir=true]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[4];
      FileUtils.listFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.listFiles(file0, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      FileUtils.isSymlink(file0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      FileUtils.isFileOlder(file0, 2048L);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      FileUtils.isFileNewer((File) mockFile0, 100L);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          File file1 = FileUtils.getUserDirectory();
          MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, file1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/tmp/home/azureuser/LLm4PrTest/ io_experiments0/home/azureuser/LLm4PrTest/ io_experiments\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1315)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1278)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:680)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:556)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:522)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:1971)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2006)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2094)
             // sun.reflect.GeneratedMethodAccessor325.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)16);
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "\"&5R!M+r");
      FileUtils.copyToFile(byteArrayInputStream0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/-5/-5' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K4di$32n]%t|5", "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K4di$32n]%t|5";
      stringArray0[1] = "K4di$32n]%t|5";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      FileUtils.openOutputStream(file0, false);
      try { 
        FileUtils.copyFile(file0, (File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/K4di$32n]%t|5' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = MockFile.createTempFile("zzkidy}>#3id@v", "zzkidy}>#3id@v");
      MockFile mockFile0 = new MockFile(file0, "/#zHz. );");
      try { 
        FileUtils.copyFile(file0, (File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/zzkidy}>#3id@v0zzkidy}>#3id@v' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) canWriteFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0, true);
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) ageFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/home/azureuser/LLm4PrTest/ io_experiments0/home/azureuser/LLm4PrTest/ io_experiments' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:98)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:34)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:535)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:265)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:254)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1345)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:337)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      CRC32 cRC32_0 = new CRC32();
      FileUtils.checksum(file0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "p?m}3.<", "p?m}3.<", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p?m}3.<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "`vJLJSX4=4g|?t1", "net.bytebuddy.build.ToStringPlugin", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.build.ToStringPlugin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]e{M X3){0*o&6", "<IZx]e{M X3){0*o&6");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, notFileFilter0, notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp/<IZx]e{M X3){0*o&60<IZx]e{M X3){0*o&6
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, "' Expected length: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      File file0 = MockFile.createTempFile("' after copy to '", "file");
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) canReadFileFilter0, (IOFileFilter) canReadFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp/' after copy to '0file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_r&:s(=zBgF<vud#", "Dirctory '");
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "Y>1y6N/0", (Collection<?>) linkedList0, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Y>1y6N/0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.write(file0, (CharSequence) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" GB");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-1995177937));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 37);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/org.apache.commons.io.file.Counters0<IZx]e{M7X3){0*o&6 is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0", "Y>1y6N/0");
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Y>1y6N/0/Y>1y6N/0' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      // Undeclared exception!
      try { 
        FileUtils.moveFile(mockFile0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.touch(file0);
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      File file0 = FileUtils.getTempDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = MockFile.createTempFile("Y>1y6N/0", "Y>1y6N/0");
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = MockFile.createTempFile("'7zry&bT$i", "'7zry&bT$i");
      MockFile mockFile0 = new MockFile(file0, "'7zry&bT$i");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/'7zry&bT$i0'7zry&bT$i/'7zry&bT$i does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bytes to skvp: ", "Bytes to skvp: ");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/Bytes to skvp: /Bytes to skvp:  does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Pattern pattern0 = Pattern.compile("mIL54w|Cxz");
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, regexFileFilter0, (IOFileFilter) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtils.openOutputStream((File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "org.apache.commons.io.file.Counters");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = FileUtils.readLines(file0, charset0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtils.openOutputStream((File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]e{M X3){0*o&6", "<IZx]e{M X3){0*o&6");
      Charset charset0 = Charset.defaultCharset();
      String string0 = FileUtils.readFileToString(file0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]{7X3){0*o&");
      FileUtils.writeStringToFile(file0, "org.apache.commons.io.file.Counters");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertEquals(35, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = MockFile.createTempFile("Not a directory: ", "[Z!k");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Not a directory: ";
      stringArray0[1] = "Y?)?";
      stringArray0[2] = "[Z!k";
      stringArray0[3] = "[Z!k";
      stringArray0[4] = "[Z!k";
      File file1 = FileUtils.getFile(file0, stringArray0);
      LinkedHashSet<Proxy.Type> linkedHashSet0 = new LinkedHashSet<Proxy.Type>();
      try { 
        FileUtils.writeLines(file1, (Collection<?>) linkedHashSet0, "Not a directory: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/tmp/Not a directory: 0[Z!k/Not a directory: /Y?)?/[Z!k/[Z!k' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]e{M X3){0*o&6", "<IZx]e{M X3){0*o&6");
      file0.setReadable(false);
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/<IZx]e{M X3){0*o&60<IZx]e{M X3){0*o&6' cannot be read
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ax:>J8P 8KR", "ax:>J8P 8KR");
      File file0 = MockFile.createTempFile("ax:9>J8P KR", "ax:9>J8P KR");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/ax:>J8P 8KR/ax:>J8P 8KR' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = MockFile.createTempFile("'795=^P4", "'795=^P4");
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/'795=^P40'795=^P4' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ypfn'pv+Cy\"8^)S 9m");
      FileUtils.touch(mockFile0);
      try { 
        FileUtils.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'Ypfn'pv+Cy\"8^)S 9m' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      FileUtils.moveToDirectory(file0, file1, true);
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB", "/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB");
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = MockFile.createTempFile("' ater copy o '", "org.apache.commons.io.file.Counters");
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/' ater copy o '0org.apache.commons.io.file.Counters' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // File must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-a5");
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 2048L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/file";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/Directory '/home/azureuser/LLm4PrTest/ io_experiments/(Yp?";
      stringArray0[2] = " or ";
      stringArray0[3] = "?m4WZ~L`";
      stringArray0[4] = "org.apache.commons.io.filefilter.TrueFileFilter";
      stringArray0[5] = "/home/azureuser/LLm4PrTest/ io_experiments/file";
      stringArray0[6] = "/home/azureuser?llm4prtest/ io_experimenTs/directory '/home/azureuser/llm4prtest/ io_experiments/(yp?";
      stringArray0[7] = "z~vsLGq<ggZQ";
      stringArray0[8] = "repeatOn";
      File file1 = FileUtils.getFile(file0, stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file '/tmp/home/azureuser/LLm4PrTest/ io_experiments/file/home/azureuser/LLm4PrTest/ io_experiments/Directory '/home/azureuser/LLm4PrTest/ io_experiments/(Yp?/ or /?m4WZ~L`/org.apache.commons.io.filefilter.TrueFileFilter/home/azureuser/LLm4PrTest/ io_experiments/file/home/azureuser?llm4prtest/ io_experimenTs/directory '/home/azureuser/llm4prtest/ io_experiments/(yp?/z~vsLGq<ggZQ/repeatOn' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(3746, 1, 1, 1, 1);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, (long) 3746);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 1152921504606846976L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file 'fCle' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*");
      MockDate mockDate0 = new MockDate((-2030), 37, 16, (-1897), (-2030));
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "I";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFile((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      // Undeclared exception!
      try { 
        FileUtils.getFile((File) mockFile0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.getFile((File) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sOSt|ZV,");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y>1y6N/0");
      FileUtils.forceMkdirParent(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdir(file0);
      assertEquals("/tmp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]{7X3){0*o&", "<IZx]{7X3){0*o&");
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /tmp/<IZx]{7X3){0*o&0<IZx]{7X3){0*o& exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*");
      FileUtils.forceMkdir(mockFile0);
      MockDate mockDate0 = new MockDate((-2030), 37, 16, (-1897), (-2030));
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      FileUtils.forceDeleteOnExit(file0);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      FileUtils.copyDirectory(file0, file1, (FileFilter) canWriteFileFilter0, false);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[3];
          MockFile mockFile0 = new MockFile("Y>1y6N/0", "Y>1y6N/0");
          MockFile mockFile1 = new MockFile("_r&:s(=zBgF<vud#", "Dirctory '");
          FileUtils.writeByteArrayToFile((File) mockFile1, byteArray0);
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Y>1y6N/0/Y>1y6N/0/LLm4PrTest/ io_experiments/_r&:s(=zBgF<vud#/Dirctory '\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1315)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1278)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1276)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:680)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:556)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:522)
             // sun.reflect.GeneratedMethodAccessor287.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("Directory '", "/NB");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1847L, false);
      // Undeclared exception!
      FileUtils.copyDirectory((File) mockFile0, (File) mockFile1, (FileFilter) sizeFileFilter0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile("file");
      FileUtils.touch(mockFile1);
      FileUtils.moveFile(mockFile1, mockFile0);
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '-' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "1 EB");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "org.apache.commons.io.file.Counters");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a directory: /tmp/org.apache.commons.io.file.Counters0org.apache.commons.io.file.Counters
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = MockFile.createTempFile("' ater copy o '", "org.apache.commons.io.file.Counters");
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertEquals(0L, file0.lastModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" GB", " GB");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters");
      File[] fileArray0 = new File[5];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      fileArray0[4] = (File) mockFile0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(5, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("{<P%0*7%m!tM,n");
      assertEquals("{<P%0*7%m!tM,n", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      HashSet<File> hashSet0 = new HashSet<File>(43);
      FileUtils.copyToDirectory((Iterable<File>) hashSet0, file0);
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sources must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" GB", " GB");
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]{7X3){0*o&", "<IZx]{7X3){0*o&");
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      FileUtils.copyInputStreamToFile(fileInputStream0, file0);
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "org.apache.commons.io.file.Counters");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/org.apache.commons.io.file.Counters0org.apache.commons.io.file.Counters' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'file' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      MockFile mockFile1 = new MockFile("-5");
      FileUtils.touch(mockFile1);
      try { 
        FileUtils.moveFile(mockFile1, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/-5' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("-5", "-5");
          MockFile mockFile1 = new MockFile("file");
          FileUtils.touch(mockFile1);
          // Undeclared exception!
          try { 
            FileUtils.moveFile(mockFile1, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/-5/-5\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1315)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:804)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:754)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2036)
             // sun.reflect.GeneratedMethodAccessor307.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K4di$32n]%t|5");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K4di$32n]%t|5";
      stringArray0[1] = "K4di$32n]%t|5";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      FileUtils.openOutputStream(file0, false);
      try { 
        FileUtils.copyFile(file0, (File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination 'K4di$32n]%t|5' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "org.apache.commons.io.file.Counters");
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/org.apache.commons.io.file.Counters0org.apache.commons.io.file.Counters' and destination '/tmp/org.apache.commons.io.file.Counters0org.apache.commons.io.file.Counters' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" GB");
      FileUtils.touch(mockFile0);
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination ' GB' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("q*?_'Rn[", "q*?_'Rn[", file0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source '/home/azureuser/q*?_'Rn[0q*?_'Rn[' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^6|8");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '^6|8' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1847L, true);
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) sizeFileFilter0);
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.%o.ile.eounters", "org.apache.commons.%o.ile.eounters");
      File file1 = MockFile.createTempFile("org.apache.commons.%o.ile.eounters", "P+gWg");
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "/home/azureuser/LLm4PrTest/ io_experiments/-5/-5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/-5/-5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/Directory '/home/azureuser/LLm4PrTest/ io_experiments/(Yp?", "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/Directory '/home/azureuser/LLm4PrTest/ io_experiments/(Yp?");
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "`vJLJSX4=4g|?t1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "org.apache.commons.io.file.Counters");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "/tmp/fake/but/wellformed/url");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' and destination '");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "g8-$3h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB", "/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/Directory '/NB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "`vJLJSX4=4g|?t1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "`vJLJSX4=4g|?t1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "/tmp//home/azureuser/tmp");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$SingletonEnumeration");
      File file0 = MockFile.createTempFile("' exists but is not a directory", "' exists but is not a directory", (File) mockFile0);
      try { 
        FileUtils.contentEquals(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]{7X3){0*o&", "<IZx]{7X3){0*o&");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" GB");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/org.apache.commons.io.file.Counters0<IZx]{7X3){0*o&", "/tmp/org.apache.commons.io.file.Counters0<IZx]{7X3){0*o&");
      MockFile mockFile0 = new MockFile("/tmp/org.apache.commons.io.file.Counters0<IZx]{7X3){0*o&");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mj;{~H8d*H!*{v'*9", "Mj;{~H8d*H!*{v'*9");
      boolean boolean0 = FileUtils.contentEquals((File) null, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtils.openOutputStream((File) mockFile0);
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = MockFile.createTempFile("<IZx]e{M X3){0*o&6", "<IZx]e{M X3){0*o&6");
      long long0 = FileUtils.checksumCRC32(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' directory cannot be created");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '' directory cannot be created' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{<P%0*7%m!tM,n", ":");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/{<P%0*7%m!tM,n/: does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0, false);
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?uq", "?uq");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/?uq/?uq' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(linkedList0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "nwG u$xpc|^", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1034L, true);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      try { 
        FileUtils.writeLines(file0, "p%W&%p$N;.VD3V/#fA", (Collection<?>) priorityQueue0, "p%W&%p$N;.VD3V/#fA");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      Stack<Object> stack0 = new Stack<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) stack0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]{7X3){0*o&");
      Stack<Object> stack0 = new Stack<Object>();
      FileUtils.writeLines(file0, (Collection<?>) stack0, "org.apache.commons.io.file.Counters", true);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, 10, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The source ");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) mockFile0, "The source ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The source 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = MockFile.createTempFile("F@tNF[])d7?L^B*ow3", "^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/F@tNF[])d7?L^B*ow30^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$ is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = MockFile.createTempFile(".Sd1C0a", ".Sd1C0a");
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, ".Sd1C0a");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .Sd1C0a
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_r&:s(=zBgF<vud#", "Dirctory '");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile((File) mockFile0, "' doesn't exist", charset0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      try { 
        FileUtils.writeLines(file0, "}iKg>~zWmu,Y^Voa#S", (Collection<?>) arrayList0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = MockFile.createTempFile("Bytes to skip: ", "Bytes to skip: ");
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileUtils.writeLines(file0, (Collection<?>) linkedList0, "Bytes to skip: ");
      assertEquals("/tmp", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, " does not exist", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fCle");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: org.apache.commons.io.file.Counters
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MockFile mockFile0 = new MockFile("``");
      FileUtils.writeStringToFile((File) mockFile0, "``", true);
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-1561), (-1561));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      FileUtils.write((File) mockFile0, (CharSequence) "file");
      assertEquals(4L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, canWriteFileFilter0, canWriteFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", (String) null);
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters", "<IZx]e{M7X3){0*o&6");
      Stack<Object> stack0 = new Stack<Object>();
      FileUtils.writeLines(file0, (Collection<?>) stack0, false);
      assertEquals("/tmp/org.apache.commons.io.file.Counters0<IZx]e{M7X3){0*o&6", file0.toString());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1048576L, FileUtils.ONE_MB);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      try { 
        FileUtils.writeLines(file0, (String) null, (Collection<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      File file0 = MockFile.createTempFile("<B+_EP3(_`Fi,g", "<B+_EP3(_`Fi,g");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "<B+_EP3(_`Fi,g", charset0);
      assertEquals(14L, file0.length());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(1618L);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-5", "-5");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "file", "#97h#DEWr");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #97h#DEWr
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
