/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:49:53 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import java.util.stream.Stream;
import org.apache.commons.io.CloseableURLConnection;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOTriFunction;
import org.apache.commons.io.input.QueueInputStream;
import org.apache.commons.io.input.RandomAccessFileInputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.apache.commons.io.output.FileWriterWithEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0, (-1242L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1242
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e&3m'P+zZ|Ja4M16aRN");
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      char[] charArray0 = new char[7];
      IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0, charset0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[5];
      File file0 = MockFile.createTempFile("<u;", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0, (String) null);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      String string0 = IOUtils.toString((Reader) inputStreamReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      assertEquals(12, inputStream0.available());
      
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("'um\"<I|&I*ls", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("IL-&?]/lZ_/=k= g}*", (String) null);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 1448);
      assertEquals(18, inputStream0.available());
      
      String string0 = IOUtils.toString((InputStream) bufferedInputStream0, (String) null);
      assertEquals("IL-&?]/lZ_/=k= g}*", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "P1Nr_|t", charset0);
      assertEquals(7, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      assertEquals(12, inputStream0.available());
      
      byte[] byteArray0 = IOUtils.toByteArray((Reader) bufferedReader0, charset0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("j[~");
      assertEquals(3, inputStream0.available());
      
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)91, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      IOUtils.toBufferedReader((Reader) inputStreamReader0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-529));
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      assertEquals(903, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArrayOutputStream0.write(byteArray0);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      List<String> list0 = IOUtils.readLines((InputStream) queueInputStream0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = IOUtils.length(charArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "'um\"<I|&I*ls");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArray();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      assertEquals(12, inputStream0.available());
      
      long long0 = IOUtils.consume(inputStream0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",4s@HEI/nH)~co");
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) mockPrintWriter0, 6);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qVKeR9p&X;");
      LinkedTransferQueue<Object> linkedTransferQueue0 = new LinkedTransferQueue<Object>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedTransferQueue0, "qVKeR9p&X;", (OutputStream) mockFileOutputStream0, "qVKeR9p&X;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qVKeR9p&X;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) null, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) outputStreamWriter0, "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write("str2", (OutputStream) pipedOutputStream0, "str2");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // str2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write("i?YW>'_Lr-B}", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e&3m'P+zZ|Ja4M16aRN");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "e&3m'P+zZ|Ja4M16aRN", (OutputStream) mockFileOutputStream0, "e&3m'P+zZ|Ja4M16aRN");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // e&3m'P+zZ|Ja4M16aRN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null, "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URI uRI0 = MockURI.URI("");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1327), 13);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) bufferedReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) queueInputStream0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<MockFileInputStream> stack0 = new Stack<MockFileInputStream>();
      Enumeration<MockFileInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) sequenceInputStream0, ")#,8>_AtO");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )#,8>_AtO
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1830), 108392519);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("input", "input");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // input
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) stringBuffer0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) sequenceInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '@';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuilder stringBuilder0 = new StringBuilder();
      charArrayWriter0.append((CharSequence) stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      charArrayWriter0.close();
      Locale locale0 = Locale.JAPAN;
      String string0 = "EFrs";
      Integer integer0 = new Integer((-3163));
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(iOTriFunction0, 168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      CloseableURLConnection closeableURLConnection0 = new CloseableURLConnection(uRLConnection0);
      try { 
        IOUtils.toByteArray((URLConnection) closeableURLConnection0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      try { 
        IOUtils.toByteArray((Reader) pipedReader0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) stringReader0, "d2");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // d2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 2901L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1448);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) pipedReader0, (-1865831666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      IOUtils.toBufferedInputStream((InputStream) pipedInputStream0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0, 1531);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) null, 2244L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) inputStreamReader0, (long) (byte) (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -41
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, 10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) socketChannel0, 2147483646L);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = ",^I9I$-_}2&8,*";
      FileWriterWithEncoding.Builder fileWriterWithEncoding_Builder0 = new FileWriterWithEncoding.Builder();
      boolean boolean0 = true;
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("J)duK", charset0);
      byte[] byteArray0 = new byte[0];
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream0, 31L, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) null, 7L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, (-2663L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -2663
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        IOUtils.skip((InputStream) sequenceInputStream0, 1099511627776L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("r");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: r
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("8Gh2E7v(7_GU", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 8Gh2E7v(7_GU
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.resourceToString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString(":-LmD;}5", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: :-LmD;}5
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, (char[]) null, Integer.MAX_VALUE, 1023);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) bufferedReader0, charArray0, (-1), 3381);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(445);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 445);
      char[] charArray0 = new char[5];
      try { 
        IOUtils.readFully((Reader) lineNumberReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, (byte[]) null, 45, 452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      try { 
        IOUtils.readFully((InputStream) bufferedInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<MockFileInputStream> stack0 = new Stack<MockFileInputStream>();
      Enumeration<MockFileInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1966);
      Integer integer0 = new Integer((-585));
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      try { 
        IOUtils.read(iOTriFunction0, (byte[]) null, (-587), 1966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reader
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(924);
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) pipedInputStream0, "Cb");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Cb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CharBuffer charBuffer0 = CharBuffer.allocate(1453);
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) charBuffer0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) charArrayWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedReader pipedReader0 = new PipedReader(12);
      try { 
        IOUtils.copy((Reader) pipedReader0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((ByteArrayOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) mockFileReader0, 12);
      // Undeclared exception!
      try { 
        IOUtils.contentEqualsIgnoreEOL(bufferedReader0, mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.consume((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.byteArray((-12931));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, 3997);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) pipedOutputStream0, (-153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("", charset0);
      // Undeclared exception!
      try { 
        IOUtils.buffer(inputStream0, (-2093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'um\"<I|&I*ls");
      IOUtils.write((StringBuffer) null, (OutputStream) mockFileOutputStream0, "-'b+)'A=(Ob");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.write("", (Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      IOUtils.write("", (OutputStream) deferredFileOutputStream0, (Charset) null);
      assertEquals(0, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[1];
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(queueInputStream0, 3997);
      try { 
        IOUtils.skipFully((InputStream) bufferedInputStream0, (long) 3997);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 3997 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3798039);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 2773);
      try { 
        IOUtils.skip((Reader) bufferedReader0, 1206L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileWriterWithEncoding.Builder fileWriterWithEncoding_Builder0 = new FileWriterWithEncoding.Builder();
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("J)duK", charset0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)0;
      byteArray0[6] = (byte)96;
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        IOUtils.skip(inputStream0, 31L, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("H S|AH\"rYV*(N7@");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) dataInputStream0, (-1890L), supplier0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1890
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("com.google.common.base.CharMatcher$Digit", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: com.google.common.base.CharMatcher$Digit
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Stream<Closeable> stream0 = Stream.of((Closeable) pipedReader0);
      IOUtils.closeQuietly(stream0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      String string0 = IOUtils.toString(uRL0, charset0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOUtils.closeQuietly((Closeable) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(389);
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) charArrayWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<MockFileInputStream> stack0 = new Stack<MockFileInputStream>();
      Enumeration<MockFileInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1966);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) bufferedInputStream0, charset0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",A");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.toByteArray((Reader) bufferedReader0, charset0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = 304;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 304);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 2689);
      assertEquals(12, inputStream0.available());
      
      List<String> list0 = IOUtils.readLines((InputStream) bufferedInputStream0, charset0);
      assertTrue(list0.contains("'um\"<I|&I*ls"));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray(13);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      RandomAccessFileInputStream.Builder randomAccessFileInputStream_Builder0 = new RandomAccessFileInputStream.Builder();
      Charset charset0 = randomAccessFileInputStream_Builder0.getCharset();
      String string0 = IOUtils.resourceToString("", charset0, classLoader0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(102);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Writer writer0 = IOUtils.writer(mockPrintWriter0);
      assertSame(writer0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Writer writer0 = IOUtils.writer(stringBuffer0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 2689);
      LinkedTransferQueue<Object> linkedTransferQueue0 = new LinkedTransferQueue<Object>();
      linkedTransferQueue0.add(bufferedInputStream0);
      File file0 = MockFile.createTempFile("'um\"<I|&I*ls", "Size cannot be greater than Integer max value: ", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      IOUtils.writeLines((Collection<?>) linkedTransferQueue0, "Size cannot be greater than Integer max value: ", (OutputStream) mockFileOutputStream0);
      assertEquals(85L, file0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      IOUtils.writeChunked(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals("\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(3, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IOUtils.writeChunked((byte[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter((byte)0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IOUtils.write(stringBuffer0, (Writer) stringWriter0);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1095);
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null, "n/R6[vV'GDT3");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // n/R6[vV'GDT3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = MockFile.createTempFile("<u;", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      IOUtils.write((String) null, (OutputStream) mockFileOutputStream0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((CharSequence) "", (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((CharSequence) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      IOUtils.write(charArray0, (Writer) charArrayWriter0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2689);
      IOUtils.write((char[]) null, (Writer) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" actual: ");
      IOUtils.write((char[]) null, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "R7ygHX~>");
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      assertEquals(8, inputStream0.available());
      
      String string0 = IOUtils.toString((Reader) bufferedReader0);
      assertEquals("R7ygHX~>", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.toString((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) mockFileReader0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) bufferedReader0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer(255);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      byte[] byteArray0 = IOUtils.toByteArray(iOTriFunction0, 255);
      assertEquals(255, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer((-932915833));
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      try { 
        IOUtils.toByteArray(iOTriFunction0, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 1496219797, expected: 14
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = IOUtils.toByteArray(iOTriFunction0, (int) (byte)0);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction1 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      int int0 = IOUtils.read(iOTriFunction1, byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((IOTriFunction<byte[], Integer, Integer, Integer>) null, (-2141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -2141
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 1099511627776L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size cannot be greater than Integer max value: 1099511627776
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      try { 
        IOUtils.toByteArray(inputStream0, (long) (byte)47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 0, expected: 47
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 2262);
      assertNotNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)91;
      IOUtils.buffer((OutputStream) byteArrayOutputStream0);
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        IOUtils.skipFully(inputStream0, (long) (byte)73, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) byteArrayInputStream0);
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      IOUtils.skipFully((InputStream) bufferedInputStream0, 0L, supplier0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<MockFileInputStream> stack0 = new Stack<MockFileInputStream>();
      Enumeration<MockFileInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) sequenceInputStream0, (-1L), supplier0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      try { 
        IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0, (long) 8192, (long) 8192, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 8192 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      IOUtils.skipFully((Reader) bufferedReader0, 0L);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(249);
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) pipedReader0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = IOUtils.skip((ReadableByteChannel) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) datagramChannel0, (-2256L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -2256
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, 1568L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      long long0 = IOUtils.skip((InputStream) byteArrayInputStream0, 2147483647L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      Supplier<byte[]> supplier0 = (Supplier<byte[]>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      IOUtils.skip(inputStream0, 0L, supplier0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) queueInputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      inputStream0.read();
      byte[] byteArray0 = IOUtils.toByteArray("'um\"<I|&I*ls");
      try { 
        IOUtils.readFully(inputStream0, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 12 actual: 11
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      char[] charArray0 = new char[5];
      try { 
        IOUtils.readFully((Reader) inputStreamReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 5 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OZq8#/B0V,{.zIo^P2");
      char[] charArray0 = new char[3];
      IOUtils.readFully((Reader) stringReader0, charArray0);
      assertArrayEquals(new char[] {'O', 'Z', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[6];
      IOUtils.readFully((Reader) pipedReader0, charArray0, (int) '\u0000', (int) '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0, (-1966), (-1966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1966
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[0];
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0, 1539, 1539);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(306654252);
      IOTriFunction<byte[], Integer, Integer, Integer> iOTriFunction0 = (IOTriFunction<byte[], Integer, Integer, Integer>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(iOTriFunction0).apply(any(byte[].class) , anyInt() , anyInt());
      int int0 = IOUtils.read(iOTriFunction0, (byte[]) null, (-587), 1966);
      assertEquals(306654252, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.read((IOTriFunction<byte[], Integer, Integer, Integer>) null, byteArray0, (int) (byte) (-115), (-770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -770
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",4s@HEI/nH)~co");
      char[] charArray0 = new char[0];
      long long0 = IOUtils.copyLarge((Reader) pipedReader0, (Writer) mockPrintWriter0, (-2761L), (-978L), charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) stringWriter0, (-803L), (long) 8192, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) stringWriter0, 2046L, 2046L, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockFileWriter mockFileWriter0 = new MockFileWriter("iw/FPi{4&r))[", false);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) mockFileWriter0, (-1404L), 1L, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[6];
      try { 
        IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) pipedOutputStream0, 47L, 47L, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 47 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      long long0 = IOUtils.copy((Reader) inputStreamReader0, (Appendable) stringBuffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL((Reader) null, (Reader) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) pipedReader0);
      try { 
        IOUtils.contentEqualsIgnoreEOL(bufferedReader0, pipedReader0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("java.io.BufferedReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = IOUtils.contentEquals((Reader) pipedReader0, (Reader) pipedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = IOUtils.contentEquals((Reader) pipedReader0, (Reader) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      IOUtils.closeQuietly((Stream<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Closeable> class0 = Closeable.class;
      ServiceLoader<Closeable> serviceLoader0 = ServiceLoader.load(class0);
      IOUtils.closeQuietly((Iterable<Closeable>) serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.io.Closeable]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IOUtils.closeQuietly((Iterable<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileWriterWithEncoding.Builder fileWriterWithEncoding_Builder0 = new FileWriterWithEncoding.Builder();
          FileWriterWithEncoding.Builder fileWriterWithEncoding_Builder1 = fileWriterWithEncoding_Builder0.setPath("j{+");
          // Undeclared exception!
          try { 
            fileWriterWithEncoding_Builder1.get();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"j{+\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1220)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1211)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2479)
             // org.apache.commons.io.output.FileWriterWithEncoding.initWriter(FileWriterWithEncoding.java:158)
             // org.apache.commons.io.output.FileWriterWithEncoding.access$000(FileWriterWithEncoding.java:52)
             // org.apache.commons.io.output.FileWriterWithEncoding$Builder.get(FileWriterWithEncoding.java:107)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("'um\"<I|&I*ls", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) mockPrintWriter0, (-474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) mockFileReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, (-1566));
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) pipedReader0, (-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      IOUtils.buffer((Reader) bufferedReader0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = MockFile.createTempFile("'um\"<I|&I*ls", "Size cannot be greater than Integer max value: ", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockFileOutputStream0, 2689);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("'um\"<I|&I*ls", charset0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0, 2689);
      IOUtils.buffer((InputStream) bufferedInputStream0, (-1416));
      assertEquals(12, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0, 1516);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream1);
      assertNotNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0, "MM#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // MM#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      IOUtils.clear();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) sequenceInputStream0, "J");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) dataInputStream0, (-143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -143
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("5r]WMgW2g?5s-kgQf", "j*wA<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // j*wA<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0);
      long long0 = IOUtils.consume((Reader) bufferedReader0);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Appendable) stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("'um\"<I|&I*ls");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 'um\"<I|&I*ls
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertEquals("ServerSocket[unbound]", mockServerSocket0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "Could not load ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Could not load 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, "w|J)[aQJ&Wm-4Hd?G<`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // w|J)[aQJ&Wm-4Hd?G<`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'um\"<I|&I*ls");
      IOUtils.closeQuietly((OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      List<String> list0 = IOUtils.readLines((InputStream) queueInputStream0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      long long0 = IOUtils.skip(inputStream0, (long) 13);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("input");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) null, (OutputStream) mockFileOutputStream0, "input");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // input
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 1540, "", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.output.XmlStreamWriter");
      LinkedTransferQueue<Object> linkedTransferQueue0 = new LinkedTransferQueue<Object>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedTransferQueue0, "org.apache.commons.io.output.XmlStreamWriter", (OutputStream) mockFileOutputStream0, "org.apache.commons.io.output.XmlStreamWriter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.output.XmlStreamWriter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(91);
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals(10, IOUtils.LF);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) pipedReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("P1Nr_|t");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      IOUtils.write((StringBuffer) null, (OutputStream) bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      IOUtils.closeQuietly((Selector) null);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      byte[] byteArray0 = new byte[7];
      int int0 = IOUtils.read((InputStream) queueInputStream0, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("'=$$V*=(3euCvXZ#?r ", (OutputStream) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      IOUtils.closeQuietly(inputStream0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getScratchByteArrayWriteOnly();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(128);
      IOUtils.closeQuietly((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.resourceToString("", charset0);
      assertEquals("build\nByteOrderMark.class\nByteOrderParser.class\ncharset\nCharsets.class\nCloseableURLConnection.class\ncomparator\nCopyUtils.class\nDirectoryWalker.class\nDirectoryWalker$CancelException.class\nEndianUtils.class\nfile\nFileCleaner.class\nFileCleaningTracker.class\nFileCleaningTracker$Reaper.class\nFileCleaningTracker$Tracker.class\nFileDeleteStrategy.class\nFileDeleteStrategy$ForceFileDeleteStrategy.class\nFileExistsException.class\nfilefilter\nFilenameUtils.class\nFileSystem.class\nFileSystemUtils.class\nFileUtils.class\nfunction\nHexDump.class\ninput\nIO.class\nIOCase.class\nIOExceptionList.class\nIOExceptionWithCause.class\nIOIndexedException.class\nIOUtils.class\nLineIterator.class\nmonitor\noutput\npackage-info.class\nRandomAccessFileMode.class\nRandomAccessFiles.class\nserialization\nStandardLineSeparator.class\nStreamIterator.class\nTaggedIOException.class\nThreadMonitor.class\nThreadUtils.class\nUncheckedIOExceptions.class\n", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 47);
      long long0 = IOUtils.consume((InputStream) bufferedInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "", "Jqf;-t");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Jqf;-t
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) null, "Bytes to skip must not be negative: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Bytes to skip must not be negative: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("qkKKA~hK\"2Q{9Dt");
      // Undeclared exception!
      try { 
        IOUtils.readLines(inputStream0, "qkKKA~hK\"2Q{9Dt");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qkKKA~hK\"2Q{9Dt
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      IOUtils.closeQuietly((Socket) null);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1286), (byte)0);
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "&ki,5QV>v*_kCI");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &ki,5QV>v*_kCI
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      IOUtils.readFully((InputStream) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = IOUtils.getScratchCharArrayWriteOnly();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToByteArray("posix:group", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: posix:group
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) pipedReader0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getScratchByteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      String string0 = IOUtils.toString((InputStream) queueInputStream0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      URI uRI0 = MockURL.toURI(uRL0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[4];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(4, closeableArray0.length);
  }
}
