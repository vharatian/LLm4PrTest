/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:47:11 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ConcurrentModificationException;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractByteArrayOutputStream_ESTest extends AbstractByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(1);
      unsynchronizedByteArrayOutputStream0.write((int) (byte)0);
      unsynchronizedByteArrayOutputStream0.write(1);
      try { 
        unsynchronizedByteArrayOutputStream0.toString("This class only serves as a marker type and should not be instantiated");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.count = 0;
      byteArrayOutputStream0.count = (-1);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.toInputStreamImpl();
      byteArrayOutputStream0.reset();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.write(0);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      int int0 = byteArrayOutputStream0.write(inputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.print("%? ");
      mockPrintStream0.println((-666));
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl(mockPrintStream0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.write(3592);
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byteArrayOutputStream0.writeTo(unsynchronizedByteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.writeImpl(inputStream0);
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.resetImpl();
      byteArrayOutputStream0.writeImpl(0);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      int int0 = byteArrayOutputStream0.write(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      Charset charset0 = Charset.defaultCharset();
      byteArrayOutputStream0.toString(charset0);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.toByteArrayImpl();
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.toByteArray();
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = byteArrayOutputStream0.toByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 1649;
      int int0 = byteArrayOutputStream0.size();
      assertEquals(1649, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArrayOutputStream0.writeImpl(byteArray0, (byte)13, (byte) (-26));
      int int0 = byteArrayOutputStream0.size();
      assertEquals((-26), byteArrayOutputStream0.size());
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.println(0);
      byteArrayOutputStream0.writeToImpl(mockPrintStream0);
      mockPrintStream0.println(0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl(mockPrintStream0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, 0, (-2620));
      MockPrintStream mockPrintStream0 = new MockPrintStream(unsynchronizedByteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeToImpl(mockPrintStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.write(0);
      byteArrayOutputStream0.needNewBuffer(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeToImpl(filterOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteArrayOutputStream0.writeToImpl(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      File file0 = MockFile.createTempFile("ZT;g|GnU9@tA&5Y{au", "ZT;g|GnU9@tA&5Y{au");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      try { 
        byteArrayOutputStream0.writeTo(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl((byte[]) null, 4050, 4050);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(byteArray0, 9976, 9976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      // Undeclared exception!
      byteArrayOutputStream0.writeImpl(inputStream0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 1516;
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = byteArrayOutputStream0.toByteArrayImpl();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-889), 1024);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        byteArrayOutputStream0.writeImpl(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.needNewBuffer(54);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1024
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write((byte[]) null, 9977, 1770);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, 206, (-1518));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      // Undeclared exception!
      byteArrayOutputStream0.write(inputStream0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStreamImpl();
      byteArrayOutputStream0.writeImpl((byte[]) null, 1407, (-1371));
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.count = 1024;
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write((-536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toString((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.count = 0;
      byteArrayOutputStream0.count = (-1);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.writeImpl(0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.needNewBuffer(7);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.count = 1024;
      String string0 = byteArrayOutputStream0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.count = 9979;
      byteArrayOutputStream0.writeTo(unsynchronizedByteArrayOutputStream0);
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.toInputStreamImpl();
      byteArrayOutputStream0.resetImpl();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write(9971);
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      int int0 = unsynchronizedByteArrayOutputStream0.write(inputStream0);
      assertEquals(2, unsynchronizedByteArrayOutputStream0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.writeImpl(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteArrayOutputStream0.toString(charset0);
      assertEquals("", string0);
  }
}
