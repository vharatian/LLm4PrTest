/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:23:28 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(8, fileAttributeArray0.length);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption1;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption2;
      deleteOptionArray0[4] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[5] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[6] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(wildcardFileFilter0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(1125899906842624L);
      assertNotNull(ageFileFilter0);
      
      IOFileFilter iOFileFilter0 = wildcardFileFilter0.and(ageFileFilter0);
      assertEquals(0, linkedList0.size());
      assertNotNull(iOFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      Path[] pathArray1 = PathUtils.filter(wildcardFileFilter0, pathArray0);
      assertEquals(0, linkedList0.size());
      assertNotNull(pathArray1);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      MockFile mockFile0 = new MockFile("isDirectory", "5[em]?>u-LOX[aw(F4");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/isDirectory/5[em]?>u-LOX[aw(F4", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/isDirectory", mockFile0.getParent());
      assertEquals("5[em]?>u-LOX[aw(F4", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.deleteDirectory(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = PathUtils.isRegularFile((Path) null, (LinkOption[]) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("gqF5_}", "Don't clear/set the same entry more than once.");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gqF5_}/Don't clear/set the same entry more than once.", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gqF5_}/Don't clear", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("set the same entry more than once.", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gqF5_}/Don't clear/set the same entry more than once.", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gqF5_}/Don't clear", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("set the same entry more than once.", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(pathEqualsFileFilter0);
      
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.negate();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gqF5_}/Don't clear/set the same entry more than once.", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gqF5_}/Don't clear", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("set the same entry more than once.", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(iOFileFilter0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      try { 
        PathUtils.walk(path0, iOFileFilter0, 0, false, fileVisitOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bjv_<x;D of6\"B)SF");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "Rw3qi[U%VT");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("bjv_<x;D of6\"B)SF", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("bjv_<x;D of6\"B)SF", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/bjv_<x;D of6\"B)SF/Rw3qi[U%VT", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/bjv_<x;D of6\"B)SF", mockFile1.getParent());
      assertEquals("Rw3qi[U%VT", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertNotNull(path0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      String[] stringArray0 = new String[7];
      String string0 = "1Wzlv5";
      stringArray0[0] = "1Wzlv5";
      stringArray0[1] = "bjv_<x;D of6\"B)SF";
      stringArray0[2] = "Rw3qi[U%VT";
      stringArray0[3] = "v@";
      stringArray0[4] = "Rw3qi[U%VT";
      stringArray0[5] = "bjv_<x;D of6\"B)SF";
      stringArray0[6] = "bjv_<x;D of6\"B)SF";
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      assertNotNull(wildcardFileFilter0);
      assertEquals(7, stringArray0.length);
      
      try { 
        PathUtils.newDirectoryStream(path0, wildcardFileFilter0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("collector", iOCase0);
      assertNotNull(wildcardFileFilter0);
      
      Path[] pathArray0 = new Path[0];
      Path[] pathArray1 = PathUtils.filter(wildcardFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(0, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      System.setCurrentTimeMillis((-1330L));
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertEquals(0, fileVisitOptionArray0.length);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("j;vj0?X$");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: j;vj0?X$
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("F  <[8m");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("F  <[8m", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("F  <[8m", mockFile0.toString());
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          LinkOption[] linkOptionArray0 = new LinkOption[8];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[7] = linkOption7;
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"F  <[8m\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("F  <[8m");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("F  <[8m", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("F  <[8m", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = null;
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          File file0 = MockFile.createTempFile("F  <[8m", "F  <[8m", (File) null);
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertEquals("/tmp", file0.getParent());
          assertEquals("/tmp/F  <[8m0F  <[8m", file0.toString());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertEquals("F  <[8m0F  <[8m", file0.getName());
          assertTrue(file0.exists());
          assertTrue(file0.canRead());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.isAbsolute());
          assertNotNull(file0);
          assertFalse(file0.equals((Object)mockFile0));
          assertNotSame(file0, mockFile0);
          
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[7] = linkOption7;
          LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[8] = linkOption8;
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"F  <[8m\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I,Ng}ts\"NNCnV", "/y)ZNF");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("y)ZNF", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/I,Ng}ts\"NNCnV", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/I,Ng}ts\"NNCnV/y)ZNF", mockFile0.toString());
      assertNotNull(path0);
      
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(0, fileAttributeArray0.length);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      FileVisitOption fileVisitOption8 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[8] = fileVisitOption8;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertFalse(boolean0);
      assertEquals(9, fileVisitOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize((Collection<Path>) null, path0, true, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      Path[] pathArray0 = new Path[17];
      pathArray0[0] = path0;
      IOFileFilter iOFileFilter0 = fileFileFilter0.negate();
      assertNotNull(iOFileFilter0);
      
      pathArray0[1] = path0;
      Path[] pathArray1 = PathUtils.filter(fileFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(17, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.aHttpURI;
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertNotNull(uRI1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI1);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(true, true);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[6];
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[4] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[5] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[6];
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      assertNotNull(notFileFilter0);
      
      iOFileFilterArray0[0] = (IOFileFilter) notFileFilter0;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)");
      assertNotNull(suffixFileFilter0);
      
      iOFileFilterArray0[1] = (IOFileFilter) suffixFileFilter0;
      NameFileFilter nameFileFilter0 = new NameFileFilter("l'=85o");
      assertNotNull(nameFileFilter0);
      
      iOFileFilterArray0[2] = (IOFileFilter) nameFileFilter0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(604, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(604, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(set0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      assertEquals(0, linkedList0.size());
      assertEquals(604, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(set0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list1.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(list1, iOCase0);
      assertEquals(0, linkedList0.size());
      assertEquals(604, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(wildcardFileFilter0);
      assertFalse(set0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list1.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      
      iOFileFilterArray0[3] = (IOFileFilter) wildcardFileFilter0;
      NameFileFilter nameFileFilter1 = new NameFileFilter(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(604, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(nameFileFilter1);
      assertFalse(set0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list0.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(list1.contains("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)"));
      assertFalse(nameFileFilter1.equals((Object)nameFileFilter0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      
      iOFileFilterArray0[4] = (IOFileFilter) nameFileFilter1;
      NotFileFilter notFileFilter1 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      assertNotNull(notFileFilter1);
      assertSame(notFileFilter1, notFileFilter0);
      
      iOFileFilterArray0[5] = (IOFileFilter) notFileFilter1;
      OrFileFilter orFileFilter0 = new OrFileFilter(iOFileFilterArray0);
      assertNotNull(orFileFilter0);
      assertEquals(6, iOFileFilterArray0.length);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path1;
      // Undeclared exception!
      try { 
        PathUtils.filter(orFileFilter0, pathArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "DL72=me/p8Ll";
      stringArray0[1] = "=X'|2<Eas15=nY67";
      stringArray0[2] = "NF7[u^*ud)st";
      stringArray0[3] = "~^";
      stringArray0[4] = "6|~n[\"X!h[A,1c|Zi.`";
      stringArray0[5] = "nPF\"$x>8*F[@C";
      stringArray0[6] = ", ";
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      assertNotNull(prefixFileFilter0);
      assertEquals(7, stringArray0.length);
      
      NotFileFilter notFileFilter0 = new NotFileFilter(prefixFileFilter0);
      assertNotNull(notFileFilter0);
      assertEquals(7, stringArray0.length);
      
      Path[] pathArray0 = new Path[4];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      Path[] pathArray1 = PathUtils.filter(notFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(4, pathArray1.length);
      assertEquals(7, stringArray0.length);
      assertEquals(4, pathArray0.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray1, pathArray0);
      assertNotSame(pathArray0, pathArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      assertNotNull(directoryFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(directoryFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(1, pathArray0.length);
      assertEquals(1, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isNewer(path0, (-3768L), linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.canWrite());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesQuietly(path0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: net.bytebuddy.asm.Advice$NoExceptionHandler
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("/.A\"cbN", "filter");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/.A\"cbN/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/.A\"cbN", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/.A\"cbN/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/.A\"cbN", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(boolean0);
      assertEquals(8, linkOptionArray0.length);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("F  <[8m");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertEquals("F  <[8m", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("F  <[8m", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[19];
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"F  <[8m\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:390)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(suffixFileFilter0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      assertNotNull(canReadFileFilter0);
      
      Path[] pathArray0 = new Path[5];
      Path[] pathArray1 = PathUtils.filter(canReadFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(5, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes(pathArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(wildcardFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      Path[] pathArray1 = PathUtils.filter(wildcardFileFilter0, pathArray0);
      assertEquals(0, linkedList0.size());
      assertNotNull(pathArray1);
      assertEquals(4, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("6;j");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("6;j", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("6;j", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(1L);
      assertNotNull(ageFileFilter0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter(ageFileFilter0, ageFileFilter0);
      assertNotNull(andFileFilter0);
      
      Path[] pathArray0 = new Path[5];
      MockFile mockFile1 = new MockFile("^?<LiYg]b");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path2 = mockFile1.toPath();
      assertEquals("^?<LiYg]b", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNull(mockFile1.getParent());
      assertEquals("^?<LiYg]b", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertNotNull(path2);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      
      pathArray0[0] = path2;
      pathArray0[1] = path1;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      Path[] pathArray1 = PathUtils.filter(andFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(5, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path3 = PathUtils.current();
      assertNotNull(path3);
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path1));
      assertTrue(path3.equals((Object)path0));
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertNotSame(path3, path1);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("http://foo.bar", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawFragment());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertNotNull(uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRL0);
      assertSame(uRI0, uRI1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
      assertTrue(path0.equals((Object)path3));
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertNotSame(path0, path3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.PathUtils$RelativeSortedPaths");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.apache.commons.io.file.PathUtils$RelativeSortedPaths", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("org.apache.commons.io.file.PathUtils$RelativeSortedPaths", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        PathUtils.copyDirectory(path0, path0, copyOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("1");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("1", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("1", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      OpenOption[] openOptionArray0 = new OpenOption[1];
      openOptionArray0[0] = (OpenOption) linkOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, openOptionArray0, (FileVisitOption[]) null);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("1", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("1", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(boolean0);
      assertEquals(3, linkOptionArray0.length);
      assertEquals(1, openOptionArray0.length);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          assertFalse(boolean0);
          
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          boolean boolean1 = PathUtils.isEmptyFile(path0);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          
          MockFile mockFile1 = new MockFile("");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:415)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(wildcardFileFilter0);
      
      Path[] pathArray0 = PathUtils.filter(wildcardFileFilter0, (Path[]) null);
      assertEquals(0, linkedList0.size());
      assertNotNull(pathArray0);
      assertEquals(0, pathArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          URL uRL0 = MockURL.getFileExample();
          assertNull(uRL0.getRef());
          assertEquals((-1), uRL0.getDefaultPort());
          assertNull(uRL0.getUserInfo());
          assertEquals("file", uRL0.getProtocol());
          assertEquals("some", uRL0.getHost());
          assertEquals((-1), uRL0.getPort());
          assertNull(uRL0.getQuery());
          assertEquals("some", uRL0.getAuthority());
          assertNotNull(uRL0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[0];
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          boolean boolean0 = PathUtils.isEmpty(path1);
          assertFalse(boolean0);
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path1, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:263)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      // Undeclared exception!
      try { 
        PathUtils.delete(path0, (LinkOption[]) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption2;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
      assertEquals(7, linkOptionArray0.length);
      assertEquals(2, fileVisitOptionArray0.length);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      Path[] pathArray0 = new Path[2];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      Path[] pathArray1 = PathUtils.filter(fileFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertEquals(2, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
          assertNotNull(andFileFilter0);
          
          Path[] pathArray0 = new Path[1];
          pathArray0[0] = path0;
          // Undeclared exception!
          try { 
            PathUtils.filter(andFileFilter0, pathArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:83)
             // org.apache.commons.io.filefilter.AndFileFilter.accept(AndFileFilter.java:152)
             // org.apache.commons.io.file.PathUtils.lambda$filterPaths$0(PathUtils.java:699)
             // java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
             // java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
             // java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
             // java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
             // java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
             // java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
             // java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
             // org.apache.commons.io.file.PathUtils.filterPaths(PathUtils.java:703)
             // org.apache.commons.io.file.PathUtils.filter(PathUtils.java:687)
             // sun.reflect.GeneratedMethodAccessor180.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(suffixFileFilter0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(list0.equals((Object)list1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(suffixFileFilter0, pathArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(pathArray1);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(list0.equals((Object)list1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.aHttpURI;
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertEquals("", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://foo.bar", uRI1.toString());
      assertNotNull(uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL0 = MockURI.toURL(uRI1);
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertEquals("", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://foo.bar", uRI1.toString());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "Z`E< Yihdo#<[u0");
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("foo.bar", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("foo.bar", uRL1.getHost());
      assertEquals("http://foo.bar/Z`E< Yihdo#<[u0", uRL1.toExternalForm());
      assertEquals("http://foo.bar/Z`E< Yihdo#<[u0", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("<[u0", uRL1.getRef());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertEquals("", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://foo.bar", uRI1.toString());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL1, uRL0);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL0, uRL1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path1);
      assertNotNull(basicFileAttributes0);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(8, fileAttributeArray0.length);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      linkOptionArray0[1] = linkOption0;
      String string0 = "*.(p}\"R]PqHl";
      MockFile mockFile0 = new MockFile("*.(p}\"R]PqHl");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("*.(p}\"R]PqHl", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption2;
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, (Path[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean1);
      assertEquals(7, linkOptionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[3];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[0] = linkOption0;
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      boolean boolean2 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray1, (OpenOption[]) null, fileVisitOptionArray0);
      assertTrue(boolean2);
      assertEquals(3, linkOptionArray1.length);
      assertEquals(3, fileVisitOptionArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertNotSame(linkOptionArray1, linkOptionArray0);
      
      boolean boolean3 = PathUtils.directoryAndFileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertFalse(boolean3);
      assertEquals(3, fileVisitOptionArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Path[] pathArray0 = new Path[0];
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("6;j");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertEquals("6;j", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertEquals("6;j", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[8];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[3] = (DeleteOption) standardDeleteOption0;
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          assertSame(standardDeleteOption1, standardDeleteOption0);
          
          deleteOptionArray0[4] = (DeleteOption) standardDeleteOption1;
          deleteOptionArray0[5] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[6] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[7] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"6;j\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:390)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.isEmptyDirectory(path0);
          assertFalse(boolean1);
          assertFalse(boolean1 == boolean0);
          
          FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
          SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
          doReturn("g6H", "posix:group").when(simpleFileVisitor0).toString();
          doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
          String[] stringArray0 = new String[8];
          boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          assertFalse(boolean2);
          assertTrue(boolean2 == boolean1);
          assertFalse(boolean2 == boolean0);
          
          stringArray0[0] = "_2";
          stringArray0[1] = "_2";
          stringArray0[2] = "_2";
          stringArray0[3] = "_2";
          stringArray0[4] = "_2";
          stringArray0[5] = "_2";
          stringArray0[6] = "_2";
          stringArray0[7] = "_2";
          SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "_2", stringArray0);
          assertNotNull(simpleFileVisitor1);
          assertEquals(8, stringArray0.length);
          assertSame(simpleFileVisitor1, simpleFileVisitor0);
          
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          boolean boolean3 = PathUtils.isEmptyFile(path1);
          assertFalse(boolean3);
          assertTrue(path1.equals((Object)path0));
          assertTrue(boolean3 == boolean1);
          assertTrue(boolean3 == boolean2);
          assertFalse(boolean3 == boolean0);
          assertNotSame(path1, path0);
          
          List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
          assertNull(list0);
          assertTrue(path0.equals((Object)path1));
          assertNotSame(path0, path1);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          boolean boolean4 = PathUtils.isEmpty(path0);
          assertFalse(boolean4);
          assertFalse(boolean4 == boolean0);
          assertTrue(boolean4 == boolean3);
          assertTrue(boolean4 == boolean2);
          assertTrue(boolean4 == boolean1);
          assertTrue(path0.equals((Object)path1));
          assertNotSame(path0, path1);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:432)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:389)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:432)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:389)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.isEmptyDirectory(path0);
          assertFalse(boolean1);
          assertFalse(boolean1 == boolean0);
          
          FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
          SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
          doReturn((String) null, (String) null).when(simpleFileVisitor0).toString();
          doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
          String[] stringArray0 = new String[8];
          boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          assertFalse(boolean2);
          assertTrue(boolean2 == boolean1);
          assertFalse(boolean2 == boolean0);
          
          stringArray0[0] = "_2";
          stringArray0[1] = "_2";
          stringArray0[2] = "_2";
          stringArray0[3] = "_2";
          stringArray0[4] = "_2";
          stringArray0[5] = "_2";
          stringArray0[6] = "_2";
          stringArray0[7] = "_2";
          SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "_2", stringArray0);
          assertNotNull(simpleFileVisitor1);
          assertEquals(8, stringArray0.length);
          assertSame(simpleFileVisitor1, simpleFileVisitor0);
          
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          boolean boolean3 = PathUtils.isEmptyFile(path1);
          assertFalse(boolean3);
          assertTrue(path1.equals((Object)path0));
          assertTrue(boolean3 == boolean2);
          assertTrue(boolean3 == boolean1);
          assertFalse(boolean3 == boolean0);
          assertNotSame(path1, path0);
          
          List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
          assertNull(list0);
          assertTrue(path0.equals((Object)path1));
          assertNotSame(path0, path1);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
          boolean boolean4 = PathUtils.directoryContentEquals(path0, path1, 0, linkOptionArray0, fileVisitOptionArray0);
          assertTrue(boolean4);
          assertEquals(0, fileVisitOptionArray0.length);
          assertEquals(6, linkOptionArray0.length);
          assertTrue(path1.equals((Object)path0));
          assertTrue(path0.equals((Object)path1));
          assertFalse(boolean4 == boolean3);
          assertTrue(boolean4 == boolean0);
          assertFalse(boolean4 == boolean1);
          assertFalse(boolean4 == boolean2);
          assertNotSame(path1, path0);
          assertNotSame(path0, path1);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:432)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("6;j");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("6;j", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6;j", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.readBasicFileAttributes(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.EmptyFileFilter/org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.toString());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.EmptyFileFilter/org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.toString());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      LinkOption[] linkOptionArray1 = new LinkOption[7];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) linkOptionArray1);
      assertFalse(boolean1);
      assertEquals(7, linkOptionArray1.length);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      
      LinkOption[] linkOptionArray2 = new LinkOption[3];
      assertFalse(linkOptionArray2.equals((Object)linkOptionArray1));
      assertFalse(linkOptionArray2.equals((Object)linkOptionArray0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray2[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray2[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray2[2] = linkOption2;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      boolean boolean2 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray2, (OpenOption[]) linkOptionArray2, fileVisitOptionArray0);
      assertTrue(boolean2);
      assertEquals(3, linkOptionArray2.length);
      assertEquals(3, fileVisitOptionArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(linkOptionArray2.equals((Object)linkOptionArray1));
      assertFalse(linkOptionArray2.equals((Object)linkOptionArray0));
      assertNotSame(linkOptionArray2, linkOptionArray1);
      assertNotSame(linkOptionArray2, linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) linkOptionArray2, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(wildcardFileFilter0);
      
      Path[] pathArray0 = new Path[0];
      Path[] pathArray1 = PathUtils.filter(wildcardFileFilter0, pathArray0);
      assertEquals(0, linkedList0.size());
      assertNotNull(pathArray1);
      assertEquals(0, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("6;j");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("6;j", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("6;j", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("6;j");
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = PathUtils.filter(prefixFileFilter0, (Path[]) null);
      assertNotNull(pathArray0);
      assertEquals(0, pathArray0.length);
      
      Path path2 = PathUtils.current();
      assertNotNull(path2);
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      try { 
        MockURI.URI("6;j", "6;j", "6;j", "6;j");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 6;j://6;j6;j#6;j
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(suffixFileFilter0);
      
      Path[] pathArray0 = new Path[0];
      Path[] pathArray1 = PathUtils.filter(suffixFileFilter0, pathArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(pathArray1);
      assertEquals(0, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 9);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      fileAttributeArray0[8] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(9, fileAttributeArray0.length);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption0;
          MockFile mockFile0 = new MockFile("XnDR'*,C");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertEquals("XnDR'*,C", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("XnDR'*,C", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertNotNull(path1);
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path1, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"XnDR'*,C\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("contains '%s'.");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals("contains '%s'.", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("contains '%s'.", mockFile0.toString());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isAbsolute());
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"contains '%s'.\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[6];
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      assertNotNull(canExecuteFileFilter0);
      
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream((Path) null, canExecuteFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(2, fileAttributeArray0.length);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryContentEquals(path0, (Path) null, 16, linkOptionArray0, fileVisitOptionArray0);
      assertFalse(boolean0);
      assertEquals(2, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertTrue(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      MockFile mockFile1 = new MockFile("");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertFalse(boolean1);
      assertTrue(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(path0, path1);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.create("");
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.resolve(uRI0, "");
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNotNull(uRI1);
      assertTrue(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canWrite());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isAbsolute());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNotNull(path1);
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          boolean boolean0 = PathUtils.isEmptyFile(path0);
          assertFalse(boolean0);
          assertTrue(path0.equals((Object)path1));
          assertNotSame(path0, path1);
          
          MockFile mockFile1 = new MockFile("");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          boolean boolean1 = PathUtils.isEmpty(path0);
          assertFalse(boolean1);
          assertTrue(path0.equals((Object)path1));
          assertTrue(boolean1 == boolean0);
          assertNotSame(path0, path1);
          
          CopyOption[] copyOptionArray0 = new CopyOption[2];
          StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
          assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
          
          copyOptionArray0[0] = (CopyOption) standardCopyOption0;
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          copyOptionArray0[1] = (CopyOption) linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path1, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:157)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:228)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(5, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, false, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, false, (Comparator<? super Path>) null);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains(path0));
      assertFalse(list0.contains(path0));
      
      List<Path> list1 = PathUtils.relativize(list0, path0, false, (Comparator<? super Path>) null);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(linkedHashSet0.contains(path0));
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3#", "3#");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3#/3#", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3#", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("3#", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertNotNull(path0);
      
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("XmY\u00038a@hg", "XmY\u00038a@hg");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "XmY\u00038a@hg");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path1 = mockFile1.toPath();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("XmY\u00038a@hg", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/XmY\u00038a@hg", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/XmY\u00038a@hg/XmY\u00038a@hg", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/XmY\u00038a@hg", mockFile1.getParent());
      assertEquals("XmY\u00038a@hg", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertNotNull(path1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean0 = PathUtils.isNewer(path1, (-510L), linkOptionArray0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("XmY\u00038a@hg", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/XmY\u00038a@hg", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/XmY\u00038a@hg/XmY\u00038a@hg", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/XmY\u00038a@hg", mockFile1.getParent());
      assertEquals("XmY\u00038a@hg", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(boolean0);
      assertEquals(4, linkOptionArray0.length);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F  <[8m", "F  <[8m");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/F  <[8m/F  <[8m", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("F  <[8m", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/F  <[8m", mockFile0.getParent());
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = PathUtils.isNewer(path0, 7228L, (LinkOption[]) null);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/F  <[8m/F  <[8m", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("F  <[8m", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/F  <[8m", mockFile0.getParent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesQuietly(path0);
          assertNotNull(basicFileAttributes0);
          
          long long0 = 0L;
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:918)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.fileContentEquals(path1, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "2)%DMS3";
      MockFile mockFile0 = new MockFile("2)%DMS3", "2)%DMS3");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.isFile());
      assertEquals("2)%DMS3", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)%DMS3/2)%DMS3", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)%DMS3", mockFile0.getParent());
      assertNotNull(path0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path0, true, comparator0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(mockFile0.isFile());
      assertEquals("2)%DMS3", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)%DMS3/2)%DMS3", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)%DMS3", mockFile0.getParent());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      // Undeclared exception!
      try { 
        LinkOption.valueOf("2)%DMS3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.2)%DMS3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedList0, path0, true, comparator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(path0));
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      MockFile mockFile0 = new MockFile("2)yDMS3", "2)yDMS3");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)yDMS3/2)yDMS3", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)yDMS3", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("2)yDMS3", mockFile0.getName());
      assertNotNull(path0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path0, false, comparator0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)yDMS3/2)yDMS3", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/2)yDMS3", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("2)yDMS3", mockFile0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      // Undeclared exception!
      try { 
        LinkOption.valueOf("2)yDMS3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.2)yDMS3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
          assertNull(list0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
          assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
          
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          fileAttributeArray0[7] = fileAttribute0;
          Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
          assertNull(path1);
          assertEquals(8, fileAttributeArray0.length);
          
          boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
          assertTrue(boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:918)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean0 = PathUtils.isNewer(path0, 767L, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(6, linkOptionArray0.length);
      
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SIBLINGS;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, path0);
      assertNotNull(simpleFileVisitor1);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      String string0 = "XmY\\38a@hg";
      MockFile mockFile0 = new MockFile("XmY\u00038a@hg", "Uxa--8");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg/Uxa--8", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("Uxa--8", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/XmY\u00038a@hg", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertNotNull(uRL0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-1), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      boolean boolean1 = PathUtils.isNewer(path0, 43403L, linkOptionArray0);
      assertTrue(boolean1);
      assertEquals(4, linkOptionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      // Undeclared exception!
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertFalse(boolean0);
          assertEquals(2, linkOptionArray0.length);
          
          boolean boolean1 = PathUtils.directoryContentEquals((Path) null, path0);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          
          boolean boolean2 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
          assertFalse(boolean2);
          assertEquals(2, linkOptionArray0.length);
          assertTrue(boolean2 == boolean1);
          assertTrue(boolean2 == boolean0);
          
          MockFile mockFile0 = new MockFile("\" should have a parent context.", "");
          assertNotNull(mockFile0);
          
          boolean boolean3 = mockFile0.createNewFile();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("\" should have a parent context.", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.canWrite());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context.", mockFile0.toString());
          assertTrue(boolean3);
          assertFalse(boolean3 == boolean0);
          assertFalse(boolean3 == boolean1);
          assertFalse(boolean3 == boolean2);
          
          Path path1 = mockFile0.toPath();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("\" should have a parent context.", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.canWrite());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context.", mockFile0.toString());
          assertNotNull(path1);
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          MockFile mockFile1 = new MockFile("#^s[+Ch4bxREb", "");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:918)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:415)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:363)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      try { 
        PathUtils.cleanDirectory(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertNotNull(path0);
      
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      MockFile mockFile0 = new MockFile("nUe_u[{~S", "nUe_u[{~S");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/nUe_u[{~S", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("nUe_u[{~S", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/nUe_u[{~S/nUe_u[{~S", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      boolean boolean1 = mockFile0.setExecutable(false);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/nUe_u[{~S", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("nUe_u[{~S", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/nUe_u[{~S/nUe_u[{~S", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.fileContentEquals(path0, path1);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/nUe_u[{~S", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("nUe_u[{~S", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/nUe_u[{~S/nUe_u[{~S", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean2);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertEquals(5, fileVisitOptionArray0.length);
      assertTrue(set0.contains(fileVisitOption1));
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, set0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      MockFile mockFile1 = new MockFile("");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean1 = mockFile1.setExecutable(false);
      assertTrue(mockFile1.canWrite());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(boolean1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean2 = PathUtils.isEmpty(path1);
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(boolean2);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(path1, path0);
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
          boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.file.PathUtils$1");
          assertFalse(boolean0);
          
          SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
          doReturn((String) null).when(simpleFileVisitor0).toString();
          doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFile(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedHashSet0.size());
          assertNotNull(linkedHashSet0);
          
          SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 0);
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedHashSet0.size());
          assertNotNull(simpleFileVisitor1);
          assertSame(simpleFileVisitor1, simpleFileVisitor0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          copyOptionArray0[0] = (CopyOption) linkOption0;
          StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
          assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
          
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertNotNull(standardCopyOptionArray0);
          assertEquals(3, standardCopyOptionArray0.length);
          
          copyOptionArray0[1] = (CopyOption) standardCopyOption0;
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:157)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:228)
             // sun.reflect.GeneratedMethodAccessor198.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(2, fileAttributeArray0.length);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = StandardDeleteOption.overrideReadOnly((DeleteOption[]) null);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 1816, (LinkOption[]) null, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(50793L, false);
      assertNotNull(ageFileFilter0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption1);
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      assertNotSame(standardCopyOption1, standardCopyOption0);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      CopyDirectoryVisitor copyDirectoryVisitor0 = new CopyDirectoryVisitor(counters_PathCounters0, ageFileFilter0, ageFileFilter0, path0, path0, copyOptionArray0);
      assertNotNull(copyDirectoryVisitor0);
      assertEquals(2, copyOptionArray0.length);
      
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(copyDirectoryVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, (-159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      assertNotNull(directoryFileFilter0);
      
      Path[] pathArray0 = new Path[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      // Undeclared exception!
      try { 
        PathUtils.walk((Path) null, directoryFileFilter0, (-1485), false, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertNotNull(standardCopyOptionArray0);
      assertEquals(3, standardCopyOptionArray0.length);
      
      MockFile mockFile0 = new MockFile("*.(p}\"R]PqHl");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("*.(p}\"R]PqHl", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("*.(p}\"R]PqHl", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("%WjPE3v95d(yguN", "%WjPE3v95d(yguN");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN", mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN/%WjPE3v95d(yguN", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertEquals("%WjPE3v95d(yguN", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[0] = fileVisitOption0;
          FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[1] = fileVisitOption1;
          FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[2] = fileVisitOption2;
          FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[4] = fileVisitOption3;
          boolean boolean0 = PathUtils.directoryContentEquals(path0, path0, 3638, linkOptionArray0, fileVisitOptionArray0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN", mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN/%WjPE3v95d(yguN", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertEquals("%WjPE3v95d(yguN", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(boolean0);
          assertEquals(3, linkOptionArray0.length);
          assertEquals(6, fileVisitOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN/%WjPE3v95d(yguN\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:445)
             // sun.reflect.GeneratedMethodAccessor189.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      linkOptionArray0[1] = linkOption0;
      MockFile mockFile0 = new MockFile("*.(p}\"R]PqHl", "*.(p}\"R]PqHl");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/*.(p}\"R]PqHl/*.(p}\"R]PqHl", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/*.(p}\"R]PqHl", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/*.(p}\"R]PqHl/*.(p}\"R]PqHl", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/*.(p}\"R]PqHl", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "%WjPE3v95d(yguN";
          MockFile mockFile0 = new MockFile("%WjPE3v95d(yguN", "%WjPE3v95d(yguN");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN/%WjPE3v95d(yguN", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("%WjPE3v95d(yguN", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[0] = fileVisitOption0;
          FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[1] = fileVisitOption1;
          FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[2] = fileVisitOption2;
          FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[3] = fileVisitOption3;
          FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[4] = fileVisitOption4;
          FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[5] = fileVisitOption5;
          boolean boolean0 = PathUtils.directoryContentEquals(path0, path0, 3638, linkOptionArray0, fileVisitOptionArray0);
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN/%WjPE3v95d(yguN", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("%WjPE3v95d(yguN", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertTrue(boolean0);
          assertEquals(3, linkOptionArray0.length);
          assertEquals(6, fileVisitOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/%WjPE3v95d(yguN/%WjPE3v95d(yguN\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:445)
             // sun.reflect.GeneratedMethodAccessor189.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertTrue(boolean0);
          assertEquals(1, linkOptionArray0.length);
          
          boolean boolean1 = PathUtils.directoryContentEquals((Path) null, (Path) null);
          assertTrue(boolean1);
          assertTrue(boolean1 == boolean0);
          
          FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          boolean boolean2 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
          assertFalse(boolean2);
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean2 == boolean0);
          assertFalse(boolean2 == boolean1);
          
          MockFile mockFile0 = new MockFile("\" should have a parent context.", "#^s[+Ch4bxREb");
          assertNotNull(mockFile0);
          
          boolean boolean3 = mockFile0.createNewFile();
          assertEquals("#^s[+Ch4bxREb", mockFile0.getName());
          assertTrue(mockFile0.exists());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context.", mockFile0.getParent());
          assertTrue(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context./#^s[+Ch4bxREb", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertTrue(boolean3);
          assertFalse(boolean3 == boolean2);
          assertTrue(boolean3 == boolean0);
          assertTrue(boolean3 == boolean1);
          
          Path path0 = mockFile0.toPath();
          assertEquals("#^s[+Ch4bxREb", mockFile0.getName());
          assertTrue(mockFile0.exists());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context.", mockFile0.getParent());
          assertTrue(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context./#^s[+Ch4bxREb", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertNotNull(path0);
          
          MockFile mockFile1 = new MockFile("", "");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context./#^s[+Ch4bxREb\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileVisitResult fileVisitResult0 = FileVisitResult.CONTINUE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn("Can't compare directories, only files: ", (String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_2";
      stringArray0[1] = "_2";
      stringArray0[2] = "_2";
      stringArray0[3] = "_2";
      stringArray0[4] = "_2";
      stringArray0[5] = "_2";
      stringArray0[6] = "_2";
      stringArray0[7] = "_2";
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "_2", stringArray0);
      assertNotNull(simpleFileVisitor1);
      assertEquals(8, stringArray0.length);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean2 = PathUtils.isEmptyFile(path1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertTrue(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean3 = PathUtils.directoryContentEquals(path0, path1, 0, linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean3);
      assertEquals(6, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      boolean boolean4 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(boolean4);
      assertEquals(6, linkOptionArray0.length);
      assertTrue(path0.equals((Object)path1));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertNotSame(path0, path1);
      
      boolean boolean5 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean5);
      assertTrue(path0.equals((Object)path1));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertNotSame(path0, path1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F  <[8m");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("F  <[8m", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("F  <[8m", mockFile0.toString());
      assertNotNull(path0);
      
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 3);
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[5];
      String string0 = null;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(2, fileAttributeArray0.length);
      
      boolean boolean1 = PathUtils.fileContentEquals(path0, (Path) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("3#");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals("3#", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("3#", mockFile0.toString());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"3#\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertTrue(boolean0);
          assertEquals(1, linkOptionArray0.length);
          
          boolean boolean1 = PathUtils.directoryContentEquals((Path) null, (Path) null);
          assertTrue(boolean1);
          assertTrue(boolean1 == boolean0);
          
          FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          boolean boolean2 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
          assertFalse(boolean2);
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean2 == boolean0);
          assertFalse(boolean2 == boolean1);
          
          MockFile mockFile0 = new MockFile("\" should have a parent context.", "c{<& Y@g*");
          assertNotNull(mockFile0);
          
          boolean boolean3 = mockFile0.createNewFile();
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context.", mockFile0.getParent());
          assertTrue(mockFile0.exists());
          assertEquals("c{<& Y@g*", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context./c{<& Y@g*", mockFile0.toString());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(boolean3);
          assertTrue(boolean3 == boolean1);
          assertFalse(boolean3 == boolean2);
          assertTrue(boolean3 == boolean0);
          
          Path path0 = mockFile0.toPath();
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context.", mockFile0.getParent());
          assertTrue(mockFile0.exists());
          assertEquals("c{<& Y@g*", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context./c{<& Y@g*", mockFile0.toString());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          assertNotNull(path0);
          
          MockFile mockFile1 = new MockFile("", "");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/\" should have a parent context./c{<& Y@g*\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$NoExceptionHandler");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"net.bytebuddy.asm.Advice$NoExceptionHandler\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // sun.reflect.GeneratedMethodAccessor190.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileVisitResult fileVisitResult0 = FileVisitResult.CONTINUE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "").when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_2";
      stringArray0[1] = "_2";
      stringArray0[2] = "_2";
      stringArray0[3] = "_2";
      stringArray0[4] = "_2";
      stringArray0[5] = "_2";
      stringArray0[6] = "_2";
      stringArray0[7] = "_2";
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "_2", stringArray0);
      assertNotNull(simpleFileVisitor1);
      assertEquals(8, stringArray0.length);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean2 = PathUtils.isEmptyFile(path1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertTrue(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean3 = PathUtils.directoryContentEquals(path0, path1, 0, linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean3);
      assertEquals(6, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      assertNotNull(prefixFileFilter0);
      assertEquals(8, stringArray0.length);
      
      Stream<Path> stream0 = PathUtils.walk(path0, prefixFileFilter0, 0, true, fileVisitOptionArray0);
      assertNotNull(stream0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      assertTrue(path0.equals((Object)path1));
      assertNotSame(path0, path1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("Y'euVl,");
      assertNotNull(suffixFileFilter0);
      
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, suffixFileFilter0, 3617, false, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(3, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertFalse(boolean1);
          assertEquals(6, linkOptionArray0.length);
          assertFalse(boolean1 == boolean0);
          
          MockFile mockFile0 = new MockFile("c{<& Y@g*", "");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c{<& Y@g*", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("c{<& Y@g*", mockFile0.getName());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertNotNull(path1);
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path1, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:309)
             // sun.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean0);
          
          MockFile mockFile0 = new MockFile("c{<& Y@g*", "");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertEquals("c{<& Y@g*", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c{<& Y@g*", mockFile0.toString());
          assertFalse(mockFile0.canRead());
          assertNotNull(path1);
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path1, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:309)
             // sun.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("9/\rE>", "org.apache.commons.io.file.PathUtils");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/9/\rE>", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/9/\rE>/org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      boolean boolean1 = mockFile0.setReadable(true);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.file.PathUtils", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/9/\rE>", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/9/\rE>/org.apache.commons.io.file.PathUtils", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      boolean boolean2 = PathUtils.isNewer(path0, 2147483647L, linkOptionArray0);
      assertTrue(boolean2);
      assertEquals(9, linkOptionArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (-3688L), linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (-1L), linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 1;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("]tWY}2SLb*|`HI1x", " annotation, but there were ", 1, "", uRLStreamHandler0);
      assertEquals("", uRL0.getPath());
      assertEquals(" annotation, but there were :1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals(" annotation, but there were ", uRL0.getHost());
      assertEquals("]twy}2slb*|`hi1x", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      CopyDirectoryVisitor copyDirectoryVisitor0 = null;
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      URI uRI0 = MockURI.aFileURI;
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) null);
      assertFalse(boolean0);
      assertEquals(0, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:415)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:363)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:340)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$NoExceptionHandler", "net.bytebuddy.asm.Advice$NoExceptionHandler");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.asm.Advice$NoExceptionHandler/net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getParent());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.asm.Advice$NoExceptionHandler/net.bytebuddy.asm.Advice$NoExceptionHandler\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:364)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:340)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("^~QVzD;r{");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("^~QVzD;r{", mockFile0.toString());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("^~QVzD;r{", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNotNull(path0);
          
          String string0 = mockFile0.getAbsolutePath();
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("^~QVzD;r{", mockFile0.toString());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("^~QVzD;r{", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNotNull(string0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/^~QVzD;r{", string0);
          
          mockFile0.deleteOnExit();
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("^~QVzD;r{", mockFile0.toString());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("^~QVzD;r{", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"^~QVzD;r{\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:485)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:460)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:445)
             // sun.reflect.GeneratedMethodAccessor189.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertNotNull(standardCopyOptionArray0);
          assertEquals(3, standardCopyOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, standardCopyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:157)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:228)
             // sun.reflect.GeneratedMethodAccessor198.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertNotNull(standardCopyOptionArray0);
          assertEquals(3, standardCopyOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, standardCopyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:157)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:228)
             // sun.reflect.GeneratedMethodAccessor198.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[1];
          StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
          assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
          
          copyOptionArray0[0] = (CopyOption) standardCopyOption0;
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 2);
          FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:133)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:213)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("t2u)E5Q$}n'0]&e");
      assertNotNull(mockFile0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertTrue(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      boolean boolean1 = mockFile0.setExecutable(false);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.isEmpty(path1);
      assertFalse(boolean2);
      assertTrue(path1.equals((Object)path0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(path1, path0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      Path path2 = PathUtils.current();
      assertNotNull(path2);
      assertTrue(path2.equals((Object)path0));
      assertTrue(path2.equals((Object)path1));
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[6];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        LinkOption.valueOf("t2u)E5Q$}n'0]&e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.t2u)E5Q$}n'0]&e
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      MockFile mockFile0 = new MockFile("t2u)E5Q$}n'0]&e");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      boolean boolean1 = mockFile0.setExecutable(false);
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("t2u)E5Q$}n'0]&e", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        PathUtils.isEmpty(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("3N\")or3I:M16", "3N\")or3I:M16");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("3N\")or3I:M16", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3N\")or3I:M16/3N\")or3I:M16", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3N\")or3I:M16", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.isEmpty(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Path path0 = null;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path1, 1214, linkOptionArray0, fileVisitOptionArray0);
      assertFalse(boolean0);
      assertEquals(3, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileVisitResult fileVisitResult0 = FileVisitResult.CONTINUE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_2";
      stringArray0[1] = "_2";
      stringArray0[2] = "_2";
      stringArray0[3] = "_2";
      stringArray0[4] = "_2";
      stringArray0[5] = "_2";
      stringArray0[6] = "_2";
      stringArray0[7] = "_2";
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "_2", stringArray0);
      assertNotNull(simpleFileVisitor1);
      assertEquals(8, stringArray0.length);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean2 = PathUtils.isEmptyFile(path1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertTrue(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean3 = PathUtils.directoryContentEquals(path0, path1, 0, linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean3);
      assertEquals(6, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("f>rfw-a}rB^H0_;}");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("f>rfw-a}rB^H0_;}", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("f>rfw-a}rB^H0_;}", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.fileContentEquals(path1, path1);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("f>rfw-a}rB^H0_;}", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("f>rfw-a}rB^H0_;}", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(boolean0);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      CopyDirectoryVisitor copyDirectoryVisitor0 = null;
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, (Set<FileVisitOption>) linkedHashSet0, 3643);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFile(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesQuietly((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesQuietly((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_2";
      stringArray0[1] = "_2";
      stringArray0[2] = "_2";
      stringArray0[3] = "_2";
      stringArray0[4] = "_2";
      stringArray0[5] = "_2";
      stringArray0[6] = "_2";
      stringArray0[7] = "_2";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "_2", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 1;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("]tWY}2SLb*|`HI1x", " annotation, but there were ", 1, "", uRLStreamHandler0);
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("]twy}2slb*|`hi1x", uRL0.getProtocol());
      assertEquals("", uRL0.getFile());
      assertEquals(1, uRL0.getPort());
      assertEquals(" annotation, but there were :1", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(" annotation, but there were ", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = StandardDeleteOption.overrideReadOnly((DeleteOption[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(1, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertNotNull(standardCopyOptionArray0);
      assertEquals(3, standardCopyOptionArray0.length);
      
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, (LinkOption[]) null, (OpenOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertFalse(boolean1);
      assertEquals(6, linkOptionArray0.length);
      assertFalse(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("c{<& Y@g*", "");
      assertNotNull(mockFile0);
      
      boolean boolean2 = mockFile0.createNewFile();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c{<& Y@g*", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("c{<& Y@g*", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c{<& Y@g*", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("c{<& Y@g*", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      boolean boolean3 = PathUtils.fileContentEquals(path1, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/c{<& Y@g*", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("c{<& Y@g*", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(boolean3);
      assertEquals(6, linkOptionArray0.length);
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
          assertTrue(boolean0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[1];
          StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
          assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
          
          copyOptionArray0[0] = (CopyOption) standardCopyOption0;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:263)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(1, linkOptionArray0.length);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      Path path1 = null;
      // Undeclared exception!
      try { 
        PathUtils.createParentDirectories((Path) null, (FileAttribute<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      // Undeclared exception!
      try { 
        PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      assertNotNull(canExecuteFileFilter0);
      
      NotFileFilter notFileFilter0 = new NotFileFilter(canExecuteFileFilter0);
      assertNotNull(notFileFilter0);
      
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, notFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Pattern pattern0 = Pattern.compile("", 2);
      assertEquals(2, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertEquals(2, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(regexFileFilter0);
      
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, regexFileFilter0);
      assertEquals(2, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rG=P9CrpJ");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("rG=P9CrpJ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("rG=P9CrpJ", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNotNull(path0);
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:415)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:401)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", ",1");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/,1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",1", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertNotNull(path0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/,1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(",1", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(boolean0);
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:133)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:213)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:199)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(1, linkOptionArray0.length);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("Unexpected mismatch.", "*$$r%nY6Xcg");
      assertNotNull(mockFile0);
      
      boolean boolean2 = mockFile0.createNewFile();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch.", mockFile0.getParent());
      assertEquals("*$$r%nY6Xcg", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch./*$$r%nY6Xcg", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch.", mockFile0.getParent());
      assertEquals("*$$r%nY6Xcg", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch./*$$r%nY6Xcg", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(path0);
      
      boolean boolean3 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch.", mockFile0.getParent());
      assertEquals("*$$r%nY6Xcg", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch./*$$r%nY6Xcg", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(boolean3);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      DeleteOption[] deleteOptionArray0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, true, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Path[] pathArray0 = new Path[2];
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(path0, pathArray0[0], copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:263)
             // sun.reflect.GeneratedMethodAccessor204.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Path path0 = null;
      CopyOption[] copyOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:918)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SimpleFileVisitor<Object> simpleFileVisitor0 = null;
          String string0 = "contains '%s'.";
          String string1 = "<y[/";
          MockFile mockFile0 = new MockFile("contains '%s'.", "<y[/");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("<y[", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/contains '%s'./<y[", mockFile0.toString());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/contains '%s'.", mockFile0.getParent());
          assertFalse(mockFile0.canWrite());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/contains '%s'./<y[\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:918)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      linkOptionArray0[1] = linkOption0;
      MockFile mockFile0 = new MockFile("*.(p}\"R]PqHl");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertEquals("*.(p}\"R]PqHl", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertNotNull(path1);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("*.(p}\"R]PqHl", mockFile0.getName());
      assertEquals("*.(p}\"R]PqHl", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      MockFile mockFile0 = new MockFile("*.(p}\"R]PqHl");
      Path path1 = mockFile0.toPath();
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      PathUtils.directoryAndFileContentEquals(path1, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
  }
}
