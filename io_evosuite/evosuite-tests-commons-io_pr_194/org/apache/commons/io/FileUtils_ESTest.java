/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:18:08 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.file.NoopPathVisitor;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      File file1 = FileUtils.getTempDirectory();
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals("/", file1.getParent());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals("/tmp", file1.toString());
      assertFalse(file1.isFile());
      assertEquals("tmp", file1.getName());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, file1);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals("/", file1.getParent());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals("/tmp", file1.toString());
      assertFalse(file1.isFile());
      assertEquals("tmp", file1.getName());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize((long) (-1631602469));
      assertEquals("-1631602469 bytes", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]4};9t$GJY";
      stringArray0[1] = "";
      stringArray0[2] = "org.junitpioneer.jupiter.SystemPropertyExtension";
      stringArray0[3] = "4E}";
      stringArray0[4] = "I-8DmLvGva~d`4cpY";
      stringArray0[5] = "{dBL2b~`)&Sd\"";
      stringArray0[6] = "ZyF8%_Y4h>L7not8";
      File file0 = FileUtils.getFile(stringArray0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]4};9t$GJY/org.junitpioneer.jupiter.SystemPropertyExtension/4E}/I-8DmLvGva~d`4cpY/{dBL2b~`)&Sd\"", file0.getParent());
      assertEquals("ZyF8%_Y4h>L7not8", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]4};9t$GJY/org.junitpioneer.jupiter.SystemPropertyExtension/4E}/I-8DmLvGva~d`4cpY/{dBL2b~`)&Sd\"/ZyF8%_Y4h>L7not8", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(7, stringArray0.length);
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile(file0, byteArray0, true);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]4};9t$GJY/org.junitpioneer.jupiter.SystemPropertyExtension/4E}/I-8DmLvGva~d`4cpY/{dBL2b~`)&Sd\"", file0.getParent());
      assertEquals("ZyF8%_Y4h>L7not8", file0.getName());
      assertEquals(9L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]4};9t$GJY/org.junitpioneer.jupiter.SystemPropertyExtension/4E}/I-8DmLvGva~d`4cpY/{dBL2b~`)&Sd\"/ZyF8%_Y4h>L7not8", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(7, stringArray0.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination directory '", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('Z');
      assertEquals("Z", stringWriter0.toString());
      assertEquals("Z", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals("Z", stringWriter0.toString());
      assertEquals("Z", stringWriter1.toString());
      assertEquals("Z", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      FileUtils.write((File) mockFile0, (CharSequence) stringBuffer0, charset0, true);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Destination directory '/NxA\"]\"cL?u*?T", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("NxA\"]\"cL?u*?T", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Destination directory '", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1L, mockFile0.length());
      assertEquals("Z", stringWriter0.toString());
      assertEquals("Z", stringWriter1.toString());
      assertEquals("Z", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "BIc(Q[|\"LU[");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "BIc(Q[|\"LU[", (String) null, false);
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/BIc(Q[|\"LU[", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("BIc(Q[|\"LU[", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(12L, mockFile0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      File file1 = FileUtils.getTempDirectory();
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp", file1.toString());
      assertFalse(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertEquals("tmp", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals("/", file1.getParent());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      FileUtils.copyDirectory(file0, file1, true);
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp", file1.toString());
      assertFalse(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertEquals("tmp", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(1755767590862L, file1.lastModified());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals("/", file1.getParent());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "ftp");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      FileUtils.writeStringToFile((File) mockFile0, "ftp", charset0);
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("ftp", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(3L, mockFile0.length());
      assertEquals("/home/azureuser/ftp", mockFile0.toString());
      assertEquals("/home/azureuser", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_-_$z1_MPmHtt", "_-_$z1_MPmHtt");
      assertNotNull(mockFile0);
      
      FileUtils.writeStringToFile((File) mockFile0, "_-_$z1_MPmHtt");
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("_-_$z1_MPmHtt", mockFile0.getName());
      assertEquals(13L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_MPmHtt", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_MPmHtt/_-_$z1_MPmHtt", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" y0|WJ1");
      assertNotNull(mockFile0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(" y0|WJ1"));
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0, false);
      assertEquals(" y0|WJ1", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" y0|WJ1", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(" y0|WJ1"));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("content-length", "content-length", file0);
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file1.exists());
      assertEquals("/home/azureuser/content-length0content-length", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("content-length0content-length", file1.getName());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.length());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("content-length"));
      
      FileUtils.writeLines(file1, (String) null, (Collection<?>) priorityQueue0, false);
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file1.exists());
      assertEquals("/home/azureuser/content-length0content-length", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("content-length0content-length", file1.getName());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.length());
      assertEquals(0, priorityQueue0.size());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(priorityQueue0.contains("content-length"));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("97x_BxrC^`");
      assertNotNull(mockFile0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("97x_BxrC^`"));
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) arrayList0, "97x_BxrC^`");
      assertEquals("97x_BxrC^`", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("97x_BxrC^`", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("97x_BxrC^`"));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      MockFile mockFile0 = new MockFile("GezE");
      assertNotNull(mockFile0);
      
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("GezE", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("GezE", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(linkedHashSet0.contains("GezE"));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' during file creation");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)4, 870);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(2L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("' during file creation", mockFile0.getName());
      assertEquals("' during file creation", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot move directory: ");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "Cannot move directory: ", false);
      assertTrue(mockFile0.canExecute());
      assertEquals(23L, mockFile0.length());
      assertEquals("Cannot move directory: ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("Cannot move directory: ", mockFile0.getName());
      assertTrue(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s0~]#c9[!", "/.>zhe:-");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "/.>zhe:-", (String) null);
      assertTrue(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/s0~]#c9[!/.>zhe:-", mockFile0.toString());
      assertEquals(8L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(".>zhe:-", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/s0~]#c9[!", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Size cannot be greater than Integer max value: ", "net.bytebuddy.build.HashCodeAndEqualsPlugin");
          assertNotNull(mockFile0);
          
          File file0 = MockFile.createTempFile("Size cannot be greater than Integer max value: ", "Size cannot be greater than Integer max value: ", (File) mockFile0);
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.canWrite());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Size cannot be greater than Integer max value: ", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.exists());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isDirectory());
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("Size cannot be greater than Integer max value: 0Size cannot be greater than Integer max value: ", file0.getName());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.equals((Object)mockFile0));
          assertNotNull(file0);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile0);
          
          boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.canWrite());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Size cannot be greater than Integer max value: ", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.exists());
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(boolean0);
          assertNotSame(mockFile0, file0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, fileArray0.length);
      assertEquals(0, uRLArray0.length);
      assertNotNull(uRLArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      URL uRL0 = file0.toURL();
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      File file1 = FileUtils.toFile(uRL0);
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertTrue(file1.canWrite());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertEquals("/home", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser", file1.toString());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isFile());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yR", "org.apache.commons.io.fi,efilter.EmptyIileFilter");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR/org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(fileOutputStream0);
      
      fileOutputStream0.write((-2146410441));
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR/org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.toString());
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR/org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.toString());
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/user.home0user.home");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "2RpGrU");
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile("user.home", "user.home");
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/user.home0user.home", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(8L, file0.length());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("user.home0user.home", file0.getName());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      List<String> list0 = FileUtils.readLines(file0, charset0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/user.home0user.home", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(8L, file0.length());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("user.home0user.home", file0.getName());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(list0.contains("2RpGrU"));
      assertFalse(list0.contains("user.home"));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      assertNotNull(mockFile0);
      
      FileUtils.write((File) mockFile0, (CharSequence) "1J");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("1J", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2L, mockFile0.length());
      assertEquals("1J", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      List<String> list0 = FileUtils.readLines((File) mockFile0, (String) null);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("1J", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2L, mockFile0.length());
      assertEquals("1J", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(list0.contains("1J"));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.description.type.TypeDescription$Generic", "net.bytebuddy.description.type.TypeDescription$Generic");
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("net.bytebuddy.description.type.TypeDescription$Generic0net.bytebuddy.description.type.TypeDescription$Generic", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/net.bytebuddy.description.type.TypeDescription$Generic0net.bytebuddy.description.type.TypeDescription$Generic", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      List<String> list0 = FileUtils.readLines(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("net.bytebuddy.description.type.TypeDescription$Generic0net.bytebuddy.description.type.TypeDescription$Generic", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/net.bytebuddy.description.type.TypeDescription$Generic0net.bytebuddy.description.type.TypeDescription$Generic", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("net.bytebuddy.description.type.TypeDescription$Generic"));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Object) "system");
      assertEquals("[system]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      assertTrue(vector0.contains("system"));
      
      MockFile mockFile0 = new MockFile(" y0|WJ1");
      assertNotNull(mockFile0);
      
      FileUtils.writeLines((File) mockFile0, (Collection<?>) vector0);
      assertEquals("[system]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(" y0|WJ1", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" y0|WJ1", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(28L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(vector0.contains("system"));
      assertFalse(vector0.contains(" y0|WJ1"));
      
      String string0 = FileUtils.readFileToString((File) mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(" y0|WJ1", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(" y0|WJ1", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(28L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("~E5wS%jq&M", "a/fz}", file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/~E5wS%jq&M0a", file1.getParent());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/~E5wS%jq&M0a/fz}", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertEquals("fz}", file1.getName());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file1);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/~E5wS%jq&M0a", file1.getParent());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/~E5wS%jq&M0a/fz}", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertEquals("fz}", file1.getName());
      assertEquals(0, fileInputStream0.available());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertNotNull(fileInputStream0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[0];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, stringArray0.length);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("~E5wS%jq&M");
      assertNotNull(prefixFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) prefixFileFilter0, (IOFileFilter) prefixFileFilter0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mR", "org.apache.commons.io.filefilter.EmptyFileFilter");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/mR/org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/mR", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(fileOutputStream0);
      
      LineIterator lineIterator0 = FileUtils.lineIterator((File) mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/mR/org.apache.commons.io.filefilter.EmptyFileFilter", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/mR", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1755767590862L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      //  // Unstable assertion: assertEquals("/", file0.getParent());
      //  // Unstable assertion: assertEquals("tmp", file0.getName());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/tmp", file0.toString());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertNotNull(file0);
      
      long long0 = FileUtils.lastModified(file0);
      //  // Unstable assertion: assertEquals("/", file0.getParent());
      //  // Unstable assertion: assertEquals("tmp", file0.getName());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/tmp", file0.toString());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertEquals(1755990833171L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-1318863214000L));
      assertNotNull(ageFileFilter0);
      
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(ageFileFilter0);
      assertNotNull(pathVisitorFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, pathVisitorFileFilter0, ageFileFilter0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[7];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(prefixFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) prefixFileFilter0, (IOFileFilter) prefixFileFilter0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(7, stringArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'";
      stringArray0[1] = "/tmp/o?:@hu";
      stringArray0[2] = "1#\"1";
      stringArray0[3] = "D;";
      stringArray0[4] = "^4B_MT}H3Gufi1U<";
      stringArray0[5] = "ftp";
      stringArray0[6] = "/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1";
      stringArray0[7] = "+Qx`";
      stringArray0[8] = "/home/azureuser/LLm4PrTest";
      File file0 = FileUtils.getFile(stringArray0);
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'/tmp/o?:@hu/1#\"1/D;/^4B_MT}H3Gufi1U</ftp/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1/+Qx`/home/azureuser/LLm4PrTest", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'/tmp/o?:@hu/1#\"1/D;/^4B_MT}H3Gufi1U</ftp/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1/+Qx`/home/azureuser", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("LLm4PrTest", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(9, stringArray0.length);
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'/tmp/o?:@hu/1#\"1/D;/^4B_MT}H3Gufi1U</ftp/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1/+Qx`/home/azureuser/LLm4PrTest", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/'/tmp/o?:@hu/1#\"1/D;/^4B_MT}H3Gufi1U</ftp/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1/+Qx`/home/azureuser", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("LLm4PrTest", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate(8, 2147364349, 8, 18, (-2137632803), 1024);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Sun Oct 09 12:54:04 GMT 178944872", mockDate0.toString());
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals("Sun Oct 09 12:54:04 GMT 178944872", mockDate0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate(26, 26, 26, (-227), 1206, 26);
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("Sat Mar 17 09:06:26 GMT 1928", mockDate0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pLFg8oc=^:e`\"yi");
      assertNotNull(mockFile0);
      
      MockDate mockDate0 = new MockDate(1652L);
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("pLFg8oc=^:e`\"yi", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("pLFg8oc=^:e`\"yi", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      File file1 = FileUtils.createParentDirectories(file0);
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("home", file1.getName());
      assertEquals("/", file1.getParent());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertEquals("/home", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, file1);
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("home", file1.getName());
      assertEquals("/", file1.getParent());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertEquals("/home", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(boolean0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertTrue(boolean0);
      assertEquals(2, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean0 = file0.setWritable(false, true);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(boolean0);
      
      File file1 = FileUtils.getUserDirectory();
      assertTrue(file1.canRead());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals("/home", file1.getParent());
      assertFalse(file1.isFile());
      assertFalse(file1.canWrite());
      assertEquals("/home/azureuser", file1.toString());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertTrue(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "zoneId";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`/NxA\"]\"cL?u*?T/>E/l]0http";
      stringArray0[2] = "QE[SW";
      stringArray0[3] = ".Feg\"H]/R)";
      stringArray0[4] = "!5HLN(m$";
      stringArray0[5] = "mFO)w<3=pb7";
      stringArray0[6] = "/home/azureuser/LLm4PrTest/ io_experiments/destinationDir/destinationDir/destinationDir0destinationDir";
      stringArray0[7] = "]";
      stringArray0[8] = ".";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/zoneId/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`/NxA\"]\"cL?u*?T/>E/l]0http/QE[SW/.Feg\"H]/R)/!5HLN(m$/mFO)w<3=pb7/home/azureuser/LLm4PrTest/ io_experiments/destinationDir/destinationDir/destinationDir0destinationDir/]/.", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/zoneId/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`/NxA\"]\"cL?u*?T/>E/l]0http/QE[SW/.Feg\"H]/R)/!5HLN(m$/mFO)w<3=pb7/home/azureuser/LLm4PrTest/ io_experiments/destinationDir/destinationDir/destinationDir0destinationDir/]", file0.getParent());
      assertEquals(".", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(9, stringArray0.length);
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "VPPnrg,}|0V";
      stringArray0[1] = "VPPnrg,}|0V";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V/VPPnrg,}|0V", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("VPPnrg,}|0V", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(2, stringArray0.length);
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("destinatior", "VPPnrg,}|0V", file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V/VPPnrg,}|0V", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("VPPnrg,}|0V", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("destinatior0VPPnrg,}|0V", file1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V/VPPnrg,}|0V/destinatior0VPPnrg,}|0V", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V/VPPnrg,}|0V", file1.getParent());
      assertFalse(file1.equals((Object)file0));
      assertEquals(2, stringArray0.length);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      File file2 = FileUtils.getFile(stringArray0);
      assertTrue(file2.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V/VPPnrg,}|0V", file2.toString());
      assertTrue(file2.canExecute());
      assertTrue(file2.canRead());
      assertEquals("VPPnrg,}|0V", file2.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VPPnrg,}|0V", file2.getParent());
      assertFalse(file2.isFile());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.length());
      assertTrue(file2.canWrite());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getTotalSpace());
      assertTrue(file2.exists());
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertEquals(2, stringArray0.length);
      assertNotNull(file2);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1J";
      File file0 = FileUtils.getFile(stringArray0);
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertNull(file0.getParent());
      assertEquals("1J", file0.toString());
      assertFalse(file0.canRead());
      assertEquals("1J", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(1, stringArray0.length);
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")^m&iCyNFwtRNZ");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      assertEquals(")^m&iCyNFwtRNZ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(")^m&iCyNFwtRNZ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(")^m&iCyNFwtRNZ", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(")^m&iCyNFwtRNZ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0, stringArray0.length);
      assertNotNull(file0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = FileUtils.directoryContains(mockFile0, mockFile1);
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile1.getParent());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      assertTrue(boolean0);
      
      File file1 = FileUtils.createParentDirectories(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("home", file1.getName());
      assertEquals("/", file1.getParent());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isFile());
      assertEquals("/home", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(file1.canExecute());
      assertTrue(file1.canRead());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yR", "org.apache.commons.io.fi,efilter.EmptyIileFilter");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR", mockFile0.getParent());
      assertEquals("org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR/org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.toString());
      assertNotNull(fileOutputStream0);
      
      fileOutputStream0.write((-2146410441));
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR", mockFile0.getParent());
      assertEquals("org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR/org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.toString());
      
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(2L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR", mockFile0.getParent());
      assertEquals("org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/yR/org.apache.commons.io.fi,efilter.EmptyIileFilter", mockFile0.toString());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, fileFileFilter0, fileFileFilter0);
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertNotNull(collection0);
      
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(collection0);
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertEquals(9, fileArray0.length);
      assertNotNull(fileArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("dos:system", "dos:system", file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file1.getParent());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("dos:system0dos:system", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/azureuser/dos:system0dos:system", file1.toString());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      long long0 = FileUtils.checksumCRC32(file1);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file1.getParent());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("dos:system0dos:system", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/azureuser/dos:system0dos:system", file1.toString());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, long0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("o?:@hu");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "dy>Lj$[!.,j#.8@Y");
      assertTrue(boolean0);
      
      stringArray0[0] = "o?:@hu";
      stringArray0[1] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(17L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/o?:@hu", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("o?:@hu", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(2, stringArray0.length);
      assertNotNull(file0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      Checksum checksum0 = FileUtils.checksum(file0, cRC32_0);
      assertEquals(17L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/o?:@hu", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("o?:@hu", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(2941256769L, cRC32_0.getValue());
      assertEquals(2941256769L, checksum0.getValue());
      assertEquals(2, stringArray0.length);
      assertNotNull(checksum0);
      assertSame(cRC32_0, checksum0);
      assertSame(checksum0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "}A$Hu", (Charset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, ">6q?6!)3ip", charset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = MockFile.createTempFile("user.home", "user.home");
      assertEquals("user.home0user.home", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/user.home0user.home", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "<\"651xs3>-L{Xv/TH(", "user.home", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // user.home
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, "K");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // K
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "B>M", "Cp#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cp#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertFalse(file0.isHidden());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.writeStringToFile(file0, "The FileFilter must not be null", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "793 bytes");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o?:@hu";
      stringArray0[1] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("o?:@hu", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/o?:@hu", file0.toString());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(2, stringArray0.length);
      assertNotNull(file0);
      
      try { 
        FileUtils.writeStringToFile(file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      assertNotNull(mockFile0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("ZyU'7q99"));
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) stack0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) treeSet0, " Z~j", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) vector0, " y0|WJ1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter", "org.apache.commons.io.filefilter.IOFileFilter");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.apache.commons.io.filefilter.IOFileFilter"));
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) vector0, "{K^9", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, "#By");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("97x_BxrC^`");
      assertNotNull(mockFile0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("97x_BxrC^`"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(set0.contains("97x_BxrC^`"));
      assertFalse(linkedList0.contains("97x_BxrC^`"));
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedList0, "/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/_-_$z1_zMPnHtt0`y5\"Y]W&0V6{/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/_-_$z1_zMPnHtt0`y5\"Y]W&0V6{/azureuser");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(" y0|WJ1");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chronoZonedDateTime");
      assertNotNull(mockFile0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("chronoZonedDateTime"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "chronoZonedDateTime", (Collection<?>) priorityQueue0, false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // chronoZonedDateTime
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iT$#Gahyeg0Epv1S", "");
      assertNotNull(mockFile0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("iT$#Gahyeg0Epv1S"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "", (Collection<?>) priorityQueue0, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "Failed to delete original directory '", (Collection<?>) set0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("No exit advice defined by ");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "No exit advice defined by ";
      stringArray0[1] = "No exit advice defined by ";
      stringArray0[2] = "No exit advice defined by ";
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("No exit advice defined by ", mockFile0.getName());
      assertEquals("No exit advice defined by ", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("No exit advice defined by ", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/No exit advice defined by /No exit advice defined by /No exit advice defined by /No exit advice defined by ", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/No exit advice defined by /No exit advice defined by /No exit advice defined by ", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(3, stringArray0.length);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      try { 
        FileUtils.writeLines(file0, "No exit advice defined by ", (Collection<?>) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/No exit advice defined by /No exit advice defined by /No exit advice defined by '.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dy>Lj$[!.,j#.8@Y", "dy>Lj$[!.,j#.8@Y");
      assertNotNull(mockFile0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains("dy>Lj$[!.,j#.8@Y"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "system", (Collection<?>) vector0, "dy>Lj$[!.,j#.8@Y", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // system
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, ":L8'G,%}d7I%D@|a", (Collection<?>) vector0, "1j@#$lvWGhpQUws^", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "", (Collection<?>) linkedHashSet0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("97x_BxrC^`", "97x_BxrC^`");
      assertNotNull(mockFile0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("97x_BxrC^`"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "", (Collection<?>) arrayList0, "97x_BxrC^`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TreeSet<FormatStyle> treeSet0 = new TreeSet<FormatStyle>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (String) null, (Collection<?>) treeSet0, "$VALUES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      TreeSet<FormatStyle> treeSet0 = new TreeSet<FormatStyle>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "Z! 9S#", (Collection<?>) treeSet0, "Z! 9S#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.writeLines((File) mockFile0, "bbl)", (Collection<?>) stack0, "/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1/ y0|WJ10 y0|WJ1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ1/`7/ y0|WJ1/ y0|WJ1'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("date");
      assertNotNull(mockFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("date"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "date", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // date
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      assertNotNull(mockFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("ZyU'7q99"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "ZyU'7q99", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ZyU'7q99
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertNotNull(file0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "@DefaultTimeZone not cnfigured correctly. Could not find the specified ime zone+ '%s'. Please use correct idntifiers, e.g. \"GMT\" for Greenwich Mean Time.", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZyU'7q99");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "ZyU'7q99");
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      assertNotNull(mockFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("ZyU'7q99"));
      
      try { 
        FileUtils.writeLines((File) mockFile0, "ZyU'7q99", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/ZyU'7q99'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination directory '", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, 8, (int) (byte) (-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte) (-104), (int) (byte) (-104), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-62), (int) (byte)27, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(bindingMechanic=");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[2];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-1952257860), (int) (byte) (-6), false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (-1489), 1133704324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-1), 525);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte)15, (int) (byte)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte) (-64), (int) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NxA\"]\"cL?u*?T", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("NxA\"]\"cL?u*?T", "NxA\"]\"cL?u*?T", (File) mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/NxA\"]\"cL?u*?T", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/NxA\"]\"cL?u*?T/NxA\"]\"cL?u*?T", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("NxA\"]\"cL?u*?T", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/NxA\"]\"cL?u*?T/NxA\"]\"cL?u*?T/NxA\"]\"cL?u*?T0NxA\"]\"cL?u*?T", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("NxA\"]\"cL?u*?T0NxA\"]\"cL?u*?T", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/NxA\"]\"cL?u*?T/NxA\"]\"cL?u*?T", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser/LLm4PrTest/ io_experiments/NxA\"]\"cL?u*?T/NxA\"]\"cL?u*?T
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NxA\"]\"cL?u*?T", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "7*%1wkejSzfo]lmB\"L");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "/home/azureuser", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "K%1k-t9", "me", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // me
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "extensions", "/home/azureuser/BIc(Q[|\"LU[", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/BIc(Q[|\"LU[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "BIc(Q[|\"LU[");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "BIc(Q[|\"LU[", (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GezE");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "GezE", "GezE");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // GezE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "ftp", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/home/azureuser");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-2045222520));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File[] fileArray0 = new File[2];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/ZyU'7q99/ZyU'7q99'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" y0|WJ1");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: ' y0|WJ1'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser", "/home/azureuser/home/azureuser");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/home/azureuser/home/azureuser/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/destDir//home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) mockFile0, "destination");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // destination
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(bindingMechanic=", "(bindingMechanic=");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "r");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("/tmp/tmp/tmp", "/tmp/tmp/tmp");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.openOutputStream((File) mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp/tmp/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("Ci`x.G", "{-", file0);
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/Ci`x.G0{-", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals("/tmp", file1.getParent());
      assertEquals("Ci`x.G0{-", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      MockFile mockFile0 = new MockFile(file1, "Ci`x.G");
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.openOutputStream((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/Ci`x.G0{-'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" y0|WJ1");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile(" y0|WJ1", " y0|WJ1", (File) mockFile0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" y0|WJ1", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" y0|WJ1", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(" y0|WJ10 y0|WJ1", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ10 y0|WJ1", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/home/azureuser/LLm4PrTest/ io_experiments/ y0|WJ1/ y0|WJ10 y0|WJ1'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`1xn>nF?P67{na", "`1xn>nF?P67{na");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/`1xn>nF?P67{na/`1xn>nF?P67{na'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination directory '", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Destination directory '/NxA\"]\"cL?u*?T' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst", "K]+.3)e|N}p&n=_/1p~");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(mockFile0, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = MockFile.createTempFile("/hom", "[NPp/m/I:R}kLf");
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/hom0[NPp/m/I:R}kLf", file0.toString());
      assertEquals("I:R}kLf", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/hom0[NPp/m", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/tmp/hom0[NPp/m/I:R}kLf'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Rb+8fn[onQp=N&Hw<";
      stringArray0[1] = "S_[_E fmg7";
      stringArray0[2] = "/tmp//tmp/tmp";
      stringArray0[3] = "/hom";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Rb+8fn[onQp=N&Hw</S_[_E fmg7/tmp/tmp/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Rb+8fn[onQp=N&Hw</S_[_E fmg7/tmp/tmp/tmp/hom", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("hom", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(4, stringArray0.length);
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Rb+8fn[onQp=N&Hw</S_[_E fmg7/tmp/tmp/tmp/hom' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertFalse(file0.isHidden());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?:Xc-R\"m5");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("_-_$z1_zMPnHtt", "_-_$z1_zMPnHtt");
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canExecute());
      assertEquals("/tmp", file1.getParent());
      assertEquals("/tmp/_-_$z1_zMPnHtt0_-_$z1_zMPnHtt", file1.toString());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("_-_$z1_zMPnHtt0_-_$z1_zMPnHtt", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/_-_$z1_zMPnHtt0_-_$z1_zMPnHtt'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mR", "mR");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/mR/mR' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(" y0|WJ1", " y0|WJ1", file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/ y0|WJ10 y0|WJ1", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals(" y0|WJ10 y0|WJ1", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file1, fileFileFilter0, fileFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/ y0|WJ10 y0|WJ1
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/hk/:Xo.0hk/:Xo.", "/tmp/tmp/hk/:Xo.0hk/:Xo.");
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/tmp/tmp/hk/:Xo.0hk/:Xo.0/tmp/tmp/hk/:Xo.0hk/:Xo.", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(":Xo.", file0.getName());
      assertEquals("/tmp/tmp/tmp/hk/:Xo.0hk/:Xo.0/tmp/tmp/hk/:Xo.0hk", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/tmp/tmp/hk/:Xo.0hk/:Xo.0/tmp/tmp/hk/:Xo.0hk/:Xo.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = MockFile.createTempFile("Array Size=", "Array Size=");
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("Array Size=0Array Size=", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/Array Size=0Array Size=", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/Array Size=0Array Size=
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("1J", mockFile0.getName());
      assertEquals("1J", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) mockFile0, "File parameter '");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // File parameter '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Size cannot be greater than Integer max value: ", "net.bytebuddy.build.HashCodeAndEqualsPlugin");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lineIterator((File) mockFile0, "net.bytebuddy.build.HashCodeAndEqualsPlugin");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      assertNotNull(mockFile0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-2045222520), false);
      assertNotNull(ageFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, ageFileFilter0, ageFileFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: org.apache.commons.io.filefilter.IOFileFilter
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.build.HashCodeAndEqualsPlugin", "net.bytebuddy.build.HashCodeAndEqualsPlugin");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/net.bytebuddy.build.HashCodeAndEqualsPlugin/net.bytebuddy.build.HashCodeAndEqualsPlugin
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("f:|A| m", "/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_MPmHtt");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = MockFile.createTempFile("judOnR8G'o<eA\"?0A\"", "judOnR8G'o<eA\"?0A\"");
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/judOnR8G'o<eA\"?0A\"0judOnR8G'o<eA\"?0A\"", file0.toString());
      assertEquals("judOnR8G'o<eA\"?0A\"0judOnR8G'o<eA\"?0A\"", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate(124, 124, (-1905), (-1905), 124, 124);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/judOnR8G'o<eA\"?0A\"0judOnR8G'o<eA\"?0A\"
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = MockFile.createTempFile("m!1=eAXBgHHv", "m!1=eAXBgHHv");
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("m!1=eAXBgHHv0m!1=eAXBgHHv", file0.getName());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/m!1=eAXBgHHv0m!1=eAXBgHHv", file0.toString());
      assertNotNull(file0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/m!1=eAXBgHHv0m!1=eAXBgHHv
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`1xn>nF?P67{na", "`1xn>nF?P67{na");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/`1xn>nF?P67{na/`1xn>nF?P67{na'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (-1394L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("97x_BxrC^`", "97x_BxrC^`");
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("97x_BxrC^`/97x_BxrC^`");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (-2000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/97x_BxrC^`/97x_BxrC^`
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destDir", "destDir");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("destDir", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(1652L);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("yG^:[)n", "X[7*G a;,", file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/yG^:[)n0X[7*G a;,", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.exists());
      assertEquals("yG^:[)n0X[7*G a;,", file1.getName());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file1, (ChronoLocalDate) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/yG^:[)n0X[7*G a;,
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_-_$z1_zMPnHtt");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '_-_$z1_zMPnHtt'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 151L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, 2135L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/{M@hcF(4w;r{0{M@hcF(4w;r{
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = MockFile.createTempFile("k0_Lhvi2vO+67R", "k0_Lhvi2vO+67R");
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/k0_Lhvi2vO+67R0k0_Lhvi2vO+67R", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("k0_Lhvi2vO+67R0k0_Lhvi2vO+67R", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/k0_Lhvi2vO+67R0k0_Lhvi2vO+67R'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("97x_Bk\"xrC^`", "97x_Bk\"xrC^`");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/97x_Bk\"xrC^`/97x_Bk\"xrC^`'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", "Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertEquals("/tmp/tmp0Null byte present in file", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("path name. There are no known legitimate use cases for such data, but several injection attacks may use it", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/tmp0Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"NO\"gRejkRQwV";
      stringArray0[1] = "Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it";
      stringArray0[2] = " is not writable: '";
      stringArray0[3] = "/tmp";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals("/tmp/tmp0Null byte present in file", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("path name. There are no known legitimate use cases for such data, but several injection attacks may use it", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/tmp0Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file1.isFile());
      assertEquals("/tmp/tmp0Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it/\"NO\"gRejkRQwV/Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it/ is not writable: '", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertEquals("/tmp/tmp0Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it/\"NO\"gRejkRQwV/Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it/ is not writable: '/tmp", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("tmp", file1.getName());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertFalse(file1.equals((Object)file0));
      assertEquals(4, stringArray0.length);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      try { 
        FileUtils.createParentDirectories(file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp0Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it/\"NO\"gRejkRQwV/Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it/ is not writable: ''.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-2129129084), (-2129129084));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(bufferedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'h7q99", "ZyU'h7q99");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("'y0|WJ1", "'y0|WJ1", file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser/'y0|WJ10'y0|WJ1", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("'y0|WJ10'y0|WJ1", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TreeSet<File> treeSet0 = new TreeSet<File>();
      assertNotNull(treeSet0);
      
      boolean boolean1 = treeSet0.add(file1);
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser/'y0|WJ10'y0|WJ1", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("'y0|WJ10'y0|WJ1", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r\"oSQ]\"cI-y;", "?:Xc-R\"m5");
      assertNotNull(mockFile0);
      
      TreeSet<File> treeSet0 = new TreeSet<File>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add(mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;/?:Xc-R\"m5", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("?:Xc-R\"m5", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;/?:Xc-R\"m5'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      File file0 = FileUtils.getTempDirectory();
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a08P", "a08P");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/a08P/a08P'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, file0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?Z!YT$2rn", "?Z!YT$2rn");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/?Z!YT$2rn/?Z!YT$2rn'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/O error listing contents of directory: 0(", "/home/azureuser/O error listing contents of directory: 0(");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/O error listing contents of directory: 0(/home/azureuser/O error listing contents of directory: 0('
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("/home/azureuser/LLm4PrTest/ io_experiments/~E5wS%jq&M/home/azureuser");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        FileUtils.copyFile(file0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "'x=s");
      assertNotNull(mockFile0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/@DefaultLocale can only be used with language tag if language, country, and variant are not set/'x=s'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`1xn>nF?P67{na", "97x_Bk\"xrC^`");
      assertNotNull(mockFile0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("`1xn>nF?P67{na", "97x_Bk\"xrC^`");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{M@hcF(4w;Fr{");
      assertNotNull(mockFile0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '{M@hcF(4w;Fr{'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_-_$z1_MPmHtt", "_-_$z1_MPmHtt");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_MPmHtt/_-_$z1_MPmHtt'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("97x_BxrC^`");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("MO*lE0b^1Ih\"6VOc", "MO*lE0b^1Ih\"6VOc");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/MO*lE0b^1Ih\"6VOc/MO*lE0b^1Ih\"6VOc'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0, (FileFilter) andFileFilter0, true, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`1xn>nF?P67{na", "97x_Bk\"xrC^`");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      assertNotNull(canReadFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) canReadFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/`1xn>nF?P67{na/97x_Bk\"xrC^`'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      File file0 = MockFile.createTempFile("l>HhZ{c<,'R%mEa{cZ", "l>HhZ{c<,'R%mEa{cZ", (File) null);
      assertEquals("l>HhZ{c<,'R%mEa{cZ0l>HhZ{c<,'R%mEa{cZ", file0.getName());
      assertEquals("/tmp/l>HhZ{c<,'R%mEa{cZ0l>HhZ{c<,'R%mEa{cZ", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) null, (FileFilter) notFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k-_Lh?i2vO+67`", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("NxA\"]\"cL?u*?T", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`/NxA\"]\"cL?u*?T", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("NxA\"]\"cL?u*?T", iOCase0);
      assertNotNull(wildcardFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) wildcardFileFilter0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`/NxA\"]\"cL?u*?T'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("~E5wS%jq&M");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      File file1 = MockFile.createTempFile("a/fz}", "/home/azureuser/ y0|WJ10 y0|WJ1", (File) mockFile0);
      assertFalse(mockFile0.isFile());
      assertEquals("~E5wS%jq&M", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("~E5wS%jq&M", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(" y0|WJ10 y0|WJ1", file1.getName());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/~E5wS%jq&M/a/fz}0/home/azureuser/ y0|WJ10 y0|WJ1", file1.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/~E5wS%jq&M/a/fz}0/home/azureuser", file1.getParent());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("/home/azureuser/LLm4PrTest/ io_experiments/AK[2Gl/AK[2Gl/)Qbo1^mn!J#; 3b6y0/home");
      assertNotNull(wildcardFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) wildcardFileFilter0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("extensions");
      assertNotNull(wildcardFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) wildcardFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("file1");
      assertNotNull(regexFileFilter0);
      
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) regexFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~E5wS%jq&M", "~E5wS%jq&M");
      assertNotNull(mockFile0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("/homeazureuser/ y0|WJ10 y0|WJ1");
      assertNotNull(wildcardFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) wildcardFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/~E5wS%jq&M/~E5wS%jq&M'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("~E5wS%jq&M");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destDir");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("destDir", "destDir", (File) mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("destDir", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("destDir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir0destDir", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals("destDir0destDir", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iT$#Gahyeg0Epv1S", "");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/iT$#Gahyeg0Epv1S'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/ZyU'7q99/ZyU'7q99'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, cRC32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertEquals("/", file0.getParent());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      assertNotNull(mockFile0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: 'org.apache.commons.io.filefilter.IOFileFilter'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination directory '", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      FileUtils.writeStringToFile((File) mockFile0, "' is not a directory", (Charset) null, true);
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Destination directory '", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(20L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Destination directory '/NxA\"]\"cL?u*?T", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("NxA\"]\"cL?u*?T", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      assertNotNull(mockFile0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.apache.commons.io.filefilter.IOFileFilter"));
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "s%>]+h(}@%WEAK!P2A{", (Collection<?>) vector0, "#{c", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // s%>]+h(}@%WEAK!P2A{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination directory '", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (-1787), (-1787), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      Stream<File> stream0 = FileUtils.streamFiles(file0, false, (String[]) null);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/date/date/date/date/date/tp}rKL?a:`>X/date/azureuser");
      assertNotNull(mockFile0);
      
      String[] stringArray0 = new String[1];
      try { 
        FileUtils.streamFiles(mockFile0, false, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destDir", "destDir");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("destDir", "destDir", (File) mockFile0);
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("destDir", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("destDir0destDir", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir/destDir0destDir", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(mockFile0);
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir/destDir", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("destDir", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/destDir", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(bigInteger0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(" y0|WJ1", " y0|WJ1", file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser/ y0|WJ10 y0|WJ1", file1.toString());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(" y0|WJ10 y0|WJ1", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.equals((Object)file1));
      assertEquals(0L, long0);
      assertNotSame(file0, file1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("1J", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("1J", mockFile0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '1J'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "date";
      stringArray0[1] = "date";
      stringArray0[2] = "date";
      stringArray0[3] = "date";
      stringArray0[4] = "date";
      stringArray0[5] = "tp}rKL?a:`>X";
      stringArray0[6] = "date";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertEquals("date", file1.getName());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser/date/date/date/date/date/tp}rKL?a:`>X/date", file1.toString());
      assertEquals("/home/azureuser/date/date/date/date/date/tp}rKL?a:`>X", file1.getParent());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertFalse(file1.equals((Object)file0));
      assertEquals(7, stringArray0.length);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/date/date/date/date/date/tp}rKL?a:`>X/date/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r\"oSQ]\"cI-y;", "?:Xc-R\"m5");
      assertNotNull(mockFile0);
      
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("?:Xc-R\"m5", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;/?:Xc-R\"m5", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertEquals("r\"oSQ]\"cI-y;", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y; to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/r\"oSQ]\"cI-y;/?:Xc-R\"m5
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isSymlink(file0);
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("tmp", file0.getName());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("97xkBxrC^`");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 1755990825967L);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("97xkBxrC^`", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("97xkBxrC^`", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (-1351L));
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, 1755990833171L);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, 92L);
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFile mockFile0 = new MockFile("file", "file");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyToFile(pipedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isDirectory());
          assertEquals("/home/azureuser", file0.toString());
          assertTrue(file0.canExecute());
          assertEquals("/home", file0.getParent());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canWrite());
          assertFalse(file0.isFile());
          assertEquals("azureuser", file0.getName());
          assertNotNull(file0);
          
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:918)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:975)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:432)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:389)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1339)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:322)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      FileUtils.cleanDirectory(file0);
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("destDir", "destDir", file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser/destDir0destDir", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("destDir0destDir", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      Checksum checksum0 = FileUtils.checksum(file1, cRC32_0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser/destDir0destDir", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("destDir0destDir", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/home/azureuser", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, checksum0.getValue());
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertNotNull(checksum0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertSame(cRC32_0, checksum0);
      assertSame(checksum0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)1024, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)1024, bigInteger0.shortValue());
      assertEquals("1 KB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals("1 bytes", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/tmp/", "{M@hcF(4w;r{", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {M@hcF(4w;r{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k-_Lh?i2vO+67`", "NxA\"]\"cL?u*?T");
      assertNotNull(mockFile0);
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("NxA\"]\"cL?u*?T", iOCase0);
      assertNotNull(wildcardFileFilter0);
      
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) wildcardFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/k-_Lh?i2vO+67`/NxA\"]\"cL?u*?T'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(wildcardFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, wildcardFileFilter0, wildcardFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "/>aX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Duplicate advice for ", "Duplicate advice for ");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Duplicate advice for /Duplicate advice for '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("{M@hcF(4w;r{0{M@hcF(4w;r{", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      try { 
        FileUtils.lastModified(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockFile mockFile0 = new MockFile("posix:permissions", "posix:permissions");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      assertNotNull(mockFile0);
      
      Period period0 = Period.ofMonths(1568);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) localDate0, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // localTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qNM2", "qNM2");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/qNM2/qNM2
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("ZyU'7q99", "G9");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "org.apache.commons.io.filefilter.AgeFileFilter", (Charset) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "hS:g");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      FileUtils.waitFor(mockFile0, 0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-2045222520));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File[] fileArray0 = new File[1];
      fileArray0[0] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(1, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      FileUtils.touch(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.touch(file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URL uRL0 = MockURL.getFileExample();
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[2];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter((Path) null);
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) pathEqualsFileFilter0, (IOFileFilter) pathEqualsFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.nio.file.NoSuchFileException: /fake/but/wellformed/url
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile.createTempFile("destDir", "destDir", file0);
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      File file0 = MockFile.createTempFile("directory", "/home/azureuser/tmp/azureuser");
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("_WXci.tRDwn<^Op", "_WXci.tRDwn<^Op");
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'org.apache.commons.io.filefilter.IOFileFilter'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: '/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      file0.setReadOnly();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "{M@hcF(4w;r{", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'file is not writable: '/tmp/{M@hcF(4w;r{0{M@hcF(4w;r{'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = FileUtils.readLines(file0, charset0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = MockFile.createTempFile("k-_Lh?i2vO+67`", "k-_Lh?i2vO+67`");
      String string0 = FileUtils.readFileToString(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k-_Lh?i2vO+67`", "NxA\"]\"cL?u*?T");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      byte[] byteArray1 = FileUtils.readFileToByteArray(mockFile0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = MockFile.createTempFile("k-_Lh?i2vO+67`", "k-_Lh?i2vO+67`");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/org.junitpioneer.jupiter.params.IntRange/org.junitpioneer.jupiter.params.IntRange'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("A_$z1_MPmHrtt", "A_$z1_MPmHrtt");
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = FileUtils.createParentDirectories(file0);
          File file2 = MockFile.createTempFile("GFQX8*te72hr}Fy^", "<g+txkEyR6B", file1);
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file2, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/GFQX8*te72hr}Fy^0<g+txkEyR6B\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:848)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2308)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2283)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2338)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2363)
             // sun.reflect.GeneratedMethodAccessor322.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser", "file");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/file/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/home/azureuser//home/azureuser/azureuser";
      stringArray0[1] = "L4:-q=";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/tmp/home/azureuser/home/azureuser/azureuser/L4:-q=' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NxA\"]\"cL?u*?T", "NxA\"]\"cL?u*?T");
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/azureuser", "NxA\"]\"cL?u*?T", (File) mockFile0);
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/NxA\"]\"cL?u*?T/NxA\"]\"cL?u*?T/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/azureuser0NxA\"]\"cL?u*?T' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveDirectoryToDirectory(file1, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1173)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1192)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2228)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2262)
             // sun.reflect.GeneratedMethodAccessor320.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("]!1RPr1.028G{/f&p*", "]!1RPr1.028G{/f&p*");
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("q?y|\"3yE.zH,^oV19+E");
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) wildcardFileFilter0);
      assertEquals(1755767590862L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@jX&pkk`8v}t", "@jX&pkk`8v}t");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(mockFile0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Nh[ D", "Nh[ D");
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (-1806L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r\"oSQ]\"cI-y;";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals(0L, file1.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      FileUtils.forceMkdirParent(mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1 GB", "1 GB");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~E5wS%jq&M");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile.createTempFile("hk/:Xo.", "hk/:Xo.", file0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/hk/:Xo.0hk/:Xo.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:848)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1310)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:697)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:628)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:529)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:728)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:985)
             // sun.reflect.GeneratedMethodAccessor310.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.build.HashCodeAndEqualsPlugin", "net.bytebuddy.build.HashCodeAndEqualsPlugin");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, "#By");
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$BigIntegerPathCounters", "org.apache.commons.io.FileExIst#Exception");
      FileUtils.deleteDirectory(mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("Failed setLastModified(%s) on!'%s'");
      assertEquals("Failed setLastModified(%s) on!'%s'", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TreeSet<File> treeSet0 = new TreeSet<File>();
      treeSet0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TreeSet<File> treeSet0 = new TreeSet<File>();
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory((Iterable<File>) treeSet0, file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GezE");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("ZyU'h7q99", "ZyU'h7q99");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, true);
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mR", "org.apache.commons.io.filefilter.EmptyFileFilter");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) fileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "{M@hcF(4w;r{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'h7q99", "ZyU'h7q99");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("pLFg8oc=^:e`\"yi");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "pLFg8oc=^:e`\"yi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1J");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, mockFile0, "matches '%s'.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/_-_$z1_zMPnHtt0`y5\"Y]W&0V6{/home/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/azureuser/LLm4PrTest/ io_experiments/_-_$z1_zMPnHtt/_-_$z1_zMPnHtt0`y5\"Y]W&0V6{/azureuser");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "dtA,B$1R/*y?2*dN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("~E5wS%jq&M", "a/fz}", file0);
      boolean boolean0 = FileUtils.contentEquals(file1, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "BIc(Q[|\"LU[");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r\"oSQ]\"cI-y;", "?:Xc-R\"m5");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("97xkBxrC^`");
      MockPrintStream mockPrintStream0 = new MockPrintStream("97xkBxrC^`");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k-_Lh?i2vO+67`", "NxA\"]\"cL?u*?T");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      long long0 = FileUtils.checksumCRC32(mockFile0);
      assertEquals(3523407757L, long0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(priorityQueue0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      StringWriter stringWriter0 = new StringWriter(16);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) stringBuffer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("/homeazureuser/ y0|WJ10 y0|WJ1");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(124, 124, (-1905), (-1905), 124, 124);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mR", "org.apache.commons.io.filefilter.EmptyFileFilter");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "mR", (Collection<?>) arrayList0, "Z! 9S#");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // mR
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dy>Lj$[!.,j#.8@Y", "dy>Lj$[!.,j#.8@Y");
      Vector<Object> vector0 = new Vector<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) vector0, "system", true);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      byte[] byteArray0 = new byte[1];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte) (-119), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "/home/azureuser/Unknown I/O error listing contents of directory: 0(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/Unknown I/O error listing contents of directory: 0(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I`9+q#eiMf'z^bp@/");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, stringArray0, false);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'h7q99", "ZyU'h7q99");
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) mockFile0, "ZyU'h7q99");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ZyU'h7q99
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LocalDate localDate0 = MockLocalDate.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) localDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZyU'7q99", "ZyU'7q99");
      Instant instant0 = MockInstant.ofEpochMilli((-1641L));
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (String) null, (Collection<?>) priorityQueue0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) treeSet0, "L)Zf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k-_Lh?i2vO+67`", "NxA\"]\"cL?u*?T");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: 'checksum'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NoopPathVisitor noopPathVisitor0 = NoopPathVisitor.INSTANCE;
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(noopPathVisitor0);
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) pathVisitorFileFilter0, (IOFileFilter) pathVisitorFileFilter0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(G9H;Q3>X&YC");
      FileUtils.writeStringToFile((File) mockFile0, "/tmp", true);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      FileUtils.listFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, falseFileFilter0, falseFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileEqualsFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1099511627776L, FileUtils.ONE_TB);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", (Collection<?>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.IOFileFilter");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'org.apache.commons.io.filefilter.IOFileFilter' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "{M@hcF(4w;r{", charset0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      MockFile mockFile0 = new MockFile("97x_BxrC^`", "97x_BxrC^`");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileUtils.forceMkdir((File) null);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      File file0 = MockFile.createTempFile("{M@hcF(4w;r{", "{M@hcF(4w;r{");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "{M@hcF(4w;r{", "{M@hcF(4w;r{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {M@hcF(4w;r{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(2147483647L, 289L);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, instant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }
}
