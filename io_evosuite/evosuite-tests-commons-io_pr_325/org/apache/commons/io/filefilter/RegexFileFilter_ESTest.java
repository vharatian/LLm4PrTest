/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:30:18 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RegexFileFilter_ESTest extends RegexFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", (-3476));
      Function<Path, String> function0 = (Function<Path, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0, function0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("XU\"ct0el5.]e(jr0N", 1529);
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("org.apache.commons.io.filefilter.RegexFileFilter", 40);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("", iOCase0);
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]", "RegexFileFilter [pattern=]");
      boolean boolean0 = regexFileFilter0.accept((File) mockFile0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("", iOCase0);
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]", "RegexFileFilter [pattern=]");
      boolean boolean0 = regexFileFilter0.accept((File) mockFile0, "RegexFileFilter [pattern=]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("org.apache.commons.io.filefilter.RegexFileFilter");
      // Undeclared exception!
      try { 
        regexFileFilter0.accept((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.RegexFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((Pattern) null, (Function<Path, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pattern
         //
         verifyException("org.apache.commons.io.filefilter.AbstractFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((Pattern) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pattern
         //
         verifyException("org.apache.commons.io.filefilter.AbstractFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter("h1WAJ)^>s!Ed3kh?", iOCase0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 4
         // h1WAJ)^>s!Ed3kh?
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter("org.apache.(ommons.io.filefilter.RegexFileFilter", 40);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 48
         // org.apache.(ommons.io.filefilter.RegexFileFilter
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null, (-1620));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pattern
         //
         verifyException("org.apache.commons.io.filefilter.AbstractFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter("RegexFileFilter [pattern=");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 24
         // RegexFileFilter [pattern=
         //                         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pattern
         //
         verifyException("org.apache.commons.io.filefilter.AbstractFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null, iOCase0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pattern
         //
         verifyException("org.apache.commons.io.filefilter.AbstractFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("", iOCase0);
      MockFile mockFile0 = new MockFile("RegexFileFilter [pattern=]", "RegexFileFilter [pattern=]");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = regexFileFilter0.accept(path0, basicFileAttributes0);
      //  // Unstable assertion: assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("", iOCase0);
      String string0 = regexFileFilter0.toString();
      assertEquals("RegexFileFilter [pattern=]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("' during file creation");
      MockFile mockFile0 = new MockFile("' during file creation");
      // Undeclared exception!
      try { 
        regexFileFilter0.accept((File) mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
