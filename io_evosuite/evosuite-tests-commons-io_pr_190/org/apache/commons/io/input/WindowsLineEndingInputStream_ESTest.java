/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:02:09 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.io.input.WindowsLineEndingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WindowsLineEndingInputStream_ESTest extends WindowsLineEndingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, true);
      int int0 = windowsLineEndingInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream((InputStream) null, true);
      // Undeclared exception!
      try { 
        windowsLineEndingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.WindowsLineEndingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-893), 1343);
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, false);
      // Undeclared exception!
      try { 
        windowsLineEndingInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -893
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(pipedInputStream0, true);
      try { 
        windowsLineEndingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream((InputStream) null, false);
      // Undeclared exception!
      try { 
        windowsLineEndingInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.WindowsLineEndingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2122061290));
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, true);
      int int0 = windowsLineEndingInputStream0.read();
      assertEquals(13, int0);
      
      int int1 = windowsLineEndingInputStream0.read();
      assertEquals(10, int1);
      
      int int2 = windowsLineEndingInputStream0.read();
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)84, (byte)84);
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, false);
      int int0 = windowsLineEndingInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2122061290));
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, true);
      int int0 = windowsLineEndingInputStream0.read();
      WindowsLineEndingInputStream windowsLineEndingInputStream1 = new WindowsLineEndingInputStream(windowsLineEndingInputStream0, true);
      int int1 = windowsLineEndingInputStream1.read();
      assertTrue(int1 == int0);
      assertEquals(13, int1);
      
      int int2 = windowsLineEndingInputStream1.read();
      assertEquals(10, int2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2122061290));
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, true);
      WindowsLineEndingInputStream windowsLineEndingInputStream1 = new WindowsLineEndingInputStream(windowsLineEndingInputStream0, true);
      int int0 = windowsLineEndingInputStream1.read();
      assertEquals(13, int0);
      
      int int1 = windowsLineEndingInputStream1.read();
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(byteArrayInputStream0, true);
      windowsLineEndingInputStream0.read();
      int int0 = windowsLineEndingInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(pipedInputStream0, false);
      // Undeclared exception!
      try { 
        windowsLineEndingInputStream0.mark(2315);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Mark not supported
         //
         verifyException("org.apache.commons.io.input.WindowsLineEndingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 10, (-306));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      WindowsLineEndingInputStream windowsLineEndingInputStream0 = new WindowsLineEndingInputStream(dataInputStream0, true);
      windowsLineEndingInputStream0.close();
  }
}
