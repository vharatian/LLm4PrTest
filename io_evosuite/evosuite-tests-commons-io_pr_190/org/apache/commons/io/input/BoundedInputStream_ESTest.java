/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:46:21 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.io.input.BoundedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BoundedInputStream_ESTest extends BoundedInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<BoundedInputStream> enumeration0 = (Enumeration<BoundedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(sequenceInputStream0, 6102L);
      long long0 = boundedInputStream0.skip(3347L);
      assertTrue(boundedInputStream0.isPropagateClose());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)95);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, (byte)0);
      boundedInputStream0.reset();
      long long0 = boundedInputStream0.skip((byte)95);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pipedInputStream0, 2243L);
      int int0 = boundedInputStream0.read(byteArray0);
      assertEquals(0, int0);
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0);
      int int0 = boundedInputStream0.read();
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)95);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, (byte)0);
      boundedInputStream0.reset();
      int int0 = boundedInputStream0.read();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(95, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<BoundedInputStream> enumeration0 = (Enumeration<BoundedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(sequenceInputStream0, 6102L);
      boundedInputStream0.markSupported();
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      assertTrue(boundedInputStream0.isPropagateClose());
      
      boundedInputStream0.setPropagateClose(false);
      boolean boolean0 = boundedInputStream0.isPropagateClose();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0);
      int int0 = boundedInputStream0.available();
      assertTrue(boundedInputStream0.isPropagateClose());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)101, (-352));
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, (byte)101);
      int int0 = boundedInputStream0.available();
      assertEquals((-352), int0);
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pushbackInputStream0, 0L);
      try { 
        boundedInputStream0.skip(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pipedInputStream0);
      try { 
        boundedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)95);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, (byte)0);
      boundedInputStream0.reset();
      // Undeclared exception!
      try { 
        boundedInputStream0.read(byteArray0, (int) (byte)95, 1586015820);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[6];
      try { 
        boundedInputStream0.read(byteArray0, (int) (byte)0, 3048);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1431);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pipedInputStream0, 1431);
      try { 
        boundedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-855019709), 2141948862);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 2141948862);
      // Undeclared exception!
      try { 
        boundedInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -855019709
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0);
      try { 
        boundedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.markSupported();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.mark(971);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pushbackInputStream0, 1369L);
      try { 
        boundedInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[6];
      int int0 = boundedInputStream0.read(byteArray0, 1871, (-1));
      assertEquals(0, int0);
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.read((byte[]) null, (-2146260706), (-2146260706));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      int int0 = boundedInputStream0.read(byteArray0, (-102), 0);
      assertTrue(boundedInputStream0.isPropagateClose());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      boundedInputStream0.close();
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      assertTrue(boundedInputStream0.isPropagateClose());
      
      boundedInputStream0.setPropagateClose(false);
      boundedInputStream0.close();
      assertFalse(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, 2L);
      // Undeclared exception!
      try { 
        boundedInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      int int0 = boundedInputStream0.available();
      assertEquals(0, int0);
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3449, 3);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 3449);
      long long0 = boundedInputStream0.skip(428L);
      assertTrue(boundedInputStream0.isPropagateClose());
      assertEquals((-3449L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.skip(3L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3449, 3);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 3449);
      int int0 = boundedInputStream0.read(byteArray0, 0, 0);
      assertTrue(boundedInputStream0.isPropagateClose());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3449, 3);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 3449);
      int int0 = boundedInputStream0.read();
      assertEquals((-1), int0);
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      int int0 = boundedInputStream0.read();
      assertTrue(boundedInputStream0.isPropagateClose());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        boundedInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      boundedInputStream0.mark((byte) (-90));
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      boolean boolean0 = boundedInputStream0.isPropagateClose();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0);
      int int0 = boundedInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      boundedInputStream0.toString();
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 0L);
      int int0 = boundedInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertTrue(boundedInputStream0.isPropagateClose());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3449, 3);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 3449);
      boundedInputStream0.markSupported();
      assertTrue(boundedInputStream0.isPropagateClose());
  }
}
