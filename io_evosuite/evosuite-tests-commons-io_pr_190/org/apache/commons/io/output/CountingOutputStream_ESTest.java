/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:07:43 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.io.output.CountingOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingOutputStream_ESTest extends CountingOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite(2147483646);
      countingOutputStream0.beforeWrite(1);
      assertEquals(2147483647L, countingOutputStream0.getByteCount());
      
      int int0 = countingOutputStream0.resetCount();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite(2147483646);
      countingOutputStream0.beforeWrite(1);
      int int0 = countingOutputStream0.getCount();
      assertEquals(2147483647L, countingOutputStream0.getByteCount());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" is too large to be converted to an int");
      CountingOutputStream countingOutputStream0 = new CountingOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      countingOutputStream0.write(byteArray0);
      assertEquals(6L, countingOutputStream0.getByteCount());
      
      int int0 = countingOutputStream0.resetCount();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite((-488));
      assertEquals((-488L), countingOutputStream0.getByteCount());
      
      int int0 = countingOutputStream0.resetCount();
      assertEquals((-488), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      java.io.ByteArrayOutputStream byteArrayOutputStream0 = new java.io.ByteArrayOutputStream();
      CountingOutputStream countingOutputStream0 = new CountingOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      countingOutputStream0.write(byteArray0);
      assertEquals(9L, countingOutputStream0.getByteCount());
      
      long long0 = countingOutputStream0.resetByteCount();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite((-488));
      assertEquals((-488L), countingOutputStream0.getByteCount());
      
      long long0 = countingOutputStream0.resetByteCount();
      assertEquals((-488L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite(2147483646);
      int int0 = countingOutputStream0.getCount();
      assertEquals(2147483646L, countingOutputStream0.getByteCount());
      assertEquals(2147483646, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CountingOutputStream countingOutputStream0 = new CountingOutputStream(pipedOutputStream0);
      countingOutputStream0.beforeWrite((-2147483645));
      int int0 = countingOutputStream0.getCount();
      assertEquals((-2147483645L), countingOutputStream0.getByteCount());
      assertEquals((-2147483645), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" is too large to be converted to an int");
      CountingOutputStream countingOutputStream0 = new CountingOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      countingOutputStream0.write(byteArray0);
      long long0 = countingOutputStream0.getByteCount();
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite((-488));
      long long0 = countingOutputStream0.getByteCount();
      assertEquals((-488L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      long long0 = countingOutputStream0.getByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.resetByteCount();
      assertEquals(0L, countingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite(2147483646);
      countingOutputStream0.beforeWrite(2147483646);
      // Undeclared exception!
      try { 
        countingOutputStream0.getCount();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The byte count 4294967292 is too large to be converted to an int
         //
         verifyException("org.apache.commons.io.output.CountingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      int int0 = countingOutputStream0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.resetCount();
      assertEquals(0L, countingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CountingOutputStream countingOutputStream0 = new CountingOutputStream((OutputStream) null);
      countingOutputStream0.beforeWrite(2147483646);
      countingOutputStream0.beforeWrite(2147483646);
      // Undeclared exception!
      try { 
        countingOutputStream0.resetCount();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The byte count 4294967292 is too large to be converted to an int
         //
         verifyException("org.apache.commons.io.output.CountingOutputStream", e);
      }
  }
}
