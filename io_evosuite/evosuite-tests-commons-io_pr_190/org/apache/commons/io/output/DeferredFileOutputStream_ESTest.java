/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:09:56 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DeferredFileOutputStream_ESTest extends DeferredFileOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2203, 2203, (File) null);
      ByteArrayOutputStream byteArrayOutputStream0 = (ByteArrayOutputStream)deferredFileOutputStream0.getStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(850, (File) null);
      File file0 = deferredFileOutputStream0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("P_#6K.6B.7}", "P_#6K.6B.7}");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(61, file0);
      deferredFileOutputStream0.write(61);
      deferredFileOutputStream0.thresholdReached();
      File file1 = deferredFileOutputStream0.getFile();
      assertEquals("/tmp/P_#6K.6B.7}0P_#6K.6B.7}", file1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(91, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile(" B^{0YRF14N", "@O");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1525, 42, file0);
      File file1 = deferredFileOutputStream0.getFile();
      assertTrue(file1.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("KN0h~A503}pr'", "KN0h~A503}pr'");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2, file0);
      deferredFileOutputStream0.write(0);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, (File) null);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(5832, 0, (File) null);
      deferredFileOutputStream0.close();
      DeferredFileOutputStream deferredFileOutputStream1 = new DeferredFileOutputStream((-917), "", "", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("cu4sCU5");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("cu4sCU5");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, mockFile0);
      deferredFileOutputStream0.setByteCount(747L);
      deferredFileOutputStream0.close();
      DeferredFileOutputStream deferredFileOutputStream1 = new DeferredFileOutputStream((-2420), (byte)92, "", "mDX,iBsaFa+_]rZ?", mockFile0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rhBqA_]O");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-980), mockFile0);
      deferredFileOutputStream0.close();
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(3033, (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "", "", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(672, " 7?HRUA&,e$,\u0003|6m.4", " 7?HRUA&,e$,\u0003|6m.4", (File) null);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, mockFile0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-2109), (-2109), (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2109
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2203, 2203, "", "", mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1782), mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".m");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3142), mockFile0);
      deferredFileOutputStream0.close();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".m");
      deferredFileOutputStream0.writeTo(mockFileOutputStream0);
      assertEquals(0L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, (File) null);
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not closed
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",MWJM?_$]*<VY|", "org.apache.commons.io.output.DeferredFileOutputStream");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3182), mockFile0);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("P_#6K.6B.7}", "P_#6K.6B.7}");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(61, file0);
      deferredFileOutputStream0.write(61);
      deferredFileOutputStream0.thresholdReached();
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(2559, 2559, (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-8), (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".m");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3142), mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertFalse(file0.exists());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("rf4`KxdS?%j|hX");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3303), mockFile0);
      deferredFileOutputStream0.close();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rf4`KxdS?%j|hX");
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }
}
