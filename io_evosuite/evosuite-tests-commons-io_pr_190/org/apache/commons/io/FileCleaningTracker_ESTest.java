/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:30:53 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import org.apache.commons.io.FileCleaningTracker;
import org.apache.commons.io.FileDeleteStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileCleaningTracker_ESTest extends FileCleaningTracker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      Object object0 = new Object();
      fileCleaningTracker0.getDeleteFailures();
      fileCleaningTracker0.getTrackCount();
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      String string0 = "*oLlV=6S ~Y*fOuon";
      MockFile.createTempFile("*oLlV=6S ~Y*fOuon", "");
      Object object0 = new Object();
      FileDeleteStrategy fileDeleteStrategy0 = null;
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((String) null, (Object) null, (FileDeleteStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      File file0 = null;
      Object object0 = new Object();
      fileCleaningTracker0.exitWhenFinished();
      MockThread mockThread0 = new MockThread();
      fileCleaningTracker0.reaper = (Thread) mockThread0;
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((File) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      int int0 = fileCleaningTracker0.getTrackCount();
      assertEquals(0, int0);
      
      URI uRI0 = MockURI.aFileURI;
      fileCleaningTracker0.getTrackCount();
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      mockFile0.setWritable(true);
      Object object0 = new Object();
      File file0 = mockFile0.getCanonicalFile();
      mockFile0.setExecutable(false, false);
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      fileCleaningTracker0.track(file0, (Object) mockFile0, fileDeleteStrategy0);
      fileCleaningTracker0.track((File) mockFile0, object0, fileDeleteStrategy0);
      Object object1 = new Object();
      fileCleaningTracker0.track("4", object1, fileDeleteStrategy0);
      fileCleaningTracker0.getDeleteFailures();
      fileCleaningTracker0.track("4", object1);
      fileCleaningTracker0.getTrackCount();
      fileCleaningTracker0.exitWhenFinished();
      fileCleaningTracker0.getDeleteFailures();
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track((File) mockFile0, (Object) uRI1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      MockFile mockFile0 = new MockFile("t$.k7FmPIE", "sU^'\u0001t zJ}R1");
      fileCleaningTracker0.track((File) mockFile0, (Object) "sU^'\u0001t zJ}R1");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile1 = new MockFile(uRI0);
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy0 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      fileCleaningTracker0.track((File) mockFile1, (Object) uRI0, (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy1 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      fileCleaningTracker0.track((File) mockFile1, (Object) mockFile1, (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy1);
      fileCleaningTracker0.exitWhenFinished();
      fileCleaningTracker0.getDeleteFailures();
      List<String> list0 = fileCleaningTracker0.getDeleteFailures();
      String string0 = "gu;6JA{}AHJ)Kj";
      File file0 = MockFile.createTempFile("gu;6JA{}AHJ)Kj", "sU^'\u0001t zJ}R1", (File) mockFile0);
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy2 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track(file0, (Object) list0, (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      fileCleaningTracker0.getDeleteFailures();
      fileCleaningTracker0.exitWhenFinished();
      String string0 = "";
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track("", (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      fileCleaningTracker0.exitWhenFinished();
      fileCleaningTracker0.getTrackCount();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      fileCleaningTracker0.reaper = (Thread) mockThread0;
      fileCleaningTracker0.track("ET34Zw", (Object) "ET34Zw");
      fileCleaningTracker0.getTrackCount();
      URI uRI0 = MockURI.URI("ET34Zw");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      fileCleaningTracker0.track("invalid type ", (Object) "invalid type ");
      fileCleaningTracker0.exitWhenFinished();
      String string0 = "";
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy((String) null);
      assertNotNull(fileDeleteStrategy0);
      
      File file0 = MockFile.createTempFile("invalid type ", "");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/invalid type 0", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("invalid type 0", file0.getName());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      
      FileDeleteStrategy.ForceFileDeleteStrategy fileDeleteStrategy_ForceFileDeleteStrategy0 = (FileDeleteStrategy.ForceFileDeleteStrategy)FileDeleteStrategy.FORCE;
      assertNotNull(fileDeleteStrategy_ForceFileDeleteStrategy0);
      
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track("xM", (Object) "", (FileDeleteStrategy) fileDeleteStrategy_ForceFileDeleteStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("");
      assertNotNull(fileDeleteStrategy0);
      
      fileCleaningTracker0.track((File) mockFile0, (Object) "", fileDeleteStrategy0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      boolean boolean1 = mockFile0.delete();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      int int0 = fileCleaningTracker0.getTrackCount();
      assertEquals(0, int0);
      
      List<String> list0 = fileCleaningTracker0.getDeleteFailures();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("2F!`9Qcs[)fc");
      assertNotNull(fileDeleteStrategy0);
      
      fileCleaningTracker0.track("bo-/]UmX2Pl3G8{*P", (Object) "bo-/]UmX2Pl3G8{*P", fileDeleteStrategy0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      fileCleaningTracker0.track("org.junitpioneer.vintage.TimeoutExtension", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      assertNotNull(fileCleaningTracker0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = mockFile1.setReadOnly();
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean0);
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(" io_experiments", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean1 = mockFile1.createNewFile();
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(" io_experiments", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean2 = mockFile1.setExecutable(false, false);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(" io_experiments", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      assertNotNull(fileDeleteStrategy0);
      
      String string0 = fileDeleteStrategy0.toString();
      assertNotNull(string0);
      assertEquals("FileDeleteStrategy[Normal]", string0);
      
      fileCleaningTracker0.track((File) mockFile1, (Object) "", fileDeleteStrategy0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(" io_experiments", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      fileCleaningTracker0.track((File) mockFile1, (Object) "");
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(" io_experiments", mockFile1.getName());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      List<String> list0 = fileCleaningTracker0.getDeleteFailures();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(""));
      
      FileDeleteStrategy fileDeleteStrategy1 = new FileDeleteStrategy("AG;eD=x9C@c#)LE");
      assertNotNull(fileDeleteStrategy1);
      assertFalse(fileDeleteStrategy1.equals((Object)fileDeleteStrategy0));
      
      fileCleaningTracker0.track((File) mockFile0, (Object) "", fileDeleteStrategy1);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(fileDeleteStrategy1.equals((Object)fileDeleteStrategy0));
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(fileDeleteStrategy1, fileDeleteStrategy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      fileCleaningTracker0.track("", object0, fileDeleteStrategy1);
      assertFalse(fileDeleteStrategy1.equals((Object)fileDeleteStrategy0));
      assertNotSame(fileDeleteStrategy1, fileDeleteStrategy0);
      
      fileCleaningTracker0.exitWhenFinished();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      FileDeleteStrategy fileDeleteStrategy0 = new FileDeleteStrategy("f|^ZD");
      fileCleaningTracker0.track("", (Object) "", fileDeleteStrategy0);
      int int0 = fileCleaningTracker0.getTrackCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      fileCleaningTracker0.track("org.apache.commons.io.FileCleaningTracker$Reaper", (Object) "org.apache.commons.io.FileCleaningTracker$Reaper");
      fileCleaningTracker0.exitWhenFinished();
      fileCleaningTracker0.exitWhenFinished = true;
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track("eC@]k1yh+b%R", (Object) "eC@]k1yh+b%R");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      fileCleaningTracker0.exitWhenFinished();
      fileCleaningTracker0.getDeleteFailures();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fileCleaningTracker0.track("W.HMh)HOl(9tIuZ*", object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      MockFile mockFile0 = new MockFile("", "");
      fileCleaningTracker0.track((File) mockFile0, (Object) "");
      assertTrue(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileCleaningTracker fileCleaningTracker0 = new FileCleaningTracker();
      try { 
        MockURI.URI("*U!=n`pu-D,[WS%Go", "i:41i<dcs", "", "s[dnSxG^>B:$r(I5Wd");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: *U!=n`pu-D,[WS%Go://[i:41i<dcs]#s[dnSxG%5E%3EB:$r(I5Wd
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
}
