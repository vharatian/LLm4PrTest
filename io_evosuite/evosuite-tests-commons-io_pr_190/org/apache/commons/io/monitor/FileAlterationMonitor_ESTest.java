/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:07:35 GMT 2025
 */

package org.apache.commons.io.monitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.LinkedList;
import java.util.concurrent.ThreadFactory;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.file.CleaningPathVisitor;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.monitor.FileAlterationListener;
import org.apache.commons.io.monitor.FileAlterationListenerAdaptor;
import org.apache.commons.io.monitor.FileAlterationMonitor;
import org.apache.commons.io.monitor.FileAlterationObserver;
import org.apache.commons.io.monitor.FileEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileAlterationMonitor_ESTest extends FileAlterationMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1638L), fileAlterationObserverArray0);
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      fileAlterationMonitor0.start();
      // Undeclared exception!
      try { 
        fileAlterationMonitor0.run();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      fileAlterationMonitor0.start();
      // Undeclared exception!
      fileAlterationMonitor0.run();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[3];
      MockFile mockFile0 = new MockFile("f}*_<hu");
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withLongCounters();
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(countingPathVisitor0);
      IOCase iOCase0 = IOCase.SYSTEM;
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(mockFile0, pathVisitorFileFilter0, iOCase0);
      fileAlterationObserverArray0[1] = fileAlterationObserver0;
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      fileAlterationObserver0.removeListener(fileAlterationListenerAdaptor0);
      fileAlterationObserverArray0[2] = fileAlterationObserver0;
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      fileAlterationMonitor0.start();
      // Undeclared exception!
      fileAlterationMonitor0.run();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-49L);
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-49L), fileAlterationObserverArray0);
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.stop((-49L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 0L;
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      fileAlterationMonitor0.start();
      FileAlterationObserver fileAlterationObserver0 = null;
      MockFile mockFile0 = new MockFile("_?qc#ZiNZkayst*:{G", "");
      FileEntry fileEntry0 = new FileEntry(mockFile0);
      FileEntry fileEntry1 = new FileEntry(fileEntry0, mockFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "qj<6Ue^y'fihGs!";
      stringArray0[1] = "_?qc#ZiNZkayst*:{G";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "_?qc#ZiNZkayst*:{G";
      stringArray0[5] = "";
      stringArray0[6] = "";
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      FileAlterationObserver fileAlterationObserver1 = new FileAlterationObserver(fileEntry1, prefixFileFilter0, iOCase0);
      fileAlterationMonitor0.addObserver(fileAlterationObserver1);
      long long1 = 10000L;
      fileAlterationMonitor0.stop(0L);
      FileAlterationMonitor fileAlterationMonitor1 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      try { 
        fileAlterationMonitor1.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
      
      FileAlterationMonitor fileAlterationMonitor1 = new FileAlterationMonitor((-2789L));
      fileAlterationMonitor0.getInterval();
      fileAlterationMonitor1.run();
      fileAlterationMonitor1.getInterval();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, (FileAlterationObserver[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      fileAlterationMonitor0.removeObserver((FileAlterationObserver) null);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.run();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.getInterval();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-2174L));
      File file0 = MockFile.createTempFile("Ww<6+U.5lcysU\"aT 0Z", "|E^yfMRiQ6A\"0F*ZG");
      MockFile mockFile0 = new MockFile(file0, "|E^yfMRiQ6A\"0F*ZG");
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("Ww<6+U.5lcysU\"aT 0Z", iOCase0);
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(mockFile0, suffixFileFilter0, iOCase0);
      MockFile mockFile1 = new MockFile("", "|E^yfMRiQ6A\"0F*ZG");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile1, false);
      suffixFileFilter0.and(ageFileFilter0);
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      fileAlterationObserver0.removeListener(fileAlterationListenerAdaptor0);
      fileAlterationMonitor0.addObserver(fileAlterationObserver0);
      fileAlterationMonitor0.run();
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is already running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[3];
      File file0 = MockFile.createTempFile("f}*_<hu", "f}*_<hu");
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withLongCounters();
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(countingPathVisitor0);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(file0, pathVisitorFileFilter0, iOCase0);
      fileAlterationObserverArray0[1] = fileAlterationObserver0;
      IOCase iOCase1 = IOCase.SYSTEM;
      FileAlterationObserver fileAlterationObserver1 = new FileAlterationObserver(file0, pathVisitorFileFilter0, iOCase1);
      fileAlterationObserverArray0[2] = fileAlterationObserver1;
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.getObservers();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.start();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("");
      fileAlterationObserver0.toString();
      fileAlterationMonitor0.addObserver(fileAlterationObserver0);
      fileAlterationMonitor0.addObserver(fileAlterationObserver0);
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      fileAlterationObserver0.removeListener(fileAlterationListenerAdaptor0);
      fileAlterationObserver0.addListener((FileAlterationListener) null);
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is already running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(1L);
      MockFile mockFile0 = new MockFile("");
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      IOCase iOCase0 = IOCase.SENSITIVE;
      mockFile0.mkdir();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(mockFile0, emptyFileFilter0, iOCase0);
      fileAlterationMonitor0.addObserver(fileAlterationObserver0);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.run();
      fileAlterationObserver0.initialize();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      fileAlterationMonitor0.getInterval();
      fileAlterationMonitor0.run();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[1];
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(2537L, fileAlterationObserverArray0);
      fileAlterationMonitor0.addObserver(fileAlterationObserverArray0[0]);
      fileAlterationMonitor0.getObservers();
      try { 
        fileAlterationMonitor0.stop(1976L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L);
      fileAlterationMonitor0.run();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      fileAlterationMonitor0.setThreadFactory(threadFactory0);
      fileAlterationMonitor0.getInterval();
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 1L;
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(1L);
      fileAlterationMonitor0.start();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("I", (FileFilter) null);
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      fileAlterationMonitor0.stop();
      try { 
        fileAlterationMonitor0.stop((-1L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(1L);
      MockFile mockFile0 = new MockFile("");
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      IOCase iOCase0 = IOCase.SENSITIVE;
      mockFile0.setWritable(false);
      mockFile0.mkdir();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(mockFile0, emptyFileFilter0, iOCase0);
      fileAlterationMonitor0.addObserver(fileAlterationObserver0);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.run();
      fileAlterationObserver0.initialize();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      fileAlterationMonitor0.getInterval();
      fileAlterationMonitor0.getObservers();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-909L));
      fileAlterationMonitor0.setThreadFactory((ThreadFactory) null);
      MockFile mockFile0 = new MockFile("*/$-}Z");
      fileAlterationMonitor0.run();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(mockFile0);
      fileAlterationObserver0.initialize();
      File file0 = MockFile.createTempFile("ZB$]2w0vUrRX_`", "*/$-}Z", (File) mockFile0);
      mockFile0.renameTo(file0);
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      fileAlterationObserver0.addListener(fileAlterationListenerAdaptor0);
      fileAlterationObserver0.initialize();
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.getObservers();
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is already running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      MockFile mockFile0 = new MockFile("4ASZu`jO?", "4ASZu`jO?");
      FileEntry fileEntry0 = new FileEntry(mockFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4ASZu`jO?";
      stringArray0[1] = "4ASZu`jO?";
      stringArray0[2] = "4ASZu`jO?";
      File file0 = MockFile.createTempFile("4ASZu`jO?", "Monitor is already running", (File) mockFile0);
      mockFile0.renameTo(file0);
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("4ASZu`jO?");
      fileAlterationObserver0.addListener(fileAlterationListenerAdaptor0);
      fileAlterationObserver0.initialize();
      FileAlterationObserver fileAlterationObserver1 = null;
      fileAlterationMonitor0.removeObserver((FileAlterationObserver) null);
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor1 = new FileAlterationMonitor(48L, fileAlterationObserverArray0);
      fileAlterationMonitor1.getObservers();
      fileAlterationMonitor1.start();
      fileAlterationMonitor0.getObservers();
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("org.apache.commons.io.filefilter.PathVisitorFileFilter");
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      fileAlterationMonitor0.start();
      Iterable<FileAlterationObserver> iterable0 = new LinkedList<FileAlterationObserver>();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.run();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("");
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      FileAlterationObserver fileAlterationObserver1 = new FileAlterationObserver("");
      fileAlterationMonitor0.removeObserver(fileAlterationObserver1);
      fileAlterationObserver1.checkAndNotify();
      fileAlterationObserver1.initialize();
      fileAlterationMonitor0.setThreadFactory(threadFactory0);
      fileAlterationObserver1.initialize();
      fileAlterationMonitor0.run();
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory1).newThread(any(java.lang.Runnable.class));
      fileAlterationMonitor0.setThreadFactory(threadFactory1);
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.run();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
      
      fileAlterationMonitor0.run();
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-103L);
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-103L));
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is already running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.start();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      try { 
        fileAlterationMonitor0.stop(1007L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[3];
      File file0 = MockFile.createTempFile("f}*_<hu", "f}*_<hu");
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withLongCounters();
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter(countingPathVisitor0);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(file0, pathVisitorFileFilter0, iOCase0);
      fileAlterationObserverArray0[1] = fileAlterationObserver0;
      IOCase iOCase1 = IOCase.SYSTEM;
      FileAlterationObserver fileAlterationObserver1 = new FileAlterationObserver(file0, pathVisitorFileFilter0, iOCase1);
      fileAlterationObserverArray0[2] = fileAlterationObserver1;
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      fileAlterationMonitor0.start();
      // Undeclared exception!
      fileAlterationMonitor0.run();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop(239L);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      long long0 = fileAlterationMonitor0.getInterval();
      assertEquals(10000L, long0);
      
      fileAlterationMonitor0.run();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-922L));
      fileAlterationMonitor0.setThreadFactory((ThreadFactory) null);
      MockFile mockFile0 = new MockFile("*/$-}Z");
      fileAlterationMonitor0.run();
      File file0 = MockFile.createTempFile("ZB$]2w0vUrRX_`", "*/$-}Z", (File) mockFile0);
      mockFile0.renameTo(file0);
      FileAlterationListenerAdaptor fileAlterationListenerAdaptor0 = new FileAlterationListenerAdaptor();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.getObservers();
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.getObservers();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      fileAlterationMonitor0.run();
      fileAlterationMonitor0.setThreadFactory(threadFactory0);
      fileAlterationMonitor0.getInterval();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.getObservers();
      fileAlterationMonitor0.run();
      try { 
        fileAlterationMonitor0.stop(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(1864L);
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      IOCase iOCase1 = IOCase.INSENSITIVE;
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        prefixFileFilter0.preVisitDirectory((Path) null, basicFileAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.PrefixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "\"$<= jh[";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"$<= jh[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, (FileAlterationObserver[]) null);
      try { 
        fileAlterationMonitor0.stop(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[1];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      fileAlterationMonitor0.run();
      assertEquals(0L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[0];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      fileAlterationMonitor0.run();
      assertEquals(0L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[1];
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("H{2@4*4&$");
      fileAlterationObserverArray0[0] = fileAlterationObserver0;
      FileAlterationMonitor fileAlterationMonitor1 = new FileAlterationMonitor((-1963L), fileAlterationObserverArray0);
      fileAlterationMonitor1.run();
      assertEquals((-1963L), fileAlterationMonitor1.getInterval());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[8];
      MockFile mockFile0 = new MockFile("Paths have different roots: %s, %s");
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(mockFile0);
      fileAlterationObserverArray0[0] = fileAlterationObserver0;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("Paths have different roots: %s, %s");
      FileAlterationObserver fileAlterationObserver1 = new FileAlterationObserver("Paths have different roots: %s, %s", prefixFileFilter0);
      fileAlterationObserverArray0[1] = fileAlterationObserver1;
      MockFile mockFile1 = new MockFile("", "");
      IOCase iOCase0 = IOCase.SENSITIVE;
      FileAlterationObserver fileAlterationObserver2 = new FileAlterationObserver(mockFile1, prefixFileFilter0, iOCase0);
      fileAlterationObserverArray0[2] = fileAlterationObserver2;
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      IOCase iOCase1 = IOCase.SYSTEM;
      FileAlterationObserver fileAlterationObserver3 = new FileAlterationObserver("Paths have different roots: %s, %s", notFileFilter0, iOCase1);
      fileAlterationObserverArray0[3] = fileAlterationObserver3;
      FileAlterationObserver fileAlterationObserver4 = new FileAlterationObserver("Paths have different roots: %s, %s", prefixFileFilter0, iOCase0);
      fileAlterationObserverArray0[4] = fileAlterationObserver4;
      FileAlterationObserver fileAlterationObserver5 = new FileAlterationObserver(mockFile1);
      fileAlterationObserverArray0[5] = fileAlterationObserver5;
      IOCase iOCase2 = IOCase.SENSITIVE;
      FileAlterationObserver fileAlterationObserver6 = new FileAlterationObserver(mockFile1, notFileFilter0, iOCase2);
      fileAlterationObserverArray0[6] = fileAlterationObserver6;
      FileAlterationObserver fileAlterationObserver7 = new FileAlterationObserver("");
      fileAlterationObserverArray0[7] = fileAlterationObserver7;
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(1198L, fileAlterationObserverArray0);
      assertEquals(1198L, fileAlterationMonitor0.getInterval());
  }
}
