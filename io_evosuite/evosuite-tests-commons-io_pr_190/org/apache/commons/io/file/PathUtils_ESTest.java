/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:44:08 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URL;
import java.nio.file.AccessDeniedException;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, 1755991826744L, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[9];
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(nameFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      MockFile mockFile0 = new MockFile("", "file");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("file", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/file", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(nameFileFilter0, pathArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(4, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertNotNull(pathArray1);
      assertFalse(pathArray1.equals((Object)pathArray0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Path path1 = PathUtils.current();
      assertNotSame(path1, path0);
      assertNotNull(path1);
      assertTrue(path1.equals((Object)path0));
      
      try { 
        PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertNotSame(path1, path0);
          assertNotNull(path1);
          assertTrue(path1.equals((Object)path0));
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path1, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:262)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotSame(path1, path0);
      assertNotNull(path1);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertNotNull(pathEqualsFileFilter0);
      
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      assertNotNull(fileFileFilter0);
      
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.and(fileFileFilter0);
      assertNotNull(iOFileFilter0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOptionArray0[0];
      fileVisitOptionArray0[3] = fileVisitOption0;
      fileVisitOptionArray0[4] = fileVisitOptionArray0[1];
      Stream<Path> stream0 = PathUtils.walk(path0, iOFileFilter0, 3666, false, fileVisitOptionArray0);
      assertEquals(5, fileVisitOptionArray0.length);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      NameFileFilter nameFileFilter0 = new NameFileFilter("C.N");
      assertNotNull(nameFileFilter0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      CopyDirectoryVisitor copyDirectoryVisitor0 = new CopyDirectoryVisitor(counters_PathCounters0, nameFileFilter0, nameFileFilter0, path0, path0, copyOptionArray0);
      assertEquals(0, copyOptionArray0.length);
      assertNotNull(copyDirectoryVisitor0);
      
      CopyDirectoryVisitor copyDirectoryVisitor1 = PathUtils.visitFileTree(copyDirectoryVisitor0, path0);
      assertEquals(0, copyOptionArray0.length);
      assertSame(copyDirectoryVisitor0, copyDirectoryVisitor1);
      assertSame(copyDirectoryVisitor1, copyDirectoryVisitor0);
      assertNotNull(copyDirectoryVisitor1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SIBLINGS;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      assertNotNull(simpleFileVisitor1);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.TERMINATE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFileFailed(any() , any(java.io.IOException.class));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p_``,92";
      stringArray0[1] = "p_``,92";
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, "p_``,92", stringArray0);
      assertEquals(2, stringArray0.length);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      assertNotNull(simpleFileVisitor1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(0, fileVisitOptionArray0.length);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(4, fileVisitOptionArray0.length);
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(path0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(path0);
      assertTrue(linkedHashSet0.contains(path0));
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, false, (Comparator<? super Path>) null);
      assertNotNull(list0);
      assertTrue(linkedHashSet0.contains(path0));
      assertTrue(list0.contains(path0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOptionArray0[0];
      linkOptionArray0[3] = linkOptionArray0[1];
      linkOptionArray0[4] = linkOptionArray0[2];
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0, 202, linkOptionArray0, (FileVisitOption[]) null);
      assertEquals(5, linkOptionArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("v=Jp%67=Z:c'6 5z9");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("v=Jp%67=Z:c'6 5z9", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("v=Jp%67=Z:c'6 5z9", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      
      Pattern pattern0 = Pattern.compile("v=Jp%67=Z:c'6 5z9");
      assertNotNull(pattern0);
      assertEquals("v=Jp%67=Z:c'6 5z9", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("v=Jp%67=Z:c'6 5z9", pattern0.pattern());
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      assertNotNull(regexFileFilter0);
      assertEquals("v=Jp%67=Z:c'6 5z9", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("v=Jp%67=Z:c'6 5z9", pattern0.pattern());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOptionArray0[0];
      fileVisitOptionArray0[3] = fileVisitOptionArray0[0];
      fileVisitOptionArray0[4] = fileVisitOptionArray0[1];
      fileVisitOptionArray0[5] = fileVisitOptionArray0[1];
      try { 
        PathUtils.walk(path0, regexFileFilter0, 458, false, fileVisitOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      assertNotNull(andFileFilter0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOptionArray0[0];
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, andFileFilter0, (-100), false, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, (Set<FileVisitOption>) linkedHashSet0, (-1372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      CopyDirectoryVisitor copyDirectoryVisitor0 = new CopyDirectoryVisitor(counters_PathCounters0, path0, path0, copyOptionArray0);
      assertEquals(0, copyOptionArray0.length);
      assertNotNull(copyDirectoryVisitor0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(copyDirectoryVisitor0, uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JU+|x1!![c!3GO`");
      assertNotNull(mockFile0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile0);
      assertNotNull(ageFileFilter0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("JU+|x1!![c!3GO`", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("JU+|x1!![c!3GO`", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters((PathFilter) ageFileFilter0, (PathFilter) ageFileFilter0);
      assertNotNull(accumulatorPathVisitor0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("JU+|x1!![c!3GO`", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("JU+|x1!![c!3GO`", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JU+|x1!![c!3GO`";
      stringArray0[1] = "JU+|x1!![c!3GO`";
      stringArray0[2] = "0~d0aNLPFy38G^7sR";
      stringArray0[3] = "#}pP4FsFE W^@L";
      stringArray0[4] = "";
      stringArray0[5] = "#}pP4FsFE W^@L";
      stringArray0[6] = "The suffix must not be null";
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, "#}pP4FsFE W^@L", stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly((Path) null, true, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>(linkedList0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Comparator<Path> comparator0 = (Comparator<Path>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize(linkedHashSet0, (Path) null, false, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesQuietly((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("a", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("a", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesQuietly(path0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.nio.file.NoSuchFileException: a
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h4z", "h4z");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("h4z", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/h4z/h4z", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/h4z", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      try { 
        PathUtils.readBasicFileAttributes(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      assertNotNull(notFileFilter0);
      
      MockFile mockFile0 = new MockFile("4yeUIMx5;v7mBD", "4yeUIMx5;v7mBD");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/4yeUIMx5;v7mBD", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/4yeUIMx5;v7mBD/4yeUIMx5;v7mBD", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("4yeUIMx5;v7mBD", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      
      try { 
        PathUtils.newDirectoryStream(path0, notFileFilter0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("posix");
      assertNotNull(wildcardFileFilter0);
      
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream((Path) null, wildcardFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.common.jimfs.AbstractAttributeView", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/com.google.common.jimfs.AbstractAttributeView", mockFile0.toString());
      assertEquals("com.google.common.jimfs.AbstractAttributeView", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")|YoM3=Oii");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(")|YoM3=Oii", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(")|YoM3=Oii", mockFile0.toString());
      
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Path[] pathArray0 = new Path[4];
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      assertNotNull(notFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      // Undeclared exception!
      try { 
        PathUtils.filter(notFileFilter0, pathArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotSame(path1, path0);
      assertNotNull(path1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(path1.equals((Object)path0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[0];
      linkOptionArray0[4] = linkOptionArray0[2];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOptionArray0[1];
      fileVisitOptionArray0[3] = fileVisitOption0;
      fileVisitOptionArray0[4] = fileVisitOptionArray0[1];
      fileVisitOptionArray0[5] = fileVisitOption0;
      // Undeclared exception!
      PathUtils.directoryContentEquals(path1, path0, 1803, linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      try { 
        PathUtils.directoryContentEquals(path0, path0, 2, linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 3636, linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-1259), linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotSame(path1, path0);
      assertNotNull(path1);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      PathUtils.directoryContentEquals(path1, path0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[10];
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Wzx=WsBu");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("Wzx=WsBu", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Wzx=WsBu", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      // Undeclared exception!
      try { 
        PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.SuffixFileFilter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("org.apache.commons.io.filefilter.SuffixFileFilter", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.io.filefilter.SuffixFileFilter", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "backupArguments");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.ATOMIC_MOVE;
      assertNotSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption1);
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      
      copyOptionArray0[2] = (CopyOption) standardCopyOption1;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ATOMIC_MOVE not supported
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((URL) null, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, ".w`.PDT6VVM?");
      assertTrue(boolean0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[6];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, (Path) null, copyOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ATOMIC_MOVE not supported
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, ".w`.PD6VVM?");
      assertTrue(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        PathUtils.copyFile(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ":");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals("/:", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(":", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        PathUtils.copyDirectory(path0, path0, copyOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("filter", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      try { 
        PathUtils.cleanDirectory(path0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.common.jimfs.AbstractAttributeView", "com.google.common.jimfs.AbstractAttributeView");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/com.google.common.jimfs.AbstractAttributeView", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("com.google.common.jimfs.AbstractAttributeView", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/com.google.common.jimfs.AbstractAttributeView/com.google.common.jimfs.AbstractAttributeView", mockFile0.toString());
      
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      linkOptionArray0[0] = linkOption0;
      MockFile mockFile0 = new MockFile("jI2", "jI2");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotSame(path1, path0);
      assertNotNull(path1);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/jI2", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("jI2", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/jI2/jI2", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) null);
      assertEquals(1, linkOptionArray0.length);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(boolean0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/jI2", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("jI2", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/jI2/jI2", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      LinkOption[] linkOptionArray1 = new LinkOption[3];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray1, (OpenOption[]) linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(3, linkOptionArray1.length);
      assertNotSame(linkOptionArray0, linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(boolean0);
      assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      linkOptionArray0[2] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      fileVisitOptionArray0[3] = fileVisitOptionArray0[0];
      fileVisitOptionArray0[4] = fileVisitOptionArray0[0];
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[6] = fileVisitOptionArray0[3];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("H'6  -Wz\"QW", "[0_wG!S8o");
          Path path0 = mockFile0.toPath();
          LinkOption[] linkOptionArray0 = new LinkOption[8];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOptionArray0[1];
          linkOptionArray0[3] = linkOptionArray0[2];
          linkOptionArray0[4] = linkOptionArray0[2];
          linkOptionArray0[5] = linkOptionArray0[2];
          linkOptionArray0[6] = linkOptionArray0[2];
          linkOptionArray0[7] = linkOptionArray0[0];
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/H'6  -Wz\"QW/[0_wG!S8o\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:490)
             // sun.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("*", "*");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/*_/*\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:490)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:465)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:369)
             // sun.reflect.GeneratedMethodAccessor165.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:936)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:420)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:368)
             // sun.reflect.GeneratedMethodAccessor165.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withLongCounters();
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) countingPathVisitor0, (Path) null, (Set<FileVisitOption>) null, 3654);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Path path0 = PathUtils.current();
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Path path0 = PathUtils.current();
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:879)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      Comparator<Path> comparator0 = (Comparator<Path>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isNewer(path0, 3012L, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, 1755991826717L, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      MockFile mockFile0 = new MockFile("CartesianProductTest can only take exactly one type of arguments source", "vmE!1F0!");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.isNewer(path0, 1L, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (-4817L), linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Path path0 = PathUtils.current();
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Path path0 = PathUtils.current();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(directoryFileFilter0, pathArray0);
      assertEquals(1, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = new AndFileFilter();
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(andFileFilter0, pathArray0);
      assertEquals(0, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      Path[] pathArray0 = PathUtils.filter(notFileFilter0, (Path[]) null);
      assertEquals(0, pathArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      Path[] pathArray0 = new Path[3];
      Path[] pathArray1 = PathUtils.filter(notFileFilter0, pathArray0);
      assertEquals(0, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Path path0 = PathUtils.current();
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zk\"U4C\u0003Vn");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Path path0 = PathUtils.current();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.io.IOCase");
      Path path1 = mockFile0.toPath();
      boolean boolean0 = PathUtils.fileContentEquals(path1, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      MockFile mockFile0 = new MockFile("ZED");
      Path path1 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zk\"U4C\u0003Vn");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[18];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, (LinkOption[]) null, (OpenOption[]) null, fileVisitOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Path path0 = PathUtils.current();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, path0, (LinkOption[]) null, openOptionArray0, (FileVisitOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Path path0 = PathUtils.current();
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("iV`:dzH");
          Path path0 = mockFile0.toPath();
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"iV`:dzH\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:490)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:395)
             // sun.reflect.GeneratedMethodAccessor159.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:936)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:420)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:368)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:345)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "K}");
      Path path0 = mockFile0.toPath();
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("H'6  -zQW", "H'6  -zQW");
          Path path0 = mockFile0.toPath();
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/H'6  -zQW\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:314)
             // sun.reflect.GeneratedMethodAccessor179.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Cannot cache the value of an abstract method: ");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Cannot cache the value of an abstract method: ");
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Path path0 = PathUtils.current();
      MockFile mockFile0 = new MockFile("K8k>{", "K8k>{");
      Path path1 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[1];
      linkOptionArray0[4] = linkOptionArray0[2];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      boolean boolean0 = PathUtils.directoryContentEquals(path1, path0, 1803, linkOptionArray0, fileVisitOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Path path0 = PathUtils.current();
      MockFile mockFile0 = new MockFile("Issue");
      Path path1 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("j0>fQ9WR1JpA_", "j0>fQ9WR1JpA_");
      Path path0 = mockFile0.toPath();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Path path0 = PathUtils.current();
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesQuietly(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:936)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:437)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:394)
             // sun.reflect.GeneratedMethodAccessor159.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Path path0 = PathUtils.current();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, trueFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.walk((Path) null, (PathFilter) null, (-932915833), true, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.URI("org.apache.commons.io.file.PathUtils$RelativeSortedPaths");
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      // Undeclared exception!
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
