/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:39:33 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.nio.file.FileSystemException;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.DeletingPathVisitor;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DeletingPathVisitor_ESTest extends DeletingPathVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("KPYvgc\"4y}p)O");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      FileVisitResult fileVisitResult0 = deletingPathVisitor0.visitFile(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withLongCounters();
      // Undeclared exception!
      try { 
        deletingPathVisitor0.preVisitDirectory((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.DeletingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withLongCounters();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      try { 
        deletingPathVisitor0.postVisitDirectory(path0, (IOException) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      File file0 = MockFile.createTempFile("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      Path path0 = file0.toPath();
      MockThrowable mockThrowable0 = new MockThrowable("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      try { 
        deletingPathVisitor0.postVisitDirectory(path0, (IOException) mockIOException0);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withLongCounters();
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        deletingPathVisitor0.postVisitDirectory((Path) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      String[] stringArray0 = new String[0];
      DeletingPathVisitor deletingPathVisitor0 = null;
      try {
        deletingPathVisitor0 = new DeletingPathVisitor((Counters.PathCounters) null, deleteOptionArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathCounter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DeletingPathVisitor deletingPathVisitor0 = null;
      try {
        deletingPathVisitor0 = new DeletingPathVisitor((Counters.PathCounters) null, (LinkOption[]) null, (DeleteOption[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathCounter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DeletingPathVisitor deletingPathVisitor0 = null;
      try {
        deletingPathVisitor0 = new DeletingPathVisitor((Counters.PathCounters) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathCounter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          Path path0 = mockFile0.toPath();
          Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          String[] stringArray0 = new String[0];
          DeletingPathVisitor deletingPathVisitor0 = new DeletingPathVisitor(counters_PathCounters0, deleteOptionArray0, stringArray0);
          BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            deletingPathVisitor0.visitFile(path0, basicFileAttributes0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:879)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // sun.reflect.GeneratedMethodAccessor132.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          Path path0 = mockFile0.toPath();
          Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          String[] stringArray0 = new String[0];
          DeletingPathVisitor deletingPathVisitor0 = new DeletingPathVisitor(counters_PathCounters0, deleteOptionArray0, stringArray0);
          BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            deletingPathVisitor0.visitFile(path0, basicFileAttributes0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:161)
             // sun.reflect.GeneratedMethodAccessor132.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile(".*{[0-9]+}.*", ".*{[0-9]+}.*");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        deletingPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CountingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3{)n.|@7e=fw");
      Path path0 = mockFile0.toPath();
      Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Jcg6]";
      stringArray0[1] = "Jcg6]";
      stringArray0[2] = "";
      stringArray0[3] = "3{)n.|@7e=fw";
      stringArray0[4] = "";
      stringArray0[5] = "3{)n.|@7e=fw";
      stringArray0[6] = "Jcg6]";
      stringArray0[7] = "";
      DeletingPathVisitor deletingPathVisitor0 = new DeletingPathVisitor(counters_PathCounters0, stringArray0);
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = deletingPathVisitor0.preVisitDirectory(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.SKIP_SUBTREE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      DeletingPathVisitor deletingPathVisitor1 = DeletingPathVisitor.withLongCounters();
      boolean boolean0 = deletingPathVisitor1.equals(deletingPathVisitor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withLongCounters();
      boolean boolean0 = deletingPathVisitor0.equals(countingPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      boolean boolean0 = deletingPathVisitor0.equals(deletingPathVisitor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      Object object0 = new Object();
      boolean boolean0 = deletingPathVisitor0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      File file0 = MockFile.createTempFile("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      Path path0 = file0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = deletingPathVisitor0.preVisitDirectory(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]#");
      Path path0 = mockFile0.toPath();
      Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
      doReturn((Counters.Counter) null).when(counters_PathCounters0).getFileCounter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]#";
      DeletingPathVisitor deletingPathVisitor0 = new DeletingPathVisitor(counters_PathCounters0, stringArray0);
      // Undeclared exception!
      try { 
        deletingPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CountingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      DeletingPathVisitor deletingPathVisitor0 = new DeletingPathVisitor(counters_PathCounters0, (LinkOption[]) null, (DeleteOption[]) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = mock(Counters.PathCounters.class, new ViolatedAssumptionAnswer());
      DeletingPathVisitor deletingPathVisitor0 = new DeletingPathVisitor(counters_PathCounters0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withBigIntegerCounters();
      deletingPathVisitor0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      MockIOException mockIOException0 = new MockIOException("");
      FileVisitResult fileVisitResult0 = deletingPathVisitor0.postVisitDirectory(path0, (IOException) mockIOException0);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }
}
