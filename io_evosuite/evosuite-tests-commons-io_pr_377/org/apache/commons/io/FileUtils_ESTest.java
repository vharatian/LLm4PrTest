/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:46:50 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.FileSystemException;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.NotDirectoryException;
import java.nio.file.attribute.FileTime;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File[] fileArray0 = new File[8];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out";
      stringArray0[2] = "(N/!qe;Ev|}\rf8";
      stringArray0[3] = "/tmp/tmp/%L=P&f8bc0X[YJkyDJ$1S9Z9";
      stringArray0[4] = "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out";
      stringArray0[5] = "U-";
      File file0 = FileUtils.getFile(stringArray0);
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      fileArray0[3] = file0;
      MockFile mockFile0 = new MockFile(")BxL|P`,}!/ggdt", "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      fileArray0[4] = (File) mockFile0;
      fileArray0[5] = file0;
      fileArray0[6] = file0;
      fileArray0[7] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      FileUtils.toFiles(uRLArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileUtils.cleanDirectory(mockFile0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = MockFile.createTempFile(" does not dCclare a paramete} with index ", "/home/azureuser");
      FileUtils.openOutputStream(file0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2#{NF", "PZ");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      FileUtils.copyToDirectory(file0, (File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/home/azureuser";
      stringArray0[1] = "/home/azureuser";
      stringArray0[2] = "/home/azureuser";
      stringArray0[3] = "/home/azureuser";
      File file0 = FileUtils.getFile(stringArray0);
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.copyDirectory(file1, file0, (FileFilter) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.waitFor(file0, (byte) (-8));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNo5Oy~'-", "m:5&r6|,[TY{oFFp");
      FileUtils.waitFor(mockFile0, (-596));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File[] fileArray0 = new File[0];
      FileUtils.toURLs(fileArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("file1");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "}ds5`L:3ab!b{H");
      MockFile mockFile0 = new MockFile("file1");
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "");
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", (String) null, "file");
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file1");
      mockFile0.mkdirs();
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[9];
      FileUtils.streamFiles(file0, true, stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      mockFile0.mkdirs();
      FileUtils.sizeOf(mockFile0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.current();
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      FileUtils.readLines((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/v5=q2) {Q/1)1nlU8fq S{)U-OTx/tmp", "}!(2xea|!OTy");
      FileUtils.openInputStream(file0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File[] fileArray0 = new File[3];
      File file0 = MockFile.createTempFile("%L=P&f8bc", "X[YJkyDJ$1S9Z9");
      fileArray0[0] = file0;
      Stack<String> stack0 = new Stack<String>();
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter(stack0, iOCase0);
      FileUtils.listFilesAndDirs(fileArray0[0], nameFileFilter0, nameFileFilter0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      FileUtils.listFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayList<IOFileFilter> arrayList0 = new ArrayList<IOFileFilter>();
      OrFileFilter orFileFilter0 = new OrFileFilter(arrayList0);
      FileUtils.listFiles(file0, (IOFileFilter) orFileFilter0, (IOFileFilter) orFileFilter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lineIterator(file0, (String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lineIterator(file0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1 KB";
      stringArray0[1] = "1 KB";
      File file1 = FileUtils.getFile(file0, stringArray0);
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      FileUtils.iterateFilesAndDirs(file1, notFileFilter0, notFileFilter0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      FileUtils.iterateFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(3271, (-1041), 3271, (-1080), (-1041), (-2025));
      FileUtils.isFileOlder(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalTime localTime0 = MockLocalTime.now();
      FileUtils.isFileOlder(file0, (ChronoLocalDate) hijrahDate0, localTime0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file1");
      Month month0 = Month.NOVEMBER;
      LocalDate localDate0 = MockLocalDate.of(7, month0, 2);
      FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) localDate0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(2147483647L);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      OffsetDateTime offsetDateTime0 = MockInstant.atOffset(instant0, zoneOffset0);
      FileUtils.isFileOlder(file0, offsetDateTime0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      FileUtils.isFileOlder(file0, offsetDateTime0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-2112846813), 21, (byte)25);
      Instant instant0 = mockDate0.toInstant();
      FileUtils.isFileOlder(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileTime.fromMillis(1152921504606846976L);
      FileUtils.isFileOlder(file0, fileTime0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileOlder(file0, (File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isFileOlder(file0, 1152921504606846976L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate();
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "checksum");
      MockDate mockDate0 = new MockDate((-1), (-186), 1511, 21, 12);
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "y6cbIV";
      stringArray0[1] = "|O{x";
      stringArray0[2] = "Cannot create directory '";
      stringArray0[3] = "bOZ;.,4V+Y&";
      stringArray0[4] = "k}n&t1sz}d.wm";
      stringArray0[5] = "/home/azureuser/tmp";
      stringArray0[6] = "?InN";
      File file0 = FileUtils.getFile(stringArray0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      FileUtils.isFileNewer(file0, (ChronoLocalDate) thaiBuddhistDate0, offsetTime0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(102L);
      FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0, localTime0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      File file0 = FileUtils.getFile(stringArray0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(489L);
      FileUtils.isFileNewer(file0, (ChronoLocalDate) localDate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now((ZoneId) zoneOffset0);
      FileUtils.isFileNewer(file0, offsetDateTime0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Execution of '%s' took [%d] ms.");
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      FileUtils.isFileNewer((File) mockFile0, offsetDateTime0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.current();
      MockDate mockDate0 = new MockDate((-2788), 1, (-2788), (-2788), 177, 2348);
      Instant instant0 = mockDate0.toInstant();
      FileUtils.isFileNewer(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      Instant instant0 = MockInstant.now();
      FileUtils.isFileNewer((File) mockFile0, instant0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "r|oeD#iw=Sm}%";
      stringArray0[1] = "M\"KLY0 ";
      stringArray0[2] = "Parameter of type %s must reference an Enum type";
      stringArray0[3] = "Unknown I/O error listing contents of directory: ";
      stringArray0[4] = "/tmp//tmp/tmp";
      stringArray0[5] = "";
      stringArray0[6] = "ftp";
      stringArray0[7] = "ftp";
      File file0 = FileUtils.getFile(stringArray0);
      FileTime fileTime0 = FileTime.fromMillis((-32L));
      FileUtils.isFileNewer(file0, fileTime0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.current();
      FileUtils.isFileNewer(file0, file1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isFileNewer(file0, 1L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isEmptyDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadable(false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      FileUtils.getTempDirectory();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0 bytes";
      stringArray0[1] = "Qva@";
      stringArray0[2] = "Qva@";
      stringArray0[3] = "/home/azureuser//home/azureuser/azureuser";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("0 bytes/Qva@/Qva@/home/azureuser/home/azureuser/azureuser/0 bytes/Qva@/0 bytes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/azureuser//home/azureuser/azureuser");
      stringArray0[4] = "0 bytes";
      stringArray0[5] = "Qva@";
      stringArray0[6] = "0 bytes";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9m";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/uk/uk//home/azureuser/LLm4PrTest/ io_experiments/uk/uk/uk";
      stringArray0[2] = "LM?HaIW<r";
      stringArray0[3] = "_gv=p";
      stringArray0[4] = "7WSmop%[G2*6W}";
      stringArray0[5] = "/tmp/#39: E cf0/bome";
      stringArray0[6] = "ga%Y/.o.g-";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.current();
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("b_q6f", "b_q6f");
      File file1 = FileUtils.createParentDirectories(mockFile0);
      FileUtils.directoryContains(file0, file1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      System.setCurrentTimeMillis((-779L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$ChildFirst";
      stringArray0[1] = "`Ono_(";
      stringArray0[2] = "/home/azureuser/tmp";
      stringArray0[3] = "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/azureuser";
      stringArray0[4] = ">w}^-[l57 ";
      stringArray0[5] = "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/uZ_/1Gb}W%.]f.?";
      stringArray0[6] = "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }";
      stringArray0[7] = "a[\"L$v";
      stringArray0[8] = "/home/azureuser/LLm4PrTest/ io_experiments/chronoLocalDateTime0chronoLocalDateTime";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.createParentDirectories(file0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("names", "names", file0);
      FileUtils.createParentDirectories(file1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T -t~j%;`=/P4F-xY*{");
      FileUtils.createParentDirectories(mockFile0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "http";
      stringArray0[1] = "D/b|Q";
      stringArray0[2] = "file";
      stringArray0[3] = "5~'$A=H+__]?jsMZPZ";
      stringArray0[4] = "wt?";
      stringArray0[5] = "p";
      stringArray0[6] = "mo{_zM";
      stringArray0[7] = ".";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.createParentDirectories(file1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ":M1MS~epgjQ";
      stringArray0[1] = "vGYo19t!u,)^";
      stringArray0[2] = "qre>y{";
      stringArray0[3] = "gc w>$nB6id b";
      stringArray0[4] = "vGYo19t!u,)^";
      File file0 = FileUtils.getFile(stringArray0);
      LinkedList<File> linkedList0 = new LinkedList<File>();
      linkedList0.add(file0);
      FileUtils.convertFileCollectionToFileArray(linkedList0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      FileUtils.convertFileCollectionToFileArray(hashSet0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "8R@>l;48hPnKQI>Bbk", "instant", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // instant
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/azureuser/tmp/home/azureuser/LLm4PrTest/ io_experiments/tmp/,tqp\"tv^L/ is not visible to /%mMG/]/iyA'D`_Qg^:>0U09/azureuser", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.cartesian.CartesianTestExtension
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "9mZw_3p30),FZ2v+", (Collection<?>) set0, "9mZw_3p30),FZ2v+", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte)3, (int) (byte)3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "-1703 bytes", "offsetDateTime", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // offsetDateTime
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "uZ_", "uZ_");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // uZ_
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("DA%.N!wBbT\"wEebS", "DA%.N!wBbT\"wEebS");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "DA%.N!wBbT\"wEebS", "DA%.N!wBbT\"wEebS");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // DA%.N!wBbT\"wEebS
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" TB");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: ' TB'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("^veY18DK 0vq)%-h", "^veY18DK 0vq)%-h");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/tmp/^veY18DK 0vq)%-h0^veY18DK 0vq)%-h'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("lambda$new$fc983b68$1", "lambda$new$fc983b68$1");
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.current();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a4}RQt|_Ib");
      try { 
        FileUtils.readLines((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "instant");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // instant
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp//tmp/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/5?ir|:JC)mTv,/0{ ;M~`QkUXS/0{ ;M~`QkUXS/tmp", "pn&bLOs6");
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/8v^Qk'{*5Tpofm/tmp", "nB_3+vW.");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "File does not exist: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // File does not exist: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = MockFile.createTempFile("6z5-JJ$D", "6z5-JJ$D");
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out", "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sourceFile");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/checksum/home/azureuser/home/azureuser/llm4prtest/ io_experiments/uz_/uz_/azureuser/home/azureuser/home/azureuser/llm4prtest/ io_experiments/uz_/uz_/azureuser/': expcted /home/azureuser";
      stringArray0[1] = "fC^t:qJ";
      stringArray0[2] = "Ox}<h7,BH?C6DDj";
      stringArray0[3] = "uva|?VF0it&t@`";
      stringArray0[4] = "Z9VME0Q!jQ-;-2_+C<m";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/checksum/home/azureuser/home/azureuser/llm4prtest/ io_experiments/uz_/uz_/azureuser/home/azureuser/home/azureuser/llm4prtest/ io_experiments/uz_/uz_/azureuser/': expcted /home/azureuser/fC^t:qJ/Ox}<h7,BH?C6DDj/uva|?VF0it&t@`'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.moveToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("@qq#@1gXO$96-@:z", "@qq#@1gXO$96-@:z", file0);
      try { 
        FileUtils.moveFileToDirectory(file1, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser/@qq#@1gXO$96-@:z0@qq#@1gXO$96-@:z'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("CTwBW$*O /7r|", "CTwBW$*O /7r|");
      file0.setReadOnly();
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/CTwBW$*O /7r|/CTwBW$*O /7r|'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("rgisterAsParallelCapable", "' does not exist [createDestDir=");
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/tmp/rgisterAsParallelCapable0' does not exist [createDestDir='
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.Charsets");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'org.apache.commons.io.Charsets' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = MockFile.createTempFile("G1;V!U:74!ow{RY", "zG`rjw<YA");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/tmp/G1;V!U:74!ow{RY0zG`rjw<YA'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser/LLm4PrTest/ io_experiments'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("module-info.class", "module-info.class");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/module-info.class0module-info.class'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out", "L7=)");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out0L7=)'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": expbkted ", ": expbkted ");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/: expbkted /: expbkted ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      // Undeclared exception!
      FileUtils.listFilesAndDirs(file0, trueFileFilter0, trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      FileUtils.listFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp//tmp/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/5?ir|:JC)mTv,/0{ ;M~`QkUXS/0{ ;M~`QkUXS/tmp");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/tmp/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/5?ir|:JC)mTv,/0{ ;M~`QkUXS/0{ ;M~`QkUXS/tmp
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp", "/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp");
      try { 
        FileUtils.lineIterator(file0, "/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "E-7Z");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // E-7Z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "' does not exist");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' does not exist
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = MockFile.createTempFile("$_.N\u0007uGec#", " does not dCclare a paramete} with index ");
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("': expcted ", "': expcted ");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/': expcted /': expcted 
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$oM^z#MNe+u]FIQE%");
      try { 
        FileUtils.lastModifiedFileTime(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"VHy*B37`ch|Wid$5", ":9;sz-,TWL");
      try { 
        FileUtils.lastModified(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      FileUtils.iterateFilesAndDirs(file0, emptyFileFilter0, trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = MockFile.createTempFile("f(v lyec", "f(v lyec", (File) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/f(v lyec0f(v lyec
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) directoryFileFilter0, (IOFileFilter) directoryFileFilter0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, instant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation./The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = MockFile.createTempFile("DA%.N!wBbT\"wEebS", "DA%.N!wBbT\"wEebS");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/DA%.N!wBbT\"wEebS0DA%.N!wBbT\"wEebS
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/tmp/tmp/tmp";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/tmp/tmp/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NotDirectoryException");
      
      } catch(NotDirectoryException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "/tmp");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("names", "names", file0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file1, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFile((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.Counters$AbstractPathCounters", "org.apache.commons.io.file.Counters$AbstractPathCounters");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/org.apache.commons.io.file.Counters$AbstractPathCounters0org.apache.commons.io.file.Counters$AbstractPathCounters'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = MockFile.createTempFile(" to declare exactly one property named value of an array type", " to declare exactly one property named value of an array type");
      MockFile mockFile0 = new MockFile(file0, "r+6N2JBbC[M@v^C");
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/ to declare exactly one property named value of an array type0 to declare exactly one property named value of an array type'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 4212, 4212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.current();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 9, 9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "y#3(T#$!");
      TreeSet<MockFile> treeSet0 = new TreeSet<MockFile>();
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>((SortedSet<? extends File>) treeSet0);
      priorityQueue0.add(file0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "y#3(T#$!";
      stringArray0[1] = "/home/azureuser";
      stringArray0[2] = "y#3(T#$!";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) priorityQueue0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/home/azureuser0y#3(T#$!/y#3(T#$!/home/azureuser/y#3(T#$!'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      MockFile mockFile0 = new MockFile("C_df");
      arrayDeque0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'C_df'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='/home/azureuser/LLm4PrTest/ io_experiments/./.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(37);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iXU0gCdfR", "ftp");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/iXU0gCdfR/ftp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destFile");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'destFile'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#fie1", "#fie1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#fie1");
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/home/azureuser/home/azureuser/azureuser";
      File file0 = FileUtils.getFile(stringArray0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/home/azureuser/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/:Fexp)keed /azureuser");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/:Fexp)keed /azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!$dFw9`pVLgV_\"");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '!$dFw9`pVLgV_\"'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLZaPrTes>");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLZaPrTes>'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MANIFEST";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'MANIFEST'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("http", "/tmp/home/azureuser/LLm4PrTest/ io_experiments/: expcted /: expcted /tmp");
      // Undeclared exception!
      FileUtils.copyDirectory(file0, (File) mockFile0, true);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq {)U-OTx/ome/azureuser/LLm4PrTest/ ioBexperiments/t3P+/mp/mprtmp", "/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq {)U-OTx/ome/azureuser/LLm4PrTest/ ioBexperiments/t3P+/mp/mprtmp");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp/home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq {)U-OTx/ome/azureuser/LLm4PrTest/ ioBexperiments/t3P+/mp/mprtmp/tmp/home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq {)U-OTx/ome/azureuser/LLm4PrTest/ ioBexperiments/t3P+/mp/mprtmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) directoryFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) trueFileFilter0, true, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp/foo.bar'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1555L, true);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) sizeFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) emptyFileFilter0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-1880L), false);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) ageFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/hom");
      File file0 = FileUtils.getTempDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) ageFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/hom'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) orFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      MockFile mockFile0 = new MockFile((File) null, "/home/azureuser//home/azureuser/azureuser");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) falseFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/home/azureuser/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fcD", "P3?v097?tydSXpz*&p^");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/fcD/P3?v097?tydSXpz*&p^'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("~j%{4;)r:q-E;9_S", "=)", file0);
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/~j%{4;)r:q-E;9_S0=)'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = MockFile.createTempFile("zNo5Oy~'-", "v|/7[qy");
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C_df");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: 'C_df'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip", (String) null, (File) null);
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, (Checksum) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "V8Gg");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/./V8Gg'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tp/[mprtmp", "/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tp/[mprtmp");
      try { 
        FileUtils.streamFiles(file0, false, (String[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, true);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0{ ;M~`QkUXS";
      stringArray0[1] = "0{ ;M~`QkUXS";
      stringArray0[2] = "0{ ;M~`QkUXS";
      stringArray0[3] = "0{ ;M~`QkUXS";
      stringArray0[4] = "5?ir|:JC)mTv,";
      stringArray0[5] = "0{ ;M~`QkUXS";
      stringArray0[6] = "0{ ;M~`QkUXS";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/0{ ;M~`QkUXS/5?ir|:JC)mTv,/0{ ;M~`QkUXS/0{ ;M~`QkUXS/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = MockFile.createTempFile("Can't disable based on arguments, because method %s had no parameters.", "file1");
      MockFile mockFile0 = new MockFile(file0, "file1");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/tmp/Can't disable based on arguments, because method %s had no parameters.0file1/file1' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile mockFile0 = new MockFile(",YS}%e<U]C4;xH1", "/home/azureuser");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/,YS}%e<U]C4;xH1/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // org.apache.commons.io.FileUtils.setTimes(FileUtils.java:2855)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1316)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:688)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:619)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:520)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:491)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2306)
             // sun.reflect.GeneratedMethodAccessor439.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fir)", "fir)");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser/LLm4PrTest/ io_experiments/fir) to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/fir)/fir)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = FileUtils.isSymlink(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.current();
          String[] stringArray0 = new String[1];
          stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/chronoLocalDateTime/chronoLocalDateTime0chronoLocalDateTime";
          File file1 = FileUtils.getFile(file0, stringArray0);
          File file2 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/chronoLocalDateTime/chronoLocalDateTime0chronoLocalDateTime", "/home/azureuser/LLm4PrTest/ io_experiments/chronoLocalDateTime/chronoLocalDateTime0chronoLocalDateTime", file0);
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file2, file1, false, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/./home/azureuser/LLm4PrTest/ io_experiments/chronoLocalDateTime/chronoLocalDateTime0chronoLocalDateTime\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:813)
             // sun.reflect.GeneratedMethodAccessor456.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("13 PB", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize((-1703L));
      assertEquals("-1703 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "0{ ;M~`QkUXS", "0{ ;M~`QkUXS", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0{ ;M~`QkUXS
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "R: ukp#2j");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) null, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.current();
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/0hO?=E#J&k6/-4");
      FileUtils.forceMkdir(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "/home/azureuser/LLm4PrTest/ io_experiments/ gb/tmp");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = FileUtils.current();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "$Dispatcher.class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.newOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.lastModified(file0);
      //  // Unstable assertion: assertEquals(1755974538266L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(2208L, 2208L);
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Expected exception %s was not thrown.", "Expected exception %s was not thrown.");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (ChronoZonedDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoZonedDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, charset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/7r|0wgmr>:2sHMW.t~p#(W");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/7r|0wgmr>:2sHMW.t~p#(W' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("CTDBW$*O /7r|", "wgmr>:2sHMW.t~p#(W");
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+Y{6nSm6*E+Ge\"Eo.d", "&`HEYu}Mo4$qi=6j}");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/+Y{6nSm6*E+Ge\"Eo.d/&`HEYu}Mo4$qi=6j}'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      String string0 = FileUtils.readFileToString((File) mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp//home/aZureuser/LLm4PrTest/ io^experiments/.YS}%e<U]C4;xH1/home/tmp");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = MockFile.createTempFile("file1", "file1");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/file10file1'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String string0 = ".\\uo(N5V:vC;P;sC'";
      MockFile mockFile0 = new MockFile(string0);
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '.\\uo(N5V:vC;P;sC''
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile("' is not a file: ", "' is not a file: ");
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          MockFile mockFile0 = new MockFile(": expcted ", ": expcted ");
          mockFile0.createNewFile();
          // Undeclared exception!
          try { 
            FileUtils.moveFileToDirectory(mockFile0, file0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/: expcted \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:813)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2387)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2361)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2416)
             // sun.reflect.GeneratedMethodAccessor437.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(": expcted ", ": expcted ");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/: expcted /: expcted ' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", " does not dCclare a paramete} with index ");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser0 does not dCclare a paramete} with index ' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'destDir is not writable: '/home/azureuser/LLm4PrTest/ io_experiments/./tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) falseFileFilter0, (IOFileFilter) falseFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) notFileFilter0, (IOFileFilter) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = FileUtils.isRegularFile(mockFile0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = FileUtils.isRegularFile((File) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      LinkOption[] linkOptionArray0 = LinkOption.values();
      File file0 = MockFile.createTempFile(" does not dCclare a paramete} with index ", "/home/azureuser");
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = LinkOption.values();
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertFalse(file1.isHidden());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "N?u('dp,.>c2IOKO";
      stringArray0[1] = "QQ>eHT*B$`Bi2o";
      stringArray0[2] = "RiHR7i`kFe Ykw";
      stringArray0[3] = "";
      stringArray0[4] = "QQ>eHT*B$`Bi2o";
      File file1 = FileUtils.getFile(stringArray0);
      assertNotNull(file1);
      
      NameFileFilter nameFileFilter0 = new NameFileFilter("");
      FileUtils.copyDirectory(file0, file1, (FileFilter) nameFileFilter0, false);
      assertTrue(file1.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/N?u('dp,.>c2IOKO/QQ>eHT*B$`Bi2o/RiHR7i`kFe Ykw", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(" GB", "/home/azureuser/llm4prtest/ io_experiments/`dn}qdz&r-^b&m8{n;/home/azureuser/home/azureuser/llm4prtest/ io_experiments/: expcted /: expcted /azureuser/azureuser");
      // Undeclared exception!
      FileUtils.copyToDirectory(file0, (File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("gQ}NATf8|9yhv.1%t-o");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.current();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5@qNxu$");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Failed to create proxy for ");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals("Failed to create proxy for ", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(": expckted ");
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = (File) mockFile0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(3, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("%I");
      assertEquals("%I", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      File file0 = FileUtils.current();
      arrayDeque0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      FileUtils.copyToDirectory((Iterable<File>) arrayDeque0, (File) null);
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Can only convert file URL to a File: ");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'Can only convert file URL to a File: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1174)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1165)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2457)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1031)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:940)
             // sun.reflect.GeneratedMethodAccessor421.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile((InputStream) null, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1174)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1165)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2457)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1031)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:940)
             // sun.reflect.GeneratedMethodAccessor421.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.current();
          File file1 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory(file0, file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:813)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1310)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:688)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:619)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:520)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:719)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:976)
             // sun.reflect.GeneratedMethodAccessor420.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = MockFile.createTempFile("isSymbolicLink", "isSymbolicLink");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "isSymbolicLink");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".", ".");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, ".");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "\"C!\"(3Ojt");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "\"C!\"(3Ojt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/home/azureuser/tmp", "/tmp/home/azureuser/tmp");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "/tmp/home/azureuser/tmp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "/home/azureuser/LLm4PrTest/ io_experiments/azureuser");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "/home/azureuser");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "Source '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp", "/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp", "/tmp//home/azureuser/LLm4PrTest/ io_experiments/1)1nlU8fq S{)U-OTx/home/azureuser/LLm4PrTest/ io_experiments/t3P+/tmp/[mprtmp");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("J_dS");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize((Number) bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_YB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1048576 EB", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "!u|a~Y#&+_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileTime.fromMillis(100L);
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals("tmp", file0.getName());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      File file0 = FileUtils.current();
      MockDate mockDate0 = new MockDate(1133704324, (-876), (-1871), (-876), 181, 181);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "~a^H*IOHr-<a", (Collection<?>) stack0, "~a^H*IOHr-<a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertEquals(1755767590862L, long0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/home/azureuser/home/home/azureuser/home/azureuser/home/azureuser/home/azureuser");
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 505L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (-2668), (-2668));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "net.bytebuddy.build.HashCodeAndEqualsPlugin");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.build.HashCodeAndEqualsPlugin
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      NameFileFilter nameFileFilter0 = new NameFileFilter("PS");
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, nameFileFilter0, nameFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "wl$gpye-2 o}ku`_", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      LinkedHashSet<LinkOption> linkedHashSet0 = new LinkedHashSet<LinkOption>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/home/azureuser/LLm4PrTest/ io_experiments/uZ_/uZ_/azureuser", (Collection<?>) linkedHashSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileTime.fromMillis((-2241L));
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/tmp/home/azureuser/tmp", "/tmp/home/azureuser/tmp");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp/home/azureuser/tmp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, " does not have data element at ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, fileFileFilter0, fileFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      File file0 = FileUtils.current();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1887));
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      OffsetTime offsetTime0 = MockOffsetTime.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) japaneseDate0, offsetTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "yx", (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U`KA5Q.v^(&4,");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (OffsetDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp/home/azureuser/tmp", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) falseFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      File file0 = MockFile.createTempFile("5<l:`I8I,", "doPKMu ,8^dvtnl");
      boolean boolean0 = FileUtils.isFileNewer(file0, 2451L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (String[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedList0, "/tmp/home/azureuser/tmp", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      JapaneseDate japaneseDate0 = MockJapaneseDate.from(zonedDateTime0);
      OffsetTime offsetTime0 = MockOffsetTime.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) japaneseDate0, offsetTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "/home/azureuser/LLm4PrTest/ io_experiments/uQbWUOeuu1v/names0ftp/home/azureuser/LLm4PrTest/ io_experiments/uQbWUOeuu1v/names0ftp/tmp");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/uQbWUOeuu1v/names0ftp/home/azureuser/LLm4PrTest/ io_experiments/uQbWUOeuu1v/names0ftp/tmp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      JapaneseDate japaneseDate0 = MockJapaneseDate.from(zonedDateTime0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) japaneseDate0, (OffsetTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-I;");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayDeque0, "%s requires that either `contains` or `matches` is set.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "!u|a~Y#&+_", "]-,2h0c", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]-,2h0c
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" bytes");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((byte) (-61));
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='/home/azureuser/LLm4PrTest/ io_experiments/./.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (OffsetDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1125899906842624L, FileUtils.ONE_PB);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.deleteDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1177)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1197)
             // sun.reflect.GeneratedMethodAccessor428.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }
}
