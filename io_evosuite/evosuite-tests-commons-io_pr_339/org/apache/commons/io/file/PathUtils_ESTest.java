/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:24:08 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.AccessDeniedException;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.AclFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.DosFileAttributeView;
import java.nio.file.attribute.DosFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.file.PathVisitor;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          
          boolean boolean0 = mockFile0.setExecutable(false);
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertFalse(boolean0);
          
          Duration duration0 = Duration.ofDays((-4095L));
          assertNotNull(duration0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          assertEquals(2, linkOptionArray0.length);
          
          boolean boolean2 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertFalse(boolean2);
          assertTrue(boolean2 == boolean1);
          assertTrue(boolean2 == boolean0);
          assertEquals(2, linkOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1106)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@f", "@f");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/@f/@f", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/@f", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("@f", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      Instant instant0 = MockInstant.ofEpochSecond(4947L, 4947L);
      assertNotNull(instant0);
      
      FileTime fileTime0 = FileTime.from(instant0);
      assertNotNull(fileTime0);
      
      boolean boolean0 = PathUtils.isOlder(path0, fileTime0, (LinkOption[]) null);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/@f/@f", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/@f", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("@f", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.setExecutable(false);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      boolean boolean2 = PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, path0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertTrue(boolean0);
          assertEquals(0, linkOptionArray0.length);
          
          AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
          assertNotNull(andFileFilter0);
          
          MockFile mockFile0 = new MockFile("l WwXifyZ8gEo*{", "");
          assertNotNull(mockFile0);
          
          boolean boolean1 = mockFile0.setWritable(true, true);
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/l WwXifyZ8gEo*{", mockFile0.toString());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertFalse(boolean1);
          assertFalse(boolean1 == boolean0);
          
          Path path1 = mockFile0.toPath();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/l WwXifyZ8gEo*{", mockFile0.toString());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.length());
          assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertFalse(path1.equals((Object)path0));
          
          Charset charset0 = Charset.defaultCharset();
          assertNotNull(charset0);
          assertEquals("UTF-8", charset0.displayName());
          assertTrue(charset0.canEncode());
          assertEquals("UTF-8", charset0.name());
          assertEquals("UTF-8", charset0.toString());
          assertTrue(charset0.isRegistered());
          
          Duration duration0 = Duration.ofNanos(373L);
          assertNotNull(duration0);
          
          boolean boolean2 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
          assertNotSame(path0, path1);
          assertTrue(boolean2);
          assertFalse(path0.equals((Object)path1));
          assertTrue(boolean2 == boolean0);
          assertFalse(boolean2 == boolean1);
          assertEquals(0, linkOptionArray0.length);
          
          Path path2 = PathUtils.getTempDirectory();
          assertNotNull(path2);
          assertNotSame(path2, path0);
          assertNotSame(path2, path1);
          assertFalse(path2.equals((Object)path0));
          assertFalse(path2.equals((Object)path1));
          
          LinkOption[] linkOptionArray1 = new LinkOption[6];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption0;
          linkOptionArray1[1] = linkOption0;
          linkOptionArray1[2] = linkOption0;
          linkOptionArray1[3] = linkOption0;
          linkOptionArray1[4] = linkOption0;
          linkOptionArray1[5] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, linkOptionArray1, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1106)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("Bs", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          
          boolean boolean0 = mockFile0.setExecutable(false);
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("Bs", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(boolean0);
          
          Duration duration0 = Duration.ofDays((-4095L));
          assertNotNull(duration0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1106)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          
          Duration duration0 = Duration.ofDays((-4095L));
          assertNotNull(duration0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1106)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Path path0 = null;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path1, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canExecute());
          assertEquals("Bs", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          
          boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:541)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" to a subdirectory of itself: ", "[4P<GFDEGEj");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ to a subdirectory of itself: /[4P<GFDEGEj", mockFile0.toString());
      assertEquals("[4P<GFDEGEj", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ to a subdirectory of itself: ", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      try { 
        PathUtils.readString(path0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r#il]T75R");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("r#il]T75R", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("r#il]T75R", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      Duration duration0 = Duration.ofMinutes((-1965L));
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.setExecutable(false);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("r#il]T75R", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("r#il]T75R", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean2 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("r#il]T75R", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("r#il]T75R", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, linkOptionArray0.length);
      
      try { 
        PathUtils.setLastModifiedTime(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.io.filefilter.WildcardFilter";
      stringArray0[1] = "org.apache.commons.io.filefilter.WildcardFilter";
      stringArray0[2] = "org.apache.commons.io.filefilter.WildcardFilter";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "org.apache.commons.io.filefilter.WildcardFilter", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'org.apache.commons.io.filefilter.WildcardFilter/org.apache.commons.io.filefilter.WildcardFilter/org.apache.commons.io.filefilter.WildcardFilter/org.apache.commons.io.filefilter.WildcardFilter'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      IOCase iOCase0 = IOCase.INSENSITIVE;
      NameFileFilter nameFileFilter0 = new NameFileFilter(list0, iOCase0);
      assertNotNull(nameFileFilter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Path[] pathArray0 = new Path[2];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      Path[] pathArray1 = PathUtils.filter(nameFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(2, pathArray0.length);
      assertEquals(0, pathArray1.length);
      
      LinkOption[] linkOptionArray0 = PathUtils.EMPTY_LINK_OPTION_ARRAY;
      assertNotNull(linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Duration duration0 = Duration.ofMinutes((-1990L));
      assertNotNull(duration0);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, fileVisitOptionArray0.length);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, set0, 4119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      Instant instant0 = MockInstant.ofEpochSecond((-3237L));
      assertNotNull(instant0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3237L));
      assertNotNull(localDate0);
      
      Period period0 = Period.between(localDate0, localDate0);
      assertNotNull(period0);
      
      Instant instant1 = MockInstant.plus(instant0, (TemporalAmount) period0);
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      Instant instant2 = MockInstant.plusNanos(instant1, (-3237L));
      assertNotNull(instant2);
      assertSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      
      Instant instant3 = MockInstant.minusNanos(instant2, (-3237L));
      assertNotNull(instant3);
      assertNotSame(instant0, instant3);
      assertSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant0);
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertTrue(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant2));
      assertTrue(instant3.equals((Object)instant1));
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      boolean boolean2 = PathUtils.isNewer(path0, instant3, linkOptionArray0);
      assertNotSame(instant0, instant3);
      assertSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant3);
      assertSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant3);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertNotSame(instant3, instant2);
      assertNotSame(instant3, instant1);
      assertNotSame(instant3, instant0);
      assertTrue(boolean2);
      assertFalse(instant0.equals((Object)instant2));
      assertTrue(instant0.equals((Object)instant3));
      assertTrue(instant1.equals((Object)instant3));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant3));
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertTrue(instant3.equals((Object)instant0));
      assertFalse(instant3.equals((Object)instant2));
      assertTrue(instant3.equals((Object)instant1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(9, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          Path path1 = PathUtils.getTempDirectory();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertTrue(path1.equals((Object)path0));
          
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1349)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.deleteFile(path0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.isOlder(path0, path0);
          assertFalse(boolean0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:243)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertNull(basicFileAttributes0);
      assertEquals(6, linkOptionArray0.length);
      
      LinkOption[] linkOptionArray1 = new LinkOption[8];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      linkOptionArray1[0] = linkOption1;
      linkOptionArray1[1] = linkOption2;
      linkOptionArray1[2] = linkOption2;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[3] = linkOption6;
      linkOptionArray1[4] = linkOption4;
      linkOptionArray1[5] = linkOption3;
      linkOptionArray1[6] = linkOption4;
      linkOptionArray1[7] = linkOption1;
      DosFileAttributes dosFileAttributes0 = PathUtils.readDosFileAttributes((Path) null, linkOptionArray1);
      assertNull(dosFileAttributes0);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertEquals(8, linkOptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked((Path) null);
      assertNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, ")");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Path path0 = mockFile1.toPath();
          assertNotNull(path0);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile1.exists());
          assertEquals(")", mockFile1.getName());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.isHidden());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals(0L, mockFile1.lastModified());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertTrue(mockFile1.isAbsolute());
          assertFalse(mockFile1.canRead());
          assertFalse(mockFile1.canWrite());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
          assertTrue(mockFile1.isFile());
          assertFalse(mockFile1.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:541)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:515)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      
      try { 
        PathUtils.setLastModifiedTime(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      Path[] pathArray0 = new Path[8];
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("VM2fv", "VM2fv");
      assertNotNull(mockFile0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("VM2fv", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv/VM2fv", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean2 = PathUtils.fileContentEquals(path0, path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("VM2fv", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv/VM2fv", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      assertNotNull(posixFileAttributeView0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("VM2fv", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv/VM2fv", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(3, linkOptionArray0.length);
      
      try { 
        PathUtils.readBasicFileAttributes(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        PathUtils.readDosFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from((-2738L), timeUnit0);
      assertNotNull(fileTime0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, fileTime0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      assertEquals("v", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      OpenOption[] openOptionArray0 = new OpenOption[9];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      assertEquals(StandardOpenOption.WRITE, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE_NEW;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.SPARSE;
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.TRUNCATE_EXISTING;
      assertNotSame(standardOpenOption3, standardOpenOption1);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption3);
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      
      openOptionArray0[3] = (OpenOption) standardOpenOption3;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.WRITE;
      assertNotSame(standardOpenOption4, standardOpenOption3);
      assertNotSame(standardOpenOption4, standardOpenOption1);
      assertNotSame(standardOpenOption4, standardOpenOption2);
      assertSame(standardOpenOption4, standardOpenOption0);
      assertEquals(StandardOpenOption.WRITE, standardOpenOption4);
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption3));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption2));
      
      openOptionArray0[4] = (OpenOption) standardOpenOption4;
      StandardOpenOption standardOpenOption5 = StandardOpenOption.TRUNCATE_EXISTING;
      assertNotSame(standardOpenOption5, standardOpenOption2);
      assertNotSame(standardOpenOption5, standardOpenOption4);
      assertNotSame(standardOpenOption5, standardOpenOption1);
      assertSame(standardOpenOption5, standardOpenOption3);
      assertNotSame(standardOpenOption5, standardOpenOption0);
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption5);
      assertFalse(standardOpenOption5.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption5.equals((Object)standardOpenOption4));
      assertFalse(standardOpenOption5.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption5.equals((Object)standardOpenOption0));
      
      openOptionArray0[5] = (OpenOption) standardOpenOption5;
      StandardOpenOption standardOpenOption6 = StandardOpenOption.SYNC;
      assertNotSame(standardOpenOption6, standardOpenOption3);
      assertNotSame(standardOpenOption6, standardOpenOption1);
      assertNotSame(standardOpenOption6, standardOpenOption2);
      assertNotSame(standardOpenOption6, standardOpenOption5);
      assertNotSame(standardOpenOption6, standardOpenOption4);
      assertNotSame(standardOpenOption6, standardOpenOption0);
      assertEquals(StandardOpenOption.SYNC, standardOpenOption6);
      assertFalse(standardOpenOption6.equals((Object)standardOpenOption3));
      assertFalse(standardOpenOption6.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption6.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption6.equals((Object)standardOpenOption5));
      assertFalse(standardOpenOption6.equals((Object)standardOpenOption4));
      assertFalse(standardOpenOption6.equals((Object)standardOpenOption0));
      
      openOptionArray0[6] = (OpenOption) standardOpenOption6;
      StandardOpenOption standardOpenOption7 = StandardOpenOption.SYNC;
      assertNotSame(standardOpenOption7, standardOpenOption5);
      assertSame(standardOpenOption7, standardOpenOption6);
      assertNotSame(standardOpenOption7, standardOpenOption4);
      assertNotSame(standardOpenOption7, standardOpenOption0);
      assertNotSame(standardOpenOption7, standardOpenOption1);
      assertNotSame(standardOpenOption7, standardOpenOption2);
      assertNotSame(standardOpenOption7, standardOpenOption3);
      assertEquals(StandardOpenOption.SYNC, standardOpenOption7);
      assertFalse(standardOpenOption7.equals((Object)standardOpenOption5));
      assertFalse(standardOpenOption7.equals((Object)standardOpenOption4));
      assertFalse(standardOpenOption7.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption7.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption7.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption7.equals((Object)standardOpenOption3));
      
      openOptionArray0[7] = (OpenOption) standardOpenOption7;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      openOptionArray0[8] = (OpenOption) linkOption0;
      try { 
        PathUtils.writeString(path0, stringBuffer0, charset0, openOptionArray0);
        fail("Expecting exception: FileAlreadyExistsException");
      
      } catch(FileAlreadyExistsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      FileTime fileTime0 = FileTime.fromMillis(1L);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[3] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      linkOptionArray0[5] = linkOption4;
      boolean boolean2 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, linkOptionArray0.length);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      boolean boolean3 = PathUtils.directoryContentEquals(path0, path0, 3104, linkOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(6, fileVisitOptionArray0.length);
      assertEquals(6, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Path path0 = null;
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
      assertNull(path1);
      assertEquals(4, fileAttributeArray0.length);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, linkOptionArray0);
      assertNull(basicFileAttributes0);
      assertEquals(4, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      assertNotNull(andFileFilter0);
      
      MockFile mockFile0 = new MockFile("l WwXifyZ8gEo*{", "");
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.setWritable(true, true);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/l WwXifyZ8gEo*{", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/l WwXifyZ8gEo*{", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(path1.equals((Object)path0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      Duration duration0 = Duration.ofNanos(373L);
      assertNotNull(duration0);
      
      boolean boolean2 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertNotSame(path0, path1);
      assertTrue(boolean2);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, linkOptionArray0.length);
      
      Path path2 = PathUtils.getTempDirectory();
      assertNotNull(path2);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      
      Path path3 = mockFile0.toPath();
      assertNotNull(path3);
      assertSame(path3, path1);
      assertNotSame(path3, path0);
      assertNotSame(path3, path2);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/l WwXifyZ8gEo*{", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(path3.equals((Object)path0));
      assertFalse(path3.equals((Object)path2));
      
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      // Undeclared exception!
      try { 
        PathUtils.readAttributes(path3, class0, linkOptionArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/l WwXifyZ8gEo*{
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.exists());
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 7);
      fileAttributeArray0[3] = fileAttributeArray0[2];
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      List<IOFileFilter> list0 = andFileFilter0.getFileFilters();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Path[] pathArray0 = new Path[1];
      Path[] pathArray1 = PathUtils.filter(andFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, andFileFilter0, (-1518), false, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, (Path) null, (LinkOption[]) null, (OpenOption[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertSame(standardDeleteOption1, standardDeleteOption0);
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("Cu9p)?ct", "");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/Cu9p)?ct0", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("Cu9p)?ct0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      MockFile mockFile0 = new MockFile(file0, "Cu9p)?ct");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/Cu9p)?ct0", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("Cu9p)?ct0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/Cu9p)?ct0/Cu9p)?ct", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("Cu9p)?ct", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/Cu9p)?ct0", mockFile0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertNotSame(path0, path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/Cu9p)?ct0", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("Cu9p)?ct0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/Cu9p)?ct0/Cu9p)?ct", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("Cu9p)?ct", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/Cu9p)?ct0", mockFile0.getParent());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        LinkOption.valueOf("Cu9p)?ct");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.Cu9p)?ct
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption3, linkOption0);
      assertSame(linkOption3, linkOption2);
      assertSame(linkOption3, linkOption1);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption3);
      
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      boolean boolean0 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(8, linkOptionArray0.length);
      
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      assertNotNull(andFileFilter0);
      
      MockFile mockFile0 = new MockFile("", "l WwXifyZ8gEo*{");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/l WwXifyZ8gEo*{", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileTime fileTime0 = FileTime.fromMillis(895L);
      assertNotNull(fileTime0);
      
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      assertNull(aclFileAttributeView0);
      assertEquals(0, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, (Instant) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Instant instant0 = MockInstant.ofEpochMilli((-2962L));
      assertNotNull(instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      boolean boolean0 = PathUtils.isOlder(path0, instant0, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(5, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readAttributes((Path) null, class0, linkOptionArray0);
      assertNull(basicFileAttributes0);
      assertEquals(8, linkOptionArray0.length);
      
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[0];
      AndFileFilter andFileFilter0 = new AndFileFilter(iOFileFilterArray0);
      assertNotNull(andFileFilter0);
      assertEquals(0, iOFileFilterArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption0;
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from((-1L), timeUnit0);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[9];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      linkOptionArray1[0] = linkOption0;
      linkOptionArray1[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[2] = linkOption1;
      linkOptionArray1[3] = linkOption0;
      linkOptionArray1[4] = linkOption0;
      linkOptionArray1[6] = linkOption0;
      linkOptionArray1[7] = linkOption0;
      linkOptionArray1[8] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertFalse(boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertEquals(9, linkOptionArray1.length);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
          assertNotNull(bigInteger0);
          assertEquals((short) (-13240), bigInteger0.shortValue());
          assertEquals((byte)72, bigInteger0.byteValue());
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      assertNotNull(andFileFilter0);
      
      Path[] pathArray0 = new Path[4];
      pathArray0[0] = null;
      pathArray0[1] = null;
      pathArray0[2] = null;
      MockFile mockFile0 = new MockFile("Can't compare directories, only files: ", "Can't compare directories, only files: ");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Can't compare directories, only files: /Can't compare directories, only files: ", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Can't compare directories, only files: ", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Can't compare directories, only files: ", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      pathArray0[3] = path0;
      Path[] pathArray1 = PathUtils.filter(andFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(4, pathArray0.length);
      assertEquals(0, pathArray1.length);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      // Undeclared exception!
      try { 
        PathUtils.isPosix(pathArray0[2], linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from(1568L, timeUnit0);
      assertNotNull(fileTime0);
      
      boolean boolean0 = PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(0, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean1 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("APrCII");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.APrCII
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "ga4#-");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/ga4#-", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("ga4#-", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/ga4#-", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("ga4#-", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/ga4#-", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("ga4#-", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/ga4#-'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        PathUtils.readAttributes(path1, class0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("3zXOBkCm`0^H", "3zXOBkCm`0^H");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(mockFile0.isFile());
      assertEquals("3zXOBkCm`0^H", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H/3zXOBkCm`0^H", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Duration duration0 = Duration.ofNanos(41506L);
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertNotSame(path0, path1);
      assertTrue(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertEquals(1, linkOptionArray0.length);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean1 = PathUtils.directoryContentEquals(path1, path0, 3085, linkOptionArray0, fileVisitOptionArray0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertTrue(mockFile0.isFile());
      assertEquals("3zXOBkCm`0^H", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H/3zXOBkCm`0^H", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkOptionArray0.length);
      assertEquals(0, fileVisitOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("3zXOBkCm`0^H", "3zXOBkCm`0^H");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H/3zXOBkCm`0^H", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertEquals("3zXOBkCm`0^H", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(path1.equals((Object)path0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      Duration duration0 = Duration.ofNanos(41506L);
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertNotSame(path0, path1);
      assertTrue(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertEquals(1, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesUnchecked(path1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/3zXOBkCm`0^H/3zXOBkCm`0^H
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          Path path1 = PathUtils.current();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          MockFile mockFile0 = new MockFile("", "");
          assertNotNull(mockFile0);
          
          Path path2 = mockFile0.toPath();
          assertNotNull(path2);
          assertNotSame(path2, path1);
          assertNotSame(path2, path0);
          assertNull(mockFile0.getParent());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isFile());
          assertEquals("/", mockFile0.toString());
          assertFalse(path2.equals((Object)path1));
          assertFalse(path2.equals((Object)path0));
          
          boolean boolean0 = PathUtils.isNewer(path1, path2);
          assertNotSame(path1, path2);
          assertNotSame(path1, path0);
          assertNotSame(path2, path1);
          assertNotSame(path2, path0);
          assertNull(mockFile0.getParent());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isFile());
          assertEquals("/", mockFile0.toString());
          assertTrue(boolean0);
          assertFalse(path1.equals((Object)path2));
          assertFalse(path1.equals((Object)path0));
          assertFalse(path2.equals((Object)path1));
          assertFalse(path2.equals((Object)path0));
          
          Charset charset0 = Charset.defaultCharset();
          assertNotNull(charset0);
          assertEquals("UTF-8", charset0.name());
          assertTrue(charset0.isRegistered());
          assertEquals("UTF-8", charset0.displayName());
          assertEquals("UTF-8", charset0.toString());
          assertTrue(charset0.canEncode());
          
          // Undeclared exception!
          PathUtils.sizeOfDirectoryAsBigInteger(path2);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
          assertFalse(boolean0);
          
          PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
          assertNotNull(pathEqualsFileFilter0);
          
          String[] stringArray0 = new String[6];
          stringArray0[0] = null;
          stringArray0[1] = null;
          stringArray0[2] = null;
          stringArray0[3] = null;
          stringArray0[4] = null;
          stringArray0[5] = null;
          PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
          assertNotNull(prefixFileFilter0);
          assertEquals(6, stringArray0.length);
          
          IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.or(prefixFileFilter0);
          assertNotNull(iOFileFilter0);
          assertEquals(6, stringArray0.length);
          
          Path[] pathArray0 = new Path[7];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          pathArray0[2] = path0;
          pathArray0[3] = path0;
          pathArray0[4] = path0;
          pathArray0[6] = path0;
          Path[] pathArray1 = PathUtils.filter(iOFileFilter0, pathArray0);
          assertNotNull(pathArray1);
          assertNotSame(pathArray1, pathArray0);
          assertNotSame(pathArray0, pathArray1);
          assertFalse(pathArray1.equals((Object)pathArray0));
          assertEquals(6, pathArray1.length);
          assertEquals(6, stringArray0.length);
          assertEquals(7, pathArray0.length);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1151)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1243)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:1055)
             // sun.reflect.GeneratedMethodAccessor269.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      try { 
        PathUtils.isOlder(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      boolean boolean0 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(8, linkOptionArray0.length);
      
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      assertNotNull(andFileFilter0);
      
      MockFile mockFile0 = new MockFile("", "l WwXifyZ8gEo*{");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
      assertEquals("/l WwXifyZ8gEo*{", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean1 = mockFile0.setWritable(true, false);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("l WwXifyZ8gEo*{", mockFile0.getName());
      assertEquals("/l WwXifyZ8gEo*{", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Duration duration0 = Duration.ofNanos(373L);
      assertNotNull(duration0);
      
      // Undeclared exception!
      PathUtils.waitFor(path0, duration0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileTime fileTime0 = FileTime.fromMillis(1L);
      assertNotNull(fileTime0);
      
      MockFile mockFile0 = new MockFile("}RV3S}@Zx~gb7");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals("}RV3S}@Zx~gb7", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("}RV3S}@Zx~gb7", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      
      Duration duration0 = Duration.ofNanos((-898L));
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ZERO;
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      PathUtils.waitFor(path1, duration1, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RJ$HN1]");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RJ$HN1]", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("RJ$HN1]", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RJ$HN1]", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("RJ$HN1]", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.setExecutable(true);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RJ$HN1]", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("RJ$HN1]", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Duration duration0 = Duration.ofDays((-4095L));
      assertNotNull(duration0);
      
      boolean boolean2 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("RJ$HN1]", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("RJ$HN1]", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      assertFalse(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add((Path) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize(linkedHashSet0, (Path) null, false, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          FileTime fileTime0 = FileTime.fromMillis(1048576L);
          assertNotNull(fileTime0);
          
          LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
          assertNotNull(linkedHashSet0);
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertFalse(linkedHashSet0.contains(path0));
          
          Stream<Path> stream0 = linkedHashSet0.parallelStream();
          assertNotNull(stream0);
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertFalse(linkedHashSet0.contains(path0));
          
          Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
          assertNotNull(list0);
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertTrue(list0.isEmpty());
          assertEquals(0, list0.size());
          assertFalse(linkedHashSet0.contains(path0));
          assertFalse(list0.contains(path0));
          
          Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
          assertNotNull(counters_PathCounters0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, (-265));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      boolean boolean0 = PathUtils.isRegularFile((Path) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      Duration duration0 = Duration.ofSeconds((-1579L));
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!?jy}4^fUS`tV51+");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkOptionArray0.length);
      
      // Undeclared exception!
      PathUtils.sizeOfDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      assertNotNull(accumulatorPathVisitor0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Comparator<Path> comparator0 = (Comparator<Path>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeFiles(path0, true, comparator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(path0));
      
      Comparator<Path> comparator1 = (Comparator<Path>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path0, false, comparator1);
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      
      Path path1 = null;
      LinkOption[] linkOptionArray0 = null;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(path0));
      
      boolean boolean1 = linkedHashSet0.add(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, true, comparator0);
      assertNotNull(list0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedHashSet0.contains(path0));
      assertFalse(list0.contains(path0));
      
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, (LinkOption[]) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertTrue(boolean0);
          assertEquals(0, linkOptionArray0.length);
          
          BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
          assertNotNull(bigInteger0);
          assertEquals((byte)72, bigInteger0.byteValue());
          assertEquals((short) (-13240), bigInteger0.shortValue());
          
          LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
          assertNotNull(linkedHashSet0);
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedHashSet0.size());
          assertFalse(linkedHashSet0.contains(path0));
          
          Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          List<Path> list0 = PathUtils.relativize(linkedHashSet0, path0, false, comparator0);
          assertNotNull(list0);
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedHashSet0.size());
          assertEquals(0, list0.size());
          assertTrue(list0.isEmpty());
          assertFalse(linkedHashSet0.contains(path0));
          assertFalse(list0.contains(path0));
          
          Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
          assertNotNull(counters_PathCounters0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!?jy}4^fUS`tV51+");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Duration duration0 = Duration.ofNanos(1073741824L);
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption5;
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!?jy}4^fUS`tV51+");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Duration duration0 = Duration.ofNanos(1073741824L);
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean1 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Duration duration0 = Duration.ofMinutes((-1985L));
      assertNotNull(duration0);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(0, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("file", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("file", mockFile0.getName());
      
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'file'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      String string0 = "6+{@E";
      MockFile mockFile0 = new MockFile("6+{@E");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6+{@E", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("6+{@E", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(path1.equals((Object)path0));
      
      Path path2 = mockFile0.toPath();
      assertNotNull(path2);
      assertSame(path2, path1);
      assertNotSame(path2, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6+{@E", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("6+{@E", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(path2.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path2, path0);
      assertNotSame(path0, path2);
      assertNotSame(path0, path1);
      assertSame(path2, path1);
      assertNotSame(path2, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6+{@E", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("6+{@E", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path2));
      assertFalse(path0.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      
      Charset charset0 = null;
      OpenOption[] openOptionArray0 = new OpenOption[4];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      assertEquals(StandardOpenOption.SYNC, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      openOptionArray0[1] = (OpenOption) null;
      // Undeclared exception!
      try { 
        StandardOpenOption.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("file");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("file", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("file", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("file", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("file", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path1);
      assertNull(list0);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("file", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("file", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(path1.equals((Object)path0));
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory(path1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'file'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertTrue(boolean0);
          assertEquals(0, linkOptionArray0.length);
          
          AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
          assertNotNull(andFileFilter0);
          
          Path[] pathArray0 = new Path[9];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
          BasicFileAttributes basicFileAttributes0 = PathUtils.readAttributes(path0, class0, linkOptionArray0);
          assertNotNull(basicFileAttributes0);
          assertEquals(0, linkOptionArray0.length);
          
          // Undeclared exception!
          try { 
            andFileFilter0.visitFile(path0, basicFileAttributes0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:81)
             // org.apache.commons.io.filefilter.AndFileFilter.accept(AndFileFilter.java:152)
             // org.apache.commons.io.filefilter.AbstractFileFilter.visitFile(AbstractFileFilter.java:150)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.canWrite());
          assertTrue(mockFile0.isDirectory());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals("", mockFile0.getName());
          assertEquals("", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getTotalSpace());
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          boolean boolean0 = mockFile0.createNewFile();
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.canWrite());
          assertTrue(mockFile0.isDirectory());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals("", mockFile0.getName());
          assertEquals("", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          linkOptionArray0[3] = linkOption0;
          linkOptionArray0[4] = linkOption0;
          linkOptionArray0[5] = linkOption0;
          linkOptionArray0[6] = linkOption0;
          OpenOption[] openOptionArray0 = new OpenOption[5];
          openOptionArray0[0] = (OpenOption) linkOption0;
          LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
          openOptionArray0[1] = (OpenOption) null;
          openOptionArray0[2] = (OpenOption) linkOption0;
          openOptionArray0[3] = (OpenOption) linkOption0;
          openOptionArray0[4] = (OpenOption) linkOption0;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
          boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, openOptionArray0, fileVisitOptionArray0);
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.canWrite());
          assertTrue(mockFile0.isDirectory());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals("", mockFile0.getName());
          assertEquals("", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(boolean1);
          assertTrue(boolean1 == boolean0);
          assertEquals(0, fileVisitOptionArray0.length);
          assertEquals(7, linkOptionArray0.length);
          assertEquals(5, openOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1151)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1243)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:1055)
             // sun.reflect.GeneratedMethodAccessor269.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Bs", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'Bs'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      MockFile mockFile0 = new MockFile((File) null, "Cannot cache the value of an abstract method: ");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("Cannot cache the value of an abstract method: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Cannot cache the value of an abstract method: ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals("Cannot cache the value of an abstract method: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Cannot cache the value of an abstract method: ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(boolean0);
      assertEquals(5, linkOptionArray0.length);
      assertEquals(7, fileVisitOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path1, (Path) null, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
      assertNotSame(path1, path0);
      assertFalse(boolean1);
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path1, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileTime fileTime0 = FileTime.fromMillis((-582L));
      assertNotNull(fileTime0);
      
      // Undeclared exception!
      PathUtils.sizeOf(path0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertEquals(")", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertEquals("/)", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0);
      assertNotNull(magicNumberFileFilter0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      MockFile mockFile2 = new MockFile(mockFile0, "");
      assertNotNull(mockFile2);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(mockFile2.equals((Object)mockFile0));
      
      boolean boolean0 = magicNumberFileFilter0.accept((File) mockFile2, "");
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile2.isHidden());
      assertTrue(mockFile2.canWrite());
      assertTrue(mockFile2.canRead());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.isFile());
      assertEquals("", mockFile2.getName());
      assertTrue(mockFile2.isDirectory());
      assertNull(mockFile2.getParent());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals(0L, mockFile2.length());
      assertTrue(mockFile2.exists());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertEquals(1392409281320L, mockFile2.lastModified());
      assertEquals("/", mockFile2.toString());
      assertTrue(mockFile2.canExecute());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertFalse(boolean0);
      assertTrue(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(mockFile2.equals((Object)mockFile0));
      assertEquals(1, byteArray0.length);
      
      Path[] pathArray0 = PathUtils.filter(magicNumberFileFilter0, (Path[]) null);
      assertNotNull(pathArray0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, pathArray0.length);
      
      boolean boolean1 = PathUtils.isPosix(path0, (LinkOption[]) null);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertEquals(")", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertEquals("/)", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(boolean1);
      assertTrue(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      fileVisitOptionArray0[3] = fileVisitOption0;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption6;
      try { 
        PathUtils.walk(path0, magicNumberFileFilter0, 0, false, fileVisitOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertTrue(boolean0);
          assertEquals(0, linkOptionArray0.length);
          
          AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
          assertNotNull(andFileFilter0);
          
          Path[] pathArray0 = new Path[9];
          pathArray0[2] = path0;
          pathArray0[3] = path0;
          pathArray0[4] = path0;
          pathArray0[5] = path0;
          pathArray0[6] = path0;
          pathArray0[7] = path0;
          pathArray0[8] = path0;
          // Undeclared exception!
          try { 
            PathUtils.filter(andFileFilter0, pathArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:81)
             // org.apache.commons.io.filefilter.AndFileFilter.accept(AndFileFilter.java:152)
             // org.apache.commons.io.file.PathUtils.lambda$filterPaths$1(PathUtils.java:777)
             // java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
             // java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
             // java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
             // java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
             // java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
             // java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
             // java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
             // org.apache.commons.io.file.PathUtils.filterPaths(PathUtils.java:781)
             // org.apache.commons.io.file.PathUtils.filter(PathUtils.java:766)
             // sun.reflect.GeneratedMethodAccessor204.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      String[] stringArray0 = new String[0];
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      assertNotNull(wildcardFileFilter0);
      assertEquals(0, stringArray0.length);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(wildcardFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertNotNull(pathEqualsFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(pathEqualsFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(1, pathArray0.length);
      assertEquals(1, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      Path[] pathArray0 = new Path[6];
      Path[] pathArray1 = PathUtils.filter(andFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(6, pathArray0.length);
      assertEquals(0, pathArray1.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)34;
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0);
      assertNotNull(magicNumberFileFilter0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)7, (byte)96, (byte)47, (byte) (-111), (byte)19, (byte)34, (byte)34}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      MockFile mockFile0 = new MockFile("S`>bI:^cPSCpLx", "S`>bI:^cPSCpLx");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = magicNumberFileFilter0.accept((File) mockFile1, "S`>bI:^cPSCpLx");
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)7, (byte)96, (byte)47, (byte) (-111), (byte)19, (byte)34, (byte)34}, byteArray0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/S`>bI:^cPSCpLx/S`>bI:^cPSCpLx", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("S`>bI:^cPSCpLx", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/S`>bI:^cPSCpLx", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/S`>bI:^cPSCpLx", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/S`>bI:^cPSCpLx/S`>bI:^cPSCpLx", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertEquals("S`>bI:^cPSCpLx", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertFalse(boolean0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertEquals(8, byteArray0.length);
      
      Path[] pathArray0 = new Path[5];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      Path[] pathArray1 = PathUtils.filter(magicNumberFileFilter0, pathArray0);
      assertNotNull(pathArray1);
      assertNotSame(pathArray1, pathArray0);
      assertNotSame(pathArray0, pathArray1);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)7, (byte)96, (byte)47, (byte) (-111), (byte)19, (byte)34, (byte)34}, byteArray0);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, pathArray1.length);
      assertEquals(5, pathArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      long long0 = PathUtils.sizeOfDirectory(path0);
      assertNotSame(path0, path1);
      assertEquals(84003912L, long0);
      assertFalse(path0.equals((Object)path1));
      
      Instant instant0 = MockInstant.ofEpochSecond((-15L), (-15L));
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      assertEquals(ChronoUnit.MONTHS, chronoUnit0);
      
      // Undeclared exception!
      try { 
        MockInstant.plus(instant0, 2249L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Months
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(5, fileAttributeArray0.length);
      
      LinkOption[] linkOptionArray0 = null;
      LinkOption[] linkOptionArray1 = new LinkOption[8];
      linkOptionArray1[0] = linkOption0;
      linkOptionArray1[1] = linkOption0;
      linkOptionArray1[2] = linkOption0;
      linkOptionArray1[3] = linkOption0;
      linkOptionArray1[4] = linkOption0;
      linkOptionArray1[5] = linkOption0;
      linkOptionArray1[6] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[7] = linkOption1;
      boolean boolean1 = PathUtils.isDirectory((Path) null, linkOptionArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, linkOptionArray1.length);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      boolean boolean0 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(5, linkOptionArray0.length);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      boolean boolean1 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("h=)4zYDcOu'7d^_", "h=)4zYDcOu'7d^_");
      assertNotNull(mockFile0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 5);
      fileAttributeArray0[1] = fileAttributeArray0[0];
      fileAttributeArray0[2] = fileAttributeArray0[1];
      fileAttributeArray0[3] = fileAttributeArray0[2];
      fileAttributeArray0[4] = fileAttributeArray0[3];
      Path path1 = PathUtils.createParentDirectories(path0, (LinkOption) null, fileAttributeArray0);
      assertNull(path1);
      assertEquals(5, fileAttributeArray0.length);
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile("Bs");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Path path0 = mockFile1.toPath();
          assertNotNull(path0);
          assertNotSame(mockFile1, mockFile0);
          assertFalse(mockFile1.isDirectory());
          assertFalse(mockFile1.exists());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertNull(mockFile1.getParent());
          assertFalse(mockFile1.canRead());
          assertEquals("Bs", mockFile1.toString());
          assertFalse(mockFile1.isHidden());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertEquals(0L, mockFile1.lastModified());
          assertTrue(mockFile1.isFile());
          assertFalse(mockFile1.isAbsolute());
          assertFalse(mockFile1.canExecute());
          assertEquals("Bs", mockFile1.getName());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.canWrite());
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Duration duration0 = Duration.ofDays((-4095L));
          assertNotNull(duration0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"Bs\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      // Undeclared exception!
      PathUtils.sizeOfAsBigInteger(path0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(")", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0);
      assertNotNull(magicNumberFileFilter0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      MockFile mockFile2 = new MockFile(mockFile0, "Bs");
      assertNotNull(mockFile2);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      
      boolean boolean1 = magicNumberFileFilter0.accept((File) mockFile2, "Bs");
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.canWrite());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/Bs", mockFile2.toString());
      assertEquals(0L, mockFile2.length());
      assertEquals(0L, mockFile2.lastModified());
      assertFalse(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertFalse(mockFile2.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile2.getParent());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertEquals("Bs", mockFile2.getName());
      assertFalse(mockFile2.canExecute());
      assertFalse(mockFile2.canRead());
      assertTrue(mockFile2.isFile());
      assertFalse(boolean1);
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean2 = mockFile0.mkdir();
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(boolean2);
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Path[] pathArray0 = PathUtils.filter(magicNumberFileFilter0, (Path[]) null);
      assertNotNull(pathArray0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, pathArray0.length);
      
      FileTime fileTime0 = FileTime.fromMillis(0L);
      assertNotNull(fileTime0);
      
      boolean boolean3 = PathUtils.isNewer(path0, fileTime0, (LinkOption[]) null);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(")", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertFalse(boolean3);
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((byte)72, bigInteger0.byteValue());
      assertEquals((short) (-13240), bigInteger0.shortValue());
      
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("]g%SDu{:Q-y6zzKJP*<", "]g%SDu{:Q-y6zzKJP*<");
          assertNotNull(mockFile0);
          
          boolean boolean0 = mockFile0.setReadable(true);
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(boolean0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          boolean boolean1 = PathUtils.isDirectory(path0, linkOptionArray0);
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          assertEquals(6, linkOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:303)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption1, linkOption0);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertNotNull(linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[4];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      linkOptionArray1[0] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[1] = linkOption2;
      linkOptionArray1[2] = linkOption0;
      linkOptionArray1[3] = linkOption0;
      boolean boolean1 = PathUtils.isDirectory(path0, linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertTrue(boolean1);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, linkOptionArray1.length);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((byte)72, bigInteger0.byteValue());
      assertEquals((short) (-13240), bigInteger0.shortValue());
      
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray1, (OpenOption[]) linkOptionArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      // Undeclared exception!
      try { 
        PathUtils.isDirectory(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      StandardCopyOption standardCopyOption1 = StandardCopyOption.ATOMIC_MOVE;
      assertSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption1);
      
      // Undeclared exception!
      try { 
        PathUtils.isDirectory(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Path path1 = null;
      boolean boolean1 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, (Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CopyDirectoryVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0, (LinkOption[]) null, (OpenOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(5, fileAttributeArray0.length);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption1, linkOption0);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("s", "s");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/s/s", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.isFile());
          assertEquals("s", mockFile0.getName());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/s", mockFile0.getParent());
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 14);
          fileAttributeArray0[3] = fileAttributeArray0[2];
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, linkOptionArray0[0], fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/s\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = null;
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectoryAsBigInteger(path0);
      assertNotNull(counters_PathCounters0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " is not static");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      assertNull(aclFileAttributeView0);
      assertEquals(7, linkOptionArray0.length);
      
      DosFileAttributes dosFileAttributes0 = PathUtils.readDosFileAttributes(path0, linkOptionArray0);
      assertNotNull(dosFileAttributes0);
      assertEquals(7, linkOptionArray0.length);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      assertNull(path1);
      assertSame(linkOption0, linkOption5);
      assertSame(linkOption0, linkOption2);
      assertSame(linkOption0, linkOption4);
      assertSame(linkOption0, linkOption1);
      assertSame(linkOption0, linkOption6);
      assertSame(linkOption0, linkOption3);
      assertEquals(4, fileAttributeArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileTime fileTime0 = FileTime.fromMillis((-582L));
      assertNotNull(fileTime0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      linkOptionArray0[0] = linkOption0;
      boolean boolean2 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkOptionArray0.length);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      Path path2 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path2);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, path0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      
      boolean boolean1 = PathUtils.isNewer(path0, path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOfDirectory(path0);
      assertEquals(84003912L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      StandardCopyOption standardCopyOption1 = StandardCopyOption.ATOMIC_MOVE;
      assertNotSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption1);
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      Path path1 = PathUtils.current();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isNewer(path0, path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertFalse(boolean0);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertTrue(boolean1);
      assertTrue(path0.equals((Object)path1));
      assertTrue(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', ']'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("]]]]]]", charBuffer0.toString());
      assertEquals(6, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      try { 
        PathUtils.readString(path1, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readOsFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("hashCode");
      assertNotNull(wildcardFileFilter0);
      
      Path[] pathArray0 = PathUtils.filter(wildcardFileFilter0, (Path[]) null);
      assertNotNull(pathArray0);
      assertEquals(0, pathArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      assertEquals(StandardOpenOption.CREATE, standardOpenOption0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-46);
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0);
      assertNotNull(magicNumberFileFilter0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-46)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean1 = magicNumberFileFilter0.accept((File) mockFile0, "");
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-46)}, byteArray0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, byteArray0.length);
      
      Path[] pathArray0 = PathUtils.filter(magicNumberFileFilter0, (Path[]) null);
      assertNotNull(pathArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte)36, (byte) (-46)}, byteArray0);
      assertEquals(0, pathArray0.length);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      StandardCopyOption standardCopyOption1 = StandardCopyOption.ATOMIC_MOVE;
      assertNotSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption1);
      assertFalse(standardCopyOption1.equals((Object)standardCopyOption0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[1] = (CopyOption) null;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.REPLACE_EXISTING;
      assertSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption1);
      
      copyOptionArray0[2] = (CopyOption) standardCopyOption1;
      try { 
        PathUtils.copyFile(uRL0, path0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("e3Bddtt", "");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/e3Bddtt", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("e3Bddtt", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertNotSame(path0, path1);
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(boolean1 == boolean0);
      
      FileTime fileTime0 = FileTime.fromMillis(1L);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean2 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertNotSame(path0, path1);
      assertTrue(boolean2);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, linkOptionArray0.length);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectoryAsBigInteger(path0);
      assertNotNull(counters_PathCounters0);
      assertNotSame(path0, path1);
      assertFalse(path0.equals((Object)path1));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(6, linkOptionArray0.length);
      
      LinkOption[] linkOptionArray1 = PathUtils.noFollowLinkOptionArray();
      assertNotNull(linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertEquals(1, linkOptionArray1.length);
      
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (FileTime) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.attribute.FileTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[8];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[7] = linkOption7;
          // Undeclared exception!
          try { 
            PathUtils.readOsFileAttributes(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1151)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1243)
             // org.apache.commons.io.file.PathUtils.readOsFileAttributes(PathUtils.java:1229)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.directoryContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      
      try { 
        PathUtils.isNewer(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]gu{:Q-y6zzKJP*<", "oFT");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*</oFT", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("oFT", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      
      try { 
        PathUtils.isNewer(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      MockFile mockFile0 = new MockFile(",Hm7W~a_rYW=&<4J", ",Hm7W~a_rYW=&<4J");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(",Hm7W~a_rYW=&<4J", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,Hm7W~a_rYW=&<4J/,Hm7W~a_rYW=&<4J", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,Hm7W~a_rYW=&<4J", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      boolean boolean0 = PathUtils.isPosix(path0, (LinkOption[]) null);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(",Hm7W~a_rYW=&<4J", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,Hm7W~a_rYW=&<4J/,Hm7W~a_rYW=&<4J", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/,Hm7W~a_rYW=&<4J", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(false);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(boolean0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path1, path0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path1, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      assertEquals(StandardOpenOption.CREATE, standardOpenOption0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertTrue(path1.equals((Object)path0));
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wHvn+#&}g,BJkS`O", "wHvn+#&}g,BJkS`O");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/wHvn+#&}g,BJkS`O", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/wHvn+#&}g,BJkS`O/wHvn+#&}g,BJkS`O", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("wHvn+#&}g,BJkS`O", mockFile0.getName());
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, path0, linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/wHvn+#&}g,BJkS`O/wHvn+#&}g,BJkS`O'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4,c%j[1L$:*G3:luD", "package for Handler (%s) must have a parent package");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/4,c%j[1L$:*G3:luD/package for Handler (%s) must have a parent package", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/4,c%j[1L$:*G3:luD", mockFile0.getParent());
      assertEquals("package for Handler (%s) must have a parent package", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      try { 
        PathUtils.newDirectoryStream(path0, andFileFilter0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0, linkOptionArray0);
          assertNotNull(basicFileAttributes0);
          assertEquals(5, linkOptionArray0.length);
          
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          fileAttributeArray0[7] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, linkOption5, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(6, fileVisitOptionArray0.length);
      assertTrue(set0.contains(fileVisitOption3));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertTrue(boolean0);
      assertEquals(4, linkOptionArray0.length);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(84003912L, long0);
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked((Path) null);
      assertNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-28);
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertNull(basicFileAttributes0);
      assertEquals(1, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          boolean boolean0 = PathUtils.isOlder(path0, path0);
          assertFalse(boolean0);
          
          List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
          assertNull(list0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          boolean boolean1 = PathUtils.isOlder(path0, 1720L, linkOptionArray0);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          assertEquals(7, linkOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1349)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      boolean boolean1 = PathUtils.isRegularFile((Path) null, (LinkOption[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, 2994L, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          
          boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
          assertFalse(boolean2);
          assertTrue(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          
          MockFile mockFile0 = new MockFile("", "");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, "collector");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Path path0 = mockFile1.toPath();
          assertNotNull(path0);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canExecute());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isHidden());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.canWrite());
          assertFalse(mockFile1.isDirectory());
          assertEquals("collector", mockFile1.getName());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertFalse(mockFile1.exists());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.isHidden());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertTrue(mockFile1.isAbsolute());
          assertTrue(mockFile1.isFile());
          assertFalse(mockFile1.canWrite());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.canRead());
          assertFalse(mockFile1.canExecute());
          assertEquals("/", mockFile1.getParent());
          assertEquals("/collector", mockFile1.toString());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          linkOptionArray0[0] = linkOption0;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
          fileVisitOptionArray0[0] = fileVisitOption1;
          fileVisitOptionArray0[1] = fileVisitOption1;
          fileVisitOptionArray0[2] = fileVisitOption1;
          fileVisitOptionArray0[3] = fileVisitOption0;
          fileVisitOptionArray0[4] = fileVisitOption1;
          fileVisitOptionArray0[5] = fileVisitOption0;
          fileVisitOptionArray0[6] = fileVisitOption1;
          fileVisitOptionArray0[7] = fileVisitOption1;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/collector\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:541)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:447)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("VM2fv", "VM2fv");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv/VM2fv", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("VM2fv", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      
      URL uRL1 = MockURL.URL(uRL0, "=Lyc[y%q^V>)z+");
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getHost());
      assertFalse(uRL1.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL1, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          MockFile mockFile0 = new MockFile("File parameter '", "File parameter '");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, ")");
          assertNotNull(mockFile1);
          assertFalse(mockFile1.equals((Object)mockFile0));
          
          Path path1 = mockFile1.toPath();
          assertNotNull(path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(path1, path0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/File parameter '", mockFile0.getParent());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/File parameter '/File parameter '", mockFile0.toString());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals("File parameter '", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile1.canRead());
          assertFalse(mockFile1.canExecute());
          assertFalse(mockFile1.canWrite());
          assertTrue(mockFile1.isAbsolute());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/File parameter '/File parameter '", mockFile1.getParent());
          assertFalse(mockFile1.isHidden());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.exists());
          assertEquals(")", mockFile1.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/File parameter '/File parameter '/)", mockFile1.toString());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.lastModified());
          assertTrue(mockFile1.isFile());
          assertEquals(0L, mockFile1.length());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(path1.equals((Object)path0));
          
          boolean boolean0 = false;
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          CopyOption[] copyOptionArray0 = new CopyOption[4];
          copyOptionArray0[0] = (CopyOption) linkOption2;
          copyOptionArray0[1] = (CopyOption) linkOption0;
          copyOptionArray0[2] = (CopyOption) linkOption2;
          copyOptionArray0[3] = (CopyOption) linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path1, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/)\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:303)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.WRITE;
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertEquals(StandardOpenOption.WRITE, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      openOptionArray0[3] = (OpenOption) linkOption0;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertSame(standardOpenOption3, standardOpenOption1);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption3);
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      
      openOptionArray0[4] = (OpenOption) standardOpenOption3;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      fileVisitOptionArray0[3] = fileVisitOption0;
      fileVisitOptionArray0[4] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, openOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
      assertEquals(6, openOptionArray0.length);
      assertEquals(5, fileVisitOptionArray0.length);
      assertEquals(8, linkOptionArray0.length);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL0, uRL1);
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("file", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRL1.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL1, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[13];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(13, charBuffer0.capacity());
      assertEquals(13, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charArray0.length);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot move directory: ");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Cannot move directory: ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Cannot move directory: ", mockFile0.getName());
      
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "collector");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("collector", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canExecute());
      assertEquals("/collector", mockFile1.toString());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canWrite());
      assertEquals("/", mockFile1.getParent());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/collector'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (-309L), linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]gu{:Q-y6zzKJP*<");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.exists());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("VM2fv", "VM2fv");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("VM2fv", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VM2fv/VM2fv", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("Unexpected mismatch.", "net.bytebuddy.build.RepeatedAnnotationPlugin");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch./net.bytebuddy.build.RepeatedAnnotationPlugin", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("net.bytebuddy.build.RepeatedAnnotationPlugin", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch.", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch./net.bytebuddy.build.RepeatedAnnotationPlugin", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("net.bytebuddy.build.RepeatedAnnotationPlugin", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch.", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path1, path0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch./net.bytebuddy.build.RepeatedAnnotationPlugin", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("net.bytebuddy.build.RepeatedAnnotationPlugin", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Unexpected mismatch.", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]gu{:Q-y6zzKJP*<", "]gu{:Q-y6zzKJP*<");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*</]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*</]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*</]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]gu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption4;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption3;
      linkOptionArray0[7] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      Instant instant0 = MockInstant.ofEpochMilli(2726L);
      assertNotNull(instant0);
      
      boolean boolean0 = PathUtils.isNewer(path0, instant0, linkOptionArray0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      FileTime fileTime0 = FileTime.fromMillis((-39L));
      assertNotNull(fileTime0);
      
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean0);
      assertEquals(2, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      OpenOption[] openOptionArray0 = new OpenOption[1];
      openOptionArray0[0] = (OpenOption) linkOptionArray0[2];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, openOptionArray0, (FileVisitOption[]) null);
      assertTrue(boolean0);
      assertEquals(3, linkOptionArray0.length);
      assertEquals(1, openOptionArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        PathUtils.readString((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.exists());
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path1, (Path) null);
      assertNotSame(path1, path0);
      assertFalse(boolean1);
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      boolean boolean2 = PathUtils.isEmpty(path1);
      assertNotSame(path1, path0);
      assertFalse(boolean2);
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      MockFile mockFile0 = new MockFile("R9&j'z)^&^", ".");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(".", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/R9&j'z)^&^", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/R9&j'z)^&^/.", mockFile0.toString());
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(".", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/R9&j'z)^&^", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/R9&j'z)^&^/.", mockFile0.toString());
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(".", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/R9&j'z)^&^", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/R9&j'z)^&^/.", mockFile0.toString());
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption1, linkOption0);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption1;
      linkOptionArray0[7] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.isPosix((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray0 = PathUtils.NOFOLLOW_LINK_OPTION_ARRAY;
      assertNotNull(linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertSame(standardDeleteOption1, standardDeleteOption0);
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
          StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertSame(standardDeleteOption2, standardDeleteOption1);
          assertSame(standardDeleteOption2, standardDeleteOption0);
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
          
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1331)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1444)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:157)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 12);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(12, fileAttributeArray0.length);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:458)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-13240), bigInteger0.shortValue());
      assertEquals((byte)72, bigInteger0.byteValue());
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean0 = PathUtils.isNewer(path1, path0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertTrue(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, (-309L), linkOptionArray0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(")", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertFalse(boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean0 = PathUtils.isNewer(path0, (-309L), linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(4, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = ',';
      charArray0[2] = 'r';
      charArray0[3] = 'w';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'A', ',', 'r', 'w'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("A,rw", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charArray0.length);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(boolean0);
      
      Path path1 = mockFile0.toPath();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path0);
      assertNotSame(path0, path1);
      assertTrue(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      LinkOption[] linkOptionArray0 = new LinkOption[11];
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      AndFileFilter andFileFilter0 = new AndFileFilter();
      assertNotNull(andFileFilter0);
      
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals(0, linkOptionArray0.length);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      linkOptionArray0[0] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("Bs", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      MockFile mockFile0 = new MockFile("czdt", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/czdt", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("czdt", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/czdt'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
          assertNotNull(notFileFilter0);
          
          DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) notFileFilter0);
          assertNotNull(delegateFileFilter0);
          
          FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
          FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          DosFileAttributeView dosFileAttributeView0 = PathUtils.getDosFileAttributeView(path0, linkOptionArray0);
          assertNotNull(dosFileAttributeView0);
          assertEquals(3, linkOptionArray0.length);
          
          boolean boolean0 = PathUtils.isEmpty(path0);
          assertFalse(boolean0);
          
          LinkOption[] linkOptionArray1 = new LinkOption[4];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption1;
          linkOptionArray1[1] = linkOption2;
          linkOptionArray1[2] = linkOption2;
          linkOptionArray1[3] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1331)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1444)
             // sun.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(path0, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:303)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URL uRL0 = null;
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[0] = (CopyOption) linkOption0;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[2] = (CopyOption) null;
      LinkOption linkOption2 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[3] = (CopyOption) null;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.REPLACE_EXISTING;
      assertSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption1);
      
      copyOptionArray0[4] = (CopyOption) standardCopyOption1;
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StringWriter stringWriter0 = new StringWriter(436);
          assertNotNull(stringWriter0);
          assertEquals("", stringWriter0.toString());
          
          StringBuffer stringBuffer0 = stringWriter0.getBuffer();
          assertNotNull(stringBuffer0);
          assertEquals("", stringWriter0.toString());
          assertEquals("", stringBuffer0.toString());
          assertEquals(0, stringBuffer0.length());
          
          OpenOption[] openOptionArray0 = new OpenOption[6];
          StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
          assertEquals(StandardOpenOption.READ, standardOpenOption0);
          
          openOptionArray0[0] = (OpenOption) standardOpenOption0;
          StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
          assertNotSame(standardOpenOption1, standardOpenOption0);
          assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
          assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
          
          openOptionArray0[1] = (OpenOption) standardOpenOption1;
          StandardOpenOption standardOpenOption2 = StandardOpenOption.WRITE;
          assertNotSame(standardOpenOption2, standardOpenOption0);
          assertNotSame(standardOpenOption2, standardOpenOption1);
          assertEquals(StandardOpenOption.WRITE, standardOpenOption2);
          assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
          assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          StandardOpenOption standardOpenOption3 = StandardOpenOption.WRITE;
          assertSame(standardOpenOption3, standardOpenOption2);
          assertNotSame(standardOpenOption3, standardOpenOption0);
          assertNotSame(standardOpenOption3, standardOpenOption1);
          assertEquals(StandardOpenOption.WRITE, standardOpenOption3);
          assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
          assertFalse(standardOpenOption3.equals((Object)standardOpenOption1));
          
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          assertSame(linkOption1, linkOption0);
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption2 = PathUtils.NULL_LINK_OPTION;
          StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
          assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
          
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          assertSame(linkOption3, linkOption0);
          assertSame(linkOption3, linkOption1);
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption3);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:170)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:271)
             // sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
          assertTrue(boolean0);
          
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[3] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption3;
      PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
      assertNull(posixFileAttributes0);
      assertEquals(5, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          AndFileFilter andFileFilter0 = new AndFileFilter();
          assertNotNull(andFileFilter0);
          
          boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertFalse(boolean0);
          assertEquals(0, linkOptionArray0.length);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:488)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:488)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:447)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "F v");
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.setReadable(true);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("F v", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/F v", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("F v", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/F v", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      boolean boolean2 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption[] linkOptionArray1 = LinkOption.values();
      assertNotNull(linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertEquals(1, linkOptionArray1.length);
      
      linkOptionArray0[0] = linkOption0;
      boolean boolean3 = PathUtils.isPosix(path0, linkOptionArray0);
      assertNotSame(linkOptionArray0, linkOptionArray1);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("F v", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/F v", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean3);
      assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StringWriter stringWriter0 = new StringWriter(436);
          assertNotNull(stringWriter0);
          assertEquals("", stringWriter0.toString());
          
          StringBuffer stringBuffer0 = stringWriter0.getBuffer();
          assertNotNull(stringBuffer0);
          assertEquals("", stringWriter0.toString());
          assertEquals("", stringBuffer0.toString());
          assertEquals(0, stringBuffer0.length());
          
          OpenOption[] openOptionArray0 = new OpenOption[6];
          StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
          assertEquals(StandardOpenOption.READ, standardOpenOption0);
          
          openOptionArray0[0] = (OpenOption) standardOpenOption0;
          StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
          assertNotSame(standardOpenOption1, standardOpenOption0);
          assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
          assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
          
          openOptionArray0[1] = (OpenOption) standardOpenOption1;
          StandardOpenOption standardOpenOption2 = StandardOpenOption.WRITE;
          assertNotSame(standardOpenOption2, standardOpenOption0);
          assertNotSame(standardOpenOption2, standardOpenOption1);
          assertEquals(StandardOpenOption.WRITE, standardOpenOption2);
          assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
          assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          StandardOpenOption standardOpenOption3 = StandardOpenOption.WRITE;
          assertSame(standardOpenOption3, standardOpenOption2);
          assertNotSame(standardOpenOption3, standardOpenOption1);
          assertNotSame(standardOpenOption3, standardOpenOption0);
          assertEquals(StandardOpenOption.WRITE, standardOpenOption3);
          assertFalse(standardOpenOption3.equals((Object)standardOpenOption1));
          assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
          
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          assertSame(linkOption1, linkOption0);
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption1;
          linkOptionArray0[2] = linkOption0;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption2;
          linkOptionArray0[4] = linkOption1;
          linkOptionArray0[5] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1151)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1243)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:1055)
             // sun.reflect.GeneratedMethodAccessor269.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertNotNull(linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertEquals("Bs", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:541)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:515)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:402)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          
          boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          assertFalse(boolean2);
          assertTrue(boolean2 == boolean1);
          assertTrue(boolean2 == boolean0);
          
          MockFile mockFile0 = new MockFile("czdt", "");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/czdt", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isFile());
          assertEquals("czdt", mockFile0.getName());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean3 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/czdt", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isFile());
          assertEquals("czdt", mockFile0.getName());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
          assertFalse(boolean3);
          assertTrue(boolean3 == boolean1);
          assertTrue(boolean3 == boolean0);
          assertTrue(boolean3 == boolean2);
          assertEquals(0, linkOptionArray0.length);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/czdt\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:541)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:515)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:402)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.WRITE;
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.WRITE, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.WRITE;
      assertSame(standardOpenOption3, standardOpenOption2);
      assertNotSame(standardOpenOption3, standardOpenOption1);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertEquals(StandardOpenOption.WRITE, standardOpenOption3);
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption1, linkOption0);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption1;
      linkOptionArray0[5] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream(path0, linkOptionArray0, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      boolean boolean1 = PathUtils.isEmpty(path0);
      assertEquals("/", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (Instant) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOf((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(list0, iOCase0);
      assertNotNull(wildcardFileFilter0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream((Path) null, wildcardFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter((PathVisitor) null);
      assertNotNull(pathVisitorFileFilter0);
      
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, pathVisitorFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      assertEquals(StandardOpenOption.CREATE, standardOpenOption0);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.WRITE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.WRITE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[2] = (OpenOption) standardOpenOption1;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      openOptionArray0[3] = (OpenOption) linkOption0;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE;
      assertSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      
      openOptionArray0[4] = (OpenOption) standardOpenOption2;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      fileVisitOptionArray0[0] = fileVisitOption2;
      fileVisitOptionArray0[1] = fileVisitOption0;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption3;
      fileVisitOptionArray0[3] = fileVisitOption1;
      fileVisitOptionArray0[4] = fileVisitOption1;
      fileVisitOptionArray0[5] = fileVisitOption0;
      Stream<Path> stream0 = PathUtils.walk(path0, (PathFilter) null, 436, false, fileVisitOptionArray0);
      assertNotNull(stream0);
      assertEquals(6, fileVisitOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream(path0, (PathFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(84003912L, long0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(7, fileAttributeArray0.length);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:243)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:230)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      boolean boolean1 = PathUtils.isRegularFile((Path) null, (LinkOption[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = mockFile0.mkdirs();
      assertNotSame(mockFile0, mockFile1);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals(")", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      boolean boolean1 = mockFile1.setReadable(true);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals(")", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(boolean1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      
      linkOptionArray0[3] = linkOption3;
      boolean boolean2 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("Bs", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals(")", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(boolean2);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.TERMINATE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).visitFile(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 0);
      assertNotNull(simpleFileVisitor1);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      // Undeclared exception!
      try { 
        LinkOption.valueOf("org.apache.commons.io.IOUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.org.apache.commons.io.IOUtils
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      boolean boolean1 = PathUtils.isOlder(path0, 0L, linkOptionArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]gu{:Q-y6zzKJP*<");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("]gu{:Q-y6zzKJP*<", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(boolean0);
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FileTime fileTime0 = FileTime.from(833L, timeUnit0);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertTrue(boolean0);
      assertEquals(7, linkOptionArray0.length);
      
      boolean boolean1 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[4];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      linkOptionArray1[0] = linkOption1;
      linkOptionArray1[1] = linkOption2;
      linkOptionArray1[2] = linkOption5;
      linkOptionArray1[3] = linkOption2;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      boolean boolean2 = PathUtils.directoryAndFileContentEquals((Path) null, path0, linkOptionArray1, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertNotSame(linkOptionArray0, linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      assertFalse(boolean2);
      assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, linkOptionArray0.length);
      assertEquals(4, linkOptionArray1.length);
      assertEquals(2, fileVisitOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]g%SDu{:Q-y6zzKJP*<", "]g%SDu{:Q-y6zzKJP*<");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      
      Path path1 = PathUtils.getTempDirectory();
      assertNotNull(path1);
      assertNotSame(path1, path0);
      assertFalse(path1.equals((Object)path0));
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path1);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<");
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      linkOptionArray0[0] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      boolean boolean3 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean3);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(1, linkOptionArray0.length);
      assertEquals(1, fileVisitOptionArray0.length);
      
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("]g%SDu{:Q-y6zzKJP*<", 7069L);
      assertNotNull(magicNumberFileFilter0);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption4;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption3;
      linkOptionArray0[7] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, openOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
      assertEquals(6, openOptionArray0.length);
      assertEquals(4, fileVisitOptionArray0.length);
      assertEquals(8, linkOptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r5O.^,jn&;--5S;");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "r5O.^,jn&;--5S;");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Path path0 = mockFile1.toPath();
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("r5O.^,jn&;--5S;", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("r5O.^,jn&;--5S;", mockFile0.getName());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r5O.^,jn&;--5S;/r5O.^,jn&;--5S;", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r5O.^,jn&;--5S;", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals("r5O.^,jn&;--5S;", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      assertNotNull(posixFileAttributeView0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("r5O.^,jn&;--5S;", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("r5O.^,jn&;--5S;", mockFile0.getName());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r5O.^,jn&;--5S;/r5O.^,jn&;--5S;", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r5O.^,jn&;--5S;", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals("r5O.^,jn&;--5S;", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(7, linkOptionArray0.length);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("r5O.^,jn&;--5S;", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("r5O.^,jn&;--5S;", mockFile0.getName());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r5O.^,jn&;--5S;/r5O.^,jn&;--5S;", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r5O.^,jn&;--5S;", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertEquals("r5O.^,jn&;--5S;", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(7, linkOptionArray0.length);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        MockURI.URI("r5O.^,jn&;--5S;", "r5O.^,jn&;--5S;", "", "", "File parameter '");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 4: r5O.^,jn&;--5S;://r5O.%5E,jn&;--5S;?#File%20parameter%20'
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      IntStream intStream0 = charBuffer0.codePoints();
      assertNotNull(intStream0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.readString((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readString((Path) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(84003912L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      try { 
        PathUtils.readString(path0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly((Path) null, true, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Path path0 = null;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
      assertNull(posixFileAttributes0);
      assertEquals(5, linkOptionArray0.length);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor((Path) null, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, path0, set0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).visitFile(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Bs", "Bs");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Bs", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Bs", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, charBuffer0, charset0, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(436);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.WRITE;
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.WRITE, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      openOptionArray0[3] = (OpenOption) linkOption0;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.CREATE;
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertSame(standardOpenOption3, standardOpenOption1);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption3);
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      
      openOptionArray0[4] = (OpenOption) standardOpenOption3;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.CREATE;
      assertSame(standardOpenOption4, standardOpenOption1);
      assertNotSame(standardOpenOption4, standardOpenOption2);
      assertSame(standardOpenOption4, standardOpenOption3);
      assertNotSame(standardOpenOption4, standardOpenOption0);
      assertEquals(StandardOpenOption.CREATE, standardOpenOption4);
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption0));
      
      openOptionArray0[5] = (OpenOption) standardOpenOption4;
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, stringBuffer0, (Charset) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (Instant) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("znIMl", "", 882, "znIMl", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("znIMl", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(882, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals(":882", uRL0.getAuthority());
      assertEquals("zniml", uRL0.getProtocol());
      assertEquals("znIMl", uRL0.getFile());
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertNull(path1);
      assertEquals(7, fileAttributeArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      OpenOption[] openOptionArray0 = new OpenOption[3];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE_NEW;
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.READ;
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.READ, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.APPEND;
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.APPEND, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      // Undeclared exception!
      try { 
        PathUtils.writeString((Path) null, "", charset0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        PathUtils.writeString((Path) null, charBuffer0, charset0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, (LinkOption[]) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("]g%SDu{:Q-y6zzKJP*<", "]g%SDu{:Q-y6zzKJP*<");
          assertNotNull(mockFile0);
          
          boolean boolean0 = mockFile0.setReadable(true);
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
          assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertFalse(boolean0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
          assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          
          Path path1 = PathUtils.getTempDirectory();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          boolean boolean1 = PathUtils.directoryContentEquals(path1, path0);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*<", mockFile0.getParent());
          assertEquals("]g%SDu{:Q-y6zzKJP*<", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/]g%SDu{:Q-y6zzKJP*</]g%SDu{:Q-y6zzKJP*<", mockFile0.toString());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertFalse(boolean1);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertTrue(boolean1 == boolean0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:402)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' does not exist: '", "net.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '/net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '/net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '/net.bytebuddy.build.Plugin$Factory$UsingReflection", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "v pl,wVbno_jh_hS");
          assertNotNull(mockFile0);
          
          boolean boolean0 = mockFile0.setReadable(true);
          assertFalse(mockFile0.isHidden());
          assertEquals("/", mockFile0.getParent());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isFile());
          assertEquals("/v pl,wVbno_jh_hS", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertEquals("v pl,wVbno_jh_hS", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(boolean0);
          
          Path path0 = mockFile0.toPath();
          assertNotNull(path0);
          assertFalse(mockFile0.isHidden());
          assertEquals("/", mockFile0.getParent());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isFile());
          assertEquals("/v pl,wVbno_jh_hS", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.exists());
          assertEquals("v pl,wVbno_jh_hS", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          
          Path path1 = PathUtils.getTempDirectory();
          assertNotNull(path1);
          assertNotSame(path1, path0);
          assertFalse(path1.equals((Object)path0));
          
          boolean boolean1 = PathUtils.directoryContentEquals((Path) null, path1);
          assertNotSame(path1, path0);
          assertFalse(boolean1);
          assertFalse(path1.equals((Object)path0));
          assertTrue(boolean1 == boolean0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("v pl,wVbno_jh_hS", 1152921504606846976L);
          assertNotNull(magicNumberFileFilter0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:402)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "net.bytebuddy.build.Plugin$Factory$UsingReflection";
      MockFile mockFile0 = new MockFile("' does not exist: '", "net.bytebuddy.build.Plugin$Factory$UsingReflection");
      Path path0 = mockFile0.toPath();
      PathUtils.directoryContentEquals(path0, path0);
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[5];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("t1x)E~zt_~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.t1x)E~zt_~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:170)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:271)
             // sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          MockFile mockFile1 = new MockFile(mockFile0, ")");
          Path path0 = mockFile1.toPath();
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption0;
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 8);
          FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          fileAttributeArray0[6] = fileAttribute0;
          fileAttributeArray0[7] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, linkOptionArray0[0], fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:372)
             // sun.reflect.GeneratedMethodAccessor227.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Path path0 = PathUtils.current();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      OrFileFilter orFileFilter0 = new OrFileFilter(trueFileFilter0, trueFileFilter0);
      List<IOFileFilter> list0 = orFileFilter0.getFileFilters();
      OrFileFilter orFileFilter1 = new OrFileFilter(list0);
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, orFileFilter1, (-2268), false, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Bs", "Bs");
          MockFile mockFile1 = new MockFile(mockFile0, ")");
          Path path0 = mockFile1.toPath();
          boolean boolean0 = false;
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/Bs/Bs/)\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1331)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1444)
             // sun.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Charset.defaultCharset();
      PathUtils.isRegularFile((Path) null, linkOptionArray0);
      PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1560)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:474)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1680)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:473)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:424)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:402)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Path path0 = PathUtils.current();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FilenameFilter) notFileFilter0);
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      PathUtils.walk(path0, delegateFileFilter0, 304, false, fileVisitOptionArray0);
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<BasicFileAttributes> fileAttribute0 = (FileAttribute<BasicFileAttributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1331)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1444)
             // sun.reflect.GeneratedMethodAccessor209.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      Path[] pathArray0 = new Path[2];
      PathUtils.filter(andFileFilter0, pathArray0);
      Path path0 = PathUtils.getTempDirectory();
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      Stream<Path> stream0 = PathUtils.walk(path0, andFileFilter0, 2, false, fileVisitOptionArray0);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-3083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1349)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1349)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
          Duration duration0 = chronoUnit0.getDuration();
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          linkOptionArray0[0] = linkOption1;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          linkOptionArray0[3] = linkOption1;
          PathUtils.waitFor(path0, duration0, linkOptionArray0);
          Path path1 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.shouldAllThrowIOExceptions();
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // sun.reflect.GeneratedMethodAccessor201.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
