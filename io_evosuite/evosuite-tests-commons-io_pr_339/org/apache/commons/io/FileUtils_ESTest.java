/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:15:23 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SymbolicLinkFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          assertNotNull(file0);
          assertEquals(0L, file0.length());
          assertTrue(file0.isDirectory());
          assertTrue(file0.isAbsolute());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("azureuser", file0.getName());
          assertFalse(file0.isFile());
          assertTrue(file0.canExecute());
          assertEquals("/home", file0.getParent());
          assertEquals("/home/azureuser", file0.toString());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          
          // Undeclared exception!
          try { 
            FileUtils.write(file0, (CharSequence) "/tmp", (String) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2465)
             // org.apache.commons.io.FileUtils.writeStringToFile(FileUtils.java:3554)
             // org.apache.commons.io.FileUtils.write(FileUtils.java:3249)
             // org.apache.commons.io.FileUtils.write(FileUtils.java:3282)
             // org.apache.commons.io.FileUtils.write(FileUtils.java:3263)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("%-3c&o*");
      assertNotNull(string0);
      assertEquals("\uFFFDc&o*", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = FileUtils.byteCountToDisplaySize((Number) bigInteger0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertEquals("-452984832 bytes", string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) null, true);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(1755767590862L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.FileUtils", "Cannot catch exception during constructor call for ");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0, true);
      assertNotNull(fileOutputStream0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      
      FileUtils.forceMkdirParent(file0);
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.current();
          assertNotNull(file0);
          assertEquals(25231536128L, file0.getUsableSpace());
          assertEquals(20480L, file0.length());
          assertFalse(file0.isAbsolute());
          assertTrue(file0.isDirectory());
          assertEquals(30084825088L, file0.getTotalSpace());
          assertTrue(file0.isHidden());
          assertEquals(25248313344L, file0.getFreeSpace());
          assertEquals(1755979851572L, file0.lastModified());
          assertFalse(file0.isFile());
          assertEquals(".", file0.getName());
          assertEquals(".", file0.toString());
          assertTrue(file0.canRead());
          assertNull(file0.getParent());
          assertTrue(file0.exists());
          
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
          assertEquals(25231536128L, file0.getUsableSpace());
          assertEquals(20480L, file0.length());
          assertFalse(file0.isAbsolute());
          assertTrue(file0.isDirectory());
          assertEquals(30084825088L, file0.getTotalSpace());
          assertTrue(file0.isHidden());
          assertEquals(25248313344L, file0.getFreeSpace());
          assertEquals(1755979851572L, file0.lastModified());
          assertFalse(file0.isFile());
          assertEquals(".", file0.getName());
          assertEquals(".", file0.toString());
          assertTrue(file0.canRead());
          assertNull(file0.getParent());
          assertTrue(file0.exists());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertEquals(20480L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(".", file0.getName());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.isHidden());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(".", file0.toString());
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(25231536128L, file0.getUsableSpace());
      
      String[] stringArray0 = new String[0];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      assertNotNull(prefixFileFilter0);
      assertEquals(0, stringArray0.length);
      
      File file1 = FileUtils.getUserDirectory();
      assertNotNull(file1);
      assertEquals("/home/azureuser", file1.toString());
      assertFalse(file1.isFile());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals("/home", file1.getParent());
      
      FileUtils.copyDirectory(file0, file1, (FileFilter) prefixFileFilter0);
      assertEquals(0, stringArray0.length);
      assertEquals(20480L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(".", file0.getName());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.isHidden());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(".", file0.toString());
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file1.toString());
      assertFalse(file1.isFile());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isDirectory());
      assertEquals(1755979851572L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals("/home", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertNotNull(uRLArray0);
      assertEquals(0, fileArray0.length);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      
      URL uRL0 = file0.toURL();
      assertNotNull(uRL0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      
      File file1 = FileUtils.toFile(uRL0);
      assertNotNull(file1);
      assertTrue(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home", file1.getParent());
      assertTrue(file1.exists());
      assertEquals("/home/azureuser", file1.toString());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertFalse(file1.isFile());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
      assertNotNull(bigInteger0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals((byte) (-23), bigInteger0.byteValue());
      assertEquals((short) (-25879), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(".", file0.toString());
      assertTrue(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(20480L, file0.length());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(83466985L, long0);
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(".", file0.toString());
      assertTrue(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(20480L, file0.length());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertNull(file0.getParent());
      assertTrue(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals(20480L, file0.length());
      assertEquals(".", file0.getName());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(".", file0.toString());
      assertEquals(30084825088L, file0.getTotalSpace());
      
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(83466985L, long0);
      assertNull(file0.getParent());
      assertTrue(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals(20480L, file0.length());
      assertEquals(".", file0.getName());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(".", file0.toString());
      assertEquals(30084825088L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srcFile");
      assertNotNull(mockFile0);
      
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("srcFile", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("srcFile", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile("'8>lZXW", "_5_nj*");
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("'8>lZXW0_5_nj*", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/'8>lZXW0_5_nj*", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      assertNotNull(fileInputStream0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("'8>lZXW0_5_nj*", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/'8>lZXW0_5_nj*", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      assertNotNull(hiddenFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, hiddenFileFilter0, hiddenFileFilter0);
      assertNotNull(collection0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      
      IOCase iOCase0 = IOCase.SYSTEM;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("destination", iOCase0);
      assertNotNull(wildcardFileFilter0);
      
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) wildcardFileFilter0, (IOFileFilter) wildcardFileFilter0);
      assertNotNull(collection0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertEquals(20480L, file0.length());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertEquals(".", file0.toString());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.isHidden());
      
      LineIterator lineIterator0 = FileUtils.lineIterator(file0, (String) null);
      assertNotNull(lineIterator0);
      assertEquals(20480L, file0.length());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertEquals(".", file0.toString());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertNotNull(lineIterator0);
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertEquals(1755767590862L, long0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      
      long long0 = FileUtils.lastModified(file0);
      assertEquals(1755767590862L, long0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertTrue(file0.isHidden());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(".", file0.toString());
      assertTrue(file0.exists());
      assertEquals(20480L, file0.length());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SIBLINGS;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      assertNotNull(symbolicLinkFileFilter0);
      
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, symbolicLinkFileFilter0, symbolicLinkFileFilter0);
      assertNotNull(iterator0);
      assertTrue(file0.isHidden());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(".", file0.toString());
      assertTrue(file0.exists());
      assertEquals(20480L, file0.length());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (String[]) null, true);
      assertNotNull(iterator0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(instant0);
      assertNotNull(ageFileFilter0);
      
      Path path0 = file0.toPath();
      assertNotNull(path0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      assertNotNull(pathEqualsFileFilter0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.or(ageFileFilter0);
      assertNotNull(iOFileFilter0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) ageFileFilter0, iOFileFilter0);
      assertNotNull(iterator0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      
      MockDate mockDate0 = new MockDate(400, 1082, 1082, 298, 1082);
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Sat Feb 27 04:02:00 GMT 2393", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q$,8MhR*JF\"A\b(");
      assertNotNull(mockFile0);
      
      Instant instant0 = MockInstant.ofEpochSecond(46L);
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, instant0);
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Q$,8MhR*JF\"A\b(", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Q$,8MhR*JF\"A\b(", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      assertNotNull(fileTime0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertFalse(boolean0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      
      File file1 = FileUtils.getTempDirectory();
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file1, file0);
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertEquals("/", file1.getParent());
      assertFalse(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertEquals("tmp", file1.getName());
      assertEquals("/tmp", file1.toString());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      
      boolean boolean0 = FileUtils.isFileOlder(file0, file1);
      assertTrue(boolean0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertEquals("/", file1.getParent());
      assertFalse(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertEquals("tmp", file1.getName());
      assertEquals("/tmp", file1.toString());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      
      boolean boolean0 = FileUtils.isFileOlder(file0, 357L);
      assertFalse(boolean0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertEquals(".", file0.toString());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isHidden());
      assertFalse(file0.isAbsolute());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals(20480L, file0.length());
      assertEquals(".", file0.getName());
      
      MockDate mockDate0 = new MockDate(1523, 1523, 516, 1294, (-1034));
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertFalse(boolean0);
      assertEquals(".", file0.toString());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isHidden());
      assertFalse(file0.isAbsolute());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(1755979851572L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals(20480L, file0.length());
      assertEquals(".", file0.getName());
      assertEquals("Fri Jun 22 04:46:00 GMT 3551", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/4[&Z)OoQY lK))/tmp/home/azureuser");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) hijrahDate0);
      assertFalse(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("azureuser", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/4[&Z)OoQY lK))/tmp/home", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/4[&Z)OoQY lK))/tmp/home/azureuser", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertTrue(boolean0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r N$8b4DG',4_vS";
      stringArray0[1] = "r N$8b4DG',4_vS";
      stringArray0[2] = "r N$8b4DG',4_vS";
      stringArray0[3] = "r N$8b4DG',4_vS";
      stringArray0[4] = "r N$8b4DG',4_vS";
      stringArray0[5] = ">XB";
      stringArray0[6] = "r N$8b4DG',4_vS";
      stringArray0[7] = "r N$8b4DG',4_vS";
      stringArray0[8] = "r N$8b4DG',4_vS";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      assertEquals(9, stringArray0.length);
      assertEquals("r N$8b4DG',4_vS", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/>XB/r N$8b4DG',4_vS/r N$8b4DG',4_vS", file0.getParent());
      assertFalse(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/>XB/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      
      Instant instant0 = MockInstant.ofEpochMilli((-1259L));
      assertNotNull(instant0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      assertEquals("r N$8b4DG',4_vS", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/>XB/r N$8b4DG',4_vS/r N$8b4DG',4_vS", file0.getParent());
      assertFalse(file0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS/>XB/r N$8b4DG',4_vS/r N$8b4DG',4_vS/r N$8b4DG',4_vS", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      
      File file0 = FileUtils.toFile(uRL0);
      assertNotNull(file0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      FileTime fileTime0 = FileTime.fromMillis(0L);
      assertNotNull(fileTime0);
      
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertFalse(boolean0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.exists());
      assertEquals("/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      
      File file1 = FileUtils.current();
      assertNotNull(file1);
      assertEquals(25248313344L, file1.getFreeSpace());
      assertTrue(file1.isHidden());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isAbsolute());
      assertEquals(25231536128L, file1.getUsableSpace());
      assertEquals(20480L, file1.length());
      assertFalse(file1.isFile());
      assertTrue(file1.exists());
      assertEquals(".", file1.getName());
      assertEquals(30084825088L, file1.getTotalSpace());
      assertEquals(".", file1.toString());
      assertTrue(file1.canRead());
      assertEquals(1755979851572L, file1.lastModified());
      
      boolean boolean0 = FileUtils.isFileNewer(file1, file0);
      assertTrue(boolean0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(25248313344L, file1.getFreeSpace());
      assertTrue(file1.isHidden());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isAbsolute());
      assertEquals(25231536128L, file1.getUsableSpace());
      assertEquals(20480L, file1.length());
      assertFalse(file1.isFile());
      assertTrue(file1.exists());
      assertEquals(".", file1.getName());
      assertEquals(30084825088L, file1.getTotalSpace());
      assertEquals(".", file1.toString());
      assertTrue(file1.canRead());
      assertEquals(1755979851572L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      
      boolean boolean0 = FileUtils.isFileNewer(file0, 1967L);
      assertTrue(boolean0);
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*]='-$rOi/Dy qy2", "*]='-$rOi/Dy qy2");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (-855L));
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Dy qy2", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/*]='-$rOi/Dy qy2/*]='-$rOi/Dy qy2", mockFile0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/*]='-$rOi/Dy qy2/*]='-$rOi", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("tmp", file0.getName());
      assertEquals("/tmp", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      
      boolean boolean0 = file0.setWritable(false, false);
      assertTrue(boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      
      File file1 = FileUtils.getUserDirectory();
      assertNotNull(file1);
      assertTrue(file1.equals((Object)file0));
      assertNotSame(file1, file0);
      assertTrue(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertFalse(file1.isFile());
      assertFalse(file1.canWrite());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/azureuser", file1.toString());
      assertTrue(file1.canExecute());
      assertEquals("/home", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      assertTrue(boolean0);
      
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertFalse(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      
      boolean boolean0 = file0.setWritable(false, false);
      assertTrue(boolean0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      
      File file1 = FileUtils.getTempDirectory();
      assertNotNull(file1);
      assertTrue(file1.equals((Object)file0));
      assertNotSame(file1, file0);
      assertFalse(file1.isFile());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals("tmp", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals("/tmp", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      
      boolean boolean0 = file0.setReadable(false);
      assertTrue(boolean0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isFile());
      assertFalse(file0.canRead());
      
      File file1 = FileUtils.getTempDirectory();
      assertNotNull(file1);
      assertTrue(file1.equals((Object)file0));
      assertNotSame(file1, file0);
      assertEquals("tmp", file1.getName());
      assertEquals("/tmp", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isFile());
      assertFalse(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/", file1.getParent());
      assertTrue(file1.canExecute());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      assertTrue(boolean0);
      
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/tmp";
      stringArray0[1] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      assertEquals(2, stringArray0.length);
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertEquals(".", file0.toString());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(20480L, file0.length());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(1755979851572L, file0.lastModified());
      assertTrue(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isHidden());
      
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertNotNull(file1);
      assertEquals(0, stringArray0.length);
      assertSame(file0, file1);
      assertSame(file1, file0);
      assertEquals(".", file0.toString());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals(20480L, file0.length());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(".", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(1755979851572L, file0.lastModified());
      assertTrue(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isHidden());
      assertTrue(file1.canRead());
      assertFalse(file1.isAbsolute());
      assertTrue(file1.isDirectory());
      assertEquals(25248313344L, file1.getFreeSpace());
      assertEquals(1755979851572L, file1.lastModified());
      assertEquals(30084825088L, file1.getTotalSpace());
      assertFalse(file1.isFile());
      assertEquals(20480L, file1.length());
      assertEquals(".", file1.getName());
      assertEquals(".", file1.toString());
      assertTrue(file1.exists());
      assertEquals(25231536128L, file1.getUsableSpace());
      assertTrue(file1.isHidden());
      assertNull(file1.getParent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertNotNull(file1);
      assertEquals(0, stringArray0.length);
      assertSame(file0, file1);
      assertSame(file1, file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file1.isFile());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("azureuser", file1.getName());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home", file1.getParent());
      assertEquals("/home/azureuser", file1.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      
      File file1 = FileUtils.createParentDirectories(file0);
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertEquals("", file1.getName());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertEquals("/", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      
      boolean boolean0 = FileUtils.directoryContains(file1, file0);
      assertTrue(boolean0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.toString());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertEquals("", file1.getName());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertEquals("/", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kgUb{o@kpc/NP4@ZdK");
      assertNotNull(mockFile0);
      
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("kgUb{o@kpc/NP4@ZdK", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("kgUb{o@kpc", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("NP4@ZdK", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("kgUb{o@kpc", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals("kgUb{o@kpc", file0.toString());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtils.current();
      assertNotNull(file0);
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(".", file0.getName());
      assertEquals(20480L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(".", file0.toString());
      assertNull(file0.getParent());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/tmp/tmp/F^N0F^N";
      stringArray0[1] = "/home/azureuser/LLm4PrTest";
      stringArray0[2] = "Cannot cache the value of a method with parameters: ";
      stringArray0[3] = ">MXlB#u";
      stringArray0[4] = "Yi,i1C1MX$LE3?y*";
      stringArray0[5] = "names";
      stringArray0[6] = "{t";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertNotNull(file1);
      assertEquals(7, stringArray0.length);
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(".", file0.getName());
      assertEquals(20480L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(".", file0.toString());
      assertNull(file0.getParent());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file1.canWrite());
      assertEquals("{t", file1.getName());
      assertTrue(file1.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./tmp/tmp/F^N0F^N/home/azureuser/LLm4PrTest/Cannot cache the value of a method with parameters: />MXlB#u/Yi,i1C1MX$LE3?y*/names", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./tmp/tmp/F^N0F^N/home/azureuser/LLm4PrTest/Cannot cache the value of a method with parameters: />MXlB#u/Yi,i1C1MX$LE3?y*/names/{t", file1.toString());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      
      File file2 = FileUtils.createParentDirectories(file1);
      assertNotNull(file2);
      assertEquals(7, stringArray0.length);
      assertFalse(file2.equals((Object)file1));
      assertNotSame(file1, file2);
      assertNotSame(file2, file1);
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(1755979851572L, file0.lastModified());
      assertEquals(25248313344L, file0.getFreeSpace());
      assertEquals(".", file0.getName());
      assertEquals(20480L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(".", file0.toString());
      assertNull(file0.getParent());
      assertEquals(25231536128L, file0.getUsableSpace());
      assertEquals(30084825088L, file0.getTotalSpace());
      assertTrue(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file1.canWrite());
      assertEquals("{t", file1.getName());
      assertTrue(file1.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./tmp/tmp/F^N0F^N/home/azureuser/LLm4PrTest/Cannot cache the value of a method with parameters: />MXlB#u/Yi,i1C1MX$LE3?y*/names", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./tmp/tmp/F^N0F^N/home/azureuser/LLm4PrTest/Cannot cache the value of a method with parameters: />MXlB#u/Yi,i1C1MX$LE3?y*/names/{t", file1.toString());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("names", file2.getName());
      assertFalse(file2.exists());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canExecute());
      assertTrue(file2.isFile());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./tmp/tmp/F^N0F^N/home/azureuser/LLm4PrTest/Cannot cache the value of a method with parameters: />MXlB#u/Yi,i1C1MX$LE3?y*", file2.getParent());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.canRead());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./tmp/tmp/F^N0F^N/home/azureuser/LLm4PrTest/Cannot cache the value of a method with parameters: />MXlB#u/Yi,i1C1MX$LE3?y*/names", file2.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      boolean boolean0 = arrayDeque0.add(file0);
      assertTrue(boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(arrayDeque0);
      assertNotNull(fileArray0);
      assertEquals(1, fileArray0.length);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(priorityQueue0);
      assertNotNull(fileArray0);
      assertEquals(0, fileArray0.length);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "`@5", "date", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // date
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.exists());
      
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "mmW", "mmW");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // mmW
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) vector0, "n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "z-mH", (Collection<?>) arrayDeque0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (String) null, (Collection<?>) hashSet0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/tmp/home/azureuser/tmp/azureuser/s/6ea2e]]pdT)k^9W2/org.junitpioneer.jupiter.IssueExtension/home/azureuser/home/azureuser/azureuser/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp", (Collection<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null, (-2908), (-2908), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (-41), (int) (byte)123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) null, "c", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // c
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "/tmp", "/tmp");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7SN0#6D");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      FileUtils.waitFor(mockFile0, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-3198));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File[] fileArray0 = new File[12];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' after copy to '");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '' after copy to ''
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.OrFileFilter");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'org.apache.commons.io.filefilter.OrFileFilter'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      // Undeclared exception!
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File[] fileArray0 = new File[7];
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(fileArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "cP<I7:");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'cP<I7:'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.current();
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertFalse(file0.isFile());
      //  // Unstable assertion: assertFalse(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(1755979851572L, file0.lastModified());
      //  // Unstable assertion: assertEquals(25248313344L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(".", file0.getName());
      //  // Unstable assertion: assertTrue(file0.isDirectory());
      //  // Unstable assertion: assertNull(file0.getParent());
      //  // Unstable assertion: assertEquals(25231536128L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals(20480L, file0.length());
      //  // Unstable assertion: assertTrue(file0.isHidden());
      //  // Unstable assertion: assertEquals(30084825088L, file0.getTotalSpace());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(".", file0.toString());
      
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "p");
       //  fail("Expecting exception: UnsupportedCharsetException");
       // Unstable assertion
      } catch(UnsupportedCharsetException e) {
         //
         // p
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K%d[`8.", "3NE");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8.");
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"pwHbG})$36%", "\"pwHbG})$36%");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "filqe");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // filqe
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("M[p");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("azureuser", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.newOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      File file1 = MockFile.createTempFile("i0e2m]_-<P", "i0e2m]_-<P", file0);
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/azureuser/i0e2m]_-<P0i0e2m]_-<P", file1.toString());
      assertEquals("i0e2m]_-<P0i0e2m]_-<P", file1.getName());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser", file1.getParent());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      
      try { 
        FileUtils.moveToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser/i0e2m]_-<P0i0e2m]_-<P'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cannot catch exception during constructor call for ", "Cannot catch exception during constructor call for ");
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("Cannot catch exception during constructor call for 0Cannot catch exception during constructor call for ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/Cannot catch exception during constructor call for 0Cannot catch exception during constructor call for ", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/Cannot catch exception during constructor call for 0Cannot catch exception during constructor call for '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_F@dlpOb.+o26]R");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '_F@dlpOb.+o26]R' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser/size/9y_. F6&7$g'k/YRG4/home/azureuser/LLm4PrTest/org.apache.commons.io.function.IOConsumer");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "value");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "size";
      stringArray0[1] = "9y_. F6&7$g'k";
      stringArray0[2] = "YRG4";
      stringArray0[3] = "/home/azureuser/LLm4PrTest";
      stringArray0[4] = "org.apache.commons.io.function.IOConsumer";
      stringArray0[5] = "test-template-invocation";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertNotNull(file1);
      assertEquals(6, stringArray0.length);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file1.exists());
      assertEquals("test-template-invocation", file1.getName());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/azureuser/size/9y_. F6&7$g'k/YRG4/home/azureuser/LLm4PrTest/org.apache.commons.io.function.IOConsumer/test-template-invocation", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertFalse(file1.canExecute());
      assertEquals("/home/azureuser/size/9y_. F6&7$g'k/YRG4/home/azureuser/LLm4PrTest/org.apache.commons.io.function.IOConsumer", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      
      try { 
        FileUtils.moveFileToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/size/9y_. F6&7$g'k/YRG4/home/azureuser/LLm4PrTest/org.apache.commons.io.function.IOConsumer/test-template-invocation'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("reference");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("reference", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("reference", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: 'reference'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      
      File file1 = FileUtils.createParentDirectories(file0);
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.exists());
      assertNull(file1.getParent());
      assertEquals("/", file1.toString());
      assertFalse(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals("", file1.getName());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      
      File file1 = MockFile.createTempFile("i0e2m]_-<P", "i0e2m]_-<P", file0);
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertEquals("/home/azureuser/i0e2m]_-<P0i0e2m]_-<P", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("i0e2m]_-<P0i0e2m]_-<P", file1.getName());
      
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/home/azureuser/i0e2m]_-<P0i0e2m]_-<P'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cy)", "DmC`\"}IU} }7");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Cy)/DmC`\"}IU} }7' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      assertNotNull(directoryFileFilter0);
      
      // Undeclared exception!
      FileUtils.listFilesAndDirs(file0, directoryFileFilter0, directoryFileFilter0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      FileUtils.listFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip", "net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip0net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip0net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip0net.bytebuddy.asm.Advice$AssignReturned$DefaultValueSkip
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("/tmp", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      assertNotNull(directoryFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) directoryFileFilter0, (IOFileFilter) directoryFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "chronoZonedDateTime");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // chronoZonedDateTime
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "' does not exist [createDestDir=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' does not exist [createDestDir=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "/tmp/tmp/No test failed with one of the specified exceptions (yet).0permitSubclassEquality");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K%d[`8.", "K%d[`8.");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./K%d[`8.
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3\"y$*");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lastModifiedFileTime(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile("j~sU9>", "j~sU9>");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.lastModified(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = MockFile.createTempFile("pELjgNV P%+@I.)", "pELjgNV P%+@I.)");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("pELjgNV P%+@I.)0pELjgNV P%+@I.)", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/pELjgNV P%+@I.)0pELjgNV P%+@I.)", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, notFileFilter0, notFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/pELjgNV P%+@I.)0pELjgNV P%+@I.)
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".phon%7`8v83*'";
      stringArray0[1] = ".phon%7`8v83*'";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      assertEquals(2, stringArray0.length);
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals(".phon%7`8v83*'", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/.phon%7`8v83*'", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/.phon%7`8v83*'/.phon%7`8v83*'", file0.toString());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/.phon%7`8v83*'/.phon%7`8v83*'
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("/", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("tmp", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      assertNotNull(notFileFilter0);
      
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile("reference");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertEquals("reference", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("reference", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: reference
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 1473L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/4[&Z)OoQY lK))/tmp/home/azureuser");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/4[&Z)OoQY lK))/tmp/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN", "/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN0/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8.", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN0/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("3NN", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN0/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./3NN
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      File file0 = MockFile.createTempFile(".phon%7`8v83*'", ".phon%7`8v83*'");
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(".phon%7`8v83*'0.phon%7`8v83*'", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/.phon%7`8v83*'0.phon%7`8v83*'", file0.toString());
      
      try { 
        FileUtils.isEmptyDirectory(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertEquals("tmp", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.canWrite());
      
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.FileUtils", "Cannot catch exception during constructor call for ");
      assertNotNull(file0);
      assertEquals("org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", file0.toString());
      
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for '.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".phon%7`8v83*'");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '.phon%7`8v83*''
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = MockFile.createTempFile("]N;j;", "]N;j;");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals("]N;j;0]N;j;", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/]N;j;0]N;j;", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/]N;j;0]N;j;'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      
      File file1 = MockFile.createTempFile("6`*h}8", "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.junitpioneer.jupiter.cartesian.CartesianTestExtension", file0);
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/azureuser/6`*h}80/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.junitpioneer.jupiter.cartesian.CartesianTestExtension", file1.toString());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/home/azureuser/6`*h}80/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments", file1.getParent());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", file1.getName());
      
      MockFile mockFile0 = new MockFile(file1, "6`*h}8");
      assertNotNull(mockFile0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/6`*h}80/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/org.junitpioneer.jupiter.cartesian.CartesianTestExtension'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, (-4220), (-4220));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      
      HashSet<File> hashSet0 = new HashSet<File>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add(file0);
      assertTrue(boolean0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) hashSet0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Error reading class file of ";
      stringArray0[1] = "";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertNotNull(file1);
      assertEquals(2, stringArray0.length);
      assertFalse(file1.equals((Object)file0));
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("Error reading class file of ", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/azureuser", file1.getParent());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals("/home/azureuser/Error reading class file of ", file1.toString());
      
      try { 
        FileUtils.copyFileToDirectory(file1, file1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/Error reading class file of '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K%d[`8.", "K%d[`8.");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/K%d[`8./K%d[`8.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" KB", "'B'Dr3:iPW1T+1J&");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' is not a directory");
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        FileUtils.copyFile(file0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals("/home", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      assertEquals("/home/azureuser", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[0] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isFile());
      assertEquals("azureuser", file0.getName());
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.nio.file.StandardCopyOption
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cannot catch exception during constructor call for ", "$h_np");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/Cannot catch exception during constructor call for 0$h_np", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("Cannot catch exception during constructor call for 0$h_np", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      try { 
        FileUtils.copyFile(file0, file0, false, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".phon%7`8v83*'");
      assertNotNull(mockFile0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '.phon%7`8v83*''
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser/tmp/czdt0/home/azureuser/}D,27o{0Cannot catch exception during constructor call for ", (File) null);
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("}D,27o{0Cannot catch exception during constructor call for ", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/home/azureuser0/home/azureuser/tmp/czdt0/home/azureuser/}D,27o{0Cannot catch exception during constructor call for ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/home/azureuser0/home/azureuser/tmp/czdt0/home/azureuser", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = MockFile.createTempFile("`u4vSPDC*Iv>4D_{", "`u4vSPDC*Iv>4D_{");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/`u4vSPDC*Iv>4D_{0`u4vSPDC*Iv>4D_{", file0.toString());
      assertEquals("`u4vSPDC*Iv>4D_{0`u4vSPDC*Iv>4D_{", file0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile("58,q\"O>%\"8TZsn<%>J", "58,q\"O>%\"8TZsn<%>J");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/58,q\"O>%\"8TZsn<%>J/58,q\"O>%\"8TZsn<%>J'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertEquals("azureuser", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/azureuser", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for ", "Cannot resolve field ");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp/org.apache.commons.io.FileUtils0Cannot catch exception during constructor call for /Cannot resolve field '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      assertNotNull(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      
      boolean boolean0 = file0.setWritable(false, true);
      assertTrue(boolean0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals("/home/azureuser", file0.toString());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("azureuser", file0.getName());
      
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/azureuser'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+oZV~", "+oZV~");
      assertNotNull(mockFile0);
      
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/+oZV~/+oZV~'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("Y-_.}$>a:", "/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory");
      // Undeclared exception!
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest", "k@5Qjx#a`tHC-.");
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/tmp/azureuser");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/tmp/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NameFileFilter nameFileFilter0 = new NameFileFilter("/tmp/test-template-invocation0test-template-invocation");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0, (FileFilter) nameFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      IOCase iOCase0 = IOCase.SYSTEM;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter("destination", iOCase0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      MockFile mockFile0 = new MockFile(file0, "initialList");
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) notFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/initialList'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K%d[`8.", "3NE");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) notFileFilter0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(2147483647L);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) ageFileFilter0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter(byteArray0, 0L);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) magicNumberFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("r=J#ptC,E+AM^/", "r=J#ptC,E+AM^/");
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) directoryFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/r=J#ptC,E+AM^/r=J#ptC,E+AM^'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = FileUtils.toFile(uRL0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0, (FileFilter) prefixFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "J9Eexo5`[g3*mKN");
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) trueFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'J9Eexo5`[g3*mKN'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.copyDirectory(file1, file0, true);
      try { 
        FileUtils.copyDirectory(file0, file1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Call proxy for ");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'Call proxy for '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kgUb{o@kpc/NP4@ZdK");
      mockFile0.createNewFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "kgUb{o@kpc/NP4@ZdK");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/tmp");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/tmp/home/azureuser/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/tmp", "/tmp/tmp/tmp");
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "L|(!");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/tmp/L|(!'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bytebuddy";
      stringArray0[1] = "MOETJz_AG";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.streamFiles(file0, false, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "i";
      stringArray0[1] = "/tmp/";
      stringArray0[2] = "E?4MG.hZz{+FBG";
      stringArray0[3] = "x)VzpE?g_-w>xkk";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveDirectory(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/i/tmp/E?4MG.hZz{+FBG/x)VzpE?g_-w>xkk
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("sUnD1rc(?3", "M)KmiL4~^s.x~|d2");
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1191)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1211)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2316)
             // sun.reflect.GeneratedMethodAccessor374.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = FileUtils.isSymlink(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("4x&=jLE^'~Q(ei(L$t");
      try { 
        FileUtils.copyToDirectory(file0, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = MockFile.createTempFile("`u4vSPDC*Iv>4D_{", "`u4vSPDC*Iv>4D_{");
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp/`u4vSPDC*Iv>4D_{0`u4vSPDC*Iv>4D_{' (file1='/tmp/`u4vSPDC*Iv>4D_{0`u4vSPDC*Iv>4D_{', file2='/tmp/`u4vSPDC*Iv>4D_{0`u4vSPDC*Iv>4D_{')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      MockFile mockFile0 = new MockFile(file0, "com.google.common.jimfs.PosixAttributeProvider");
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) notFileFilter0, false, (CopyOption[]) null);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%,d exception(s): %s");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "%,d exception(s): %s", "%,d exception(s): %s", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %,d exception(s): %s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "", "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileUtils.cleanDirectory(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|c1Z", "' to '");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/|c1Z/' to '' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/}D,27o{0Cannot catch exception during constructor call for ", "/tmp/$*9vQc>CSZ0.tmp");
      try { 
        FileUtils.lineIterator((File) mockFile0, "/tmp/$*9vQc>CSZ0.tmp");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 2660L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[1];
          stringArray0[0] = "Length to read: ";
          File file0 = FileUtils.getFile(stringArray0);
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            FileUtils.write(file0, (CharSequence) "Length to read: ", charset0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"Length to read: \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2465)
             // org.apache.commons.io.FileUtils.writeStringToFile(FileUtils.java:3554)
             // org.apache.commons.io.FileUtils.write(FileUtils.java:3249)
             // sun.reflect.GeneratedMethodAccessor377.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":C]t:\"5#'A=~{8]1");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source ':C]t:\"5#'A=~{8]1' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          file0.delete();
          // Undeclared exception!
          try { 
            FileUtils.touch(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2465)
             // org.apache.commons.io.FileUtils.touch(FileUtils.java:3130)
             // sun.reflect.GeneratedMethodAccessor400.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.touch(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:122)
             // org.apache.commons.io.FileUtils.touch(FileUtils.java:3132)
             // sun.reflect.GeneratedMethodAccessor400.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[2];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Stream<File> stream0 = FileUtils.streamFiles(file0, true, (String[]) null);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("net.bytebuddy.asm.Advice$AssignReturned$Factory", "bRwt8ok.g.", file0);
      File file2 = FileUtils.createParentDirectories(file1);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file1, file2, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /home/azureuser/LLm4PrTest/ io_experiments/.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' after copy to '");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '' after copy to ''
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = MockFile.createTempFile("U'L%Md&79$7h%vSA%", "rr#Z8~A]6");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'sourceDir' is not a directory: '/tmp/U'L%Md&79$7h%vSA%0rr#Z8~A]6'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'destDir is not writable: '/home/azureuser/LLm4PrTest/ io_experiments/./azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToString(file0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.io.tmpdir";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file1, true);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "size";
      stringArray0[1] = "9y_. F6&7$g'k";
      stringArray0[2] = "YRG4";
      stringArray0[3] = "/home/azureuser/LLm4PrTest";
      stringArray0[4] = "org.apache.commons.io.function.IOConsumer";
      stringArray0[5] = "test-template-invocation";
      File file1 = FileUtils.getFile(file0, stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.io.function.IOConsumer";
      stringArray0[1] = "org.apache.commons.io.function.IOConsumer";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveFileToDirectory(file0, file1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '/home/azureuser/org.apache.commons.io.function.IOConsumer/org.apache.commons.io.function.IOConsumer'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = MockFile.createTempFile("}D,27o{", "Cannot catch exception during constructor call for ");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file1, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/}D,27o{0Cannot catch exception during constructor call for \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:854)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2395)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2370)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2424)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2449)
             // sun.reflect.GeneratedMethodAccessor373.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("wFL<:QVMtu-");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/wFL<:QVMtu-/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/k@5Qjx#a`tHC-.");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/k@5Qjx#a`tHC-.' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("}D,27o{", "}D,27o{");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/}D,27o{0}D,27o{' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadable(false);
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      FileUtils.copyDirectory(file0, file1, (FileFilter) notFileFilter0, true, copyOptionArray0);
      //  // Unstable assertion: assertEquals(1755979859131L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("01=MYXG+2#3#.$bpV|", (String) null, file0);
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOptionArray0[0];
      boolean boolean0 = FileUtils.isDirectory(file1, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = FileUtils.isDirectory((File) null, (LinkOption[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "esrcFile";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destinationDir", "destinationDir");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = FileUtils.current();
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file1, file0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:854)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1325)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:706)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:637)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:539)
             // sun.reflect.GeneratedMethodAccessor310.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file1, file0);
      assertEquals(1392409281320L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "uK");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertFalse(file0.canExecute());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^%Usqy", "^%Usqy");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/tmp", ">>s_u|tP+R`+,l8");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("L:CKtn5 ");
      File[] fileArray0 = new File[2];
      fileArray0[0] = file0;
      fileArray0[1] = (File) mockFile0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      File[] fileArray1 = FileUtils.toFiles(uRLArray0);
      assertEquals(2, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("Display name '%s' %s");
      assertEquals("Display name '%s' %s", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      MockFile mockFile0 = new MockFile("' does not exist: '", "<xuqq_A<`|H");
      hashSet0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) hashSet0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/' does not exist: '/<xuqq_A<`|H'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) hashSet0, (File) null);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile((InputStream) null, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1110)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1098)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2465)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1045)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:955)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      FileUtils.copyDirectory(file0, file1);
      //  // Unstable assertion: assertEquals(1755979859131L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("i0e2m]_-<P", "i0e2m]_-<P", file0);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file1, file1, "/home/azureuser/zUp0zUp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destDir", "/home/azureuser/LLm4PrTest/ io_experiments/tmp");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/tmp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp";
      stringArray0[1] = "/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp";
      stringArray0[2] = "org.apache.commons.io.output.ByteArrayOutputStream";
      stringArray0[3] = "org.apache.commons.io.output.ByteArrayOutputStream";
      stringArray0[4] = "/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp";
      stringArray0[5] = "!gK|,oU8gT/u[y";
      File file1 = FileUtils.getFile(file0, stringArray0);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file1, file0, "org.apache.commons.io.output.ByteArrayOutputStream");
      assertFalse(boolean0);
      assertEquals("/tmp/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp/org.apache.commons.io.output.ByteArrayOutputStream/org.apache.commons.io.output.ByteArrayOutputStream/home/azureuser/LLm4PrTest/ io_experiments/<T&s-/XGq9h,bT/offset=%,d, length=%,d/tmp/!gK|,oU8gT/u[y", file1.toString());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = MockFile.createTempFile("<!WCs?H!'WrLbGA-{", "<!WCs?H!'WrLbGA-{", (File) null);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "_Uu*gD&!f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "/home/azureuser");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "/tmp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "/home/azureuserhome/azureuser/azureuser");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/tmp";
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals("/home/azureuser", file1.getParent());
      
      boolean boolean0 = FileUtils.contentEquals(file1, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("^+S~+v|27`ky");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("10 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(4317L);
      assertEquals("4 KB", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_EB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 EB", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/tmp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 109);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      FileTime fileTime0 = FileTime.from(716L, timeUnit0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, fileTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "Xh%-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) trueFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals("/home/azureuser", file0.toString());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Nyd=O%UuTiLt6OH/d&", (Collection<?>) treeSet0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, 1125899906842624L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayList0, "/tmp", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, "Failed setLastModified(%s) on '%s'");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Failed setLastModified(%s) on '%s'
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      // Undeclared exception!
      FileUtils.iterateFilesAndDirs(file0, canReadFileFilter0, canReadFileFilter0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "2 KB");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2 KB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.current();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) hijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochSecond((-1019L), (-3353L));
      FileTime fileTime0 = FileTime.from(instant0);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/home/azureuser", "/home/home/azureuser");
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "Container creation requires an assignable array as return value: ", "Container creation requires an assignable array as return value: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Container creation requires an assignable array as return value: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      FileVisitResult fileVisitResult0 = FileVisitResult.CONTINUE;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) symbolicLinkFileFilter0, (IOFileFilter) symbolicLinkFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "T)KhmV!6.:JAUR6!u", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, orFileFilter0, orFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) treeSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1073741824L, FileUtils.ONE_GB);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdir(file0);
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "n", "n");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // n
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      boolean boolean0 = FileUtils.isFileNewer(file0, date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      File file0 = MockFile.createTempFile("UoH2*{[@8DJC%sw", "/home/azureuser/}D,27o{0@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }
}
