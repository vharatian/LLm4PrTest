/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:18:53 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.ProtocolFamily;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.StandardOpenOption;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.input.QueueInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      char[] charArray0 = new char[6];
      int int0 = IOUtils.read((Reader) stringReader0, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = IOUtils.toInputStream("^~L6m0", charset0);
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0, (-454L), 1433L);
      assertEquals(0, inputStream0.available());
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1845);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      linkedList0.add((Object) standardOpenOption0);
      IOUtils.writeLines((Collection<?>) linkedList0, "matches '%s'.", (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals(56, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$&CziSVG1'piO,_.z");
      IOUtils.write("$&CziSVG1'piO,_.z", (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")v(<Yd`Rju&h7#v");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      IOUtils.write((CharSequence) ")v(<Yd`Rju&h7#v", (Writer) outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getHttpExample();
          File file0 = MockFile.createTempFile("9L=46Y(5k1xhvPM,", "{UTOd9gMmS2C{!Bz");
          // Undeclared exception!
          try { 
            IOUtils.copy(uRL0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/9L=46Y(5k1xhvPM,0{UTOd9gMmS2C{!Bz\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.IOUtils.copy(IOUtils.java:1299)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0, 87);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 25);
      IOUtils.copy((Reader) bufferedReader0, (OutputStream) bufferedOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(7, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = IOUtils.toString((InputStream) byteArrayInputStream0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = IOUtils.toString((InputStream) sequenceInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "outputStream", (String) null);
      assertEquals(12, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outpufre{m");
      char[] charArray0 = IOUtils.toCharArray((Reader) stringReader0);
      assertEquals(10, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = IOUtils.toCharArray((Reader) stringReader0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)13);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) bufferedInputStream0, charset0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, 1);
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("outputStream");
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      byte[] byteArray1 = IOUtils.toByteArray((Reader) inputStreamReader0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) dataInputStream0, (long) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("WQ@p[");
      assertEquals(5, inputStream0.available());
      
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0);
      long long0 = IOUtils.skip((Reader) bufferedReader0, 8192L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      byte[] byteArray0 = IOUtils.resourceToByteArray("", classLoader0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      IOUtils.readFully(inputStream0, 10);
      assertEquals(61, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      char[] charArray0 = new char[0];
      int int0 = IOUtils.read((Reader) stringReader0, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("", charset0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6mv%cmc(y }");
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) stringReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = IOUtils.length(charArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = IOUtils.getCharArray();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[4];
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream("outputStream");
      byte[] byteArray0 = new byte[2];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) mockPrintStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      long long0 = IOUtils.consume(queueInputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) pipedWriter0, 1313);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) pipedOutputStream0, 13);
      assertNotNull(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashSet<StringBuilder> linkedHashSet0 = new LinkedHashSet<StringBuilder>();
      MockFile mockFile0 = new MockFile("z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedHashSet0, "YG", (OutputStream) mockPrintStream0, "YG");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // YG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.SizeFileFilter");
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) mockPrintStream0, "org.apache.commons.io.filefilter.SizeFileFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.SizeFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((byte[]) null, (Writer) null, "Syhm");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Syhm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null, "khAko=J]Y b'[5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // khAko=J]Y b'[5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write("OVERRIDE_READ_ONLY", (OutputStream) byteArrayOutputStream0, "OVERRIDE_READ_ONLY");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // OVERRIDE_READ_ONLY
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.write("org.apache.commons.io.IOUtils", (OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("IF_ANNOTATED");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) mockFileOutputStream0, "IF_ANNOTATED");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // IF_ANNOTATED
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1lr}''V$|H+l%G<,n");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "1lr}''V$|H+l%G<,n", (OutputStream) mockFileOutputStream0, "1lr}''V$|H+l%G<,n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 1lr}''V$|H+l%G<,n
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "org.apache.commons.io.IOExceptionList");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.IOExceptionList
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "|H/j+D.Taub");
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+$Ue<KjRt!I");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) pipedInputStream0, " actual: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  actual: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2717);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      try { 
        IOUtils.toString((InputStream) bufferedInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("outputStream", "outputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // outputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "outputStream", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URI uRI0 = MockURI.URI("registerAsParallelCapable");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) inputStreamReader0, "h:Rwh*T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // h:Rwh*T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", offset=");
      stringReader0.close();
      try { 
        IOUtils.toByteArray((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 1952L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(inputStream0, (-408L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -408
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n>GD`rpkn)eN_)");
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) stringReader0, (-1556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(queueInputStream0, queueInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0, (-1058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1058
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) mockFileInputStream0, 9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(898);
      try { 
        IOUtils.toBufferedInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) datagramChannel0, 1738L);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rl'3k$Cil_@[_PI0");
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) stringReader0, (long) (-1371));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1371
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1727);
      try { 
        IOUtils.skipFully((Reader) pipedReader0, (long) 1727);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) mockFileReader0, 2699L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.skip((Reader) pipedReader0, 8192L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("q{#e8T>3}M8t?ylc%r");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: q{#e8T>3}M8t?ylc%r
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("suffix");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: suffix
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1718);
      try { 
        IOUtils.readLines((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ALWAYS");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Skip count must be non-negative, actual: ");
      // Undeclared exception!
      try { 
        IOUtils.readFully((ReadableByteChannel) fileChannel0, byteBuffer0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      // Undeclared exception!
      try { 
        IOUtils.readFully((ReadableByteChannel) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0, 1812, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[2];
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0, 898, 898);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1666);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) lineNumberReader0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[2];
      try { 
        IOUtils.readFully((Reader) pipedReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outpufre{m", (Charset) null);
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, (byte[]) null, 1436, 1436);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      InputStream inputStream0 = IOUtils.toInputStream("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, byteArray0, 9, 2034694062);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      InputStream inputStream0 = IOUtils.toInputStream("+mNufod");
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, byteArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream('7');
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, byteArray0, 5, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, 727);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 727 actual: 5
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 8192);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) lineNumberReader0, (char[]) null, 1863, 1863);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      char[] charArray0 = new char[8];
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) bufferedReader0, charArray0, 51, 460);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) mockFileReader0, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1718);
      char[] charArray0 = new char[5];
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0, (int) (byte)78, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringReader stringReader0 = new StringReader("]M[.&hBO[I<Q9");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, charArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) charArrayWriter0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      char[] charArray0 = new char[8];
      stringReader0.close();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) mockPrintWriter0, 1L, 1312L, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      char[] charArray0 = new char[2];
      try { 
        IOUtils.copyLarge((Reader) lineNumberReader0, (Writer) mockPrintWriter0, 2147483656L, 1969L, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      stringReader0.close();
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, 0L, (-1L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, 22L, 22L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 22 actual: 12
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = MockFile.createTempFile("outputStream", "outputStream");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\u0000\u0000");
      byte[] byteArray0 = new byte[0];
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      // Undeclared exception!
      IOUtils.copyLarge(inputStream0, (OutputStream) filterOutputStream0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Size cannot be greater than Integer max value: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) mockPrintStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      MockFile mockFile0 = new MockFile("<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rl'3k$Cil[?@[_PI0");
      stringReader0.close();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0);
      try { 
        IOUtils.copy((Reader) stringReader0, (Appendable) bufferedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) mockPrintWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) mockFileReader0, (Writer) bufferedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.copy((Reader) stringReader0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) bufferedInputStream0, (Writer) charArrayWriter0, "readonly");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // readonly
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) byteArrayInputStream0, (Writer) charArrayWriter0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((ByteArrayOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) queueInputStream0);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 6);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charsetDecoder0);
      try { 
        IOUtils.contentEqualsIgnoreEOL(pushbackReader0, inputStreamReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.consume((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, 4063);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null, "net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("url", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(7);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write("", (OutputStream) pipedOutputStream0, charset0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((char[]) null, (OutputStream) null, charset0);
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1887);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write((byte[]) null, (Writer) charArrayWriter0, charset0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      try { 
        IOUtils.write(byteArray0, (Writer) pipedWriter0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      byte[] byteArray0 = IOUtils.toByteArray(uRL0);
      assertEquals(827, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) mockFileReader0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0, charset0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "outputStream");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      assertEquals(12, inputStream0.available());
      
      IOUtils.toByteArray((InputStream) dataInputStream0, 10);
      assertEquals(2, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        IOUtils.toByteArray((InputStream) byteArrayInputStream0, 627);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 4, expected: 627
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)89, (byte)89);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)89);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) pushbackInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) pipedReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = MockFile.createTempFile("Bytes to skip: ", "Bytes to skip: ", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        IOUtils.skipFully((InputStream) mockFileInputStream0, 1920L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 1920 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-19), 47);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) byteArrayInputStream0, 516L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      long long0 = IOUtils.skip((Reader) stringReader0, (long) (byte)3);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, 5L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("6x|<i>j^JAy", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 6x|<i>j^JAy
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[6];
      int int0 = IOUtils.read((Reader) stringReader0, charArray0, 1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      char[] charArray0 = new char[4];
      int int0 = IOUtils.read((Reader) bufferedReader0, charArray0, 2, 2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'o', 'u'}, charArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) stringReader0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) bufferedReader0, charArray0, 1, (-720));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -720
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(47);
      char[] charArray0 = new char[2];
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0, (-1075), 47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      int int0 = IOUtils.read((InputStream) dataInputStream0, byteArray0, 4418, 13);
      assertEquals(0, int0);
      assertEquals(827, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      byte[] byteArray0 = new byte[6];
      int int0 = IOUtils.read(inputStream0, byteArray0, 182, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(12, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, 5139, 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", offset=");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.SizeFileFilter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      char[] charArray0 = new char[1];
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) mockPrintWriter0, 1L, (-456L), charArray0);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      char[] charArray0 = new char[8];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, charArray0);
      assertEquals(12, charArrayWriter0.size());
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(", offset=");
      StringReader stringReader0 = new StringReader(", offset=");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.copyLarge(inputStream0, (OutputStream) pipedOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) queueInputStream0);
      byte[] byteArray0 = new byte[6];
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("outputStream");
      int int0 = IOUtils.copy((Reader) stringReader0, (Writer) stringWriter0);
      assertEquals("outputStream", stringWriter0.toString());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.filefilter.FileEqualsFileFilter", true);
      int int0 = IOUtils.copy((InputStream) sequenceInputStream0, (OutputStream) mockFileOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) null, (Consumer<IOException>) stream_Builder0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")v(<Yd`Ru&h7#v");
      IOUtils.closeQuietly((Closeable) mockFileOutputStream0, (Consumer<IOException>) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "outputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream("url");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      assertEquals(12, inputStream0.available());
      
      long long0 = IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) mockPrintStream0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")v(<Yd`Rju&h7#v");
      IOUtils.closeQuietly((Closeable) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outpufre{m");
      MockFile mockFile0 = new MockFile("outpufre{m", "outpufre{m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) mockPrintWriter0);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("9`9~*5upW@WEp0>!", (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 9`9~*5upW@WEp0>!
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray(2123);
      assertEquals(2123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToString("outputStream", charset0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: outputStream
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Writer writer0 = IOUtils.writer(pipedWriter0);
      assertSame(pipedWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      Writer writer0 = IOUtils.writer(stringBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.buffer(writer0, (-49));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IOUtils.writeLines((Collection<?>) linkedList0, "", (Writer) charArrayWriter0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.writeLines((Collection<?>) null, "\uFFFD\u0000", (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      IOUtils.writeLines((Collection<?>) linkedHashSet0, (String) null, (Writer) bufferedWriter0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "m#F.tK\"8LIIyw:RT");
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, "m#F.tK\"8LIIyw:RT", (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, "", (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IOUtils.writeLines((Collection<?>) linkedList0, "Sensitive", (OutputStream) null, charset0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[11];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1887);
      IOUtils.writeChunked(charArray0, (Writer) charArrayWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charArrayWriter0.toString());
      assertEquals(11, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.writeChunked((char[]) null, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      IOUtils.writeChunked(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.writeChunked((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IOUtils.write(stringBuffer0, (Writer) stringWriter0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.write((StringBuffer) null, (Writer) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((StringBuffer) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      IOUtils.write((String) null, (Writer) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "file", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      IOUtils.write((char[]) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[3];
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockFile mockFile0 = new MockFile("file");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      try { 
        IOUtils.write(byteArray0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      IOUtils.write((byte[]) null, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outpufre{m");
      String string0 = IOUtils.toString((Reader) stringReader0);
      assertEquals("outpufre{m", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("#}?]5H");
      assertEquals(6, inputStream0.available());
      
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("#}?]5H", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "org.junitpioneer.jupite.cartesian.CartesianValueArgumentsProvider");
      try { 
        IOUtils.toByteArray(inputStream0, 2525L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 65, expected: 2525
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("#}?]5H");
      IOUtils.toByteArray(inputStream0, 1L);
      assertEquals(5, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0, 0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) dataInputStream0, (-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -2147483646
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 267);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 182);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, 166);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, (-1540361492));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6mv%cmc(y }");
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) stringReader0);
      IOUtils.readLines((Reader) bufferedReader0);
      String string0 = IOUtils.toString((Reader) bufferedReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outpufre{m");
      try { 
        IOUtils.skipFully((Reader) stringReader0, 1434L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1434 actual: 10
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      IOUtils.skipFully((ReadableByteChannel) null, 0L);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) datagramChannel0, (-2919L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -2919
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2761);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) pushbackInputStream0, (-2511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -2511
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rl'3k$Cil_@[_PI0");
      IOUtils.skipFully((Reader) stringReader0, 0L);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) pipedReader0, (-18L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -18
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long long0 = IOUtils.skip((ReadableByteChannel) null, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, (-5658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -5658
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("url");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) fileChannel0, 584L);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.bytbuddy.raw");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("net.bytbuddy.raw");
      mockPrintStream0.print((-718.0F));
      try { 
        IOUtils.copyLarge((InputStream) mockFileInputStream0, (OutputStream) mockPrintStream0, 531L, (-456L));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Bytes to skip: 531 actual: 6
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("o^*ut<utStream");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertTrue(list0.contains("o^*ut<utStream"));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outpufre{m");
      char[] charArray0 = new char[8];
      IOUtils.readFully((Reader) stringReader0, charArray0);
      assertArrayEquals(new char[] {'o', 'u', 't', 'p', 'u', 'f', 'r', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) stringReader0, charArray0, (-780), (-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -780
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3900);
      // Undeclared exception!
      try { 
        IOUtils.readFully((ReadableByteChannel) socketChannel0, byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      SocketChannel socketChannel0 = SocketChannel.open();
      IOUtils.readFully((ReadableByteChannel) socketChannel0, byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      InputStream inputStream0 = IOUtils.toInputStream("C|Ly");
      try { 
        IOUtils.readFully(inputStream0, byteArray0, 560, 888);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 888 actual: 4
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      InputStream inputStream0 = IOUtils.toInputStream("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      IOUtils.readFully(inputStream0, byteArray0, 0, 0);
      assertEquals(71, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("#}?]5H");
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, (byte[]) null, (-879), (-879));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -879
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) "Sensitive");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = IOUtils.length(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.IOUtils");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, (-1L), 22L);
      assertEquals("org.apache.commons.io.", charArrayWriter0.toString());
      assertEquals(22L, long0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.IOUtils");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) charArrayWriter0, 0L, 2458L);
      assertEquals("org.apache.commons.io.IOUtils", charArrayWriter0.toString());
      assertEquals(29L, long0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) null, 22L, (-1738L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0, (-3117L), 1L);
      assertEquals("n", byteArrayOutputStream0.toString());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("~)Gt%7CjBX");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      long long0 = IOUtils.copyLarge((InputStream) queueInputStream0, (OutputStream) mockPrintStream0, 0L, 8202L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(queueInputStream0);
      long long0 = IOUtils.copyLarge((InputStream) dataInputStream0, (OutputStream) byteArrayOutputStream0, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      long long0 = IOUtils.copyLarge((InputStream) queueInputStream0, (OutputStream) byteArrayOutputStream0, (-456L), (-2187L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(pipedReader0, pipedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(queueInputStream0, charsetDecoder0);
      InputStreamReader inputStreamReader1 = new InputStreamReader(queueInputStream0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(inputStreamReader1, inputStreamReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      StringReader stringReader1 = new StringReader("Bytes to skip must not be negative: ");
      IOUtils.toByteArray((Reader) stringReader0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1);
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) bufferedReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0);
      assertEquals(12, byteArray0.length);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) bufferedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outputStream");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) bufferedReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) inputStreamReader0);
      try { 
        IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<mKp5_Zy#u.E xDW");
      boolean boolean0 = IOUtils.contentEquals((Reader) null, (Reader) stringReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      boolean boolean0 = IOUtils.contentEquals((Reader) mockFileReader0, (Reader) mockFileReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")v(<Yd`Ru&h7#v");
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(byteArray0);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) queueInputStream0, (InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "+euc.=&PDNTS*VFE'Q", charset0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) queueInputStream0, inputStream0);
      assertEquals(17, inputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write((int) (byte)20);
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) byteArrayInputStream0, (InputStream) queueInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream0);
      assertEquals(12, inputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[5];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(5, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) charArrayWriter0, iOConsumer0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) null, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      IOUtils.close((Closeable) mockSocket0);
      assertFalse(mockSocket0.isInputShutdown());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, (-5949));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 24);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, (int) (byte)0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(47);
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) pipedReader0, (-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) charArrayReader0);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) pipedOutputStream0, (-609));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ALWAYS");
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "outputStream");
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer(inputStream0);
      IOUtils.buffer((InputStream) bufferedInputStream0, (int) (byte) (-85));
      assertEquals(12, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(", offset=");
      // Undeclared exception!
      try { 
        IOUtils.buffer(inputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      IOUtils.write((byte[]) null, (Writer) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 114);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) pipedInputStream0, "mqQ,p[P%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // mqQ,p[P%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null, 864);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g'EFP");
      IOUtils.copy((InputStream) byteArrayInputStream0, (Writer) mockPrintWriter0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("f_PUvF{5\"V/6,#@D%b#", "f_PUvF{5\"V/6,#@D%b#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // f_PUvF{5\"V/6,#@D%b#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("+mNufod");
      // Undeclared exception!
      try { 
        IOUtils.lineIterator(inputStream0, "+mNufod");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +mNufod
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rl'3k$Cil[?@[_PI0");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) stringWriter0);
      long long0 = IOUtils.copy((Reader) stringReader0, (Appendable) bufferedWriter0);
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertTrue(mockServerSocket0.isClosed());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URL) null, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StringReader stringReader0 = new StringReader("outpufre{m");
      char[] charArray0 = new char[12];
      try { 
        IOUtils.readFully((Reader) stringReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 12 actual: 10
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) dataInputStream0, "outputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // outputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) byteArrayInputStream0, (Writer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("~)Gt%7CjBX");
      IOUtils.write((CharSequence) "~)Gt%7CjBX", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((CharSequence) null, (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Negative initial size: ");
      IOUtils.writeLines((Collection<?>) linkedList0, (String) null, (OutputStream) mockFileOutputStream0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.bytbuddy.raw");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) linkedList0, "", (OutputStream) mockPrintStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals(8192, IOUtils.DEFAULT_BUFFER_SIZE);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reader must not be null
         //
         verifyException("org.apache.commons.io.LineIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      IOUtils.closeQuietly((Reader) null);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      IOUtils.closeQuietly((Selector) null);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.write("6mv%dmc(ry }", (OutputStream) byteArrayOutputStream0, "6mv%dmc(ry }");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6mv%dmc(ry }
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[9];
      IOUtils.write(byteArray0, (Writer) stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOUtils.closeQuietly((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = IOUtils.toCharArray((InputStream) byteArrayInputStream0);
      assertEquals(17, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "outputStream");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) dataInputStream0, (-380));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      LineIterator lineIterator0 = IOUtils.lineIterator((InputStream) byteArrayInputStream0, charset0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) charArrayReader0, "outputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // outputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1584);
      IOUtils.closeQuietly((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write("org.junitpioneer.jupite.cartesian.CartesianValueArgumentsProvider", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("Skip count must be non-negative, actual: ", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Skip count must be non-negative, actual: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("outputStream");
      assertEquals(12, inputStream0.available());
      
      long long0 = IOUtils.consume(inputStream0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[1];
      IOUtils.close(closeableArray0);
      assertEquals(1, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "outputStream", "outputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // outputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")v(<Yd`Rju&h7#v");
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) mockFileOutputStream0, ")v(<Yd`Rju&h7#v");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )v(<Yd`Rju&h7#v
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0, "Y");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      IOUtils.closeQuietly((Socket) mockSocket0);
      assertTrue(mockSocket0.isClosed());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.toString((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null, "#+Qy#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #+Qy#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toCharArray((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long long0 = IOUtils.copyLarge((Reader) null, (Writer) charArrayWriter0, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      IOUtils.write((char[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", offset=");
      IOUtils.toByteArray((Reader) stringReader0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.SizeFileFilter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      char[] charArray0 = new char[1];
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) mockPrintWriter0, 1L, (-456L), charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("file");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("outputStream");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      IOUtils.closeQuietly((OutputStream) filterOutputStream0);
  }
}
