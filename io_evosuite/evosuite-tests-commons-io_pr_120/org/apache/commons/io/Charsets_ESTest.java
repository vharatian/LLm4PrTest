/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:54:51 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.SortedMap;
import org.apache.commons.io.Charsets;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Charsets_ESTest extends Charsets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Charset charset0 = Charsets.toCharset("L3");
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Charsets.toCharset("org");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = Charsets.toCharset((String) null);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Charsets.toCharset(")9WV<kh");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )9WV<kh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Charset charset0 = Charsets.toCharset((Charset) null);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Charset charset0 = Charsets.UTF_16BE;
      Charset charset1 = Charsets.toCharset(charset0);
      assertTrue(charset1.isRegistered());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Charsets charsets0 = new Charsets();
      Charset charset0 = Charsets.toCharset(charsets0.US_ASCII);
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SortedMap<String, Charset> sortedMap0 = Charsets.requiredCharsets();
      assertFalse(sortedMap0.isEmpty());
  }
}
