/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:49:53 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.FileFilterUtils;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileFilterUtils_ESTest extends FileFilterUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.sizeRangeFileFilter(1010L, 0L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.falseFileFilter();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      IOFileFilter iOFileFilter1 = FileFilterUtils.prefixFileFilter("filter", iOCase0);
      IOFileFilter iOFileFilter2 = FileFilterUtils.makeCVSAware(iOFileFilter1);
      IOFileFilter iOFileFilter3 = FileFilterUtils.orFileFilter(iOFileFilter0, iOFileFilter2);
      assertNotNull(iOFileFilter3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      IOCase iOCase0 = IOCase.SYSTEM;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("org.apache.commons.io.FileUtils", iOCase0);
      IOFileFilter iOFileFilter1 = FileFilterUtils.andFileFilter(iOFileFilter0, regexFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[0];
      List<IOFileFilter> list0 = FileFilterUtils.toList(iOFileFilterArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      IOFileFilter iOFileFilter0 = FileFilterUtils.suffixFileFilter("collector", iOCase0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.suffixFileFilter("*3fPJ_f.}$Vo+C");
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.sizeFileFilter(0L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.prefixFileFilter("]HS8?");
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[0];
      IOFileFilter iOFileFilter0 = FileFilterUtils.or(iOFileFilterArray0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      IOFileFilter iOFileFilter0 = FileFilterUtils.notFileFilter(directoryFileFilter0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      IOFileFilter iOFileFilter0 = FileFilterUtils.nameFileFilter("", iOCase0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter(byteArray0, 677L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter(byteArray0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter("5~z[", 0L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.magicNumberFileFilter("y} tsOLUdS G )Q");
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) trueFileFilter0, (File[]) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      Vector<File> vector0 = new Vector<File>();
      MockFile mockFile0 = new MockFile("<+]l", "q=ZS!SucpU");
      vector0.add((File) mockFile0);
      Set<File> set0 = FileFilterUtils.filterSet(iOFileFilter0, (Iterable<File>) vector0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      File[] fileArray0 = new File[6];
      File[] fileArray1 = FileFilterUtils.filter(iOFileFilter0, fileArray0);
      assertEquals(6, fileArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      arrayList0.add((File) null);
      File[] fileArray0 = FileFilterUtils.filter(iOFileFilter0, (Iterable<File>) arrayList0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      File[] fileArray0 = FileFilterUtils.filter(iOFileFilter0, (Iterable<File>) arrayList0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, (-946), 2, (-946), 2);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, true);
      IOFileFilter iOFileFilter0 = FileFilterUtils.asFileFilter((FilenameFilter) ageFileFilter0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[1];
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      iOFileFilterArray0[0] = (IOFileFilter) andFileFilter0;
      IOFileFilter iOFileFilter0 = FileFilterUtils.and(iOFileFilterArray0);
      assertFalse(iOFileFilter0.equals((Object)andFileFilter0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((File) mockFile0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.sizeFileFilter((-430L), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.nameFileFilter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter(byteArray0, 816L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number must contain at least one byte
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number must contain at least one byte
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter("0", (-4349L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be negative
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The magic number must contain at least one byte
         //
         verifyException("org.apache.commons.io.filefilter.MagicNumberFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.filterSet((IOFileFilter) null, (File[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      // Undeclared exception!
      try { 
        FileFilterUtils.filterSet((IOFileFilter) null, (Iterable<File>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.asFileFilter((FileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((Date) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.AgeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.AgeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("69t< ", "69t< ");
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((File) mockFile0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/69t< /69t< 
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      File file0 = MockFile.createTempFile("z[-M72C@[", "z[-M72C@[");
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/z[-M72C@[0z[-M72C@[
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[3];
      // Undeclared exception!
      try { 
        FileFilterUtils.toList(iOFileFilterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filters[i]
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      // Undeclared exception!
      try { 
        FileFilterUtils.filterList((IOFileFilter) null, (Iterable<File>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileFilterUtils.filter(iOFileFilter0, fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.DirectoryFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      File[] fileArray0 = FileFilterUtils.filter(iOFileFilter0, (File[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[6];
      // Undeclared exception!
      try { 
        FileFilterUtils.and(iOFileFilterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filters[i]
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeSVNAware((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeFileOnly((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.makeFileOnly(iOFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeDirectoryOnly((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.makeDirectoryOnly(iOFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeCVSAware((IOFileFilter) null);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EmptyFileFilter emptyFileFilter0 = new EmptyFileFilter();
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) emptyFileFilter0, (Iterable<File>) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      Vector<File> vector0 = new Vector<File>();
      Set<File> set0 = FileFilterUtils.filterSet(iOFileFilter0, (Iterable<File>) vector0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      List<File> list0 = FileFilterUtils.filterList(iOFileFilter0, (Iterable<File>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.falseFileFilter();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      IOFileFilter iOFileFilter1 = FileFilterUtils.prefixFileFilter("filter", iOCase0);
      IOFileFilter iOFileFilter2 = FileFilterUtils.makeCVSAware(iOFileFilter1);
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[3];
      iOFileFilterArray0[0] = iOFileFilter0;
      iOFileFilterArray0[1] = iOFileFilter2;
      iOFileFilterArray0[2] = iOFileFilter2;
      List<IOFileFilter> list0 = FileFilterUtils.toList(iOFileFilterArray0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.notFileFilter((IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileFileFilter fileFileFilter0 = new FileFileFilter();
      File[] fileArray0 = new File[8];
      // Undeclared exception!
      try { 
        FileFilterUtils.filterList((IOFileFilter) fileFileFilter0, fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.FileFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.sizeRangeFileFilter((-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      // Undeclared exception!
      try { 
        FileFilterUtils.filter((IOFileFilter) null, (Iterable<File>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.fileFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.makeDirectoryOnly(iOFileFilter0);
      Class<File> class0 = File.class;
      ServiceLoader<File> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Set<File> set0 = FileFilterUtils.filterSet(iOFileFilter1, (Iterable<File>) serviceLoader0);
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>(set0);
      List<File> list0 = FileFilterUtils.filterList(iOFileFilter1, (Iterable<File>) priorityQueue0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.ageFileFilter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1581L));
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((Date) mockDate0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      File[] fileArray0 = new File[1];
      Set<File> set0 = FileFilterUtils.filterSet((IOFileFilter) trueFileFilter0, fileArray0);
      List<File> list0 = FileFilterUtils.filterList((IOFileFilter) trueFileFilter0, (Iterable<File>) set0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((File) mockFile0, true);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // magicNumber
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.nameFileFilter("org.apache.commons.io.filefilter.FileFilterUtils");
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.asFileFilter((FilenameFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // magicNumber
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.or((IOFileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filters
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1581L));
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter((Date) mockDate0, true);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.prefixFileFilter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        FileFilterUtils.nameFileFilter((String) null, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter(1024L);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        FileFilterUtils.suffixFileFilter((String) null, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.andFileFilter((IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.sizeFileFilter(0L, true);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.ageFileFilter(1219L, false);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.sizeFileFilter((-44L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException("org.apache.commons.io.filefilter.SizeFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.trueFileFilter();
      List<File> list0 = FileFilterUtils.filterList(iOFileFilter0, (File[]) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter((byte[]) null, (-1417L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // magicNumbers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.orFileFilter((IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        FileFilterUtils.prefixFileFilter((String) null, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      IOFileFilter iOFileFilter0 = FileFilterUtils.directoryFileFilter();
      IOFileFilter iOFileFilter1 = FileFilterUtils.asFileFilter((FileFilter) iOFileFilter0);
      assertNotNull(iOFileFilter1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileFilterUtils fileFilterUtils0 = new FileFilterUtils();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.suffixFileFilter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      IOFileFilter iOFileFilter0 = FileFilterUtils.makeSVNAware(falseFileFilter0);
      assertNotNull(iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileFilterUtils.magicNumberFileFilter((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // magicNumbers
         //
         verifyException("java.util.Objects", e);
      }
  }
}
