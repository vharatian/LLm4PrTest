/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:54:07 GMT 2025
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PrefixFileFilter_ESTest extends PrefixFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      String string0 = prefixFileFilter0.toString();
      assertEquals("PrefixFileFilter(null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      File file0 = MockFile.createTempFile("Q[^<W8U", "");
      Path path0 = file0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = prefixFileFilter0.preVisitDirectory(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0, iOCase0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("(", iOCase0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      MockFile mockFile0 = new MockFile("*<", "");
      boolean boolean0 = prefixFileFilter0.accept((File) mockFile0, "l4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      MockFile mockFile0 = new MockFile("*<", "");
      boolean boolean0 = prefixFileFilter0.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      // Undeclared exception!
      try { 
        prefixFileFilter0.accept((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.PrefixFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((String[]) null, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefixes
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((List<String>) null, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefixes
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add("");
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((String) null, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("");
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      FileVisitResult fileVisitResult0 = prefixFileFilter0.accept(path0, (BasicFileAttributes) null);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("NF{$Xtv7e/pR{");
      MockFile mockFile0 = new MockFile("NF{$Xtv7e/pR{");
      boolean boolean0 = prefixFileFilter0.accept((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      MockFile mockFile0 = new MockFile("oO", "oO");
      boolean boolean0 = prefixFileFilter0.accept((File) mockFile0, "oO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefixes
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      boolean boolean0 = prefixFileFilter0.accept((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefixes
         //
         verifyException("java.util.Objects", e);
      }
  }
}
