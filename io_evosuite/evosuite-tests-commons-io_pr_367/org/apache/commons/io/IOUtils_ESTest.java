/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:24:57 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.InetAddress;
import java.net.ProtocolFamily;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.StandardProtocolFamily;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.Selector;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.MalformedInputException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.apache.commons.io.CloseableURLConnection;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.input.QueueInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      IOUtils.skipFully((Reader) inputStreamReader0, 0L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[9];
      int int0 = IOUtils.read((Reader) charArrayReader0, charArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-1768.65F));
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder1);
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(338);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, 1L, 1L, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("M* ");
          URL uRL0 = MockURL.getFtpExample();
          // Undeclared exception!
          try { 
            IOUtils.copy(uRL0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"M* \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.IOUtils.copy(IOUtils.java:1338)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\uFFFD");
      IOUtils.write((CharSequence) "\uFFFD", (OutputStream) mockPrintStream0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<FilterInputStream> arrayList0 = new ArrayList<FilterInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(942);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      arrayList0.add((FilterInputStream) bufferedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = IOUtils.buffer((OutputStream) pipedOutputStream0);
      IOUtils.writeLines((Collection<?>) arrayList0, "", (OutputStream) bufferedOutputStream0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Bytes to skip must not be negative: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer();
      IOUtils.write((CharSequence) stringBuffer0, (OutputStream) mockPrintStream0, (String) null);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#t04d9*i/JUP4F\"m");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GBc6vx+");
      IOUtils.copy((Reader) stringReader0, (OutputStream) mockFileOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("eS$");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      IOUtils.copy((Reader) pushbackReader0, (OutputStream) dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String string0 = IOUtils.toString((Reader) charArrayReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "s5o*u");
      assertEquals(5, inputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.toString(inputStream0, charset0);
      assertEquals("s5o*u", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      String string0 = IOUtils.toString((InputStream) queueInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "VxSq", (Charset) null);
      assertEquals(4, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("DO");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0, (String) null);
      assertEquals(2, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("apache.commons.io.function.IOBiFunction");
      IOUtils.readLines((Reader) stringReader0);
      char[] charArray0 = IOUtils.toCharArray((Reader) stringReader0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) sequenceInputStream0, charset0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("^ZJ");
      MockFile mockFile0 = new MockFile("^ZJ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      char[] charArray0 = IOUtils.toCharArray((InputStream) mockFileInputStream0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Insensitive");
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockFileWriter0, (long) 0, 1241L, charArray0);
      assertEquals(8L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      IOUtils.toByteArray(inputStream0, (long) 2);
      assertEquals(7, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) sequenceInputStream0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) byteArrayInputStream0, 172);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = IOUtils.resourceToURL("");
      assertEquals((-1), uRL0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      String string0 = IOUtils.resourceToString("", charset0, classLoader0);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "Insensitive");
      Charset charset0 = Charset.defaultCharset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      List<String> list0 = IOUtils.readLines((InputStream) pushbackInputStream0, charset0);
      assertTrue(list0.contains("Insensitive"));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      List<String> list0 = IOUtils.readLines((InputStream) sequenceInputStream0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = IOUtils.readFully((InputStream) sequenceInputStream0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      char[] charArray0 = new char[9];
      int int0 = IOUtils.read((Reader) bufferedReader0, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      int int0 = IOUtils.read((InputStream) queueInputStream0, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('v');
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuilder1);
      int int0 = IOUtils.read(inputStream0, byteArray0);
      assertEquals(0, inputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) ")WM-DuD$X");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = IOUtils.getCharArray();
      assertEquals(8192, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = IOUtils.getByteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      long long0 = IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockPrintWriter0, (-491L), (long) (byte)28);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("S|8G<ISW G");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals(10, byteArrayOutputStream0.size());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringReader stringReader0 = new StringReader("apache.commons.io.function.IOBiFunction");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertTrue(list0.contains("apache.commons.io.function.IOBiFunction"));
      
      StringBuffer stringBuffer1 = new StringBuffer("apache.commons.io.function.IOBiFunction");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer1);
      long long0 = IOUtils.copy((Reader) stringReader0, (Appendable) stringBuffer0, charBuffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Insensitive");
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockFileWriter0, (long) 0, 1241L, charArray0);
      assertEquals(8L, long0);
      
      int int0 = IOUtils.copy((Reader) charArrayReader0, (Writer) mockFileWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray(0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.writer((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VxSq", true);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) null, "VxSq", (OutputStream) mockFileOutputStream0, "VxSq");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // VxSq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector<StringBuilder> vector0 = new Vector<StringBuilder>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) vector0, "Q8%Ph@V-]l,>y^F", (OutputStream) pipedOutputStream0, "Q8%Ph@V-]l,>y^F");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Q8%Ph@V-]l,>y^F
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ArrayList<FilterInputStream> arrayList0 = new ArrayList<FilterInputStream>();
      arrayList0.add((FilterInputStream) pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.writeLines((Collection<?>) arrayList0, (String) null, (OutputStream) pipedOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArrayList<FilterInputStream> arrayList0 = new ArrayList<FilterInputStream>();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      arrayList0.add((FilterInputStream) pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.writeLines((Collection<?>) arrayList0, "\uFFFD", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.writeChunked(byteArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("7R5xRPz) v`4g7)/b9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      char[] charArray0 = new char[3];
      IOUtils.close((Closeable) mockPrintWriter0);
      try { 
        IOUtils.write(charArray0, (Writer) mockFileWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\uFFFD");
      // Undeclared exception!
      try { 
        IOUtils.write((char[]) null, (OutputStream) mockPrintStream0, "C>|Ymx4\"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // C>|Ymx4\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null, "appendable");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // appendable
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write(byteArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.write("url", (OutputStream) pipedOutputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("ma~#>p", (OutputStream) null, "org.apache.commons.io.filefilter.CanWriteFileFilter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.CanWriteFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "M-DD$!X");
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) stringBuilder0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Chars to skip: ");
      mockFileWriter0.close();
      try { 
        IOUtils.write((CharSequence) "Chars to skip: ", (Writer) mockFileWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "M-DuD$X", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":'u1 `5FI%k1");
      mockFileOutputStream0.close();
      try { 
        IOUtils.write((CharSequence) ":'u1 `5FI%k1", (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "owner");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // owner
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URI uRI0 = MockURI.URI((String) null, (String) null, "\t\u0000\u0000\u0000", (String) null, (String) null);
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URI uRI0 = MockURI.URI("wildcard", "wildcard", "wildcard");
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "ache.commons.io.function.IOBiFunction");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ache.commons.io.function.IOBiFunction
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toString((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("\uFFFD\u0001\uFFFD\uFFFDd\u0000", "\uFFFD\u0001\uFFFD\uFFFDd\u0000");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \uFFFD\u0001\uFFFD\uFFFDd\u0000
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "\n", "\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      try { 
        IOUtils.toCharArray((Reader) lineNumberReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toCharArray((InputStream) pipedInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<PushbackInputStream> stack0 = new Stack<PushbackInputStream>();
      Enumeration<PushbackInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) sequenceInputStream0, "+yY&0.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +yY&0.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toCharArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      try { 
        IOUtils.toByteArray((URLConnection) closeableURLConnection0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) charArrayReader0, "MKnZsFW~]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // MKnZsFW~]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 8182L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0, 106L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) pipedReader0, (-1777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("vAZ");
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream(inputStream0, (-1698));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1698
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) mockFileInputStream0, 20);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      try { 
        IOUtils.toBufferedInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, 2976L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.skipFully((Reader) charArrayReader0, (long) (byte) (-82));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -82
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1176);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1176);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0, 8);
      try { 
        IOUtils.skipFully((Reader) bufferedReader0, 13L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) datagramChannel0, 513L);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) null, (long) 2966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(10);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 1095);
      try { 
        IOUtils.skip((Reader) bufferedReader0, (long) 1095);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) null, 1267L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 900);
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) byteArrayInputStream0, 776L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.skip((InputStream) pipedInputStream0, (long) 1441);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      try { 
        IOUtils.resourceToString("", charset0, classLoader1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        IOUtils.resourceToByteArray("Chars to skFip: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Chars to skFip: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      try { 
        IOUtils.readLines((Reader) inputStreamReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.readLines((InputStream) mockFileInputStream0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) dataInputStream0, "Length to read: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Length to read: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.readLines((InputStream) mockFileInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0, 2147483645, 1542);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[20];
      StringReader stringReader0 = new StringReader("i<@7>%^D#R8");
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) stringReader0, charArray0, (-490), (-490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -490
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[4];
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 8);
      try { 
        IOUtils.readFully((Reader) pushbackReader0, charArray0, (-2146317803), 942);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.close();
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      // Undeclared exception!
      try { 
        IOUtils.readFully(inputStream0, (byte[]) null, 5775, 5775);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0, 8192, 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.readFully((InputStream) mockFileInputStream0, byteArray0, (int) (byte) (-38), 2967);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.readFully((InputStream) pipedInputStream0, 485);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, 1257);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 1257 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      // Undeclared exception!
      try { 
        IOUtils.read((ReadableByteChannel) datagramChannel0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) charArrayReader0, charArray0, 791, 791);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) mockFileReader0, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[2];
      PipedReader pipedReader0 = new PipedReader('=');
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0, 450, (int) (byte)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) byteArrayInputStream0, byteArray0, (-1), 1509);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.read((InputStream) mockFileInputStream0, byteArray0, 10, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.read((InputStream) mockFileInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) queueInputStream0, "M-DuD$X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // M-DuD$X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2242);
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[5];
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) stringWriter0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Insensitive");
      mockFileWriter0.close();
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockFileWriter0, (long) 0, 1241L, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      try { 
        IOUtils.copyLarge((Reader) inputStreamReader0, (Writer) mockPrintWriter0, (long) (byte)28, (long) (byte) (-54));
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("isOther");
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, (Writer) mockPrintWriter0, (long) 13, (-45L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.function.IOBiFunction", "The size must be non-negative");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtils.copyLarge((Reader) pipedReader0, (Writer) mockPrintWriter0, (-696L), (-696L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YhevF$bVF`/}#Es56%l");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      IOUtils.readLines((Reader) stringReader0);
      StringWriter stringWriter0 = new StringWriter(8);
      try { 
        IOUtils.copyLarge((Reader) pushbackReader0, (Writer) stringWriter0, 1L, (long) 8);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\uFFFD");
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) mockPrintStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3090);
      stack0.add(pipedInputStream0);
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1196);
      try { 
        IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        IOUtils.copy(uRL0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("M-DuD$X");
      StringBuilder stringBuilder0 = new StringBuilder("doesn't contain any substring.");
      // Undeclared exception!
      IOUtils.copy((Reader) stringReader0, (Appendable) stringBuilder0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("net.bytebuddy.build.Plugin$Factory$UsingReflection");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "net.bytebuddy.build.Plugin$Factory$UsingReflection");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) stringReader0, (Appendable) charBuffer0, charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("does%Et contain any yubstr8ng.");
      StringReader stringReader0 = new StringReader(")WM-DuD$X");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) stringReader0, (Appendable) mockPrintWriter0, (CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      StringReader stringReader0 = new StringReader("rw-r--r--");
      stringReader0.close();
      try { 
        IOUtils.copy((Reader) stringReader0, (Appendable) charBuffer0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YhevF$bVF`/}#Es56%l");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":'u1 `5FI%k1");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) bufferedReader0, (OutputStream) mockFileOutputStream0, "apache.commons.io.function.IOBiFunction");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // apache.commons.io.function.IOBiFunction
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("9Z<5@w@TOV");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      try { 
        IOUtils.copy((InputStream) pipedInputStream0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((ByteArrayOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*r^S/M%lr");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        IOUtils.contentEqualsIgnoreEOL(stringReader0, mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("QPI)&mtkEBGz!=;>g,");
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      try { 
        IOUtils.contentEqualsIgnoreEOL(stringReader0, inputStreamReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      IOUtils.close((Closeable) lineNumberReader0);
      try { 
        IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) lineNumberReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "*r^S/M%lr");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtils.contentEquals((InputStream) mockFileInputStream0, inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.closeQuietly((Reader) inputStreamReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) pipedReader0, (-4330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null, 837);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null, (-1640));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) null, "\uFFFD");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \uFFFD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Insensitive");
      IOUtils.write("Insensitive", (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\uFFFD");
      IOUtils.write("C>|Ymx4\"", (OutputStream) mockPrintStream0, charset0);
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", (OutputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Duplicate registration of handler for ");
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write(charArray0, (OutputStream) mockPrintStream0, charset0);
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.write(byteArray0, (Writer) mockPrintWriter0, charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.toString((InputStream) pipedInputStream0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = IOUtils.toString((InputStream) sequenceInputStream0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      byte[] byteArray0 = IOUtils.toByteArray(uRL0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0, charset0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) sequenceInputStream0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) sequenceInputStream0, (-1806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1806
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("c9N| t5");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      assertEquals(1, byteArrayInputStream0.available());
      
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) charArrayReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0);
      assertSame(bufferedReader0, bufferedReader1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("contains '%s'.");
      try { 
        IOUtils.skipFully((Reader) stringReader0, 204L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 204 actual: 14
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P6DK");
      long long0 = IOUtils.skip((Reader) stringReader0, (long) 2989);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(queueInputStream0, charsetDecoder0);
      long long0 = IOUtils.skip((Reader) inputStreamReader0, 19L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToURL("Resource not found: ", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Resource not found: 
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resourceToURL((String) null, (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOUtils.readFully((InputStream) sequenceInputStream0, (byte[]) null, (-1698), 0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[19];
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      int int0 = IOUtils.read((Reader) lineNumberReader0, charArray0, 0, 13);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[20];
      StringReader stringReader0 = new StringReader("i<@7>%^D#R8");
      int int0 = IOUtils.read((Reader) stringReader0, charArray0, (-490), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[0];
      try { 
        IOUtils.read((Reader) pipedReader0, charArray0, 1761, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, (byte[]) null, 13, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream("ov jA1", charset0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        IOUtils.read(inputStream0, byteArray0, (int) (byte) (-42), (-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -717
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("YhevF$bVF`/}#Es56%l");
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = IOUtils.read((InputStream) sequenceInputStream0, byteArray0, 13, 1);
      assertEquals(19, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      StringReader stringReader0 = new StringReader("\t\u0000\u0000\u0000");
      Writer writer0 = IOUtils.writer(charBuffer0);
      char[] charArray0 = new char[3];
      long long0 = IOUtils.copyLarge((Reader) stringReader0, writer0, charArray0);
      assertEquals(8188, charBuffer0.length());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(8192);
      byte[] byteArray0 = new byte[9];
      try { 
        IOUtils.copyLarge((InputStream) pipedInputStream0, (OutputStream) pipedOutputStream0, (-280L), (-280L), byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(242);
      byte[] byteArray0 = new byte[8];
      long long0 = IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) byteArrayOutputStream0, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray(")WM-DuD$X");
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      InputStream inputStream1 = IOUtils.toBufferedInputStream(inputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.copyLarge(inputStream1, (OutputStream) pipedOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Insensitive");
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = IOUtils.copy((Reader) charArrayReader0, (Writer) mockFileWriter0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":'u1 `5FI%k1");
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = IOUtils.toInputStream(":'u1 `5FI%k1", charset0);
      assertEquals(12, inputStream0.available());
      
      int int0 = IOUtils.copy(inputStream0, (OutputStream) mockFileOutputStream0);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Stream<Closeable> stream0 = Stream.empty();
      IOUtils.closeQuietly(stream0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) null, (Consumer<IOException>) stream_Builder0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Stream.Builder<IOException> stream_Builder0 = Stream.builder();
      IOUtils.closeQuietly((Closeable) pipedWriter0, (Consumer<IOException>) stream_Builder0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      IOUtils.close((URLConnection) null);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(510);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.copy((Reader) charArrayReader0, (OutputStream) byteArrayOutputStream0, charset0);
      assertEquals(20, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(167);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) null, (OutputStream) byteArrayOutputStream0, (-727));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1196);
      long long0 = IOUtils.copyLarge((InputStream) sequenceInputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockServerSocket mockServerSocket0 = new MockServerSocket(47, 47, inetAddress0);
      IOUtils.closeQuietly((Closeable) mockServerSocket0);
      assertEquals("ServerSocket[addr=null,localport=47]", mockServerSocket0.toString());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HD{4lti}y75${7rWI");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.copy((InputStream) queueInputStream0, (Writer) mockPrintWriter0, charset0);
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pushbackReader0, 8192);
      StringWriter stringWriter0 = new StringWriter(8192);
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = IOUtils.toCharArray((InputStream) byteArrayInputStream0, charset0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        IOUtils.resourceToByteArray("pache.commons.io.function.IOBiFunction", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: pache.commons.io.function.IOBiFunction
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStream inputStream0 = IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = IOUtils.readLines(inputStream0, charset0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.byteArray((-943));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        IOUtils.resourceToString((String) null, charset0, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Writer writer0 = IOUtils.writer(stringBuilder0);
      assertEquals("", writer0.toString());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Insensitive");
      Writer writer0 = IOUtils.writer(mockFileWriter0);
      assertSame(writer0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      IOUtils.writeLines((Collection<?>) set0, "[:l", (Writer) charArrayWriter0);
      assertEquals(60, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.function.IOBiFunction", "The size must be non-negative");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IOUtils.writeLines((Collection<?>) linkedHashSet0, (String) null, (Writer) mockPrintWriter0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OiU");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      IOUtils.writeLines((Collection<?>) null, "OiU", (Writer) outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArrayList<FilterInputStream> arrayList0 = new ArrayList<FilterInputStream>();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      arrayList0.add((FilterInputStream) pushbackInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.writeLines((Collection<?>) arrayList0, (String) null, (OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HashSet<StringBuilder> hashSet0 = new HashSet<StringBuilder>(100, 100);
      IOUtils.writeLines((Collection<?>) hashSet0, ".Nkwhd?;.q:~", (OutputStream) pipedOutputStream0, (String) null);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.writeLines((Collection<?>) null, "6&LG+~FYv*^k!O|@", (OutputStream) pipedOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[20];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Wvbg`H=VA");
      IOUtils.writeChunked(charArray0, (Writer) mockPrintWriter0);
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("doesn't contain any substring.");
      IOUtils.writeChunked((char[]) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("c9N| t5");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.writeChunked(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(7, byteArrayOutputStream0.size());
      assertEquals("c9N| t5", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Bytes to skip: ");
      IOUtils.writeChunked((byte[]) null, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("does%Et contain any substring.");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "does%Et contain any substring.");
      IOUtils.write(stringBuffer0, (Writer) mockPrintWriter0);
      assertEquals(30, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((StringBuffer) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      IOUtils.write((StringBuffer) null, (OutputStream) null, "5_");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.function.IOBiFunction", "The size must be non-negative");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      IOUtils.write((String) null, (OutputStream) mockPrintStream0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Chars to skFip: ");
      IOUtils.write((CharSequence) "Chars to skFip: ", (Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      IOUtils.write((CharSequence) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DefaultLocale");
      IOUtils.write((CharSequence) null, (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[20];
      MockFileWriter mockFileWriter0 = new MockFileWriter("JZJ");
      IOUtils.write(charArray0, (Writer) mockFileWriter0);
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.write((char[]) null, (Writer) charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      IOUtils.write((char[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      IOUtils.write((byte[]) null, (Writer) mockPrintWriter0, (String) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("*}+]2Se0mR");
      byte[] byteArray0 = new byte[0];
      IOUtils.write(byteArray0, (OutputStream) mockPrintStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((byte[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      String string0 = IOUtils.toString(uRL0, (Charset) null);
      assertEquals("META-INF\norg\n", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String string0 = IOUtils.toString((Reader) charArrayReader0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      assertEquals(9, inputStream0.available());
      
      String string0 = IOUtils.toString(inputStream0);
      assertEquals(")WM-DuD$X", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = IOUtils.toByteArray((Reader) charArrayReader0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "i\"aHdAQ=<}T");
      try { 
        IOUtils.toByteArray(inputStream0, 3665);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected read size, current: 11, expected: 3665
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      IOUtils.toByteArray(inputStream0, 1);
      assertEquals(8, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null, 2060);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0, (-491L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -491
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = IOUtils.toByteArray((InputStream) pipedInputStream0, 0L);
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GT-[");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      BufferedReader bufferedReader0 = IOUtils.buffer((Reader) pushbackReader0);
      BufferedReader bufferedReader1 = IOUtils.toBufferedReader((Reader) bufferedReader0, 47);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((ReadableByteChannel) null, (-2310L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -2310
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      IOUtils.skipFully((ReadableByteChannel) null, 0L);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skipFully((InputStream) null, (-22L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bytes to skip must not be negative: -22
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((Reader) null, (-1760L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1760
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      long long0 = IOUtils.skip((ReadableByteChannel) null, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, (-2377L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -2377
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((ReadableByteChannel) null, 698L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "i\"aHdAQ=<}T");
      long long0 = IOUtils.skip(inputStream0, 1619L);
      assertEquals(0, inputStream0.available());
      assertEquals(11L, long0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      long long0 = IOUtils.skip((InputStream) sequenceInputStream0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.skip((InputStream) null, (-467L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -467
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pushbackReader0, 8192);
      List<String> list0 = IOUtils.readLines((Reader) bufferedReader0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0);
      try { 
        IOUtils.readFully((Reader) charArrayReader0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 20 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readFully((Reader) charArrayReader0, charArray0);
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((Reader) charArrayReader0, charArray0, 1022, (-2467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -2467
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Charset.defaultCharset();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)103;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.read((ReadableByteChannel) datagramChannel0, byteBuffer0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      Enumeration<PipedInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, (byte[]) null, 1156, (-1698));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length must not be negative: -1698
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = IOUtils.length((Object[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = IOUtils.length(objectArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = IOUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = IOUtils.length((char[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = IOUtils.length(charArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = IOUtils.length((byte[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("w^ ?5:oXG%Y0");
      int int0 = IOUtils.length(byteArray0);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[20];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HD{4lti}y75${7rWI");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockPrintWriter0, (-1107L), (-1107L), charArray0);
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) charArrayWriter0, 1L, 1L, charArray0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ache.commons.io.function.IOBiFunction");
      long long0 = IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockPrintWriter0, (long) 0, (long) 0, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Chars to skip: ");
      try { 
        IOUtils.copyLarge((Reader) charArrayReader0, (Writer) mockFileWriter0, 1283L, 1283L, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Chars to skip: 1283 actual: 20
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1404), 960);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) pushbackInputStream0, (OutputStream) null, 5475L, (-73L), byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      StringReader stringReader0 = new StringReader("\t\u0000\u0000\u0000");
      long long0 = IOUtils.copy((Reader) stringReader0, (Appendable) charBuffer0, charBuffer0);
      assertEquals(4, charBuffer0.limit());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader(" to ");
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(stringReader0, charArrayReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4`");
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(stringReader0, (Reader) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(46);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(pipedReader0, pipedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      StringReader stringReader0 = new StringReader(")WM-DuD$X");
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(inputStream0, charset0);
      boolean boolean0 = IOUtils.contentEqualsIgnoreEOL(inputStreamReader0, stringReader0);
      assertEquals(0, inputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = IOUtils.contentEquals((Reader) pipedReader0, (Reader) pipedReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) inputStreamReader0, (Reader) lineNumberReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(8192);
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) stringBuffer0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) pushbackInputStream0, inputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) bufferedInputStream0, (InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      IOUtils.closeQuietly((Stream<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      PriorityQueue<SequenceInputStream> priorityQueue0 = new PriorityQueue<SequenceInputStream>();
      PriorityQueue<Closeable> priorityQueue1 = new PriorityQueue<Closeable>(priorityQueue0);
      IOUtils.closeQuietly((Iterable<Closeable>) priorityQueue1);
      assertEquals(0, priorityQueue1.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      IOUtils.closeQuietly((Iterable<Closeable>) null);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      IOUtils.closeQuietly((Closeable[]) null);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        IOUtils.toByteArray(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) charArrayWriter0, iOConsumer0);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      IOConsumer<IOException> iOConsumer0 = IOConsumer.noop();
      IOUtils.close((Closeable) null, iOConsumer0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Chars to skip: ");
      BufferedWriter bufferedWriter0 = IOUtils.buffer((Writer) mockFileWriter0);
      BufferedWriter bufferedWriter1 = IOUtils.buffer((Writer) bufferedWriter0, 918);
      assertSame(bufferedWriter1, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.buffer((Writer) charArrayWriter0, (-2147483645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) stringReader0, 2946);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0, 22);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(992);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) pipedReader0, 992);
      BufferedReader bufferedReader1 = IOUtils.buffer((Reader) bufferedReader0);
      assertSame(bufferedReader1, bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.buffer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 9);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0, 9);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("*}+]2Se0mR");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        IOUtils.buffer((OutputStream) dataOutputStream0, (-1625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.IOUtils", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = IOUtils.buffer((OutputStream) bufferedOutputStream0);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\r\n");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      IOUtils.buffer((InputStream) bufferedInputStream0, (-2028178999));
      assertEquals(2, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("owner");
      // Undeclared exception!
      try { 
        IOUtils.buffer(inputStream0, (-2226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "YhevF$bVF`/}#Es56%l");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 1021);
      IOUtils.buffer((InputStream) bufferedInputStream0);
      assertEquals(19, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = IOUtils.buffer((InputStream) mockFileInputStream0);
      assertNotNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        IOUtils.write((byte[]) null, (Writer) charArrayWriter0, ", expected: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , expected: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("file");
      // Undeclared exception!
      try { 
        IOUtils.toCharArray(inputStream0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      IOUtils.toBufferedInputStream((InputStream) mockFileInputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringWriter stringWriter0 = new StringWriter(13);
      IOUtils.copy((InputStream) sequenceInputStream0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream("\t\u0000\u0000\u0000", "initialList");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // initialList
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = MockFile.createTempFile("\t\u0000\u0000\u0000", "\t\u0000\u0000\u0000");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        IOUtils.lineIterator((InputStream) mockFileInputStream0, "x3");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // x3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")WM-DuD$X");
      PipedReader pipedReader0 = new PipedReader(92);
      try { 
        IOUtils.copy((Reader) pipedReader0, (Appendable) mockPrintWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      IOUtils.closeQuietly((ServerSocket) mockServerSocket0);
      assertTrue(mockServerSocket0.isClosed());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0, "Resource not found: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Resource not found: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0, ")WM-DuD$X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )WM-DuD$X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.readFully((Reader) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("$Proxy");
      IOUtils.closeQuietly((OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "kY$%11]0gt-]*gwOp");
      // Undeclared exception!
      try { 
        IOUtils.toString(inputStream0, "9)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = IOUtils.resourceToURL("", classLoader0);
      InputStream inputStream0 = IOUtils.toInputStream("=L05{)H{Q?<Ig(Nr", (Charset) null);
      URI uRI0 = MockURL.toURI(uRL0);
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        IOUtils.copy(inputStream0, (Writer) mockPrintWriter0, ")WM-DuD$X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )WM-DuD$X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray(")WM-DuD$X");
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, byteArray0, (-1698), 47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Length to read: 47 actual: 0
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("^ZJ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) stringBuilder0, (OutputStream) objectOutputStream0, "^ZJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^ZJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        IOUtils.toString(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toBufferedInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[20];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineIterator lineIterator0 = IOUtils.lineIterator((Reader) charArrayReader0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("WY)DE");
      StringBuffer stringBuffer0 = new StringBuffer("b]o>");
      IOUtils.write(stringBuffer0, (OutputStream) mockPrintStream0);
      assertEquals("b]o>", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")WM-DuD$X");
      MockPrintStream mockPrintStream0 = new MockPrintStream(")WM-DuD$X");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) stringReader0, (OutputStream) mockPrintStream0, ")WM-DuD$X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )WM-DuD$X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      QueueInputStream queueInputStream0 = IOUtils.copy(byteArrayOutputStream0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) queueInputStream0, (InputStream) queueInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\t\u0000\u0000\u0000", true);
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) mockFileOutputStream0, (-1182L), (-1182L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[20];
      StringReader stringReader0 = new StringReader("i<@7>%^D#R8");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      int int0 = IOUtils.read((Reader) pushbackReader0, charArray0);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      IOUtils.closeQuietly((Reader) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Selector selector0 = Selector.open();
      IOUtils.closeQuietly(selector0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.read((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write("HD{4lti}y75$7rWI", (OutputStream) null, "HD{4lti}y75$7rWI");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // HD{4lti}y75$7rWI
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write(byteArray0, (Writer) stringWriter0);
      assertEquals("\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      IOUtils.closeQuietly((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("OUEE\"=");
      assertEquals(6, inputStream0.available());
      
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertArrayEquals(new char[] {'O', 'U', 'E', 'E', '\"', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        IOUtils.readFully((InputStream) sequenceInputStream0, (-707));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      LineIterator lineIterator0 = IOUtils.lineIterator((InputStream) sequenceInputStream0, charset0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) charArrayReader0, "Insensitive");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Insensitive
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        IOUtils.resourceToURL("apache.commons.io.function.IOBiFunction");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: apache.commons.io.function.IOBiFunction
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("M@!<1>It4");
      IOUtils.closeQuietly((Writer) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        IOUtils.resourceToString("Fx',8^;", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resource not found: Fx',8^;
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      URI uRI0 = MockURI.create("JZJ");
      // Undeclared exception!
      try { 
        IOUtils.toByteArray(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[9];
      IOUtils.close(closeableArray0);
      assertEquals(9, closeableArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) "pv", "3e2sx");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 3e2sx
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockFile mockFile0 = new MockFile("", "}zH$u");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0, "pache.commons.io.function.IOBiFunction");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // pache.commons.io.function.IOBiFunction
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, "pathCounter");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // pathCounter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      IOUtils.closeQuietly((Socket) mockSocket0);
      assertFalse(mockSocket0.isBound());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.toString(byteArray0, "Timeout for vintage @Test must be positive.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Timeout for vintage @Test must be positive.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "\r\n");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
      assertEquals(2, inputStream0.available());
      
      char[] charArray0 = IOUtils.toCharArray((Reader) inputStreamReader0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      StringWriter stringWriter0 = new StringWriter(8192);
      long long0 = IOUtils.copyLarge((Reader) pushbackReader0, (Writer) stringWriter0, 0L, (-2901L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0);
      BufferedReader bufferedReader0 = IOUtils.toBufferedReader((Reader) inputStreamReader0);
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) bufferedReader0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) ")WM-DuD$X");
      byte[] byteArray0 = new byte[3];
      IOUtils.readFully(inputStream0, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = IOUtils.resourceToByteArray("");
      assertEquals(845, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"out\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1196);
      try { 
        IOUtils.toByteArray((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = IOUtils.byteArray();
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        IOUtils.toString(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Closeable[] closeableArray0 = new Closeable[1];
      IOUtils.closeQuietly(closeableArray0);
      assertEquals(1, closeableArray0.length);
  }
}
