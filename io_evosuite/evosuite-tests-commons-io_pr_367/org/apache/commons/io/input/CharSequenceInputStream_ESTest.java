/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:05:16 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.input.CharSequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceInputStream_ESTest extends CharSequenceInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1045);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 94);
      long long0 = charSequenceInputStream0.skip((-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1445);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, (-3987), (int) (byte) (-77));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=7, offset=-3987, length=-77
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (String) null, 1024);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1063);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 94);
      long long0 = charSequenceInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      int int0 = charSequenceInputStream0.available();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charBuffer0.get();
      // Undeclared exception!
      try { 
        charSequenceInputStream0.skip(659L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[16];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.read();
      charset0.encode(charBuffer0);
      charSequenceInputStream0.mark(0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.reset();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(", length=", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[16];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charBuffer0.flip();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charBuffer0.flip();
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, charset0, 2048);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", charset0, (-621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -621 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("DefaultLocale", "DefaultLocale", 1073741824);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // DefaultLocale
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("Array Size=", "Array Size=", 2138460607);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Array Size=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null, 385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("ir", "ir");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("AU>REw@G", "AU>REw@G");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // AU>REw@G
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[9];
      int int0 = charSequenceInputStream0.read(byteArray0, (int) (byte)0, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[5];
      int int0 = charSequenceInputStream0.read(byteArray0, 1, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(153);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 153);
      byte[] byteArray0 = new byte[2];
      charSequenceInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, (-3264), 153);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(153);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 153);
      long long0 = charSequenceInputStream0.skip(153);
      assertEquals(153L, long0);
      
      byte[] byteArray0 = new byte[2];
      int int0 = charSequenceInputStream0.read(byteArray0, (-2677), 153);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[4];
      int int0 = charSequenceInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", (Charset) null);
      int int0 = charSequenceInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[13];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (String) null);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("ASzL;@g/", charset0);
      charSequenceInputStream0.read();
      charSequenceInputStream0.mark(65);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(">", charset0);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[1];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[0];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("A`anSL;@gG", charset0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=1, offset=1, length=1
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      CharsetEncoder charsetEncoder0 = charSequenceInputStream0.getCharsetEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(", length=", charset0, 3350);
      long long0 = charSequenceInputStream0.skip(3350);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("AU>REw@G", (String) null, (-5907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -5,907 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("ASzL;@g/", charset0);
      charSequenceInputStream0.mark(65);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(125);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 125);
      charSequenceInputStream0.close();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("@Xp6C8s9F(", charset0);
      boolean boolean0 = charSequenceInputStream0.markSupported();
      assertTrue(boolean0);
  }
}
