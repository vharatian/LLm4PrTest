/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:31:48 GMT 2025
 */

package org.apache.commons.io.comparator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.lang.reflect.Array;
import java.time.chrono.HijrahEra;
import java.util.Comparator;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import org.apache.commons.io.comparator.CompositeFileComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompositeFileComparator_ESTest extends CompositeFileComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comparator<File>[] comparatorArray0 = (Comparator<File>[]) Array.newInstance(Comparator.class, 4);
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(comparatorArray0);
      MockFile mockFile0 = new MockFile("size");
      File file0 = MockFile.createTempFile("size", "%yy/X]q-3I|,", (File) mockFile0);
      // Undeclared exception!
      try { 
        compositeFileComparator0.compare((File) mockFile0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.comparator.CompositeFileComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparator<File>[] comparatorArray0 = (Comparator<File>[]) Array.newInstance(Comparator.class, 1);
      Comparator<File> comparator0 = Comparator.naturalOrder();
      comparatorArray0[0] = comparator0;
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(comparatorArray0);
      MockFile mockFile0 = new MockFile("");
      int int0 = compositeFileComparator0.compare((File) mockFile0, (File) mockFile0);
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector<Comparator<File>> vector0 = new Vector<Comparator<File>>(0, 0);
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(vector0);
      String string0 = compositeFileComparator0.toString();
      assertEquals("CompositeFileComparator{}", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comparator<File>[] comparatorArray0 = (Comparator<File>[]) Array.newInstance(Comparator.class, 6);
      Vector<Comparator<File>> vector0 = new Vector<Comparator<File>>(0, 0);
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(vector0);
      MockFile mockFile0 = new MockFile("</OcpYe<gxQ");
      Function<Object, File> function0 = (Function<Object, File>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(mockFile0, mockFile0).when(function0).apply(any());
      Comparator<File> comparator0 = compositeFileComparator0.thenComparing((Function<? super File, ? extends File>) function0);
      comparatorArray0[0] = comparator0;
      CompositeFileComparator compositeFileComparator1 = new CompositeFileComparator(comparatorArray0);
      int int0 = compositeFileComparator1.compare((File) null, (File) null);
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparator<File>[] comparatorArray0 = (Comparator<File>[]) Array.newInstance(Comparator.class, 4);
      Function<Object, HijrahEra> function0 = (Function<Object, HijrahEra>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<HijrahEra> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super HijrahEra>) toDoubleFunction0);
      Comparator<File> comparator1 = Comparator.comparing((Function<? super File, ? extends HijrahEra>) function0, (Comparator<? super HijrahEra>) comparator0);
      comparatorArray0[0] = comparator1;
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(comparatorArray0);
      // Undeclared exception!
      try { 
        compositeFileComparator0.compare((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.comparator.CompositeFileComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator((Iterable<Comparator<File>>) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector<Comparator<File>> vector0 = new Vector<Comparator<File>>(0, 0);
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(vector0);
      int int0 = compositeFileComparator0.compare((File) null, (File) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator((Comparator<File>[]) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Comparator<File>[] comparatorArray0 = (Comparator<File>[]) Array.newInstance(Comparator.class, 4);
      CompositeFileComparator compositeFileComparator0 = new CompositeFileComparator(comparatorArray0);
      String string0 = compositeFileComparator0.toString();
      assertEquals("CompositeFileComparator{null,null,null,null}", string0);
  }
}
