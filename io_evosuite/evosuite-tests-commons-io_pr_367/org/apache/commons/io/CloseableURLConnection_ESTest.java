/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:03:29 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.UnknownServiceException;
import java.security.Permission;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.CloseableURLConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CloseableURLConnection_ESTest extends CloseableURLConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.setRequestProperty("4q-?;>iA", "Cannot access member field ");
      assertEquals((-1), closeableURLConnection0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.addRequestProperty("X\"OE", "X\"OE");
      String string0 = closeableURLConnection0.getRequestProperty("X\"OE");
      assertEquals("X\"OE", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.addRequestProperty("", "");
      String string0 = closeableURLConnection0.getRequestProperty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      closeableURLConnection0.setReadTimeout(1274);
      int int0 = closeableURLConnection0.getReadTimeout();
      assertEquals(1274, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "org.apache.commons.io.CloseableURLConnection");
      InputStream inputStream0 = closeableURLConnection0.getInputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      closeableURLConnection0.setIfModifiedSince(1814L);
      long long0 = closeableURLConnection0.getIfModifiedSince();
      assertEquals(1814L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      long long0 = closeableURLConnection0.getHeaderFieldLong("X\"OE", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      long long0 = closeableURLConnection0.getHeaderFieldLong(" 6{N{}>Ok--<LM", 4230L);
      assertEquals(4230L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      int int0 = closeableURLConnection0.getHeaderFieldInt("Cannot inject classes into a sealed class loader", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      int int0 = closeableURLConnection0.getHeaderFieldInt("dwu)!r:]", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      long long0 = closeableURLConnection0.getHeaderFieldDate((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      long long0 = closeableURLConnection0.getHeaderFieldDate("", (-1368L));
      assertEquals((-1368L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      boolean boolean0 = closeableURLConnection0.equals(uRL0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.setUseCaches(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      // Undeclared exception!
      try { 
        closeableURLConnection0.setReadTimeout((-519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.setIfModifiedSince(33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.setDoOutput(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.setDoInput(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      // Undeclared exception!
      try { 
        closeableURLConnection0.setConnectTimeout((-622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CloseableURLConnection.open((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.URI("vHaFC", "vHaFC", "vHaFC");
      try { 
        CloseableURLConnection.open(uRI0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: vhafc
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        CloseableURLConnection.open(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.create("ew&");
      // Undeclared exception!
      try { 
        CloseableURLConnection.open(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.getRequestProperty("X\"OE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.getRequestProperties();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "a");
      try { 
        closeableURLConnection0.getContent();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // no content-type
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.addRequestProperty((String) null, ":JPl=z{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CloseableURLConnection closeableURLConnection0 = null;
      try {
        closeableURLConnection0 = new CloseableURLConnection((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      try { 
        closeableURLConnection0.getInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.setConnectTimeout(98629247);
      int int0 = closeableURLConnection0.getConnectTimeout();
      assertEquals(98629247, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      closeableURLConnection0.connect();
      // Undeclared exception!
      try { 
        closeableURLConnection0.setAllowUserInteraction(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      long long0 = closeableURLConnection0.getExpiration();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      String string0 = closeableURLConnection0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      int int0 = closeableURLConnection0.getReadTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      long long0 = closeableURLConnection0.getDate();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      CloseableURLConnection closeableURLConnection0 = new CloseableURLConnection(uRLConnection0);
      boolean boolean0 = closeableURLConnection0.equals(uRLConnection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.setDoInput(false);
      boolean boolean0 = closeableURLConnection0.getDoInput();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      Permission permission0 = closeableURLConnection0.getPermission();
      assertEquals("foo.bar:80", permission0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      Map<String, List<String>> map0 = closeableURLConnection0.getHeaderFields();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      URL uRL0 = closeableURLConnection0.getURL();
      assertEquals((-1), uRL0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      try { 
        closeableURLConnection0.getContent();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      String string0 = closeableURLConnection0.getRequestProperty("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.setAllowUserInteraction(false);
      assertFalse(closeableURLConnection0.getAllowUserInteraction());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      boolean boolean0 = closeableURLConnection0.getDefaultUseCaches();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      int int0 = closeableURLConnection0.getHeaderFieldInt((String) null, 167);
      assertEquals(167, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      boolean boolean0 = closeableURLConnection0.getUseCaches();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      String string0 = closeableURLConnection0.getHeaderField((-569));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      // Undeclared exception!
      try { 
        closeableURLConnection0.addRequestProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key is null
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      long long0 = closeableURLConnection0.getLastModified();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      String string0 = closeableURLConnection0.getHeaderField("Y`1M[{`\"iJ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.setDoOutput(true);
      boolean boolean0 = closeableURLConnection0.getDoOutput();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      long long0 = closeableURLConnection0.getContentLengthLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      boolean boolean0 = closeableURLConnection0.getDoOutput();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      int int0 = closeableURLConnection0.getConnectTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      try { 
        closeableURLConnection0.getContent(classArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      Map<String, List<String>> map0 = closeableURLConnection0.getRequestProperties();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      String string0 = closeableURLConnection0.toString();
      assertEquals("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection:http://foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      CloseableURLConnection closeableURLConnection0 = new CloseableURLConnection(uRLConnection0);
      long long0 = closeableURLConnection0.getHeaderFieldDate("&\"ryv# C 7xX", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      int int0 = closeableURLConnection0.getContentLength();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      boolean boolean0 = closeableURLConnection0.getDoInput();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.close();
      assertFalse(closeableURLConnection0.getDefaultUseCaches());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      long long0 = closeableURLConnection0.getIfModifiedSince();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      // Undeclared exception!
      try { 
        closeableURLConnection0.setRequestProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key is null
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      long long0 = closeableURLConnection0.getHeaderFieldLong("", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      String string0 = closeableURLConnection0.getContentEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      closeableURLConnection0.setUseCaches(false);
      assertFalse(closeableURLConnection0.getUseCaches());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      closeableURLConnection0.setDefaultUseCaches(false);
      assertFalse(closeableURLConnection0.getDefaultUseCaches());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      try { 
        closeableURLConnection0.getOutputStream();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRI0);
      closeableURLConnection0.setIfModifiedSince((-1L));
      long long0 = closeableURLConnection0.getIfModifiedSince();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      boolean boolean0 = closeableURLConnection0.getAllowUserInteraction();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CloseableURLConnection closeableURLConnection0 = CloseableURLConnection.open(uRL0);
      String string0 = closeableURLConnection0.getHeaderFieldKey(0);
      assertNull(string0);
  }
}
