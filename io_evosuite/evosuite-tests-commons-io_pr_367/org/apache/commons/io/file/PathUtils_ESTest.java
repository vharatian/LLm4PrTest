/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:45:32 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.AccessDeniedException;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.AclFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.DosFileAttributeView;
import java.nio.file.attribute.DosFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = MockFile.createTempFile("y JT[g;5jdgO", "Unexpected mismatch.");
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch.", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertEquals("y JT[g;5jdgO0Unexpected mismatch.", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "y JT[g;5jdgO");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch.", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertEquals("y JT[g;5jdgO0Unexpected mismatch.", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch./y JT[g;5jdgO", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("y JT[g;5jdgO", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch.", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(path0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      Instant instant0 = MockInstant.ofEpochSecond(20480L, 1L);
      assertNotNull(instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      boolean boolean0 = PathUtils.isNewer(path0, instant0, linkOptionArray0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch.", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertEquals("y JT[g;5jdgO0Unexpected mismatch.", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch./y JT[g;5jdgO", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("y JT[g;5jdgO", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/y JT[g;5jdgO0Unexpected mismatch.", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(6, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter", "filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/filter/filter'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      MockFile mockFile0 = new MockFile("!^3g:i@");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("!^3g:i@", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("!^3g:i@", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes(path0, linkOptionArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: !^3g:i@
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Instant instant0 = MockInstant.ofEpochMilli(1152921504606846976L);
      assertNotNull(instant0);
      
      FileTime fileTime0 = FileTime.fromMillis(1152921504606846976L);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K4X3kH)NVO@qQ7XN]c");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "K4X3kH)NVO@qQ7XN]c");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = mockFile1.setWritable(true, true);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c/K4X3kH)NVO@qQ7XN]c", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertFalse(boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      Path path0 = mockFile1.toPath();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c/K4X3kH)NVO@qQ7XN]c", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      boolean boolean1 = mockFile1.renameTo(mockFile0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertEquals("K4X3kH)NVO@qQ7XN]c", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c/K4X3kH)NVO@qQ7XN]c", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertFalse(boolean1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.readAttributes(path0, class0, linkOptionArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/K4X3kH)NVO@qQ7XN]c/K4X3kH)NVO@qQ7XN]c
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(list0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'filter'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          String string0 = null;
          String string1 = "";
          MockFile mockFile0 = new MockFile((String) null, "");
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertEquals("", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canRead());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canWrite());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals("", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canRead());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canWrite());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(3, linkOptionArray0.length);
          assertFalse(boolean0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean1 = PathUtils.isOlder(path1, (-126L), linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter", "filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      File file0 = mockFile0.getCanonicalFile();
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("filter", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", file0.toString());
      assertTrue(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption0;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption4;
      boolean boolean0 = mockFile0.setExecutable(true);
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean0);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      
      linkOptionArray0[6] = linkOption0;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption6;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      PathUtils.waitFor(path0, duration0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      Duration duration1 = Duration.ofNanos(0L);
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      // Undeclared exception!
      PathUtils.waitFor(path1, duration1, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      Duration duration1 = Duration.ofNanos((-1L));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = PathUtils.waitFor(path1, duration1, linkOptionArray0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(path1.equals((Object)path0));
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(path1, path0);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V8l:Fc,BL!SS8", "V8l:Fc,BL!SS8");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8", mockFile0.getParent());
      assertEquals("V8l:Fc,BL!SS8", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8/V8l:Fc,BL!SS8", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      File file0 = mockFile0.getCanonicalFile();
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8", mockFile0.getParent());
      assertEquals("V8l:Fc,BL!SS8", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8/V8l:Fc,BL!SS8", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8/V8l:Fc,BL!SS8", file0.toString());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("V8l:Fc,BL!SS8", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption0;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption4;
      boolean boolean0 = mockFile0.setExecutable(true);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8", mockFile0.getParent());
      assertEquals("V8l:Fc,BL!SS8", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8/V8l:Fc,BL!SS8", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean0);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      
      linkOptionArray0[6] = linkOption0;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption6;
      LinkOption[] linkOptionArray1 = new LinkOption[6];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[0] = linkOption7;
      linkOptionArray1[1] = linkOption3;
      linkOptionArray1[2] = linkOption1;
      linkOptionArray1[3] = linkOption4;
      linkOptionArray1[4] = linkOption2;
      linkOptionArray1[5] = linkOption4;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray1, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8", mockFile0.getParent());
      assertEquals("V8l:Fc,BL!SS8", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8/V8l:Fc,BL!SS8", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(9, linkOptionArray0.length);
      assertEquals(6, linkOptionArray1.length);
      assertTrue(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(linkOptionArray0, linkOptionArray1);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      FileTime fileTime0 = FileTime.from(100L, timeUnit0);
      assertNotNull(fileTime0);
      
      boolean boolean2 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertFalse(mockFile0.exists());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8", mockFile0.getParent());
      assertEquals("V8l:Fc,BL!SS8", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/V8l:Fc,BL!SS8/V8l:Fc,BL!SS8", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(9, linkOptionArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
      assertNotSame(mockFile0, file0);
      assertNotSame(linkOptionArray0, linkOptionArray1);
      
      OrFileFilter orFileFilter0 = new OrFileFilter();
      assertNotNull(orFileFilter0);
      
      try { 
        PathUtils.newDirectoryStream(path0, orFileFilter0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("filter", "filter");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.length());
          assertEquals("filter", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
          assertFalse(boolean0);
          
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          File file0 = mockFile0.getCanonicalFile();
          assertEquals(0L, mockFile0.length());
          assertEquals("filter", mockFile0.getName());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.isFile());
          assertEquals(0L, file0.lastModified());
          assertFalse(file0.canWrite());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", file0.getParent());
          assertFalse(file0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", file0.toString());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isDirectory());
          assertEquals("filter", file0.getName());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertFalse(file0.exists());
          assertFalse(file0.canExecute());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.equals((Object)mockFile0));
          assertNotNull(file0);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile0);
          
          linkOptionArray0[2] = linkOption2;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/filter/filter\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:535)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:509)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      Duration duration0 = Duration.ofSeconds((-116444736000000000L));
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("filter", "filter");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.lastModified());
          assertEquals("filter", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          assertSame(standardDeleteOption1, standardDeleteOption0);
          
          LinkOption[] linkOptionArray1 = new LinkOption[1];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption2;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption1;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray1, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/filter/filter\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:535)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:441)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter", "filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[20];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      File file0 = mockFile0.getCanonicalFile();
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(file0.exists());
      assertEquals("filter", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertTrue(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      linkOptionArray0[2] = linkOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption3;
      boolean boolean0 = mockFile0.setExecutable(true);
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(boolean0);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption6;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from((-464L), timeUnit0);
      assertNotNull(fileTime0);
      
      boolean boolean1 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(20, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      
      try { 
        PathUtils.readBasicFileAttributes(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.current();
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotNull(path2);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path2);
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNull(list0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/foo.bar'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      Path[] pathArray0 = new Path[7];
      Path[] pathArray1 = PathUtils.filter(notFileFilter0, pathArray0);
      assertEquals(7, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      String string0 = "";
      DosFileAttributes dosFileAttributes0 = PathUtils.readDosFileAttributes((Path) null, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertNull(dosFileAttributes0);
      
      // Undeclared exception!
      try { 
        notFileFilter0.preVisitDirectory((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.lang.invoke.LambdaMetafactory", "java.lang.invoke.LambdaMetafactory");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      File file0 = mockFile0.getCanonicalFile();
      assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", file0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("java.lang.invoke.LambdaMetafactory", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = PathUtils.NULL_LINK_OPTION;
      linkOptionArray0[3] = null;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      try { 
        PathUtils.isOlder(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertNotNull(file0);
          
          Path path1 = file0.toPath();
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path1, linkOptionArray0);
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(1, linkOptionArray0.length);
          assertFalse(path1.equals((Object)path0));
          assertNull(aclFileAttributeView0);
          assertNotSame(path1, path0);
          
          PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertFalse(path0.equals((Object)path1));
          assertNotNull(posixFileAttributeView0);
          assertNotSame(path0, path1);
          
          Path path2 = file0.toPath();
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.length());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertFalse(path2.equals((Object)path0));
          assertNotNull(path2);
          assertNotSame(path2, path0);
          assertSame(path2, path1);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path2, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("java.lang.invoke.LambdaMetafactory", "java.lang.invoke.LambdaMetafactory");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isDirectory());
          assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[9];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          boolean boolean0 = mockFile0.setExecutable(true);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isDirectory());
          assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertFalse(boolean0);
          
          LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[6] = linkOption6;
          LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[7] = linkOption7;
          LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[8] = linkOption8;
          boolean boolean1 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isDirectory());
          assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals(9, linkOptionArray0.length);
          assertTrue(boolean1);
          assertFalse(boolean1 == boolean0);
          
          AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isDirectory());
          assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals(9, linkOptionArray0.length);
          assertNull(aclFileAttributeView0);
          
          PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory", mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory/java.lang.invoke.LambdaMetafactory", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isDirectory());
          assertEquals("java.lang.invoke.LambdaMetafactory", mockFile0.getName());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals(9, linkOptionArray0.length);
          assertNotNull(posixFileAttributeView0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/java.lang.invoke.LambdaMetafactory\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[8];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[5] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[6] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray1[7] = linkOption6;
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      Duration duration1 = Duration.ZERO;
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      assertSame(duration0, duration1);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertNotNull(basicFileAttributes0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      FileTime fileTime0 = FileTime.from(0L, timeUnit0);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      boolean boolean0 = PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.WRITE;
      assertEquals(StandardOpenOption.WRITE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE_NEW;
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.CREATE;
      assertEquals(StandardOpenOption.CREATE, standardOpenOption3);
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption3, standardOpenOption1);
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      
      openOptionArray0[3] = (OpenOption) standardOpenOption3;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.APPEND;
      assertEquals(StandardOpenOption.APPEND, standardOpenOption4);
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption3));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption4, standardOpenOption2);
      assertNotSame(standardOpenOption4, standardOpenOption0);
      assertNotSame(standardOpenOption4, standardOpenOption3);
      assertNotSame(standardOpenOption4, standardOpenOption1);
      
      openOptionArray0[4] = (OpenOption) standardOpenOption4;
      try { 
        PathUtils.writeString(path0, charBuffer0, (Charset) null, openOptionArray0);
        fail("Expecting exception: FileAlreadyExistsException");
      
      } catch(FileAlreadyExistsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DOS or POSIX file operations not available for '%s' %s");
      assertFalse(boolean0);
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean1 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from(4096L, timeUnit0);
      assertNotNull(fileTime0);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, fileTime0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      Path path1 = PathUtils.getTempDirectory();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      FileVisitResult fileVisitResult0 = FileVisitResult.SKIP_SUBTREE;
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(simpleFileVisitor0).toString();
      doReturn(fileVisitResult0).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      SimpleFileVisitor<Object> simpleFileVisitor1 = PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) linkedHashSet0, 3202);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(path0.equals((Object)path1));
      assertNotNull(simpleFileVisitor1);
      assertNotSame(path0, path1);
      assertSame(simpleFileVisitor1, simpleFileVisitor0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption1;
          boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals(2, linkOptionArray0.length);
          assertFalse(boolean0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.UncheckedIO.apply(UncheckedIO.java:110)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1142)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1232)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1654)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[19];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          deleteOptionArray0[8] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1287)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1400)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:157)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          assertSame(standardDeleteOption1, standardDeleteOption0);
          
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
          StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
          assertSame(standardDeleteOption2, standardDeleteOption0);
          assertSame(standardDeleteOption2, standardDeleteOption1);
          
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
          StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
          assertSame(standardDeleteOption3, standardDeleteOption2);
          assertSame(standardDeleteOption3, standardDeleteOption0);
          assertSame(standardDeleteOption3, standardDeleteOption1);
          
          deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1287)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1400)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:157)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:482)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:441)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          assertSame(standardDeleteOption1, standardDeleteOption0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:482)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:441)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.delete(path0, (LinkOption[]) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
      StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
      assertSame(standardDeleteOption3, standardDeleteOption0);
      assertSame(standardDeleteOption3, standardDeleteOption1);
      assertSame(standardDeleteOption3, standardDeleteOption2);
      
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
      // Undeclared exception!
      try { 
        PathUtils.delete(path1, (LinkOption[]) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      String string0 = "VR)A&e<:\"4$)i3hcQJB";
      MockFile mockFile0 = new MockFile("VR)A&e<:\"4$)i3hcQJB", "($'Wz[ Etgc|8OX$yr");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "VR)A&e<:\"4$)i3hcQJB");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path1 = mockFile1.toPath();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VR)A&e<:\"4$)i3hcQJB/($'Wz[ Etgc|8OX$yr", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals("($'Wz[ Etgc|8OX$yr", mockFile0.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VR)A&e<:\"4$)i3hcQJB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VR)A&e<:\"4$)i3hcQJB/($'Wz[ Etgc|8OX$yr/VR)A&e<:\"4$)i3hcQJB", mockFile1.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/VR)A&e<:\"4$)i3hcQJB/($'Wz[ Etgc|8OX$yr", mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals("VR)A&e<:\"4$)i3hcQJB", mockFile1.getName());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((Instant) null, false);
      assertNotNull(ageFileFilter0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      // Undeclared exception!
      try { 
        PathUtils.readDosFileAttributes(path1, linkOptionArray0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/VR)A&e<:\"4$)i3hcQJB/($'Wz[ Etgc|8OX$yr/VR)A&e<:\"4$)i3hcQJB
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          StringWriter stringWriter0 = new StringWriter();
          assertEquals("", stringWriter0.toString());
          assertNotNull(stringWriter0);
          
          stringWriter0.close();
          assertEquals("", stringWriter0.toString());
          
          StringBuffer stringBuffer0 = stringWriter0.getBuffer();
          assertEquals("", stringWriter0.toString());
          assertEquals(0, stringBuffer0.length());
          assertEquals("", stringBuffer0.toString());
          assertNotNull(stringBuffer0);
          
          Charset charset0 = Charset.defaultCharset();
          assertTrue(charset0.isRegistered());
          assertTrue(charset0.canEncode());
          assertEquals("UTF-8", charset0.toString());
          assertEquals("UTF-8", charset0.name());
          assertEquals("UTF-8", charset0.displayName());
          assertNotNull(charset0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals(4, linkOptionArray0.length);
          assertFalse(boolean0);
          
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path1 = PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, (LinkOption[]) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView((Path) null, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          File file0 = MockFile.createTempFile("hw]AAG*Q*ZZrAfcB", "hw]AAG*Q*ZZrAfcB");
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", file0.getName());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertNotNull(file0);
          
          MockFile mockFile0 = new MockFile(file0, "hw]AAG*Q*ZZrAfcB");
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", file0.getName());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB/hw]AAG*Q*ZZrAfcB", mockFile0.toString());
          assertEquals("hw]AAG*Q*ZZrAfcB", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", mockFile0.getParent());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", file0.getName());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB/hw]AAG*Q*ZZrAfcB", mockFile0.toString());
          assertEquals("hw]AAG*Q*ZZrAfcB", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertEquals("/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB", mockFile0.getParent());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path0, path1);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/hw]AAG*Q*ZZrAfcB0hw]AAG*Q*ZZrAfcB\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, fileVisitOptionArray0.length);
      assertNotNull(set0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      int int0 = (-569);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, set0, (-569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertFalse(file0.isHidden());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(0L, file0.length());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp", file0.getParent());
          assertNotNull(file0);
          
          Path path0 = file0.toPath();
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertFalse(file0.isHidden());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(0L, file0.length());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp", file0.getParent());
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/last-modi~ied0last-modi~ied\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:535)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:509)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:396)
             // sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
      assertSame(standardDeleteOption3, standardDeleteOption1);
      assertSame(standardDeleteOption3, standardDeleteOption0);
      assertSame(standardDeleteOption3, standardDeleteOption2);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption1;
      linkOptionArray0[8] = linkOption1;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HZ");
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      BasicFileAttributes basicFileAttributes1 = PathUtils.readAttributes((Path) null, class0, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes1);
      
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
      assertSame(standardDeleteOption1, standardDeleteOption0);
      
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
      assertSame(standardDeleteOption2, standardDeleteOption0);
      assertSame(standardDeleteOption2, standardDeleteOption1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[4] = linkOption2;
      linkOptionArray0[5] = linkOption1;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          Duration duration0 = Duration.ofSeconds(0L);
          assertNotNull(duration0);
          
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          assertSame(standardDeleteOption1, standardDeleteOption0);
          
          StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
          assertSame(standardDeleteOption2, standardDeleteOption0);
          assertSame(standardDeleteOption2, standardDeleteOption1);
          
          StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
          assertSame(standardDeleteOption3, standardDeleteOption1);
          assertSame(standardDeleteOption3, standardDeleteOption2);
          assertSame(standardDeleteOption3, standardDeleteOption0);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:237)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("charSequence", "charSequence");
          assertTrue(file0.isAbsolute());
          assertTrue(file0.isFile());
          assertTrue(file0.canRead());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.exists());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.canExecute());
          assertEquals("/tmp/charSequence0charSequence", file0.toString());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("charSequence0charSequence", file0.getName());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertEquals("/tmp", file0.getParent());
          assertNotNull(file0);
          
          MockFile mockFile0 = new MockFile(file0, "charSequence");
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertTrue(file0.isAbsolute());
          assertTrue(file0.isFile());
          assertTrue(file0.canRead());
          assertTrue(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.exists());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.canExecute());
          assertEquals("/tmp/charSequence0charSequence", file0.toString());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("charSequence0charSequence", file0.getName());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertEquals("/tmp", file0.getParent());
          assertEquals("/tmp/charSequence0charSequence/charSequence", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("charSequence", mockFile0.getName());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertEquals("/tmp/charSequence0charSequence", mockFile0.getParent());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(path0);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
          
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption1);
          assertSame(standardDeleteOption1, standardDeleteOption0);
          
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
          StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption2);
          assertSame(standardDeleteOption2, standardDeleteOption0);
          assertSame(standardDeleteOption2, standardDeleteOption1);
          
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
          StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption3);
          assertSame(standardDeleteOption3, standardDeleteOption0);
          assertSame(standardDeleteOption3, standardDeleteOption2);
          assertSame(standardDeleteOption3, standardDeleteOption1);
          
          deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/charSequence0charSequence/charSequence\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:535)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("?", "?");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/?/?", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/?", mockFile0.getParent());
          assertFalse(mockFile0.isHidden());
          assertEquals("?", mockFile0.getName());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canRead());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/?/?\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:535)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:509)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:494)
             // sun.reflect.GeneratedMethodAccessor263.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path1);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, (LinkOption[]) null, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:482)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      Instant instant0 = MockInstant.ofEpochMilli((-3500L));
      assertNotNull(instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      boolean boolean1 = PathUtils.isNewer(path0, instant0, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      String string0 = "";
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("la8t-mo7i~ied", "la8t-mo7i~ied");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("la8t-mo7i~ied0la8t-mo7i~ied", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/la8t-mo7i~ied0la8t-mo7i~ied", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("la8t-mo7i~ied0la8t-mo7i~ied", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/la8t-mo7i~ied0la8t-mo7i~ied", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      Path path2 = PathUtils.getTempDirectory();
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotNull(path2);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      boolean boolean0 = PathUtils.fileContentEquals(path1, path2);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("la8t-mo7i~ied0la8t-mo7i~ied", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/la8t-mo7i~ied0la8t-mo7i~ied", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(boolean0);
      assertFalse(path1.equals((Object)path2));
      assertFalse(path1.equals((Object)path0));
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotSame(path1, path2);
      assertNotSame(path1, path0);
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      
      try { 
        PathUtils.readBasicFileAttributes(path1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, path0, 10, linkOptionArray0, fileVisitOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertEquals(1, fileVisitOptionArray0.length);
      assertFalse(boolean0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[15];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.readAttributes(path0, class0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      try { 
        PathUtils.directoryContentEquals(path0, path0, 2959, linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      Duration duration1 = Duration.ofNanos((-1L));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean1 = PathUtils.waitFor(path1, duration1, linkOptionArray0);
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(path1.equals((Object)path0));
      assertFalse(duration1.equals((Object)duration0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(path1, path0);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ofSeconds(0L);
      assertNotNull(duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertTrue(boolean0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 2971, (LinkOption[]) null, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "last-modi~ied");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      file0.deleteOnExit();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/last-modi~ied0/last-modi~ied", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/last-modi~ied0", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, 585L, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertNotSame(path0, path1);
      
      boolean boolean1 = PathUtils.isDirectory(path1, linkOptionArray0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/last-modi~ied0/last-modi~ied", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/last-modi~ied0", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = PathUtils.NOFOLLOW_LINK_OPTION_ARRAY;
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        PathUtils.waitFor((Path) null, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "");
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      file0.deleteOnExit();
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      LinkedHashSet<Path> linkedHashSet0 = new LinkedHashSet<Path>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.relativize(linkedHashSet0, (Path) null, true, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("mast-modi~ie]", "mast-modi~ie]");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("mast-modi~ie]0mast-modi~ie]", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/mast-modi~ie]0mast-modi~ie]", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("mast-modi~ie]0mast-modi~ie]", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/mast-modi~ie]0mast-modi~ie]", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger(path1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/tmp/mast-modi~ie]0mast-modi~ie]'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          long long0 = PathUtils.sizeOf(path0);
          assertEquals(77866940L, long0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          Path path1 = PathUtils.current();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          linkOptionArray0[3] = linkOption0;
          linkOptionArray0[4] = linkOption0;
          linkOptionArray0[5] = linkOption0;
          linkOptionArray0[6] = linkOption0;
          OpenOption[] openOptionArray0 = new OpenOption[4];
          openOptionArray0[0] = (OpenOption) linkOption0;
          openOptionArray0[1] = (OpenOption) linkOption0;
          openOptionArray0[2] = (OpenOption) linkOption0;
          openOptionArray0[3] = (OpenOption) linkOption0;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, openOptionArray0, fileVisitOptionArray0);
          assertEquals(0, fileVisitOptionArray0.length);
          assertEquals(7, linkOptionArray0.length);
          assertEquals(4, openOptionArray0.length);
          assertTrue(boolean0);
          assertTrue(path0.equals((Object)path1));
          assertTrue(path1.equals((Object)path0));
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          MockFile mockFile0 = new MockFile("&FmS", "?`p_`?)lx!$S3.3");
          assertNotNull(mockFile0);
          
          Path path2 = mockFile0.toPath();
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&FmS/?`p_`?)lx!$S3.3", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&FmS", mockFile0.getParent());
          assertEquals("?`p_`?)lx!$S3.3", mockFile0.getName());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(path2.equals((Object)path1));
          assertFalse(path2.equals((Object)path0));
          assertNotNull(path2);
          assertNotSame(path2, path1);
          assertNotSame(path2, path0);
          
          Path path3 = mockFile0.toPath();
          assertTrue(mockFile0.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&FmS/?`p_`?)lx!$S3.3", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.exists());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/&FmS", mockFile0.getParent());
          assertEquals("?`p_`?)lx!$S3.3", mockFile0.getName());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(path3.equals((Object)path1));
          assertFalse(path3.equals((Object)path0));
          assertNotNull(path3);
          assertNotSame(path3, path1);
          assertNotSame(path3, path0);
          assertSame(path3, path2);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path3, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/&FmS\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("filter", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("filter", mockFile0.getName());
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: 'filter'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertEquals(3, standardCopyOptionArray0.length);
          assertNotNull(standardCopyOptionArray0);
          
          NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
          assertNotNull(notFileFilter0);
          
          Path path1 = PathUtils.current();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
          LinkOption[] linkOptionArray1 = new LinkOption[2];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption0;
          linkOptionArray1[1] = linkOption0;
          BasicFileAttributes basicFileAttributes0 = PathUtils.readAttributes(path1, class0, linkOptionArray1);
          assertEquals(2, linkOptionArray1.length);
          assertTrue(path1.equals((Object)path0));
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          assertNotNull(basicFileAttributes0);
          assertNotSame(path1, path0);
          assertNotSame(linkOptionArray1, linkOptionArray0);
          
          // Undeclared exception!
          try { 
            notFileFilter0.visitFile(path0, basicFileAttributes0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:82)
             // org.apache.commons.io.filefilter.AbstractFileFilter.visitFile(AbstractFileFilter.java:171)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      DosFileAttributeView dosFileAttributeView0 = PathUtils.getDosFileAttributeView(path0, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNotNull(dosFileAttributeView0);
      
      AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(aclFileAttributeView0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path1);
      assertFalse(boolean0);
      assertTrue(path1.equals((Object)path0));
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      assertEquals(4, linkOptionArray0.length);
      assertTrue(path0.equals((Object)path1));
      assertNotNull(posixFileAttributeView0);
      assertNotSame(path0, path1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      List<AclEntry> list0 = new LinkedList<AclEntry>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      MockFile mockFile0 = new MockFile("sourceFile", "sourceFile");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("sourceFile", mockFile0.getName());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isPosix(path1, linkOptionArray0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("sourceFile", mockFile0.getName());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.isEmpty(path0);
          assertFalse(boolean0);
          
          File file0 = MockFile.createTempFile("last-modi~ied", "");
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertEquals("/tmp/last-modi~ied0", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("last-modi~ied0", file0.getName());
          assertNotNull(file0);
          
          MockFile mockFile0 = new MockFile(file0, "last-modi~ied");
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(mockFile0);
          
          Path path1 = mockFile0.toPath();
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertEquals("/tmp/last-modi~ied0", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("last-modi~ied0", file0.getName());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals("/tmp/last-modi~ied0", mockFile0.getParent());
          assertEquals("last-modi~ied", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0/last-modi~ied", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          boolean boolean1 = mockFile0.setExecutable(true);
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertEquals("/tmp/last-modi~ied0", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("last-modi~ied0", file0.getName());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals("/tmp/last-modi~ied0", mockFile0.getParent());
          assertEquals("last-modi~ied", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0/last-modi~ied", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(boolean1);
          assertTrue(boolean1 == boolean0);
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          boolean boolean2 = PathUtils.isPosix(path1, linkOptionArray0);
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertEquals("/tmp/last-modi~ied0", file0.toString());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertTrue(file0.isFile());
          assertTrue(file0.canWrite());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("last-modi~ied0", file0.getName());
          assertFalse(mockFile0.exists());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals("/tmp/last-modi~ied0", mockFile0.getParent());
          assertEquals("last-modi~ied", mockFile0.getName());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0/last-modi~ied", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.lastModified());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(6, linkOptionArray0.length);
          assertFalse(boolean2);
          assertFalse(file0.equals((Object)mockFile0));
          assertTrue(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1305)
             // sun.reflect.GeneratedMethodAccessor266.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("filter", "filter");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals("filter", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, path0, linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/filter/filter'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "last-modi~ied");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("last-modi~ied0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/last-modi~ied0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/last-modi~ied0/last-modi~ied", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/tmp/last-modi~ied0", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      CopyOption[] copyOptionArray0 = new CopyOption[8];
      copyOptionArray0[0] = (CopyOption) linkOptionArray0[2];
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOptionArray0[3];
      copyOptionArray0[3] = (CopyOption) linkOption0;
      copyOptionArray0[4] = (CopyOption) linkOptionArray0[4];
      copyOptionArray0[5] = (CopyOption) linkOption0;
      copyOptionArray0[6] = (CopyOption) linkOptionArray0[3];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path1, path0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/last-modi~ied0/last-modi~ied'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      assertEquals(StandardCopyOption.ATOMIC_MOVE, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean1 = PathUtils.isNewer(path0, 4096L, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      NameFileFilter nameFileFilter0 = new NameFileFilter("net.bytebuddy.asm.Advice$AssignReturned$Factory");
      assertNotNull(nameFileFilter0);
      
      IOCase iOCase0 = IOCase.INSENSITIVE;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("DOS or POSIX file operations not available for '%s' %s", iOCase0);
      assertNotNull(suffixFileFilter0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters((PathFilter) nameFileFilter0, (PathFilter) suffixFileFilter0);
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(path0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path0, true, comparator0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(path0));
      assertFalse(list1.contains(path0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(path1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list1 = PathUtils.relativize(list0, path0, true, comparator0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(path0.equals((Object)path1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(path0, path1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(path1));
      assertFalse(list1.contains(path1));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Path[] pathArray0 = new Path[7];
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("last-modified", "");
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("last-modified0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/last-modified0", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "last-modified");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("last-modified0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/last-modified0", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("last-modified", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/tmp/last-modified0", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp/last-modified0/last-modified", mockFile0.toString());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory(path1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/last-modified0/last-modified'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("last-modified", "");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/last-modified0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("last-modified0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "last-modified");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/last-modified0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("last-modified0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("last-modified", mockFile0.getName());
      assertEquals("/tmp/last-modified0/last-modified", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/last-modified0", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/last-modified0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("last-modified0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("last-modified", mockFile0.getName());
      assertEquals("/tmp/last-modified0/last-modified", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/last-modified0", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(path0, path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      boolean boolean2 = PathUtils.isNewer(path1, 4096L, linkOptionArray0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/last-modified0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("last-modified0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("last-modified", mockFile0.getName());
      assertEquals("/tmp/last-modified0/last-modified", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/last-modified0", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean2);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      boolean boolean3 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean3);
      assertFalse(path0.equals((Object)path1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(path0, path1);
      
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory(path1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/last-modified0/last-modified'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "last-modi~ied");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      file0.deleteOnExit();
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp/last-modi~ied0last-modi~ied/last-modi~ied", mockFile0.toString());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      boolean boolean0 = PathUtils.isNewer(path1, 4096L, linkOptionArray0);
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp/last-modi~ied0last-modi~ied/last-modi~ied", mockFile0.toString());
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.getTempDirectory();
      assertTrue(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotNull(path2);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          copyOptionArray0[0] = (CopyOption) linkOption0;
          MockFile mockFile0 = new MockFile("sourceFile", "sourceFile");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, "sourceFile");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          Path path1 = mockFile0.toPath();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals("sourceFile", mockFile0.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(path1, path0);
          
          MockFile mockFile2 = new MockFile(mockFile0, "");
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile2.equals((Object)mockFile0));
          assertFalse(mockFile2.equals((Object)mockFile1));
          assertNotNull(mockFile2);
          
          Path path2 = mockFile2.toPath();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals("sourceFile", mockFile0.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile2.isFile());
          assertEquals(0L, mockFile2.lastModified());
          assertFalse(mockFile2.isHidden());
          assertEquals(0L, mockFile2.getUsableSpace());
          assertFalse(mockFile2.canWrite());
          assertTrue(mockFile2.isAbsolute());
          assertEquals(0L, mockFile2.getFreeSpace());
          assertEquals("sourceFile", mockFile2.getName());
          assertFalse(mockFile2.isDirectory());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile2.getParent());
          assertFalse(mockFile2.exists());
          assertEquals(0L, mockFile2.length());
          assertFalse(mockFile2.canExecute());
          assertFalse(mockFile2.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile2.toString());
          assertEquals(0L, mockFile2.getTotalSpace());
          assertTrue(mockFile0.equals((Object)mockFile2));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile2.equals((Object)mockFile0));
          assertFalse(mockFile2.equals((Object)mockFile1));
          assertFalse(path2.equals((Object)path0));
          assertTrue(path2.equals((Object)path1));
          assertNotNull(path2);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, mockFile2);
          assertNotSame(mockFile2, mockFile0);
          assertNotSame(mockFile2, mockFile1);
          assertNotSame(path2, path1);
          assertNotSame(path2, path0);
          
          Path path3 = mockFile2.toPath();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isFile());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile0.toString());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.isDirectory());
          assertEquals("sourceFile", mockFile0.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile0.getParent());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isAbsolute());
          assertTrue(mockFile2.isFile());
          assertEquals(0L, mockFile2.lastModified());
          assertFalse(mockFile2.isHidden());
          assertEquals(0L, mockFile2.getUsableSpace());
          assertFalse(mockFile2.canWrite());
          assertTrue(mockFile2.isAbsolute());
          assertEquals(0L, mockFile2.getFreeSpace());
          assertEquals("sourceFile", mockFile2.getName());
          assertFalse(mockFile2.isDirectory());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile", mockFile2.getParent());
          assertFalse(mockFile2.exists());
          assertEquals(0L, mockFile2.length());
          assertFalse(mockFile2.canExecute());
          assertFalse(mockFile2.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/sourceFile/sourceFile", mockFile2.toString());
          assertEquals(0L, mockFile2.getTotalSpace());
          assertTrue(mockFile0.equals((Object)mockFile2));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile2.equals((Object)mockFile0));
          assertFalse(mockFile2.equals((Object)mockFile1));
          assertFalse(path3.equals((Object)path0));
          assertTrue(path3.equals((Object)path1));
          assertNotNull(path3);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, mockFile2);
          assertNotSame(mockFile2, mockFile0);
          assertNotSame(mockFile2, mockFile1);
          assertNotSame(path3, path1);
          assertNotSame(path3, path0);
          assertSame(path3, path2);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/sourceFile\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      assertEquals("false", falseFileFilter0.toString());
      assertNotNull(falseFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(falseFileFilter0, pathArray0);
      assertEquals("false", falseFileFilter0.toString());
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
          assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
          
          LinkOption[] linkOptionArray1 = null;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, (LinkOption[]) null, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertEquals(3, standardCopyOptionArray0.length);
      assertNotNull(standardCopyOptionArray0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "initialList";
      stringArray0[1] = "jACm!'D";
      stringArray0[2] = "4lbxEd`Gjn3iO4DZs";
      stringArray0[3] = "";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(suffixFileFilter0);
      
      Path[] pathArray0 = new Path[2];
      pathArray0[0] = path0;
      pathArray0[1] = path1;
      Path[] pathArray1 = PathUtils.filter(suffixFileFilter0, pathArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(2, pathArray0.length);
      assertEquals(2, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path2 = PathUtils.getTempDirectory();
      assertFalse(path2.equals((Object)path0));
      assertTrue(path2.equals((Object)path1));
      assertNotNull(path2);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      assertEquals("true", trueFileFilter0.toString());
      assertNotNull(trueFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(trueFileFilter0, pathArray0);
      assertEquals("true", trueFileFilter0.toString());
      assertEquals(1, pathArray0.length);
      assertEquals(1, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 4);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(4, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertNull(posixFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Path path0 = null;
      FileTime fileTime0 = FileTime.fromMillis(8192L);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(path0);
      
      try { 
        PathUtils.isEmptyDirectory(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("charSequence", "charSequence");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/charSequence0charSequence", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("charSequence0charSequence", file0.getName());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "charSequence");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/charSequence0charSequence", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("charSequence0charSequence", file0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/charSequence0charSequence", mockFile0.getParent());
      assertEquals("charSequence", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/tmp/charSequence0charSequence/charSequence", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(path0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/charSequence0charSequence/charSequence'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?", "?");
      assertNotNull(mockFile0);
      
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      assertEquals("true", trueFileFilter0.toString());
      assertNotNull(trueFileFilter0);
      
      Path[] pathArray0 = PathUtils.filter(trueFileFilter0, (Path[]) null);
      assertEquals("true", trueFileFilter0.toString());
      assertEquals(0, pathArray0.length);
      assertNotNull(pathArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
      
      boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfDirectoryAsBigInteger(path0);
      assertEquals((short)10172, bigInteger0.shortValue());
      assertEquals((byte) (-68), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      boolean boolean2 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Path path1 = PathUtils.current();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readPosixFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[13];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(13, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder((Path) null, (Instant) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, (Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 4);
          fileAttributeArray0[1] = fileAttributeArray0[0];
          fileAttributeArray0[2] = fileAttributeArray0[1];
          fileAttributeArray0[3] = fileAttributeArray0[2];
          Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
          assertEquals(4, fileAttributeArray0.length);
          assertNull(path1);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertNull(posixFileAttributes0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:170)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:265)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SceJTUH 'hSQOjQN}<");
      assertFalse(boolean0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean1 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      FileTime fileTime0 = FileTime.from(instant0);
      assertNotNull(fileTime0);
      
      Instant instant1 = fileTime0.toInstant();
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      Instant instant2 = MockInstant.minusNanos(instant1, (-2467L));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      assertNotNull(instant2);
      assertSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, instant2, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, instant0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      boolean boolean1 = PathUtils.isNewer(path0, 1152921504606846976L, linkOptionArray0);
      assertEquals(2, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '@';
      charArray0[2] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertArrayEquals(new char[] {'K', '@', '3'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {'K', '@', '3'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        PathUtils.writeString((Path) null, charBuffer1, charset0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption3;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      BasicFileAttributes basicFileAttributes1 = PathUtils.readBasicFileAttributes(path0, linkOptionArray0);
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(7, linkOptionArray0.length);
      assertNotNull(basicFileAttributes1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean1 = PathUtils.isNewer(path0, (-769L), linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DosFileAttributes dosFileAttributes0 = PathUtils.readDosFileAttributes(path0, linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertNotNull(dosFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("filter", "filter");
      assertEquals("/tmp/filter0filter", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("filter0filter", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "org.apache.commons.lang3.Streams$ArrayCollector");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("/tmp/filter0filter", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("filter0filter", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/tmp/filter0filter/org.apache.commons.lang3.Streams$ArrayCollector", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/filter0filter", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.apache.commons.lang3.Streams$ArrayCollector", mockFile0.getName());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(path0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      try { 
        PathUtils.isEmptyFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
      assertFalse(path0.equals((Object)path1));
      assertNotNull(basicFileAttributes0);
      assertNotSame(path0, path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption3;
      linkOptionArray0[3] = null;
      linkOptionArray0[4] = null;
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          long long0 = PathUtils.sizeOf(path0);
          assertEquals(77866940L, long0);
          
          BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
          assertEquals((short)10172, bigInteger0.shortValue());
          assertEquals((byte) (-68), bigInteger0.byteValue());
          assertNotNull(bigInteger0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, (LinkOption[]) null, (OpenOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          EvoSuiteFile evoSuiteFile0 = null;
          Path path1 = null;
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
          assertEquals(0, linkOptionArray0.length);
          assertFalse(boolean0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray1 = LinkOption.values();
          assertEquals(1, linkOptionArray1.length);
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          assertNotNull(linkOptionArray1);
          assertNotSame(linkOptionArray1, linkOptionArray0);
          
          StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
          assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
          assertEquals(3, linkOptionArray0.length);
          assertFalse(boolean0);
          
          OpenOption[] openOptionArray0 = new OpenOption[8];
          openOptionArray0[0] = (OpenOption) linkOption0;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption3);
          assertSame(linkOption3, linkOption0);
          assertSame(linkOption3, linkOption1);
          assertSame(linkOption3, linkOption2);
          
          openOptionArray0[1] = (OpenOption) linkOption3;
          openOptionArray0[2] = (OpenOption) linkOption0;
          openOptionArray0[3] = (OpenOption) linkOption1;
          openOptionArray0[4] = (OpenOption) linkOption2;
          openOptionArray0[5] = (OpenOption) linkOption1;
          openOptionArray0[6] = (OpenOption) linkOption1;
          LinkOption[] linkOptionArray1 = LinkOption.values();
          assertEquals(1, linkOptionArray1.length);
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          assertNotNull(linkOptionArray1);
          assertNotSame(linkOptionArray1, linkOptionArray0);
          
          StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
          assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
          
          openOptionArray0[7] = (OpenOption) standardOpenOption0;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, openOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.isEmptyDirectory(path0);
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes((Path) null, linkOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          StringWriter stringWriter0 = new StringWriter();
          assertEquals("", stringWriter0.toString());
          assertNotNull(stringWriter0);
          
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, "ul");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          Path path1 = mockFile1.toPath();
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.getParent());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertTrue(mockFile1.isFile());
          assertEquals("ul", mockFile1.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ul", mockFile1.toString());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.isHidden());
          assertTrue(mockFile1.isAbsolute());
          assertFalse(mockFile1.canExecute());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.canWrite());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[3];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[0] = fileVisitOption0;
          FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[1] = fileVisitOption1;
          FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
          fileVisitOptionArray0[2] = fileVisitOption2;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.getParent());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertTrue(mockFile1.isFile());
          assertEquals("ul", mockFile1.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ul", mockFile1.toString());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.isHidden());
          assertTrue(mockFile1.isAbsolute());
          assertFalse(mockFile1.canExecute());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.canWrite());
          assertEquals(3, linkOptionArray0.length);
          assertEquals(3, fileVisitOptionArray0.length);
          assertFalse(boolean0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path0, path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray1 = new LinkOption[2];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption2;
          linkOptionArray1[1] = linkOption2;
          boolean boolean1 = PathUtils.fileContentEquals(path1, path1, linkOptionArray1, (OpenOption[]) linkOptionArray0);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertTrue(mockFile0.exists());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isDirectory());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", mockFile1.getParent());
          assertFalse(mockFile1.isDirectory());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertTrue(mockFile1.isFile());
          assertEquals("ul", mockFile1.getName());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/ul", mockFile1.toString());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.isHidden());
          assertTrue(mockFile1.isAbsolute());
          assertFalse(mockFile1.canExecute());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals(0L, mockFile1.length());
          assertFalse(mockFile1.canWrite());
          assertEquals(2, linkOptionArray1.length);
          assertEquals(3, linkOptionArray0.length);
          assertTrue(boolean1);
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          assertFalse(path1.equals((Object)path0));
          assertFalse(linkOptionArray0.equals((Object)linkOptionArray1));
          assertFalse(boolean1 == boolean0);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(linkOptionArray1, linkOptionArray0);
          assertNotSame(path1, path0);
          assertNotSame(linkOptionArray0, linkOptionArray1);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1516)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Set<FileVisitOption> set0 = PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      MockFile mockFile0 = new MockFile("Tc");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.delete();
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Tc", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Tc", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Tc", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Tc", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'Tc'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("$zj");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("$zj", mockFile0.getName());
          assertEquals("$zj", mockFile0.toString());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertNotNull(path0);
          
          FileTime fileTime0 = FileTime.fromMillis(328L);
          assertNotNull(fileTime0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption3;
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertEquals(3, standardCopyOptionArray0.length);
          assertNotNull(standardCopyOptionArray0);
          
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          OpenOption[] openOptionArray0 = null;
          OpenOption[] openOptionArray1 = new OpenOption[1];
          openOptionArray1[0] = (OpenOption) linkOption2;
          FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
          fileVisitOptionArray0[0] = fileVisitOption0;
          fileVisitOptionArray0[1] = fileVisitOption0;
          fileVisitOptionArray0[2] = fileVisitOption0;
          fileVisitOptionArray0[3] = fileVisitOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, openOptionArray1, fileVisitOptionArray0);
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("$zj", mockFile0.getName());
          assertEquals("$zj", mockFile0.toString());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.exists());
          assertEquals(4, fileVisitOptionArray0.length);
          assertEquals(7, linkOptionArray0.length);
          assertEquals(1, openOptionArray1.length);
          assertTrue(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"$zj\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1514)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertNotNull(file0);
          
          Path path1 = file0.toPath();
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertEquals(1, linkOptionArray0.length);
          assertTrue(boolean0);
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          copyOptionArray0[0] = (CopyOption) linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
          assertSame(linkOption1, linkOption0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          copyOptionArray0[1] = (CopyOption) linkOption1;
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          TimeUnit timeUnit0 = TimeUnit.MINUTES;
          FileTime fileTime0 = FileTime.from((-2358L), timeUnit0);
          assertNotNull(fileTime0);
          
          LinkOption[] linkOptionArray1 = new LinkOption[3];
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          
          linkOptionArray1[0] = linkOption1;
          linkOptionArray1[1] = linkOption0;
          linkOptionArray1[2] = linkOption1;
          boolean boolean0 = PathUtils.isOlder(path0, fileTime0, linkOptionArray1);
          assertEquals(3, linkOptionArray1.length);
          assertFalse(boolean0);
          assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
          assertNotSame(linkOptionArray1, linkOptionArray0);
          
          NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
          assertNotNull(notFileFilter0);
          
          Path[] pathArray0 = new Path[5];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          Path path1 = PathUtils.getTempDirectory();
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          pathArray0[2] = path1;
          pathArray0[3] = path0;
          pathArray0[4] = path0;
          // Undeclared exception!
          try { 
            PathUtils.filter(notFileFilter0, pathArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:82)
             // org.apache.commons.io.file.PathUtils.lambda$filterPaths$1(PathUtils.java:771)
             // java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
             // java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
             // java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
             // java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
             // java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
             // java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
             // java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
             // org.apache.commons.io.file.PathUtils.filterPaths(PathUtils.java:775)
             // org.apache.commons.io.file.PathUtils.filter(PathUtils.java:760)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?", "?");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertEquals("?", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/?", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/?/?", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      try { 
        PathUtils.setLastModifiedTime(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("rvrH@C");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "B*");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path1 = mockFile1.toPath();
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("rvrH@C", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("rvrH@C", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals("B*", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      try { 
        PathUtils.setLastModifiedTime(path1, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gfxx,@7%77";
      stringArray0[1] = "!>Pbb/<12*EkW7oGTj@";
      stringArray0[2] = "gfxx,@7%77";
      stringArray0[3] = "gfxx,@7%77";
      stringArray0[4] = "gfxx,@7%77";
      stringArray0[5] = "gfxx,@7%77";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, "gfxx,@7%77", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'gfxx,@7%77/gfxx,@7%77/!>Pbb/<12*EkW7oGTj@/gfxx,@7%77/gfxx,@7%77/gfxx,@7%77/gfxx,@7%77'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gq";
      stringArray0[1] = "Cannot inject classes into a sealed class loader";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "gq", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'gq/gq/Cannot inject classes into a sealed class loader'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.isPosix((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertEquals((byte) (-68), bigInteger0.byteValue());
      assertEquals((short)10172, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, (Path) null);
      assertFalse(boolean0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readString((Path) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      boolean boolean0 = PathUtils.isDirectory((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertFalse(boolean0);
      
      Path path1 = PathUtils.current();
      assertNotNull(path1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      boolean boolean0 = PathUtils.isNewer(path0, 4096L, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean1 = PathUtils.isNewer(path0, (-769L), linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = PathUtils.isDirectory(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      copyOptionArray0[0] = (CopyOption) null;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      // Undeclared exception!
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      
      Instant instant0 = MockInstant.ofEpochMilli((-2550L));
      assertNotNull(instant0);
      
      boolean boolean1 = PathUtils.isOlder(path0, instant0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PosixFileAttributeView posixFileAttributeView0 = PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(posixFileAttributeView0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      FileTime fileTime0 = FileTime.fromMillis((-657L));
      assertNotNull(fileTime0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      boolean boolean1 = PathUtils.isOlder(path0, instant0, linkOptionArray0);
      assertEquals(5, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Path path1 = PathUtils.current();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      Path path2 = PathUtils.createParentDirectories(path1, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertFalse(path1.equals((Object)path0));
      assertNull(path2);
      assertNotSame(path1, path0);
      
      LinkedList<AclEntry> linkedList0 = new LinkedList<AclEntry>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Path path3 = PathUtils.getTempDirectory();
      assertFalse(path3.equals((Object)path1));
      assertTrue(path3.equals((Object)path0));
      assertNotNull(path3);
      assertNotSame(path3, path0);
      assertNotSame(path3, path1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = null;
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("rvrH@C");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "B*");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path1 = mockFile1.toPath();
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("rvrH@C", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("rvrH@C", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("B*", mockFile1.getName());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger(path1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Lb!}z", "JxpF");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Lb!}z", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/Lb!}z/JxpF", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("JxpF", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Lb!}z/JxpF'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      boolean boolean0 = PathUtils.directoryContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectory(path0);
      assertNotNull(counters_PathCounters0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      copyOptionArray0[0] = (CopyOption) null;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      // Undeclared exception!
      PathUtils.countDirectoryAsBigInteger(path0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = PathUtils.EMPTY_LINK_OPTION_ARRAY;
          assertEquals(0, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.UncheckedIO.apply(UncheckedIO.java:110)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1142)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1232)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:1049)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.UncheckedIO.apply(UncheckedIO.java:110)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1142)
             // org.apache.commons.io.file.PathUtils.readPosixFileAttributes(PathUtils.java:1232)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:1049)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          linkOptionArray0[0] = null;
          linkOptionArray0[1] = null;
          linkOptionArray0[5] = null;
          boolean boolean0 = PathUtils.isNewer(path0, path0);
          assertFalse(boolean0);
          
          List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
          assertNull(list0);
          
          int int0 = 2921;
          Path path1 = PathUtils.getTempDirectory();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path1, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:297)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Path path0 = null;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
      
      boolean boolean0 = PathUtils.isRegularFile((Path) null, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Path path0 = null;
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 2);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
      assertEquals(2, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(287);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      OpenOption[] openOptionArray0 = new OpenOption[3];
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      openOptionArray0[0] = (OpenOption) null;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      assertEquals(StandardOpenOption.DELETE_ON_CLOSE, standardOpenOption0);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      StandardOpenOption[] standardOpenOptionArray0 = StandardOpenOption.values();
      assertEquals(10, standardOpenOptionArray0.length);
      assertNotNull(standardOpenOptionArray0);
      
      StandardOpenOption standardOpenOption1 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      
      openOptionArray0[2] = (OpenOption) standardOpenOption1;
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, stringBuffer0, charset0, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
          assertNotNull(notFileFilter0);
          
          Path[] pathArray0 = new Path[1];
          pathArray0[0] = path0;
          // Undeclared exception!
          try { 
            PathUtils.filter(notFileFilter0, pathArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:82)
             // org.apache.commons.io.file.PathUtils.lambda$filterPaths$1(PathUtils.java:771)
             // java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
             // java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
             // java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
             // java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
             // java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
             // java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
             // java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
             // org.apache.commons.io.file.PathUtils.filterPaths(PathUtils.java:775)
             // org.apache.commons.io.file.PathUtils.filter(PathUtils.java:760)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$zj");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("$zj", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("$zj", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNotNull(path0);
      
      FileTime fileTime0 = FileTime.fromMillis(328L);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      boolean boolean0 = PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
      assertEquals("$zj", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("$zj", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      Path[] pathArray1 = PathUtils.filter(notFileFilter0, pathArray0);
      assertEquals(1, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path0, 1589, linkOptionArray0, fileVisitOptionArray0);
      assertEquals("$zj", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("$zj", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(7, linkOptionArray0.length);
      assertEquals(8, fileVisitOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Path path1 = file0.toPath();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean1 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(path0, path1);
      
      boolean boolean2 = PathUtils.directoryContentEquals(path1, path1);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(boolean2);
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, (FileTime) null, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MevFB!E:u1tC'");
      assertFalse(boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      Path path0 = null;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 5);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      Path path1 = PathUtils.createParentDirectories((Path) null, (LinkOption) null, fileAttributeArray0);
      assertEquals(5, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Path path0 = null;
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = null;
      Path path1 = PathUtils.createParentDirectories((Path) null, (LinkOption) null, (FileAttribute<?>[]) null);
      assertNull(path1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$zj");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isDirectory());
      assertEquals("$zj", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("$zj", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertNotNull(path0);
      
      FileTime fileTime0 = FileTime.fromMillis(328L);
      assertNotNull(fileTime0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean0 = PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("$zj", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("$zj", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean0);
      
      try { 
        PathUtils.isNewer(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("z]4_{LnYP\"IxE<", iOCase0);
      assertNotNull(prefixFileFilter0);
      
      Path[] pathArray0 = new Path[6];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      pathArray0[5] = path0;
      Path[] pathArray1 = PathUtils.filter(prefixFileFilter0, pathArray0);
      assertEquals(6, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Path path0 = null;
      StringWriter stringWriter0 = new StringWriter(287);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      assertNotNull(hiddenFileFilter0);
      
      Path[] pathArray0 = new Path[2];
      pathArray0[0] = null;
      pathArray0[1] = null;
      Path[] pathArray1 = PathUtils.filter(hiddenFileFilter0, pathArray0);
      assertEquals(2, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      String string0 = "n";
      try { 
        MockURL.URL("a,J7h9V`^P+%H7B$A", "a,J7h9V`^P+%H7B$A", (-1), "directory");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: a,j7h9v`^p+%h7b$a
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis((-657L));
      assertNotNull(fileTime0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(0, fileAttributeArray0.length);
      assertNull(path1);
      
      LinkedList<AclEntry> linkedList0 = new LinkedList<AclEntry>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          long long0 = PathUtils.sizeOf(path0);
          assertEquals(77866940L, long0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          MockFile mockFile0 = new MockFile("rvrH@C");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile(mockFile0, "B*");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          Path path1 = mockFile1.toPath();
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertNull(mockFile0.getParent());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isFile());
          assertEquals("rvrH@C", mockFile0.getName());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals("rvrH@C", mockFile0.toString());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile1.isHidden());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertTrue(mockFile1.isFile());
          assertFalse(mockFile1.exists());
          assertFalse(mockFile1.canRead());
          assertFalse(mockFile1.canExecute());
          assertEquals(0L, mockFile1.getTotalSpace());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
          assertFalse(mockFile1.isDirectory());
          assertEquals("B*", mockFile1.getName());
          assertTrue(mockFile1.isAbsolute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertEquals(0L, mockFile1.length());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.canWrite());
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[8];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          linkOptionArray0[3] = linkOption0;
          linkOptionArray0[4] = linkOption0;
          linkOptionArray0[5] = linkOption0;
          linkOptionArray0[6] = linkOption0;
          linkOptionArray0[7] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.touch(path1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1514)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("filter", "filter");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.isAbsolute());
          assertEquals("filter", mockFile0.getName());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canExecute());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter", mockFile0.getParent());
          assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/filter/filter", mockFile0.toString());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/filter/filter\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1514)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      assertNotNull(notFileFilter0);
      
      Path[] pathArray0 = new Path[5];
      Path[] pathArray1 = PathUtils.filter(notFileFilter0, pathArray0);
      assertEquals(5, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          LinkOption[] linkOptionArray0 = LinkOption.values();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertEquals(3, standardCopyOptionArray0.length);
          assertNotNull(standardCopyOptionArray0);
          
          NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
          assertNotNull(notFileFilter0);
          
          Path path1 = PathUtils.getTempDirectory();
          assertTrue(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          Path[] pathArray0 = PathUtils.filter(notFileFilter0, (Path[]) null);
          assertEquals(0, pathArray0.length);
          assertNotNull(pathArray0);
          
          Path path2 = PathUtils.getTempDirectory();
          assertTrue(path2.equals((Object)path0));
          assertTrue(path2.equals((Object)path1));
          assertNotNull(path2);
          assertNotSame(path2, path1);
          assertNotSame(path2, path0);
          
          BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributes(path0);
          assertTrue(path0.equals((Object)path2));
          assertTrue(path0.equals((Object)path1));
          assertNotNull(basicFileAttributes0);
          assertNotSame(path0, path1);
          assertNotSame(path0, path2);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path2, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-7);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)100, (byte) (-92), (byte)9, (byte)10, (byte) (-7)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      assertNotNull(hiddenFileFilter0);
      
      Path[] pathArray0 = new Path[0];
      Path[] pathArray1 = PathUtils.filter(hiddenFileFilter0, pathArray0);
      assertEquals(0, pathArray0.length);
      assertEquals(0, pathArray1.length);
      assertFalse(pathArray1.equals((Object)pathArray0));
      assertNotNull(pathArray1);
      assertNotSame(pathArray0, pathArray1);
      assertNotSame(pathArray1, pathArray0);
      
      String string0 = "directory";
      String string1 = "n";
      try { 
        MockURL.URL("c8vG%-v:[kGFT4!EQ$", "directory", (int) (byte) (-92), "n");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-92
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter(287);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      openOptionArray0[0] = (OpenOption) null;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      assertEquals(StandardOpenOption.SYNC, standardOpenOption0);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      openOptionArray0[2] = (OpenOption) linkOption1;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption1);
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      
      openOptionArray0[3] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.APPEND;
      assertEquals(StandardOpenOption.APPEND, standardOpenOption2);
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      
      openOptionArray0[4] = (OpenOption) standardOpenOption2;
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, stringBuffer0, charset0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!W");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("!W", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("!W", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNotNull(path0);
      
      try { 
        PathUtils.isNewer(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = PathUtils.NULL_LINK_OPTION;
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = null;
      linkOptionArray0[1] = null;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[5] = null;
      boolean boolean1 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      Stream<Path> stream0 = PathUtils.walk(path0, (PathFilter) null, 2921, true, fileVisitOptionArray0);
      assertEquals(3, fileVisitOptionArray0.length);
      assertNotNull(stream0);
      
      boolean boolean2 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        PathUtils.readOsFileAttributes(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption0;
      linkOptionArray0[8] = linkOption0;
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmpty(path0);
      assertFalse(boolean0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[5] = linkOption1;
      boolean boolean1 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, (PathFilter) null, (-628), true, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:237)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:224)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("(3Kdv{9");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("(3Kdv{9", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("(3Kdv{9", mockFile0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/(3Kdv{9", file0.toString());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals("(3Kdv{9", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      MockFile mockFile1 = new MockFile("(3Kdv{9", "@wQwqNpE1_DE+9cO");
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = mockFile1.setExecutable(true);
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/(3Kdv{9/@wQwqNpE1_DE+9cO", mockFile1.toString());
      assertEquals("@wQwqNpE1_DE+9cO", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/(3Kdv{9", mockFile1.getParent());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(boolean0);
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      
      Path path1 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertNull(aclFileAttributeView0);
      
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          long long0 = PathUtils.sizeOf(path0);
          assertEquals(77866940L, long0);
          
          TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
          FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
          assertNotNull(fileTime0);
          
          Instant instant0 = fileTime0.toInstant();
          assertNotNull(instant0);
          
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          OpenOption[] openOptionArray0 = new OpenOption[0];
          boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, openOptionArray0, (FileVisitOption[]) null);
          assertEquals(1, linkOptionArray0.length);
          assertEquals(0, openOptionArray0.length);
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean1);
          assertFalse(boolean1 == boolean0);
          
          Path path1 = PathUtils.getTempDirectory();
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          boolean boolean2 = PathUtils.fileContentEquals((Path) null, (Path) null);
          assertTrue(boolean2);
          assertTrue(boolean2 == boolean0);
          assertFalse(boolean2 == boolean1);
          
          BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
          assertFalse(path0.equals((Object)path1));
          assertNotNull(basicFileAttributes0);
          assertNotSame(path0, path1);
          
          boolean boolean3 = PathUtils.isOlder(path0, path1);
          assertTrue(boolean3);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertTrue(boolean3 == boolean0);
          assertTrue(boolean3 == boolean2);
          assertFalse(boolean3 == boolean1);
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path1, linkOption0, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // sun.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          CopyOption[] copyOptionArray0 = new CopyOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
          
          copyOptionArray0[0] = (CopyOption) linkOption0;
          LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
          assertEquals(1, linkOptionArray0.length);
          assertNotNull(linkOptionArray0);
          
          copyOptionArray0[1] = (CopyOption) linkOption0;
          StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
          assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
          
          StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
          assertEquals(3, standardCopyOptionArray0.length);
          assertNotNull(standardCopyOptionArray0);
          
          TimeUnit timeUnit0 = TimeUnit.DAYS;
          FileTime fileTime0 = FileTime.from(1099511627776L, timeUnit0);
          assertNotNull(fileTime0);
          
          boolean boolean0 = PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertTrue(boolean0);
          
          Path path1 = PathUtils.getTempDirectory();
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:297)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(287);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from((long) 287, timeUnit0);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertNotNull(instant0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertEquals(4, linkOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(4, linkOptionArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean2 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertNotNull(basicFileAttributes0);
      
      boolean boolean3 = PathUtils.isOlder(path0, 1170L, linkOptionArray0);
      assertEquals(4, linkOptionArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[1] = null;
      linkOptionArray0[3] = null;
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
      
      CopyDirectoryVisitor copyDirectoryVisitor0 = null;
      try {
        copyDirectoryVisitor0 = new CopyDirectoryVisitor((Counters.PathCounters) null, path0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathCounter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Path path0 = null;
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      FileTime fileTime0 = FileTime.fromMillis((-1158L));
      assertNotNull(fileTime0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      long long0 = (-134L);
      FileTime fileTime0 = FileTime.from((-134L), timeUnit0);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertNotNull(instant0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals(0, linkOptionArray0.length);
          assertTrue(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      BigInteger bigInteger0 = PathUtils.sizeOfAsBigInteger(path0);
      assertEquals((byte) (-68), bigInteger0.byteValue());
      assertEquals((short)10172, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      int int0 = 552;
      try { 
        MockURL.URL("sourceFile", "$Pii39y=L#k", 552, "\u0001^&}", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: sourcefile
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      FileTime fileTime0 = FileTime.fromMillis((-1158L));
      assertNotNull(fileTime0);
      
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Path path1 = PathUtils.createParentDirectories(path0, fileAttributeArray0);
      assertEquals(3, fileAttributeArray0.length);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertNotNull(instant0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      OpenOption[] openOptionArray0 = new OpenOption[0];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, openOptionArray0, (FileVisitOption[]) null);
      assertEquals(1, linkOptionArray0.length);
      assertEquals(0, openOptionArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean2 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
      assertFalse(path0.equals((Object)path1));
      assertNotNull(basicFileAttributes0);
      assertNotSame(path0, path1);
      
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, 1170L, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, 1099511627776L, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyFile(path0);
      assertFalse(boolean0);
      
      DeleteOption[] deleteOptionArray0 = new DeleteOption[6];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      assertEquals(StandardDeleteOption.OVERRIDE_READ_ONLY, standardDeleteOption0);
      
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1305)
             // sun.reflect.GeneratedMethodAccessor266.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[0] = (CopyOption) linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      assertSame(linkOption1, linkOption0);
      
      copyOptionArray0[1] = (CopyOption) linkOption1;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      assertNotNull(directoryFileFilter0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption1;
      fileVisitOptionArray0[2] = fileVisitOption1;
      fileVisitOptionArray0[3] = fileVisitOption1;
      fileVisitOptionArray0[4] = fileVisitOption0;
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[6] = fileVisitOption1;
      fileVisitOptionArray0[7] = fileVisitOption1;
      Stream<Path> stream0 = PathUtils.walk(path0, directoryFileFilter0, 2, false, fileVisitOptionArray0);
      assertEquals(8, fileVisitOptionArray0.length);
      assertNotNull(stream0);
      
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption2;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(3, linkOptionArray0.length);
      assertEquals(8, fileVisitOptionArray0.length);
      assertTrue(boolean0);
      
      String string0 = "Xn4|Kt=SxA%";
      try { 
        MockURL.URL("Xn4|Kt=SxA%", "JSV7J", 2, "JSV7J");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: xn4|kt=sxa%
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      String string0 = "last-modi~ied";
      File file0 = MockFile.createTempFile("last-modi~ied", "gplct");
      assertTrue(file0.isAbsolute());
      assertEquals("last-modi~ied0gplct", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/last-modi~ied0gplct", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile("gplct", "last-modi~ied");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gplct", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gplct/last-modi~ied", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      
      Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gplct", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gplct/last-modi~ied", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gplct", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("last-modi~ied", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/gplct/last-modi~ied", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(5, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(mockFile0, file0);
      assertNotSame(path1, path0);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      Path path1 = file0.toPath();
      assertEquals("last-modi~ied0last-modi~ied", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      MockFile mockFile0 = new MockFile("lg2n%_(.i@rA^01", "lg2n%_(.i@rA^01");
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("lg2n%_(.i@rA^01", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/lg2n%_(.i@rA^01/lg2n%_(.i@rA^01", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/lg2n%_(.i@rA^01", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean0 = PathUtils.fileContentEquals(path0, path1);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("lg2n%_(.i@rA^01", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/lg2n%_(.i@rA^01/lg2n%_(.i@rA^01", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/lg2n%_(.i@rA^01", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(path1, path0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          File file0 = MockFile.createTempFile("last-modi~ied", "last-modi~ied");
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canRead());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertNotNull(file0);
          
          Path path1 = file0.toPath();
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canRead());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals("last-modi~ied0last-modi~ied", file0.getName());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canRead());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals("/tmp/last-modi~ied0last-modi~ied", file0.toString());
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean0);
          assertFalse(path0.equals((Object)path1));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(path0, path1);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
      
      CopyDirectoryVisitor copyDirectoryVisitor0 = null;
      try {
        copyDirectoryVisitor0 = new CopyDirectoryVisitor((Counters.PathCounters) null, path0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathCounter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
          assertNotNull(accumulatorPathVisitor0);
          
          List<Path> list0 = accumulatorPathVisitor0.getDirList();
          assertTrue(list0.isEmpty());
          assertEquals(0, list0.size());
          assertNotNull(list0);
          
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          MockIOException mockIOException0 = new MockIOException("sourceIterable");
          assertNotNull(mockIOException0);
          
          FileVisitResult fileVisitResult0 = accumulatorPathVisitor0.postVisitDirectory(path0, (IOException) mockIOException0);
          assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
          
          List<Path> list1 = PathUtils.relativize(list0, path0, false, (Comparator<? super Path>) null);
          assertFalse(list0.isEmpty());
          assertEquals(1, list0.size());
          assertEquals(1, list1.size());
          assertFalse(list1.isEmpty());
          assertFalse(list1.equals((Object)list0));
          assertNotNull(list1);
          assertNotSame(list0, list1);
          assertNotSame(list1, list0);
          assertTrue(list0.contains(path0));
          assertFalse(list1.contains(path0));
          
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:396)
             // sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, stringBuffer0, charset0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Path path0 = null;
      int int0 = 287;
      StringWriter stringWriter0 = new StringWriter(287);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      OpenOption[] openOptionArray0 = new OpenOption[0];
      // Undeclared exception!
      try { 
        PathUtils.writeString((Path) null, stringBuffer0, charset0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          StringWriter stringWriter0 = new StringWriter();
          assertEquals("", stringWriter0.toString());
          assertNotNull(stringWriter0);
          
          StringBuffer stringBuffer0 = stringWriter0.getBuffer();
          assertEquals("", stringWriter0.toString());
          assertEquals("", stringBuffer0.toString());
          assertEquals(0, stringBuffer0.length());
          assertNotNull(stringBuffer0);
          
          Charset charset0 = Charset.defaultCharset();
          assertEquals("UTF-8", charset0.displayName());
          assertEquals("UTF-8", charset0.name());
          assertTrue(charset0.canEncode());
          assertEquals("UTF-8", charset0.toString());
          assertTrue(charset0.isRegistered());
          assertNotNull(charset0);
          
          OpenOption[] openOptionArray0 = new OpenOption[0];
          // Undeclared exception!
          try { 
            PathUtils.writeString(path0, stringBuffer0, charset0, openOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.write(Files.java:3292)
             // org.apache.commons.io.file.PathUtils.writeString(PathUtils.java:1681)
             // sun.reflect.GeneratedMethodAccessor299.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      try { 
        PathUtils.readString(path0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      try { 
        PathUtils.readString(path0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, (-2123L), linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      copyOptionArray0[0] = (CopyOption) linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      assertSame(linkOption1, linkOption0);
      
      copyOptionArray0[1] = (CopyOption) linkOption1;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      assertEquals(3, standardCopyOptionArray0.length);
      assertNotNull(standardCopyOptionArray0);
      
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption3;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption1;
      linkOptionArray0[4] = linkOption1;
      linkOptionArray0[5] = linkOption1;
      linkOptionArray0[6] = linkOption2;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      fileVisitOptionArray0[0] = fileVisitOption0;
      fileVisitOptionArray0[1] = fileVisitOption1;
      fileVisitOptionArray0[2] = fileVisitOption1;
      fileVisitOptionArray0[3] = fileVisitOption1;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(4, fileVisitOptionArray0.length);
      assertEquals(7, linkOptionArray0.length);
      assertTrue(boolean0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean0 = PathUtils.isEmptyFile(path0);
          assertFalse(boolean0);
          
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:452)
             // sun.reflect.GeneratedMethodAccessor236.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "";
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption3;
      linkOptionArray0[1] = linkOption2;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption2;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption1;
      linkOptionArray0[7] = linkOption1;
      linkOptionArray0[8] = linkOption1;
      boolean boolean1 = PathUtils.isNewer(path0, 0L, linkOptionArray0);
      assertEquals(9, linkOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkOption[] linkOptionArray1 = new LinkOption[3];
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      
      linkOptionArray1[0] = linkOption1;
      linkOptionArray1[1] = linkOption0;
      linkOptionArray1[2] = linkOption2;
      AclFileAttributeView aclFileAttributeView0 = PathUtils.getAclFileAttributeView(path0, linkOptionArray1);
      assertEquals(3, linkOptionArray1.length);
      assertFalse(linkOptionArray1.equals((Object)linkOptionArray0));
      assertNull(aclFileAttributeView0);
      assertNotSame(linkOptionArray1, linkOptionArray0);
      
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JG(u3%{u<&>@", "}Y'`v3gD~0`2Ur)S");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "}Y'`v3gD~0`2Ur)S");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path0 = mockFile1.toPath();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/JG(u3%{u<&>@", mockFile0.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/JG(u3%{u<&>@/}Y'`v3gD~0`2Ur)S", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("}Y'`v3gD~0`2Ur)S", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/JG(u3%{u<&>@/}Y'`v3gD~0`2Ur)S", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("}Y'`v3gD~0`2Ur)S", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/JG(u3%{u<&>@/}Y'`v3gD~0`2Ur)S/}Y'`v3gD~0`2Ur)S", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(path0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      assertNotNull(notFileFilter0);
      
      boolean boolean0 = false;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      fileVisitOptionArray0[0] = fileVisitOption0;
      try { 
        PathUtils.walk(path0, notFileFilter0, 161, false, fileVisitOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = null;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
      
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption1;
      fileVisitOptionArray0[2] = fileVisitOption0;
      fileVisitOptionArray0[3] = fileVisitOption0;
      fileVisitOptionArray0[4] = fileVisitOption0;
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[6] = fileVisitOption1;
      fileVisitOptionArray0[7] = fileVisitOption0;
      fileVisitOptionArray0[8] = fileVisitOption1;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertEquals(9, fileVisitOptionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(0, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Path path2 = PathUtils.getTempDirectory();
      assertTrue(path2.equals((Object)path0));
      assertNotNull(path2);
      assertNotSame(path2, path0);
      
      try { 
        PathUtils.fileContentEquals(path2, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
          FileTime fileTime0 = FileTime.from(1048576L, timeUnit0);
          assertNotNull(fileTime0);
          
          Instant instant0 = fileTime0.toInstant();
          assertNotNull(instant0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          linkOptionArray0[0] = linkOption0;
          boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals(1, linkOptionArray0.length);
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertTrue(boolean1);
          assertTrue(boolean1 == boolean0);
          
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          boolean boolean2 = PathUtils.fileContentEquals(path0, (Path) null);
          assertFalse(boolean2);
          assertFalse(boolean2 == boolean0);
          assertFalse(boolean2 == boolean1);
          
          BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
          assertNotNull(basicFileAttributes0);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1516)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.readOsFileAttributes(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOfDirectory(path0);
      assertEquals(77866940L, long0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertNotNull(instant0);
      
      Instant instant1 = fileTime0.toInstant();
      assertNotNull(instant1);
      assertSame(instant1, instant0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      long long1 = fileTime0.to(timeUnit0);
      assertEquals(77866940L, long1);
      assertTrue(long1 == long0);
      
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, fileTime0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path0);
      
      Path path1 = PathUtils.current();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      boolean boolean0 = mockFile0.createNewFile();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean0);
      
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption3);
      assertSame(fileVisitOption3, fileVisitOption0);
      assertSame(fileVisitOption3, fileVisitOption1);
      assertSame(fileVisitOption3, fileVisitOption2);
      
      fileVisitOptionArray0[3] = fileVisitOption3;
      Counters.PathCounters counters_PathCounters0 = PathUtils.countDirectoryAsBigInteger(path0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(path0.equals((Object)path1));
      assertNotNull(counters_PathCounters0);
      assertNotSame(path0, path1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.directoryContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.sizeOf((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          File file0 = MockFile.createTempFile("last-modi~ied", "In:''BJn3Sn_");
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.exists());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("last-modi~ied0In:''BJn3Sn_", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", file0.toString());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isHidden());
          assertNotNull(file0);
          
          MockFile mockFile0 = new MockFile(file0, "last-modi~ied");
          assertFalse(mockFile0.equals((Object)file0));
          assertNotNull(mockFile0);
          
          mockFile0.deleteOnExit();
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.exists());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("last-modi~ied0In:''BJn3Sn_", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", file0.toString());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isHidden());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_/last-modi~ied", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals("last-modi~ied", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          
          Path path1 = mockFile0.toPath();
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.exists());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("last-modi~ied0In:''BJn3Sn_", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", file0.toString());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isHidden());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_/last-modi~ied", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals("last-modi~ied", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.length());
          assertTrue(file0.exists());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canExecute());
          assertTrue(file0.canRead());
          assertEquals("last-modi~ied0In:''BJn3Sn_", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", file0.toString());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.isHidden());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_", mockFile0.getParent());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.canExecute());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isDirectory());
          assertEquals("/tmp/last-modi~ied0In:''BJn3Sn_/last-modi~ied", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isFile());
          assertEquals("last-modi~ied", mockFile0.getName());
          assertFalse(mockFile0.exists());
          assertFalse(mockFile0.canRead());
          assertEquals(0, linkOptionArray0.length);
          assertFalse(boolean0);
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(path1.equals((Object)path0));
          assertNotSame(file0, mockFile0);
          assertNotSame(mockFile0, file0);
          assertNotSame(path1, path0);
          
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/last-modi~ied0In:''BJn3Sn_\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1097)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.createParentDirectories((Path) null, linkOption0, (FileAttribute<?>[]) null);
      assertNull(path0);
      
      boolean boolean0 = PathUtils.fileContentEquals((Path) null, (Path) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkOption[] linkOptionArray0 = PathUtils.NOFOLLOW_LINK_OPTION_ARRAY;
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked((Path) null);
      assertNull(basicFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      LinkOption[] linkOptionArray0 = LinkOption.values();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      boolean boolean0 = PathUtils.isRegularFile(path0, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = false;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      IOFileFilter iOFileFilter0 = CountingPathVisitor.defaultFileFilter();
      assertNotNull(iOFileFilter0);
      
      Pattern pattern0 = Pattern.compile("org.apache.commons.io.file.PathUtils$1", 2756);
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.pattern());
      assertEquals(2756, pattern0.flags());
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.toString());
      assertNotNull(pattern0);
      
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0, (Function<Path, String>) null);
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.pattern());
      assertEquals(2756, pattern0.flags());
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.toString());
      assertNotNull(regexFileFilter0);
      
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters((PathFilter) iOFileFilter0, (PathFilter) regexFileFilter0);
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.pattern());
      assertEquals(2756, pattern0.flags());
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.toString());
      assertNotNull(accumulatorPathVisitor0);
      
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.pattern());
      assertEquals(2756, pattern0.flags());
      assertEquals("org.apache.commons.io.file.PathUtils$1", pattern0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      try { 
        PathUtils.copyFileToDirectory(uRL0, (Path) null, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, (LinkOption[]) null, (OpenOption[]) null, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          assertNotNull(path0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[7];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, linkOption3, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // sun.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = PathUtils.noFollowLinkOptionArray();
      assertEquals(1, linkOptionArray0.length);
      assertNotNull(linkOptionArray0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readOsFileAttributes((Path) null, linkOptionArray0);
      assertEquals(1, linkOptionArray0.length);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertTrue(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(path0));
      
      List<Path> list0 = PathUtils.relativize(linkedList0, path0, false, (Comparator<? super Path>) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(path0.equals((Object)path1));
      assertNotNull(list0);
      assertNotSame(path0, path1);
      assertFalse(linkedList0.contains(path0));
      assertFalse(list0.contains(path0));
      
      try { 
        PathUtils.countDirectoryAsBigInteger(path1);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      Duration duration0 = Duration.ofSeconds(0L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minusDays((-42L));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      long long0 = duration0.toHours();
      assertEquals(0L, long0);
      assertFalse(duration0.equals((Object)duration1));
      assertNotSame(duration0, duration1);
      
      boolean boolean0 = PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      assertTrue(boolean0);
      assertFalse(duration0.equals((Object)duration1));
      assertNotSame(duration0, duration1);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      fileVisitOptionArray0[0] = fileVisitOption0;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, 2971, (LinkOption[]) null, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("rvrH@C");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "B*");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path1 = mockFile1.toPath();
      assertFalse(mockFile0.canWrite());
      assertEquals("rvrH@C", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("rvrH@C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
      assertEquals("B*", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertFalse(mockFile0.canWrite());
      assertEquals("rvrH@C", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("rvrH@C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
      assertEquals("B*", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertEquals(0, fileVisitOptionArray0.length);
      assertEquals(8, linkOptionArray0.length);
      assertFalse(boolean0);
      assertFalse(path0.equals((Object)path1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      boolean boolean1 = PathUtils.fileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertFalse(mockFile0.canWrite());
      assertEquals("rvrH@C", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("rvrH@C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
      assertEquals("B*", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertEquals(8, linkOptionArray0.length);
      assertFalse(boolean1);
      assertFalse(path0.equals((Object)path1));
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertNotSame(path0, path1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      
      Path path2 = PathUtils.getTempDirectory();
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotNull(path2);
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      
      boolean boolean2 = PathUtils.fileContentEquals(path0, path1);
      assertFalse(mockFile0.canWrite());
      assertEquals("rvrH@C", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("rvrH@C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*", mockFile1.toString());
      assertEquals("B*", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/rvrH@C", mockFile1.getParent());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertFalse(boolean2);
      assertFalse(path0.equals((Object)path1));
      assertFalse(path0.equals((Object)path2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertFalse(path1.equals((Object)path2));
      assertNotSame(path0, path1);
      assertNotSame(path0, path2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertNotSame(path1, path2);
      
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesUnchecked(path1);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /home/azureuser/LLm4PrTest/ io_experiments/rvrH@C/B*
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      String string0 = "Cannot delete file: ";
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Cannot delete file: ");
      assertFalse(boolean0);
      
      Path path1 = null;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertNotNull(instant0);
      
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption1);
      assertSame(fileVisitOption1, fileVisitOption0);
      
      FileVisitOption[] fileVisitOptionArray0 = null;
      boolean boolean1 = PathUtils.directoryAndFileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
      assertEquals(1, linkOptionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, true, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      long long0 = PathUtils.sizeOf(path0);
      assertEquals(77866940L, long0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
      assertNotNull(fileTime0);
      
      Instant instant0 = fileTime0.toInstant();
      assertNotNull(instant0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
      
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption3;
      linkOptionArray0[2] = linkOption3;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption1;
      linkOptionArray0[5] = linkOption2;
      linkOptionArray0[6] = linkOption1;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      fileVisitOptionArray0[0] = fileVisitOption1;
      fileVisitOptionArray0[1] = fileVisitOption0;
      fileVisitOptionArray0[2] = fileVisitOption0;
      fileVisitOptionArray0[3] = fileVisitOption1;
      fileVisitOptionArray0[4] = fileVisitOption1;
      fileVisitOptionArray0[5] = fileVisitOption0;
      fileVisitOptionArray0[6] = fileVisitOption0;
      fileVisitOptionArray0[7] = fileVisitOption0;
      fileVisitOptionArray0[8] = fileVisitOption0;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      assertEquals(9, fileVisitOptionArray0.length);
      assertEquals(7, linkOptionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      assertEquals(7, linkOptionArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
      assertNotNull(path1);
      assertNotSame(path1, path0);
      
      boolean boolean2 = PathUtils.fileContentEquals((Path) null, path1);
      assertFalse(boolean2);
      assertFalse(path1.equals((Object)path0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(path1, path0);
      
      BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked((Path) null);
      assertNull(basicFileAttributes0);
      
      // Undeclared exception!
      try { 
        PathUtils.countDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Path path0 = PathUtils.current();
      assertNotNull(path0);
      
      boolean boolean0 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          long long0 = PathUtils.sizeOf(path0);
          assertEquals(77866940L, long0);
          
          TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
          FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
          assertNotNull(fileTime0);
          
          Instant instant0 = fileTime0.toInstant();
          assertNotNull(instant0);
          
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
          assertEquals(FileVisitOption.FOLLOW_LINKS, fileVisitOption0);
          
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          linkOptionArray0[0] = linkOption0;
          OpenOption[] openOptionArray0 = new OpenOption[0];
          boolean boolean0 = PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, openOptionArray0, (FileVisitOption[]) null);
          assertEquals(1, linkOptionArray0.length);
          assertEquals(0, openOptionArray0.length);
          assertTrue(boolean0);
          
          boolean boolean1 = PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
          assertEquals(1, linkOptionArray0.length);
          assertFalse(boolean1);
          assertFalse(boolean1 == boolean0);
          
          Path path1 = PathUtils.getTempDirectory();
          assertFalse(path1.equals((Object)path0));
          assertNotNull(path1);
          assertNotSame(path1, path0);
          
          boolean boolean2 = PathUtils.fileContentEquals((Path) null, (Path) null);
          assertTrue(boolean2);
          assertFalse(boolean2 == boolean1);
          assertTrue(boolean2 == boolean0);
          
          BasicFileAttributes basicFileAttributes0 = PathUtils.readBasicFileAttributesUnchecked(path0);
          assertFalse(path0.equals((Object)path1));
          assertNotNull(basicFileAttributes0);
          assertNotSame(path0, path1);
          
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1516)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      OpenOption[] openOptionArray0 = new OpenOption[9];
      openOptionArray0[0] = (OpenOption) linkOption0;
      openOptionArray0[1] = (OpenOption) linkOption0;
      openOptionArray0[2] = (OpenOption) linkOption5;
      openOptionArray0[3] = (OpenOption) linkOption2;
      openOptionArray0[4] = (OpenOption) linkOption4;
      openOptionArray0[5] = (OpenOption) linkOption0;
      openOptionArray0[6] = (OpenOption) linkOption0;
      openOptionArray0[7] = (OpenOption) linkOption2;
      openOptionArray0[8] = (OpenOption) linkOption1;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      FileVisitOption fileVisitOption8 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[8] = fileVisitOption8;
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, openOptionArray0, fileVisitOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream((Path) null, directoryFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
      assertNull(posixFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      PosixFileAttributes posixFileAttributes0 = PathUtils.readPosixFileAttributes((Path) null, linkOptionArray0);
      assertNull(posixFileAttributes0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = LinkOption.values();
      // Undeclared exception!
      try { 
        PathUtils.copyFile((URL) null, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "org.apache.commons.io.file.PathUtils$RelativeSortedPaths", uRLStreamHandler0);
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      LinkOption linkOption0 = PathUtils.NULL_LINK_OPTION;
      copyOptionArray0[1] = (CopyOption) null;
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = LinkOption.values();
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      StandardCopyOption.values();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      Path path1 = PathUtils.current();
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path1, (-3237), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOfAsBigInteger(path0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      PathUtils.directoryContentEquals((Path) null, path0);
      Path path1 = PathUtils.getTempDirectory();
      assertFalse(path1.equals((Object)path0));
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Path path1 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path1, (-1), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isNewer(path0, (-763L), linkOptionArray0);
      boolean boolean1 = PathUtils.directoryContentEquals(path0, path0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      PathUtils.isNewer(path0, 335L, linkOptionArray0);
      LinkOption[] linkOptionArray1 = new LinkOption[0];
      PathUtils.getAclFileAttributeView(path0, linkOptionArray1);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      boolean boolean0 = PathUtils.isNewer(path0, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = new AndFileFilter();
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, andFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          LinkOption[] linkOptionArray0 = PathUtils.EMPTY_LINK_OPTION_ARRAY;
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          Path path0 = mockFile0.toPath();
          LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
          Locale locale0 = Locale.ITALIAN;
          Set<String> set0 = locale0.getUnicodeLocaleAttributes();
          Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
          List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
          IOCase iOCase0 = IOCase.SENSITIVE;
          MockFile.createTempFile("-IVd<0+ *Kz:^#ar-7", (String) null, (File) mockFile0);
          SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list0, iOCase0);
          PathUtils.newDirectoryStream(path0, suffixFileFilter0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          boolean boolean0 = true;
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1287)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1400)
             // sun.reflect.GeneratedMethodAccessor231.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      PathUtils.current();
      Duration.ofDays(0L);
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.create("StdIo_System_Out");
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFileExample();
      URI uRI0 = MockURL.toURI(uRL0);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      long long0 = (-2458L);
      Duration duration0 = Duration.ofSeconds((-2458L));
      LinkOption[] linkOptionArray0 = null;
      PathUtils.waitFor(path0, duration0, (LinkOption[]) null);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories((Path) null, linkOption0, fileAttributeArray0);
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      MockFile mockFile0 = new MockFile("CartesianProductTest can not have a non-empty display name.");
      Path path0 = mockFile0.toPath();
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from(0L, timeUnit0);
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, fileTime0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOf(path0);
      Path path1 = null;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      FileTime fileTime0 = FileTime.from(77866940L, timeUnit0);
      fileTime0.toInstant();
      fileTime0.toInstant();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      fileTime0.to(timeUnit0);
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.isNewer((Path) null, fileTime0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = null;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:297)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          CopyOption[] copyOptionArray0 = new CopyOption[1];
          StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
          copyOptionArray0[0] = (CopyOption) standardCopyOption0;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:297)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Path path0 = PathUtils.current();
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1305)
             // sun.reflect.GeneratedMethodAccessor266.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, true, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          LinkOption[] linkOptionArray0 = LinkOption.values();
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, true, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setDosReadOnly(PathUtils.java:1287)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1400)
             // sun.reflect.GeneratedMethodAccessor231.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption1;
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly((Path) null, true, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      // Undeclared exception!
      try { 
        PathUtils.touch((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 6);
          FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:350)
             // sun.reflect.GeneratedMethodAccessor235.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, linkOption0, (FileAttribute<?>[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:366)
             // sun.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      Path[] pathArray0 = new Path[1];
      Path[] pathArray1 = PathUtils.EMPTY_PATH_ARRAY;
      MockFile mockFile0 = new MockFile("Parameter '");
      Path path0 = mockFile0.toPath();
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[4];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, notFileFilter0, (-4188), true, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories(path0, linkOption0, fileAttributeArray0);
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      // Undeclared exception!
      try { 
        PathUtils.walk((Path) null, notFileFilter0, (-1342), false, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1536)
             // org.apache.commons.io.file.PathUtils.lambda$deleteDirectory$0(PathUtils.java:468)
             // org.apache.commons.io.file.PathUtils.withPosixFileAttributes(PathUtils.java:1656)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:467)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:418)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:396)
             // sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.getAclEntryList(path0);
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, canExecuteFileFilter0, 3, false, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.touch(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:173)
             // org.apache.commons.io.file.PathUtils.touch(PathUtils.java:1516)
             // sun.reflect.GeneratedMethodAccessor237.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JDuv{uI>@");
      MockFile mockFile1 = new MockFile(mockFile0, "}Y'`v3gD~0`2Ur)S");
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.isEmpty(path0);
      CopyOption[] copyOptionArray0 = new CopyOption[9];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.REPLACE_EXISTING;
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      StandardCopyOption standardCopyOption2 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[2] = (CopyOption) standardCopyOption2;
      // Undeclared exception!
      try { 
        LinkOption.valueOf("}Y'`v3gD~0`2Ur)S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.}Y'`v3gD~0`2Ur)S
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "}Y'`v3gD~0`2Ur)S";
      MockFile mockFile0 = new MockFile("JG(u3%{u<&>@", "}Y'`v3gD~0`2Ur)S");
      MockFile mockFile1 = new MockFile(mockFile0, "}Y'`v3gD~0`2Ur)S");
      Path path0 = mockFile1.toPath();
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      Path path0 = PathUtils.current();
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path0, (Set<FileVisitOption>) null, (-3108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      Path path0 = null;
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      linkedHashSet0.remove((Object) null);
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      linkedHashSet0.add(fileVisitOption0);
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      linkedHashSet0.add(fileVisitOption1);
      int int0 = 1023;
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, (Path) null, (Set<FileVisitOption>) linkedHashSet0, 1023);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Path path0 = PathUtils.current();
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Object>) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          CopyOption[] copyOptionArray0 = new CopyOption[4];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          copyOptionArray0[0] = (CopyOption) linkOption0;
          MockFile mockFile0 = new MockFile("sourceFile");
          MockFile mockFile1 = new MockFile(mockFile0, "B*");
          Path path1 = mockFile0.toPath();
          LinkOption[] linkOptionArray0 = new LinkOption[5];
          linkOptionArray0[0] = linkOption0;
          linkOptionArray0[1] = linkOption0;
          linkOptionArray0[2] = linkOption0;
          PathUtils.getAclEntryList(path0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path1, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"sourceFile\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          LinkOption[] linkOptionArray0 = LinkOption.values();
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }
}
