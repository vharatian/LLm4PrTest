/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:14:44 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.FileTime;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.HijrahDate;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.file.PathVisitor;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PathVisitorFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("%8dYz<6om(2\"D` c.W");
      assertEquals("\uFFFDYz<6om(2\"D` c.W", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-90);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("-27853650883921056185230295040 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      CopyOption[] copyOptionArray0 = new CopyOption[9];
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      copyOptionArray0[3] = (CopyOption) standardCopyOption0;
      copyOptionArray0[4] = (CopyOption) standardCopyOption0;
      copyOptionArray0[5] = (CopyOption) standardCopyOption0;
      copyOptionArray0[6] = (CopyOption) standardCopyOption0;
      copyOptionArray0[7] = (CopyOption) standardCopyOption0;
      copyOptionArray0[8] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      FileUtils.copyDirectory(file1, file0, (FileFilter) canWriteFileFilter0, true);
      assertEquals(1755976220984L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.copyDirectory(file1, file0);
      assertEquals(1755863896537L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp");
      FileUtils.cleanDirectory(mockFile0);
      assertTrue(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("File ", (String) null, file0);
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file1);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File[] fileArray0 = new File[7];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      fileArray0[3] = file0;
      fileArray0[4] = file0;
      fileArray0[5] = file0;
      fileArray0[6] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(7, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".:OF");
      URL uRL0 = mockFile0.toURL();
      File file0 = FileUtils.toFile(uRL0);
      assertEquals(".:OF", file0.getName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = file0.toURL();
      File file1 = FileUtils.toFile(uRL0);
      assertTrue(file1.canWrite());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.current();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((byte)95, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(73334879L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.current();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((byte)95, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(73334879L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("tnZ:P|eK)v", "I\"e_=($Rt&>", file0);
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file1);
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LineIterator lineIterator0 = FileUtils.lineIterator(file0, (String) null);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.lastModified(file0);
      assertEquals(1755975809703L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter((PathVisitor) null);
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, pathVisitorFileFilter0, pathVisitorFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (String[]) null, true);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanReadFileFilter.CANNOT_READ;
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) notFileFilter0, (IOFileFilter) notFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(3, 31, 461);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      MinguoDate minguoDate0 = MockMinguoDate.now((ZoneId) zoneOffset0);
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) minguoDate0, offsetTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.current();
      Period period0 = Period.of(786, 786, 786);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      LocalTime localTime0 = MockLocalTime.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) localDate0, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destFile", "o/#nw[3O");
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now(clock0);
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, offsetDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      boolean boolean0 = FileUtils.isFileOlder(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from(1152921504606846976L, timeUnit0);
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.current();
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, 1152921504606846976L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/hom";
      stringArray0[1] = "/tmp/home/azureuser/LLm4PrTest/ io_experiments/checksum";
      stringArray0[2] = "";
      stringArray0[3] = "1H@q[[dW.(-%~|wv?qr";
      stringArray0[4] = "dos:system";
      stringArray0[5] = "cvRvdf\"~N$";
      stringArray0[6] = "Test '%s' was supposed to run no longer than %d ms.";
      stringArray0[7] = "files";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      MockDate mockDate0 = new MockDate((-445), (-445), 0, 3, 0);
      FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertEquals("/hom/tmp/home/azureuser/LLm4PrTest/ io_experiments/checksum/1H@q[[dW.(-%~|wv?qr/dos:system/cvRvdf\"~N$/Test '%s' was supposed to run no longer than %d ms./files", file0.toString());
      assertEquals("/hom/tmp/home/azureuser/LLm4PrTest/ io_experiments/checksum/1H@q[[dW.(-%~|wv?qr/dos:system/cvRvdf\"~N$/Test '%s' was supposed to run no longer than %d ms.", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Clock clock0 = MockClock.systemDefaultZone();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0, localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/;A/-6/[CS2!::1xC%4<xt!TtX/home/azureuser/w#3<PN)Ihb/,p9CUW/azureuser/H5=)4X)]1DqErzI=8/Length must not be negative: /h&?kp/(B)`7pUaJ<}Fn?/SvcDZA.rgphQ~t;=!", (String) null, (File) null);
      Period period0 = Period.ofWeeks(33);
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      boolean boolean0 = FileUtils.isFileNewer(file0, chronoLocalDate0, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = MockFile.createTempFile("bytebuddy", "' is not a file: ");
      FileTime fileTime0 = FileTime.fromMillis((-2223L));
      Instant instant0 = fileTime0.toInstant();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(42);
      OffsetDateTime offsetDateTime0 = MockInstant.atOffset(instant0, zoneOffset0);
      boolean boolean0 = FileUtils.isFileNewer(file0, offsetDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.current();
      Instant instant0 = MockInstant.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("t5H+c$/", "t5H+c$/", file0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer(file1, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destFile", "checksum");
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, 0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadable(false, false);
      File file1 = FileUtils.getUserDirectory();
      assertTrue(file1.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = FileUtils.getUserDirectory();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      File file1 = FileUtils.getTempDirectory();
      assertNotSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("java.io.tmpdir/java.io.tmpdir/java.io.tmpdir");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.io.tmpdir";
      stringArray0[1] = "java.io.tmpdir";
      stringArray0[2] = "java.io.tmpdir";
      stringArray0[3] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.io.tmpdir/java.io.tmpdir/java.io.tmpdir", file0.toString());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m`4qpe;lp";
      stringArray0[1] = "";
      stringArray0[2] = ".";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/m`4qpe;lp/.", file0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6SOq8E$D", "tZRfiR4:6-yj/0H)i");
      FileUtils.createParentDirectories(mockFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6SOq8E$D";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals(".", file1.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/tmp");
      mockFile0.mkdirs();
      assertEquals("/fake/but/wellformed/url/home/azureuser/LLm4PrTest/ io_experiments", mockFile0.getParent());
      
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertFalse(file0.canRead());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p^";
      File file1 = FileUtils.getFile(file0, stringArray0);
      File file2 = FileUtils.createParentDirectories(file1);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments", file2.getParent());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*v$~y@Mp`*Xhy(Zq/M-");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertNull(file0.getParent());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Fil ";
      stringArray0[1] = "Fil ";
      stringArray0[2] = "Fil ";
      stringArray0[3] = "Fil ";
      stringArray0[4] = "Fil ";
      stringArray0[5] = "Fil ";
      File file1 = FileUtils.getFile(file0, stringArray0);
      File file2 = FileUtils.createParentDirectories(file1);
      assertNotNull(file2);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./Fil /Fil /Fil /Fil ", file2.getParent());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Path path0 = file0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.and(notFileFilter0);
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, iOFileFilter0, pathEqualsFileFilter0);
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(collection0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(hashSet0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "mdUH0[*0L", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "VAnjR", "VAnjR", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // VAnjR
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "6ic5h", "6ic5h");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6ic5h
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out", "/home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/mvn_compile_merge_pr_452.out
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "chronoZonedDateTime", (Collection<?>) null, "chronoZonedDateTime", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (-2607), (-2607), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (-1968526675), (-1968526675));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", "rX({_l2[sY");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "rX({_l2[sY", "rX({_l2[sY", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // rX({_l2[sY
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "destFile", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum", "checksum");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "checksum", "checksum");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // checksum
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "jB?5wZ@y)icA \"J", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockFile mockFile0 = new MockFile("' does not exist", "' does not exist");
      try { 
        FileUtils.streamFiles(mockFile0, true, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" *bm[(");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: ' *bm[('
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D]ftp");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'D]ftp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/mvn_compile_merge_pr_452.out");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/tmp/mvn_compile_merge_pr_452.out'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "\"7[S-");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '\"7[S-'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "$pF<I&XC[XBh:B~:t1");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "~,`JL4*+9 =6~(U");
      try { 
        FileUtils.readLines((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "/tmp//tmp/home/azureuser/home/tmp");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp//tmp/home/azureuser/home/tmp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("g%;#g(V54TZFkUh}WQk", "g%;#g(V54TZFkUh}WQk");
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/tmp");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) mockFile0, "checksum");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // checksum
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4D{L8cD{0");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) mockFile0, "4D{L8cD{0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4D{L8cD{0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("chgcksup");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/home/azureuser/home", (String) null);
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[8];
      file0.setReadOnly();
      stringArray0[0] = "destDir";
      stringArray0[1] = "destDir";
      stringArray0[2] = "v,,6L`w+3v";
      stringArray0[3] = "destDir";
      stringArray0[4] = "destDir";
      stringArray0[5] = "vUv/x}.fdtL/o";
      stringArray0[6] = "destDir";
      stringArray0[7] = "destDir";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.openOutputStream(file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/destDir/destDir/v,,6L`w+3v/destDir/destDir/vUv/x}.fdtL/o/destDir'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments", "/home/azureuser/LLm4PrTest/ io_experiments");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/home/azureuser/LLm4PrTest/ io_experiments0/home/azureuser/LLm4PrTest/ io_experiments'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("/tmp/tmp", "/tmp/tmp", file0);
      try { 
        FileUtils.moveFileToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("%s %s.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '%s %s.'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/home/azureuser/azureuser");
      mockFile0.createNewFile();
      try { 
        FileUtils.moveFile((File) mockFile0, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/Cannot cache the valne of a method with pa$ameters: /tmp");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Cannot cache the valne of a method with pa$ameters: /tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/M<[1QHi)*MM2/ftp", "/home/azureuser/LLm4PrTest/ io_experiments/M<[1QHi)*MM2/ftp");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/tmp/home/azureuser/LLm4PrTest/ io_experiments/M<[1QHi)*MM2/ftp0/home/azureuser/LLm4PrTest/ io_experiments/M<[1QHi)*MM2/ftp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+@/%l},Ae");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '+@/%l},Ae' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("/tmp/z1 /azureu", "/home/azureuser/tmp/azureuser");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      FileUtils.copyToDirectory(file0, file1);
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile(",d(YA?LvkB$Ic", "lineSeparator", file0);
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/home/azureuser/,d(YA?LvkB$Ic0lineSeparator'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("sourceDir", "/tmp/", file0);
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/home/azureuser/sourceDir0/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot create directory '", "Cannot create directory '");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Cannot create directory '/Cannot create directory '' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      NotFileFilter notFileFilter0 = new NotFileFilter(falseFileFilter0);
      // Undeclared exception!
      FileUtils.listFilesAndDirs(file0, notFileFilter0, notFileFilter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp");
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (String[]) null, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/home/azureuser0/home/azureuser
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      FileUtils.listFiles(file0, (IOFileFilter) trueFileFilter0, (IOFileFilter) trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/%s %s./%s %s./%s %s.0%s %s.");
      try { 
        FileUtils.lineIterator((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/%s %s./%s %s./%s %s.0%s %s.");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "file2");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "wAAr)}l'(|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // wAAr)}l'(|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/z1 /azureu", "chronoLocalDate");
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "String is missing");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(mockFile0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: String is missing
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = MockFile.createTempFile("net.bytebuddy.implementation.auxiliary.AuxiliaryType", "net.bytebuddy.implementation.auxiliary.AuxiliaryType");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/net.bytebuddy.implementation.auxiliary.AuxiliaryType0net.bytebuddy.implementation.auxiliary.AuxiliaryType
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PathVisitorFileFilter pathVisitorFileFilter0 = new PathVisitorFileFilter((PathVisitor) null);
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.INSTANCE;
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) pathVisitorFileFilter0, (IOFileFilter) directoryFileFilter0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = MockFile.createTempFile("beginIndex (%s) must be >= 0; endIndex (%s) must be <= name count (%s) and > beginIndex", "beginIndex (%s) must be >= 0; endIndex (%s) must be <= name count (%s) and > beginIndex");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/beginIndex (%s) must be >= 0; endIndex (%s) must be <= name count (%s) and > beginIndex0beginIndex (%s) must be >= 0; endIndex (%s) must be <= name count (%s) and > beginIndex
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      OffsetTime offsetTime0 = MockOffsetTime.now(clock0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDate) hijrahDate0, offsetTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/%s %s.0%s %s.", "e,VB3)J(d2m p#r");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/tmp/%s %s.0%s %s./e,VB3)J(d2m p#r'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = MockFile.createTempFile(" to declare exactly one property named value o+ an array type", " to declare exactly one property named value o+ an array type");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/ to declare exactly one property named value o+ an array type0 to declare exactly one property named value o+ an array type
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8cwru", "}$Jysp");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.io.tmpdir";
      stringArray0[1] = "";
      File file0 = FileUtils.getFile(stringArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sourceDir");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'sourceDir'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CyL>fWf^K< *Qji`");
      File file0 = MockFile.createTempFile("CyL>fWf^K< *Qji`", "CyL>fWf^K< *Qji`", (File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/home/azureuser/LLm4PrTest/ io_experiments/CyL>fWf^K< *Qji`/CyL>fWf^K< *Qji`0CyL>fWf^K< *Qji`'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.OrFileFilter");
      File file0 = MockFile.createTempFile("&47&rW,\"0s;PsD", "&47&rW,\"0s;PsD", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "org.apache.commons.io.filefilter.OrFileFilter");
      try { 
        FileUtils.createParentDirectories(mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.filefilter.OrFileFilter/&47&rW,\"0s;PsD0&47&rW,\"0s;PsD'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, 2806, 2806);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // urlConnection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-2135875625), (-2135875625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = file0.toURL();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayList<File> arrayList0 = new ArrayList<File>();
      arrayList0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayList0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{7K^cnQG)k;2aJ8g*M");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '{7K^cnQG)k;2aJ8g*M'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = MockFile.createTempFile("Tcp", "Tcp");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.current();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ftp", "ftp");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/ftp/ftp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = FileUtils.current();
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[0] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.nio.file.StandardCopyOption
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("%s %s.");
      try { 
        FileUtils.copyFile((File) mockFile0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '%s %s.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CyL>fWf^K< *Qpi`", "CyL>fWf^K< *Qpi`");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/CyL>fWf^K< *Qpi`/CyL>fWf^K< *Qpi`'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum", "checksum");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/checksum/checksum'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("x~2Z)6N|e8t4LrlY8vi");
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h_tg%FV5~)sum", "h_tg%FV5~)sum");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/h_tg%FV5~)sum/h_tg%FV5~)sum'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) ageFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      IOCase iOCase0 = IOCase.SENSITIVE;
      String[] stringArray0 = new String[5];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      MockFile mockFile0 = new MockFile("P6s}TpP", "/home/tmp/com.gogle.common.jimfs.AttributeProvider");
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[0] = (CopyOption) linkOption0;
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) wildcardFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0, false, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      IOCase iOCase0 = IOCase.SYSTEM;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      MockFile mockFile0 = new MockFile(",i6yypr6VQaB@U-", ",i6yypr6VQaB@U-");
      try { 
        FileUtils.copyDirectory((File) mockFile0, file0, (FileFilter) wildcardFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/,i6yypr6VQaB@U-/,i6yypr6VQaB@U-'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/tmp", "/home/azureuser/tmp");
      Path path0 = mockFile0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) pathEqualsFileFilter0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N0baI6o6", " for attriute 'posix:permissons': should be one of ");
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) emptyFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/N0baI6o6/ for attriute 'posix:permissons': should be one of '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) orFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum", "checksum");
      OrFileFilter orFileFilter0 = new OrFileFilter();
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) orFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/checksum/checksum'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/homeazureus|r/azureuser");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/homeazureus|r/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", " to declare exactly one srope%ty named vaHue o+ an array ype");
      File file1 = MockFile.createTempFile(" to declare exactly one srope%ty named vaHue o+ an array ype", "/tmp/mvn_compile_merge_pr_452.out");
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = MockFile.createTempFile("g%;#g(V54TZFkUh}WQk", "g%;#g(V54TZFkUh}WQk");
      File file1 = MockFile.createTempFile("g%;#g(V54TZFkUh}WQk", "g%;#g(V54TZFkUh}WQk");
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file1, "ftp");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ftp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp", "/tmp");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = MockFile.createTempFile("ERv", "ERv");
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("pattern", "pattern", file0);
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file1, adler32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, cRC32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, (Checksum) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("checksum", "checksum");
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(mockFile0, adler32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/checksum/checksum'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "checksum");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile mockFile0 = new MockFile("Cannot cache the valne of a method with pa$ameters: ");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1185)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1205)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2321)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2353)
             // sun.reflect.GeneratedMethodAccessor434.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("Cannot cache the valne of a method with pa$ameters: ");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory 'Cannot cache the valne of a method with pa$ameters: ' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          MockFile mockFile0 = new MockFile("Cannot catch exception during constructor call for ", "%s does not implement the CartesianAnnotationConsumer<T> interface.");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1185)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1205)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2321)
             // sun.reflect.GeneratedMethodAccessor436.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("sourceFile", "");
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/sourceFile
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "*4:zM");
      boolean boolean0 = FileUtils.isSymlink(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.copyToDirectory(file1, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("M<[1QHi)*MM2", "M<[1QHi)*MM2");
          MockFile mockFile0 = new MockFile("M<[1QHi)*MM2", "ftp");
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, (File) mockFile0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/M<[1QHi)*MM2/ftp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:847)
             // sun.reflect.GeneratedMethodAccessor465.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("M<[1QHi)*MM2", "M<[1QHi)*MM2");
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("M<[1QHi)*MM2/ftp");
          byte[] byteArray0 = new byte[2];
          FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
          MockFile mockFile0 = new MockFile("M<[1QHi)*MM2", "ftp");
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, (File) mockFile0, (CopyOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/M<[1QHi)*MM2/ftp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:847)
             // sun.reflect.GeneratedMethodAccessor465.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      String[] stringArray0 = new String[6];
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      MockFile mockFile0 = new MockFile("(&8sBe8+3_|pw%]r", "(&8sBe8+3_|pw%]r");
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) wildcardFileFilter0, false, (CopyOption[]) linkOptionArray0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      IOCase iOCase0 = IOCase.SENSITIVE;
      String[] stringArray0 = new String[5];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0, iOCase0);
      MockFile mockFile0 = new MockFile("P6s}TpP", "/home/tmp/com.gogle.common.jimfs.AttributeProvider");
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) wildcardFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = FileUtils.current();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) orFileFilter0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) null, "names", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // names
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (ChronoLocalDate) localDate0, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/LLm4PrTest/ io_experiments/extensions");
      try { 
        FileUtils.lastModifiedFileTime(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "extensions";
      stringArray0[1] = "extensions";
      stringArray0[2] = "extensions";
      stringArray0[3] = "extensions";
      stringArray0[4] = "extensions";
      stringArray0[5] = "extensions";
      stringArray0[6] = "";
      stringArray0[7] = "extensions";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.forceMkdir(file1);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./extensions/extensions/extensions/extensions/extensions/extensions", file1.getParent());
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./extensions/extensions/extensions/extensions/extensions/extensions/extensions", file1.toString());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "/home/azureuser/LLm4PrTest/ io_experiments/tmp/L,cqD;0/home/azureuser/LLm4PrTest/ io_experiments/tmp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.newOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/", "/tmp/");
      try { 
        FileUtils.lastModified(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "x? %`v&Ek228MPl";
      stringArray0[1] = "/home/azureuser/azureuser";
      stringArray0[2] = "[ \"b!64hWIVN.H$Qd";
      stringArray0[3] = "Test method must declare at least one parameter: ";
      stringArray0[4] = "~e6";
      stringArray0[5] = "/tmp/home/azureuser";
      stringArray0[6] = "oK'";
      stringArray0[7] = "CCw=Y";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoZonedDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoZonedDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (ChronoLocalDate) hijrahDate0, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, (long) 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser", (Charset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' does not exist");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '' does not exist' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[3];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[3];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(3, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Stream<File> stream0 = FileUtils.streamFiles(file0, false, (String[]) null);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sCU`");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: 'sCU`'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "R");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '/home/azureuser/@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile("rD=2ch!At$'$e)|Dx~X");
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/%s %s./%s %s.", "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/%s %s./%s %s.", file0);
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file1, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/%s %s.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:847)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2400)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2375)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2429)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2454)
             // sun.reflect.GeneratedMethodAccessor420.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cecksu", "cecksu");
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/cecksu/cecksu/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("Cannot cache the value of a method with parameters: ", "Cannot cache the value of a method with parameters: ");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/Cannot cache the value of a method with parameters: 0Cannot cache the value of a method with parameters: ' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      FileUtils.copyDirectory(file0, file1, (FileFilter) notFileFilter0);
      //  // Unstable assertion: assertEquals(1755976220984L, file1.lastModified());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.io.tmpdir";
      stringArray0[1] = "java.io.tmpdir";
      stringArray0[2] = "java.io.tmpdir";
      stringArray0[3] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertFalse(boolean0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/java.io.tmpdir/java.io.tmpdir/java.io.tmpdir", file0.toString());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bb8\"7Uozr(PvxO`";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertTrue(file1.isDirectory());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFile mockFile0 = new MockFile("At@f1mL*&A-0Dc!=/", "At@f1mL*&A-0Dc!=/");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("Ge{m?)");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unknown I/O error listing contents of directory: ", "Unknown I/O error listing contents of directory: ");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.current();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CyL>fWf^K< *Qpi`", "CyL>fWf^K< *Qpi`");
      FileUtils.deleteDirectory(mockFile0);
      assertEquals("CyL>fWf^K< *Qpi`", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("IgB%%70-$7T:a[D");
      assertEquals("IgB%p-$7T:a[D", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, (File) null, 2806, 2806);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      MockFile mockFile0 = new MockFile("%s %s.", "%s %s.");
      arrayList0.add((File) mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) arrayList0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/%s %s./%s %s.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, (File) null);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = MockFile.createTempFile(" to declare exactly one property named value o+ an array type", " to declare exactly one property named value o+ an array type");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: '/tmp/ to declare exactly one property named value o+ an array type0 to declare exactly one property named value o+ an array type'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)89);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(bufferedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile((InputStream) null, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1101)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1092)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2470)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1039)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:948)
             // sun.reflect.GeneratedMethodAccessor424.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.current();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%{/mvn_compile_merge_pr_452.out");
          FileSystemHandling.appendStringToFile(evoSuiteFile0, "%{");
          MockFile mockFile0 = new MockFile("%{");
          // Undeclared exception!
          try { 
            FileUtils.copyDirectory(file0, (File) mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/%{/mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:847)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1319)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:699)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:631)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:533)
             // sun.reflect.GeneratedMethodAccessor421.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6p!UjyQL");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '6p!UjyQL'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("{");
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'destDir is not writable: '/home/azureuser/LLm4PrTest/ io_experiments/./tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/ to declare exactly on1 property named value o+ an array type0 to declare exactly on1 property named value o+ an array type", "/home/azureuser/ to declare exactly on1 property named value o+ an array type0 to declare exactly on1 property named value o+ an array type");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "/home/azureuser/ to declare exactly on1 property named value o+ an array type0 to declare exactly on1 property named value o+ an array type");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = MockFile.createTempFile(" to declare exactly one property named value o+ an array type", " to declare exactly one property named value o+ an array type");
      File file1 = MockFile.createTempFile(" to declare exactly one property named value o+ an array type", " to declare exactly one property named value o+ an array type");
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file1, " to declare exactly one property named value o+ an array type");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  to declare exactly one property named value o+ an array type
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h_tg%FV5~)sum");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "h_tg%FV5~)sum");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(" to declare exactly one property named value o+ an array type", " to declare exactly one property named value o+ an array type");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, " to declare exactly one property named value o+ an array type");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "lQ\\u,D";
      File file0 = MockFile.createTempFile("Je]\"y.zvQ[(;a1t$", string0);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, "/home/azureuser/LLm4PrTest/ io_experiments/%{/mvn_compile_merge_pr_452.out");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "]&mNOt(;6Zz0*Ng4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("sourceDir", "sourceDir");
      File file2 = MockFile.createTempFile("sourceDir", "sourceDir", file0);
      try { 
        FileUtils.contentEquals(file1, file2);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = MockFile.createTempFile("bb8\"7Uozr(PvxO`", "bb8\"7Uozr(PvxO`");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bb8\"7Uozr(PvxO`", "bb8\"7Uozr(PvxO`");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("sourceDir", "sourceDir");
      file1.delete();
      boolean boolean0 = FileUtils.contentEquals(file1, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEquals((File) null, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(1721L);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize((Number) bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "+4=rJ2hIP`wBmk{*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-3707 bytes");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-2467));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis((-846L));
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, fileTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(315, 315, 315, (-230), 315);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/tmp/tmp/vau?JI7L0vau?JI7L", (Collection<?>) hashSet0, "/tmp/tmp/vau?JI7L0vau?JI7L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertEquals(1755767590862L, long0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, 2095L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/' during file creation/tmp/tmp/0/home/azureuser/LLm4PrTest/ io_experiments/RG`3iW IV[uaJlWE\b]/home/azureuser/LLm4PrTest/ io_experiments/RG`3iW IV[uaJlWE\b]/RG`3iW IV[uaJlWE\b]", "/home/azureuser/LLm4PrTest/ io_experiments/' during file creation/tmp/tmp/0/home/azureuser/LLm4PrTest/ io_experiments/RG`3iW IV[uaJlWE\b]/home/azureuser/LLm4PrTest/ io_experiments/RG`3iW IV[uaJlWE\b]/RG`3iW IV[uaJlWE\b]");
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, ")7D4Y$6g_;Yh/h2iHTS", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "Failed to delete original file '", (Collection<?>) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileTime fileTime0 = FileTime.fromMillis(1L);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: 'org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "e:A`)60", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Destination directory '");
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      OffsetTime offsetTime0 = MockOffsetTime.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) hijrahDate0, offsetTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "$GWvAT$<!cXX<n,-Y&", (Collection<?>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "m~gKbzCu%^ce(,", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.UncheckedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdirParent(file0);
      assertEquals("/home/azureuser", file0.toString());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (OffsetDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/home/azureuser", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "]&mNat(;6Zz0*gg4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-777), (-777), (-1968771710), (-1968771710), (-1968771710), (-1968771710));
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      FileUtils.listFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) set0, "+4=rJ2hIP`wBm>{*", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      File file0 = MockFile.createTempFile("isRegularFile", "/tmp");
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "isRegularFile");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // isRegularFile
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) thaiBuddhistDate0, (OffsetTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/tmp", "bb8\"7Uozr(PvxO`");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) japaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) null, "I??e.>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "", "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) emptyFileFilter0, (IOFileFilter) emptyFileFilter0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "bb8\"7Uo((vxO[", "bb8\"7Uo((vxO[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // bb8\"7Uo((vxO[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, offsetDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      PriorityQueue<ThaiBuddhistEra> priorityQueue0 = new PriorityQueue<ThaiBuddhistEra>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) priorityQueue0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals("/home/azureuser", fileUtils0.getUserDirectoryPath());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
