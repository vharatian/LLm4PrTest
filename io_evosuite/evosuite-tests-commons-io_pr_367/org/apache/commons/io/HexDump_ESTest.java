/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:19:16 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.commons.io.HexDump;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HexDump_ESTest extends HexDump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      HexDump.dump(byteArray0, (byte) (-116), mockPrintStream0, 5);
      assertEquals(59, byteArrayOutputStream0.size());
      assertEquals("FFFFFF91 00                                              .\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[2] = (byte) (-2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HexDump.dump(byteArray0, (byte)0, byteArrayOutputStream0, (byte)0);
      assertEquals("00000000 00 00 FE 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00000010 00 00 00                                        ...\n", byteArrayOutputStream0.toString());
      assertEquals(135, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HexDump.dump(byteArray0, 790L, byteArrayOutputStream0, 1);
      assertEquals(74, byteArrayOutputStream0.size());
      assertEquals("00000317 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" and ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      try { 
        HexDump.dump(byteArray0, (-1L), bufferedOutputStream0, (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 6 into array of length 6
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        HexDump.dump(byteArray0, 0L, pipedOutputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[6] = (byte)127;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HexDump.dump(byteArray0, (byte)40, byteArrayOutputStream0, 1);
      assertEquals("00000029 00 00 00 00 00 7F 00 00 00 00                   ..........\n", byteArrayOutputStream0.toString());
      assertEquals(68, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[6] = (byte)123;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HexDump.dump(byteArray0, (byte)123, byteArrayOutputStream0, 6);
      assertEquals(63, byteArrayOutputStream0.size());
      assertEquals("00000081 7B 00 00 00 00                                  {....\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      try { 
        HexDump.dump(byteArray0, 12, byteArrayOutputStream0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 12 into array of length 3
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        HexDump.dump((byte[]) null, (byte) (-7), byteArrayOutputStream0, (byte) (-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HexDump hexDump0 = new HexDump();
  }
}
