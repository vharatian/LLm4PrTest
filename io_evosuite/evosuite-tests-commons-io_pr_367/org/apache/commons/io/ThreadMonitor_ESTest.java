/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:29:42 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import org.apache.commons.io.ThreadMonitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ThreadMonitor_ESTest extends ThreadMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(2943L);
      Thread thread0 = ThreadMonitor.start(duration0);
      assertTrue(thread0.isDaemon());
      assertNotNull(thread0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadMonitor.start((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.ThreadMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadMonitor.start((Thread) null, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.ThreadMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        ThreadMonitor.sleep(duration0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadMonitor.sleep((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      ThreadMonitor.stop(mockThread0);
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadMonitor.stop((Thread) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      Duration duration0 = Duration.ofSeconds(156L, 156L);
      Thread thread1 = ThreadMonitor.start(mockThread0, duration0);
      assertNotNull(thread1);
      assertTrue(thread1.isDaemon());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      Duration duration0 = Duration.ofNanos(0L);
      Thread thread0 = ThreadMonitor.start(mockThread0, duration0);
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      ThreadMonitor.sleep(duration0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-2L));
      // Undeclared exception!
      try { 
        ThreadMonitor.sleep(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-2L));
      Thread thread0 = ThreadMonitor.start(duration0);
      assertNull(thread0);
  }
}
