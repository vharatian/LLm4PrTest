/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:54:44 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.NoSuchFileException;
import java.util.ConcurrentModificationException;
import java.util.Locale;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DeferredFileOutputStream_ESTest extends DeferredFileOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("skipOn", (String) null);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1024, 1398, "Uz@", "skipOn", file0);
      assertTrue(deferredFileOutputStream0.isInMemory());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, (File) null);
      ByteArrayOutputStream byteArrayOutputStream0 = (ByteArrayOutputStream)deferredFileOutputStream0.getStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, (File) null);
      File file0 = deferredFileOutputStream0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.output.DeferredFileOutputStream", "org.apache.commons.io.output.DeferredFileOutputStream");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(424, mockFile0);
      deferredFileOutputStream0.write(424);
      deferredFileOutputStream0.thresholdReached();
      File file0 = deferredFileOutputStream0.getFile();
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/org.apache.commons.io.output.DeferredFileOutputStream", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T8oAV)#8+2l[T");
      MockFile.createTempFile("T8oAV)#8+2l[T", "T8oAV)#8+2l[T", (File) mockFile0);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1208, 1208, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bZY*if");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-309), mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, "JA~", "", mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.print("JA~");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, "JA~", objectArray0);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertArrayEquals(new byte[] {(byte)74, (byte)65, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[RaY.N6QqM9Fqq");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2526, 5, mockFile0);
      deferredFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.println((Object) deferredFileOutputStream0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(mockPrintStream0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1686), "qq(])4%?u[1nse", "qq(])4%?u[1nse", (File) null);
      deferredFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.println((Object) "qq(])4%?u[1nse");
      try { 
        deferredFileOutputStream0.toInputStream();
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(64, 64, (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "}", "}", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, "i/WtBVZ", "i/WtBVZ", (File) null);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1137, 1137, mockFile0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-36), (-36), (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -36
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(fM@wcuquB1z4Y");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(4, "hbV}?89vJ%", "", mockFile0);
      deferredFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.print("name");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[8];
      mockPrintStream0.printf(locale0, "name", objectArray0);
      deferredFileOutputStream0.writeTo(mockPrintStream0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(5, "1t;S:4", "", mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.print("'");
      mockPrintStream0.println((Object) deferredFileOutputStream0);
      deferredFileOutputStream0.getData();
      assertFalse(mockFile0.isFile());
      assertEquals(64L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Temporary file prefix is missing", "Gd3!W6");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(8, 8, mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PBSi~D", "PBSi~D");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-171), mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T8oAV)#8+2l[T");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1208, 1208, mockFile0);
      deferredFileOutputStream0.close();
      InputStream inputStream0 = deferredFileOutputStream0.toInputStream();
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(207, 207, (File) null);
      try { 
        deferredFileOutputStream0.toInputStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not closed
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1686), "qq(])4%?u[1nse", "qq(])4%?u[1nse", (File) null);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.toInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1661), "vLPe~9zO0_mvs4{?LDy", "vLPe~9zO0_mvs4{?LDy", (File) null);
      try { 
        deferredFileOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not closed
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Temporary file prefix is missing", "Temporary file prefix is missing");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(424, mockFile0);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, mockFile0);
      deferredFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.println((Object) mockFile0);
      try { 
        deferredFileOutputStream0.writeTo(mockPrintStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1, "", "", (File) null);
      deferredFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      mockPrintStream0.println((Object) "");
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(mockPrintStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/`*L<`", "xoNSF5a?&JV;hq<< G'");
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(1765, 390, (String) null, (String) null, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-2391), (String) null, (String) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Temporary file prefix is missing
         //
         verifyException("org.apache.commons.io.output.DeferredFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3381), " bQZ(U{$n", " bQZ(U{$n", (File) null);
      deferredFileOutputStream0.close();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo(deferredFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".class", ".class");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(292, mockFile0);
      File file0 = deferredFileOutputStream0.getFile();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("M~zy&=0HNY", "M~zy&=0HNY", (File) null);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, 0, file0);
      deferredFileOutputStream0.close();
      deferredFileOutputStream0.setByteCount(1125899906842629L);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }
}
