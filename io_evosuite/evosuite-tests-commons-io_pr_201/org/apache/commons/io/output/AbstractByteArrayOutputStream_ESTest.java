/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:10:20 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import org.apache.commons.io.output.AbstractByteArrayOutputStream;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractByteArrayOutputStream_ESTest extends AbstractByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.write(9981);
      unsynchronizedByteArrayOutputStream0.writeImpl(0);
      unsynchronizedByteArrayOutputStream0.toByteArrayImpl();
      assertEquals(2, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      unsynchronizedByteArrayOutputStream0.writeTo(byteArrayOutputStream0);
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeImpl(1);
      unsynchronizedByteArrayOutputStream0.toInputStream();
      unsynchronizedByteArrayOutputStream0.resetImpl();
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStream inputStream0 = ByteArrayOutputStream.toBufferedInputStream((InputStream) byteArrayInputStream0, 1);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.count = 580;
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 580
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArrayOutputStream0.needNewBuffer((byte)0);
      byteArrayOutputStream0.writeImpl(byteArray0, 0, (byte) (-15));
      assertEquals((-15), byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.write(9981);
      unsynchronizedByteArrayOutputStream0.writeImpl(0);
      unsynchronizedByteArrayOutputStream0.reset();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(unsynchronizedByteArrayOutputStream0);
      assertEquals(4, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.write(0);
      unsynchronizedByteArrayOutputStream0.reset();
      unsynchronizedByteArrayOutputStream0.count = 9954;
      unsynchronizedByteArrayOutputStream0.needNewBuffer(1502);
      assertEquals(9954, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeToImpl(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byteArrayOutputStream0.writeTo(unsynchronizedByteArrayOutputStream0);
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write(643);
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.close();
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.writeImpl(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1024);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = byteArrayOutputStream0.writeImpl(byteArrayInputStream0);
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      int int0 = byteArrayOutputStream0.write(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeImpl(2067475462);
      Charset charset0 = Charset.defaultCharset();
      unsynchronizedByteArrayOutputStream0.toString(charset0);
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream((AbstractByteArrayOutputStream.InputStreamConstructor<PipedInputStream>) null);
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      assertEquals((-1), inputStream0.read());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArrayImpl();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.writeImpl(0);
      unsynchronizedByteArrayOutputStream0.toByteArray();
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = byteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.write(643);
      int int0 = unsynchronizedByteArrayOutputStream0.size();
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeToImpl((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.file.StandardDeleteOption");
      try { 
        byteArrayOutputStream0.writeToImpl(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteArrayOutputStream0.writeTo(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, 2381, 2381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream((byte)0);
      // Undeclared exception!
      unsynchronizedByteArrayOutputStream0.writeImpl(inputStream0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      byteArrayOutputStream0.needNewBuffer((-2082));
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeImpl(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 9990);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        byteArrayOutputStream0.writeImpl(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.needNewBuffer(3992);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.writeImpl(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1024
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((byte[]) null, 520, 520);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write(byteArray0, (-1297), (-1297));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offset=-1,297, length=-1,297
         //
         verifyException("org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      byteArrayOutputStream0.write(inputStream0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(684);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.write((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.needNewBuffer(9968);
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(inputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        byteArrayOutputStream0.write((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toString((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = (-16);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toString(charset0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = (-34);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.writeImpl(1);
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toInputStream((AbstractByteArrayOutputStream.InputStreamConstructor<PipedInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.AbstractByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      unsynchronizedByteArrayOutputStream0.writeImpl(byteArray0, 0, (byte) (-97));
      // Undeclared exception!
      try { 
        unsynchronizedByteArrayOutputStream0.toByteArrayImpl();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.count = 1401;
      byte[] byteArray0 = unsynchronizedByteArrayOutputStream0.toByteArrayImpl();
      assertEquals(1401, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.count = 9953;
      InputStream inputStream0 = byteArrayOutputStream0.toInputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.writeImpl(1);
      unsynchronizedByteArrayOutputStream0.toInputStream();
      assertEquals(1, unsynchronizedByteArrayOutputStream0.size());
      
      unsynchronizedByteArrayOutputStream0.reset();
      assertEquals(0, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      unsynchronizedByteArrayOutputStream0.writeImpl((-990));
      InputStream inputStream0 = unsynchronizedByteArrayOutputStream0.toInputStream();
      int int0 = unsynchronizedByteArrayOutputStream0.write(inputStream0);
      assertEquals(2, unsynchronizedByteArrayOutputStream0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      unsynchronizedByteArrayOutputStream0.write(byteArray0);
      unsynchronizedByteArrayOutputStream0.toString();
      assertEquals(2, unsynchronizedByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream(0);
      String string0 = unsynchronizedByteArrayOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      try { 
        unsynchronizedByteArrayOutputStream0.toString("ou");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnsynchronizedByteArrayOutputStream unsynchronizedByteArrayOutputStream0 = new UnsynchronizedByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      String string0 = unsynchronizedByteArrayOutputStream0.toString(charset0);
      assertEquals("", string0);
  }
}
