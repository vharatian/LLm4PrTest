/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:07:29 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Enumeration;
import org.apache.commons.io.input.XmlStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class XmlStreamReader_ESTest extends XmlStreamReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "ZHWSy|/L/`v", true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", "ZHWSy|/L/`v", "Extension context \"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [ZHWSy|/L/`v] XML prolog [Extension context \"] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      try { 
        xmlStreamReader0.calculateHttpEncoding("application/xml", "application/xml", "application/xml", "application/xml", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [application/xml] XML guess [application/xml] XML prolog [application/xml] unknown BOM
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "V$}zLA|^");
      try { 
        xmlStreamReader0.calculateHttpEncoding("Handler", "application/xml", "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound", "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction$ByteArrayUrlStreamHandler$ByteArrayUrlConnection", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, CT-MIME [Handler] CT-Enc [null] BOM [application/xml] XML guess [net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound] XML prolog [net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction$ByteArrayUrlStreamHandler$ByteArrayUrlConnection], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, true);
      String string0 = xmlStreamReader0.calculateHttpEncoding("\"dy5gacJcx]R", "+xml", (String) null, "F9B1rjndb@7T8hp{H", true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, ";", true);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(dataInputStream0, false, "UTF-8");
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "vw", true, (String) null);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/htmlBD\"X*/: 4LKg1wy(t:f");
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      char[] charArray0 = new char[5];
      int int0 = xmlStreamReader0.read(charArray0, 3, 0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("text/+xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime("d");
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "UTF-16LE", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "org.junitpioneer.jupit~r.StopwatchExtension");
      // Undeclared exception!
      try { 
        xmlStreamReader0.read((char[]) null, 9, 1823);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/xml-external-parse%-enoity");
      xmlStreamReader0.close();
      try { 
        xmlStreamReader0.read((char[]) null, (-38), (-38));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((URLConnection) null, "VA>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRLConnection0, "Q^Z0m;B4#[RrE7uX");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2458), 1818);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, "KC3d=5&>H/KN");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, false, "UTF-32BE");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2736), 62);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(dataInputStream0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/The FileFilter must not be null", false, "text/The FileFilter must not be null");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [text/The FileFilter must not be null] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "P_6\"[Ta`{\"<L}R", false, "P_6\"[Ta`{\"<L}R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1580), (byte)91);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/oyK@4j~`pZ1", true, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "\"QBu1woB:mW##Xtr#n", false, "\"QBu1woB:mW##Xtr#n");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(dataInputStream0, "isSymbolicLink", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-450669291), 50);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/text/application/xml", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "application/oyK@4j~`pZ1", true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "text/xml-external-parse%-enoity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "textxml");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-38), 802);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid exceptionStatus", "Invalid exceptionStatus");
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/xml", false);
      String string0 = xmlStreamReader0.calculateHttpEncoding("", "text/htmlorg.junitpioneer.jupit~r.StopwatchExtension", "()` not found in ", "", true);
      assertEquals("", string0);
      assertEquals("US-ASCII", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "StdIo_System_In", true, "StdIo_System_In");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0, true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32BE", "UTF-32BE", "text/xml");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32BE] XML guess [UTF-32BE] XML prolog [text/xml] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-32BE", "UTF-32BE", "UTF-32BE");
      assertEquals("UTF-32BE", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32LE", "text/html", "text/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32LE] XML guess [text/html] XML prolog [text/] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, false);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-32BE", "UTF-32BE", (String) null);
      assertEquals("UTF-32BE", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      xmlStreamReader0.calculateRawEncoding("UTF-16LE", "UTF-16LE", (String) null);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-16LE", "UTF-16LE", "UTF-16LE");
      assertEquals("UTF-16LE", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/text/application/xml");
      try { 
        xmlStreamReader0.calculateRawEncoding("application/text/application/xml", "application/text/application/xml", "application/text/application/xml");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [application/text/application/xml] XML guess [application/text/application/xml] XML prolog [application/text/application/xml] unknown BOM
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "ZHWSy|/L/`v", true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16BE", (String) null, "text/78\"n=!nY=n6:><x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16BE] XML guess [null] XML prolog [text/78\"n=!nY=n6:><x] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", "UTF-8", "UTF-16LE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [UTF-8] XML prolog [UTF-16LE] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-8", "UTF-8", "UTF-8");
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-8", "UTF-8", (String) null);
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, "ext/xmlinputStream");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null);
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "UTF-16", "T&fVb");
      assertNotNull(string0);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      File file0 = MockFile.createTempFile("application/net.bytebuddy.dynamic.loading.ByteArrayClassLoader$umptyEnEmeration", "nLzPQSamh{o8");
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(file0);
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "application/xml", (String) null);
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, true);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16LE", "dL+V{o~~]+f&l|C_8Jm", "dL+V{o~~]+f&l|C_8Jm");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16LE] XML guess [dL+V{o~~]+f&l|C_8Jm] XML prolog [dL+V{o~~]+f&l|C_8Jm] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/html", true, "org.junitpioneer.jupiter.CartesianProductTestExtension");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/text/application/xml", false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [application/text/application/xml] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/java.lang.invoke.MethodHandles+xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/h$ZiqB[WpLcM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/xml-external-parsed-entity");
      try { 
        xmlStreamReader0.calculateHttpEncoding("application/oyK@4j~`pZ1", "application/oyK@4j~`pZ1", "application/xml-external-parsed-entity", "application/xml-external-parsed-entity", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, CT-MIME [application/oyK@4j~`pZ1] CT-Enc [null] BOM [application/oyK@4j~`pZ1] XML guess [application/xml-external-parsed-entity] XML prolog [application/xml-external-parsed-entity], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/xml-dtd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeEncoding((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/xml-external-parsed-entity");
      // Undeclared exception!
      try { 
        xmlStreamReader0.read((char[]) null, (-179584858), (-179584858));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "outDputStream");
      String string0 = xmlStreamReader0.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, ");>%");
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      File file0 = MockFile.createTempFile("application/net.bytebuddy.dynamic.loading.ByteArrayClassLoader$umptyEnEmeration", "nLzPQSamh{o8");
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(file0);
      String string0 = xmlStreamReader0.getDefaultEncoding();
      assertNull(string0);
  }
}
