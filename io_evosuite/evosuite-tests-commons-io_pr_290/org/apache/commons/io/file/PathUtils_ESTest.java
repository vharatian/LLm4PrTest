/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:05:28 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.AccessDeniedException;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileTime;
import java.time.Duration;
import java.time.Instant;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CopyDirectoryVisitor;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.PathUtils;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DelegateFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      Path path0 = PathUtils.getTempDirectory();
      boolean boolean0 = true;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      try { 
        PathUtils.deleteFile(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          assertNotNull(path0);
          
          AgeFileFilter ageFileFilter0 = new AgeFileFilter(1024L, false);
          Path[] pathArray0 = new Path[4];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          BasicFileAttributes basicFileAttributes0 = PathUtils.readAttributes(path0, class0, linkOptionArray0);
          ageFileFilter0.preVisitDirectory(path0, basicFileAttributes0);
          pathArray0[2] = path0;
          pathArray0[3] = path0;
          PathUtils.filter(ageFileFilter0, pathArray0);
          LinkOption[] linkOptionArray1 = new LinkOption[1];
          linkOptionArray1[0] = linkOption0;
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1008)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:992)
             // sun.reflect.GeneratedMethodAccessor187.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Path path0 = PathUtils.current();
      CharBuffer.allocate(1);
      PathUtils.getAclEntryList(path0);
      PathUtils.directoryAndFileContentEquals(path0, path0);
      // Undeclared exception!
      PathUtils.directoryContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8 @");
      MockFile mockFile1 = new MockFile(mockFile0, "8 @");
      Path path0 = mockFile1.toPath();
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      PathUtils.readAttributes(path0, class0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      assertNotNull(path0);
      
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Path path0 = PathUtils.current();
      Duration.ofSeconds(4109L, 4109L);
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      PathUtils.directoryContentEquals(path0, path0);
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory(path0, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      DelegateFileFilter delegateFileFilter0 = new DelegateFileFilter((FileFilter) andFileFilter0);
      Path[] pathArray0 = new Path[8];
      pathArray0[0] = null;
      pathArray0[1] = null;
      pathArray0[2] = null;
      pathArray0[3] = null;
      pathArray0[4] = null;
      pathArray0[5] = null;
      pathArray0[6] = null;
      MockFile mockFile0 = new MockFile("&7I\"p8", "&7I\"p8");
      Path path0 = mockFile0.toPath();
      pathArray0[7] = path0;
      PathUtils.filter(delegateFileFilter0, pathArray0);
      // Undeclared exception!
      try { 
        PathUtils.deleteFile(pathArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Path path0 = null;
      PathUtils.directoryContentEquals((Path) null, (Path) null);
      // Undeclared exception!
      try { 
        PathUtils.setLastModifiedTime((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.isEmptyFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[22];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[9] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      linkOptionArray0[4] = linkOption3;
      linkOptionArray0[5] = linkOption0;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption4;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      // Undeclared exception!
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Path path0 = PathUtils.current();
      Duration duration0 = Duration.ofSeconds(4109L, 4109L);
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      Duration duration0 = Duration.ofNanos((-2265L));
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, duration0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkedList<AclEntry> linkedList0 = new LinkedList<AclEntry>();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, (FileVisitOption[]) null);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.SizeFileFilter");
      FileTime.fromMillis((-3017L));
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.directoryAndFileContentEquals(path0, path0);
      PathUtils.toFileVisitOptionSet((FileVisitOption[]) null);
      PathUtils.getAclEntryList(path0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.sizeOf((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Path path0 = PathUtils.current();
      List<AclEntry> list0 = PathUtils.getAclEntryList(path0);
      assertNull(list0);
      
      FileAttribute<BasicFileAttributes>[] fileAttributeArray0 = (FileAttribute<BasicFileAttributes>[]) Array.newInstance(FileAttribute.class, 4);
      fileAttributeArray0[2] = fileAttributeArray0[1];
      fileAttributeArray0[3] = fileAttributeArray0[2];
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readString((Path) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PathUtils.directoryContentEquals((Path) null, (Path) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      try { 
        PathUtils.directoryContentEquals(path0, path0, 827, linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          MockFile mockFile0 = new MockFile(" YCcL*<9|[4@!*o7q");
          Path path1 = mockFile0.toPath();
          CopyOption[] copyOptionArray0 = new CopyOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          copyOptionArray0[0] = (CopyOption) linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          copyOptionArray0[1] = (CopyOption) linkOption1;
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path1, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \" YCcL*<9|[4@!*o7q\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // org.apache.commons.io.file.CopyDirectoryVisitor.preVisitDirectory(CopyDirectoryVisitor.java:149)
             // org.apache.commons.io.file.CopyDirectoryVisitor.preVisitDirectory(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2677)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:253)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      CountingPathVisitor.withBigIntegerCounters();
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      Path path0 = PathUtils.getTempDirectory();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PathUtils.relativize(list0, path0, true, comparator0);
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      Path[] pathArray0 = new Path[8];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      Path path1 = PathUtils.getTempDirectory();
      pathArray0[4] = path1;
      pathArray0[5] = path0;
      pathArray0[6] = path0;
      pathArray0[7] = path0;
      PathUtils.filter(pathEqualsFileFilter0, pathArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileTime fileTime0 = FileTime.fromMillis((-3017L));
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      LinkedList<Path> linkedList0 = new LinkedList<Path>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PathUtils.relativize(linkedList0, path0, true, comparator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PathUtils.getTempDirectory();
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      Duration duration0 = Duration.ofSeconds(4096L, 4096L);
      PathUtils.waitFor(path0, duration0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Duration duration0 = Duration.ofDays(20480L);
      PathUtils.waitFor(path0, duration0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOf(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      // Undeclared exception!
      try { 
        PathUtils.waitFor(path0, (Duration) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOfAsBigInteger(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[9];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      FileVisitOption fileVisitOption8 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[8] = fileVisitOption8;
      PathUtils.directoryContentEquals(path0, path0, Integer.MAX_VALUE, linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("%s does not implement the CartesianAnnotationConsumer<T> interface.", "yJ<NDDSSgX`");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/%s does not implement the CartesianAnnotationConsumer<T> interface./yJ<NDDSSgX`\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:505)
             // org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:480)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:369)
             // sun.reflect.GeneratedMethodAccessor184.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          FileTime fileTime0 = FileTime.fromMillis(1793L);
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          fileTime0.toInstant();
          linkOptionArray0[0] = linkOption0;
          PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0, (DeleteOption[]) null);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:225)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[6];
      pathArray0[0] = path0;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FileTime fileTime0 = FileTime.from(1125899906842624L, timeUnit0);
      Instant instant0 = MockInstant.now();
      Period period0 = Period.ZERO;
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) period0);
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      Instant instant2 = MockInstant.truncatedTo(instant1, chronoUnit0);
      Instant instant3 = MockInstant.minus(instant2, 1125899906842624L, (TemporalUnit) chronoUnit0);
      FileTime.from(instant3);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      linkOptionArray0[3] = linkOption0;
      PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters((PathFilter) orFileFilter0, (PathFilter) orFileFilter0);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((SimpleFileVisitor<Path>) accumulatorPathVisitor0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.directoryAndFileContentEquals(path0, path0);
      assertTrue(boolean0);
      
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      Path path1 = PathUtils.getTempDirectory();
      Charset.defaultCharset();
      StringWriter stringWriter0 = new StringWriter(109);
      OpenOption[] openOptionArray0 = new OpenOption[0];
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((FileVisitResult) null).when(simpleFileVisitor0).preVisitDirectory(any() , any(java.nio.file.attribute.BasicFileAttributes.class));
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, path1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      PathUtils.isNewer(path1, path0);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("FboPzoZPX=t*f8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.FboPzoZPX=t*f8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[5];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[3];
      String string0 = "";
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      PathUtils.current();
      Charset.defaultCharset();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "KwIPKWtwK |`T@");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        PathUtils.copyFileToDirectory(uRL1, path0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.getTempDirectory();
      Charset.defaultCharset();
      PathUtils.sizeOf(path0);
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path1);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      Charset charset0 = Charset.defaultCharset();
      try { 
        PathUtils.readString(path0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.readBasicFileAttributesUnchecked(path0);
          LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
          MockDate mockDate0 = new MockDate(307, 307, Integer.MAX_VALUE, 614, 307, Integer.MAX_VALUE);
          AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
          Path[] pathArray0 = new Path[2];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          PathUtils.filter(ageFileFilter0, pathArray0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Path path0 = PathUtils.current();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      Path[] pathArray0 = new Path[1];
      pathArray0[0] = path0;
      PathUtils.filter(directoryFileFilter0, pathArray0);
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // .
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[6];
      pathArray0[0] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      PathUtils.isDirectory(path0, linkOptionArray0);
      MockFile mockFile0 = new MockFile("instant", "h$S==mRe5");
      Path path1 = mockFile0.toPath();
      PathUtils.fileContentEquals(path1, path1, linkOptionArray0, (OpenOption[]) linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "Can't compare directories, only files: ";
      File file0 = MockFile.createTempFile("Can't compare directories, only files: ", "Can't compare directories, only files: ");
      MockFile mockFile0 = new MockFile(file0, "S}OlfO");
      Path path0 = mockFile0.toPath();
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.plusMillis(instant0, (-1205L));
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      PathUtils.isOlder(path0, instant1, linkOptionArray0);
      PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      try { 
        PathUtils.readBasicFileAttributes(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path[] pathArray0 = new Path[5];
      pathArray0[0] = path0;
      pathArray0[3] = path0;
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream(pathArray0[2], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      String string0 = "file";
      MockFile mockFile0 = new MockFile("file", "`_6~d-ICj4");
      andFileFilter0.accept((File) mockFile0);
      Path[] pathArray0 = new Path[6];
      PathUtils.filter(andFileFilter0, pathArray0);
      // Undeclared exception!
      try { 
        PathUtils.newOutputStream(pathArray0[2], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Path path0 = PathUtils.current();
      Charset.defaultCharset();
      PathUtils.getAclEntryList(path0);
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<CopyDirectoryVisitor> fileAttribute0 = (FileAttribute<CopyDirectoryVisitor>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      PathUtils.fileContentEquals((Path) null, (Path) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      FileTime fileTime0 = FileTime.fromMillis(1793L);
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.isEmptyDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.getTempDirectory();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      Charset.defaultCharset();
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.APPEND;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE;
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.SYNC;
      openOptionArray0[3] = (OpenOption) standardOpenOption3;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.CREATE_NEW;
      openOptionArray0[4] = (OpenOption) standardOpenOption4;
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, charBuffer0, (Charset) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      PathUtils.sizeOfAsBigInteger(path0);
      Path path1 = null;
      CopyOption[] copyOptionArray0 = new CopyOption[7];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[3] = (CopyOption) standardCopyOption0;
      copyOptionArray0[4] = (CopyOption) linkOption0;
      copyOptionArray0[5] = (CopyOption) linkOption0;
      copyOptionArray0[6] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[1];
      PathUtils.filter(andFileFilter0, pathArray0);
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters((PathFilter) andFileFilter0, (PathFilter) andFileFilter0);
      List<Path> list0 = accumulatorPathVisitor0.relativizeDirectories(path0, false, (Comparator<? super Path>) null);
      PathUtils.relativize(list0, path0, true, (Comparator<? super Path>) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      PathUtils.isDirectory(path0, linkOptionArray0);
      PathUtils.isNewer(path0, path0);
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PathUtils.relativize(list0, path0, false, comparator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      Charset.defaultCharset();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from(4096L, timeUnit0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      PathUtils.isEmpty(path0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption0;
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOption0;
      linkOptionArray0[7] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption1;
      PathUtils.isDirectory(path0, linkOptionArray0);
      PathUtils.countDirectoryAsBigInteger(path0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      Path[] pathArray0 = new Path[4];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      // Undeclared exception!
      try { 
        PathUtils.filter((PathFilter) null, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[0];
      // Undeclared exception!
      try { 
        PathUtils.getDosFileAttributeView(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((Instant) null);
      Path[] pathArray0 = new Path[6];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      pathArray0[3] = path0;
      pathArray0[4] = path0;
      pathArray0[5] = path0;
      // Undeclared exception!
      try { 
        PathUtils.filter(ageFileFilter0, pathArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          PathUtils.isEmpty(path0);
          Path path1 = PathUtils.getTempDirectory();
          OrFileFilter orFileFilter0 = new OrFileFilter();
          FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
          MockDate mockDate0 = new MockDate(0L);
          AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
          orFileFilter0.or(ageFileFilter0);
          Path[] pathArray0 = new Path[4];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          pathArray0[2] = path1;
          pathArray0[3] = path1;
          PathUtils.filter(ageFileFilter0, pathArray0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOf(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      PathUtils.getDosFileAttributeView(path0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.negate();
      Path[] pathArray0 = new Path[2];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      PathUtils.filter(iOFileFilter0, pathArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          PathUtils.isEmpty(path0);
          OrFileFilter orFileFilter0 = new OrFileFilter();
          FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
          orFileFilter0.or(falseFileFilter0);
          Path[] pathArray0 = new Path[2];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          PathUtils.filter(falseFileFilter0, pathArray0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Path path0 = PathUtils.current();
          AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
          Path[] pathArray0 = new Path[3];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          // Undeclared exception!
          try { 
            PathUtils.filter(andFileFilter0, pathArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:294)
             // java.nio.file.Files.isAccessible(Files.java:2455)
             // java.nio.file.Files.isWritable(Files.java:2521)
             // org.apache.commons.io.filefilter.CanWriteFileFilter.accept(CanWriteFileFilter.java:92)
             // org.apache.commons.io.filefilter.NotFileFilter.accept(NotFileFilter.java:81)
             // org.apache.commons.io.filefilter.AndFileFilter.accept(AndFileFilter.java:152)
             // org.apache.commons.io.file.PathUtils.lambda$filterPaths$0(PathUtils.java:716)
             // java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
             // java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
             // java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
             // java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
             // java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
             // java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
             // java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
             // org.apache.commons.io.file.PathUtils.filterPaths(PathUtils.java:720)
             // org.apache.commons.io.file.PathUtils.filter(PathUtils.java:705)
             // sun.reflect.GeneratedMethodAccessor194.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[0];
      PathUtils.filter(andFileFilter0, pathArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("directory", "");
      Path path0 = mockFile0.toPath();
      try { 
        PathUtils.isEmpty(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.readBasicFileAttributesUnchecked(path0);
      // Undeclared exception!
      try { 
        PathUtils.isRegularFile(path0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      // Undeclared exception!
      PathUtils.directoryAndFileContentEquals(path0, path0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.current();
      PathUtils.readBasicFileAttributesUnchecked(path0);
      PathUtils.isOlder(path1, path1);
      try { 
        PathUtils.fileContentEquals(path1, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "D<{c}Y}99CD'i");
      MockFile mockFile0 = new MockFile("D<{c}Y}99CD'i");
      Path path0 = mockFile0.toPath();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      // Undeclared exception!
      try { 
        PathUtils.copyDirectory(path0, path0, linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/D<{c}Y}99CD'i'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "D<{c}Y}99CD'i");
      MockFile mockFile0 = new MockFile("D<{c}Y}99CD'i");
      Path path0 = mockFile0.toPath();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectory(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'D<{c}Y}99CD'i'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "D<{c}Y}99CD'i");
      MockFile mockFile0 = new MockFile("D<{c}Y}99CD'i");
      Path path0 = mockFile0.toPath();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      PathUtils.isOlder(path0, 0L, linkOptionArray0);
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[6];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%s does not implement the CartesianAnnotationConsumer<T> interface.", "yJ<NDDSSgX`");
      Path path0 = mockFile0.toPath();
      FileTime fileTime0 = FileTime.fromMillis(1L);
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      PathUtils.isOlder(path0, fileTime0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      Charset.defaultCharset();
      MockURL.getFileExample();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long0 = 0L;
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      LinkOption[] linkOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, instant0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      Instant instant0 = MockInstant.ofEpochSecond(1887L);
      Instant instant1 = MockInstant.plusNanos(instant0, 1887L);
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      linkOptionArray0[0] = linkOption2;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[3] = linkOption1;
      linkOptionArray0[4] = linkOption0;
      PathUtils.isOlder(path0, instant1, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      Charset.defaultCharset();
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      PathUtils.readAttributes(path0, class0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption4;
      PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[9];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
      StandardDeleteOption standardDeleteOption2 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[2] = (DeleteOption) standardDeleteOption2;
      StandardDeleteOption standardDeleteOption3 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[3] = (DeleteOption) standardDeleteOption3;
      StandardDeleteOption standardDeleteOption4 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[4] = (DeleteOption) standardDeleteOption4;
      StandardDeleteOption standardDeleteOption5 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[5] = (DeleteOption) standardDeleteOption5;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("d<Y*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.d<Y*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1208)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      PathUtils.isRegularFile(path0, linkOptionArray0);
      PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
      Instant instant0 = MockInstant.ofEpochSecond(1887L);
      MockInstant.plusNanos(instant0, 1887L);
      PathUtils.isDirectory(path0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isRegularFile(path0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      PathUtils.current();
      Charset.defaultCharset();
      URI uRI0 = MockURI.aHttpURI;
      PathUtils.sizeOf(path0);
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[0];
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, notFileFilter0, (-976), true, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.getAclEntryList(path0);
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (-654L), (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " does not exist");
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      PathUtils.isNewer(path0, 20480L, linkOptionArray0);
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, notFileFilter0, (-2377), false, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.isNewer(path0, path0);
      // Undeclared exception!
      try { 
        PathUtils.isEmpty((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      // Undeclared exception!
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Instant instant0 = MockInstant.ofEpochMilli(1546L);
      MockInstant.plusSeconds(instant0, 1546L);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.getAclEntryList(path0);
      PathUtils.readBasicFileAttributesUnchecked(path0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      PathUtils.filter(andFileFilter0, (Path[]) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "last-modified";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("last-modified");
      suffixFileFilter0.negate();
      PathUtils.filter(suffixFileFilter0, (Path[]) null);
      Path path0 = PathUtils.current();
      PathUtils.newDirectoryStream(path0, suffixFileFilter0);
      try { 
        MockURL.URL("last-modified", "last-modified", 4245, "user.home");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: last-modified
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          PathUtils.isEmpty(path0);
          PathUtils.getTempDirectory();
          OrFileFilter orFileFilter0 = new OrFileFilter();
          FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
          orFileFilter0.or(falseFileFilter0);
          Path[] pathArray0 = new Path[3];
          pathArray0[0] = path0;
          pathArray0[1] = path0;
          pathArray0[2] = path0;
          PathUtils.filter(orFileFilter0, pathArray0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.apache.commons.io.filefilter.PathEqualsFileFilter");
      MockFile mockFile0 = new MockFile("SoqqrGc");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'SoqqrGc'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "M_7z# =Ol^vsUqY%l");
          Path path0 = PathUtils.current();
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[2] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[3] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[4] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[5] = (DeleteOption) standardDeleteOption0;
          deleteOptionArray0[6] = (DeleteOption) standardDeleteOption0;
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1230)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:157)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:453)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.getAclEntryList((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:453)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:414)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          linkOptionArray0[0] = linkOption1;
          LinkOption[] linkOptionArray1 = new LinkOption[2];
          linkOptionArray1[0] = linkOption0;
          linkOptionArray1[1] = linkOption0;
          DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
          StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
          StandardDeleteOption standardDeleteOption1 = StandardDeleteOption.OVERRIDE_READ_ONLY;
          deleteOptionArray0[1] = (DeleteOption) standardDeleteOption1;
          // Undeclared exception!
          try { 
            PathUtils.delete(path0, linkOptionArray1, deleteOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1230)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:157)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:453)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:414)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileTime fileTime0 = FileTime.fromMillis((-5073L));
      PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryContentEquals(path0, path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Instant instant1 = MockInstant.minusSeconds(instant0, 0L);
      MockInstant.plusNanos(instant0, 0L);
      FileTime.from(instant0);
      FileTime fileTime0 = FileTime.from(instant1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "'[]f");
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption4;
      PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      PathUtils.sizeOfDirectory(path0);
      PathUtils.countDirectory(path0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Instant instant0 = MockInstant.ofEpochMilli(1546L);
      MockInstant.plusSeconds(instant0, 1546L);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[10];
      Instant instant0 = MockInstant.ofEpochSecond(4096L);
      MockInstant.plusNanos(instant0, 4096L);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributesUnchecked((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Path path0 = PathUtils.current();
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      Instant instant0 = MockInstant.ofEpochMilli(1546L);
      MockInstant.plusSeconds(instant0, 1546L);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.getTempDirectory();
      CharBuffer.allocate(2867);
      Charset.defaultCharset();
      PathUtils.isNewer(path0, path1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.sizeOfAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption2;
          linkOptionArray0[2] = linkOption1;
          linkOptionArray0[3] = linkOption1;
          linkOptionArray0[4] = linkOption1;
          linkOptionArray0[5] = linkOption1;
          PathUtils.isDirectory(path0, linkOptionArray0);
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:170)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:253)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "' does not exist: '");
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      PathUtils.getDosFileAttributeView(path0, linkOptionArray0);
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((Path) null, path0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.isNewer(path0, path0);
          PathUtils.isEmpty(path0);
          Path path1 = PathUtils.getTempDirectory();
          PathUtils.isOlder(path0, path1);
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:438)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:369)
             // sun.reflect.GeneratedMethodAccessor184.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PathUtils.getTempDirectory();
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.isOlder(path0, path0);
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.deleteFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption0;
      Instant instant0 = MockInstant.ofEpochMilli(1546L);
      MockInstant.plusSeconds(instant0, 2981L);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Path path0 = PathUtils.current();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        PathUtils.copyFile(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[0] = "H{~t5//W'e";
      stringArray0[1] = "H{~t5//W'e";
      stringArray0[2] = "H{~t5//W'e";
      stringArray0[3] = "H{~t5//W'e";
      stringArray0[4] = "H{~t5//W'e";
      stringArray0[5] = "H{~t5//W'e";
      stringArray0[6] = "H{~t5//W'e";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "H{~t5//W'e", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'H{~t5/W'e/H{~t5/W'e/H{~t5/W'e/H{~t5/W'e/H{~t5/W'e/H{~t5/W'e/H{~t5/W'e/H{~t5/W'e'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PathUtils.current();
      MockFile mockFile0 = new MockFile("vqu)D", "vqu)D");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'path' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/vqu)D/vqu)D'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.readBasicFileAttributesUnchecked(path0);
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isDirectory(path0, linkOptionArray0);
      try { 
        PathUtils.fileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: 
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.getTempDirectory();
      CharBuffer charBuffer0 = CharBuffer.allocate(3258);
      CharBuffer.wrap((CharSequence) charBuffer0);
      Charset.defaultCharset();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      linkOptionArray0[3] = linkOption1;
      linkOptionArray0[4] = linkOption1;
      linkOptionArray0[5] = linkOption1;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption3;
      try { 
        PathUtils.fileContentEquals(path1, path0, linkOptionArray0, (OpenOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          CharBuffer.allocate(1);
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:285)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          LinkOption[] linkOptionArray0 = new LinkOption[8];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption3;
          OpenOption[] openOptionArray0 = null;
          // Undeclared exception!
          try { 
            PathUtils.copyFileToDirectory(path0, path0, (CopyOption[]) linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.PathUtils.copyFileToDirectory(PathUtils.java:285)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, (FileTime) null, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.isOlder(path0, path0);
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusSeconds(instant0, 1L);
      Instant instant2 = MockInstant.plusNanos(instant1, 1L);
      Instant instant3 = MockInstant.ofEpochSecond(3759L, (-1L));
      FileTime fileTime0 = FileTime.from(instant3);
      FileTime.from(instant2);
      // Undeclared exception!
      try { 
        PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          PathUtils.isEmptyFile(path0);
          Instant instant0 = MockInstant.ofEpochSecond(1887L);
          MockInstant.plusNanos(instant0, 0L);
          FileTime fileTime0 = FileTime.from(instant0);
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
          AccumulatorPathVisitor.withBigIntegerCounters();
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1008)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:992)
             // sun.reflect.GeneratedMethodAccessor187.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(366L);
      MockInstant.plusNanos(instant0, (-1306L));
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isDirectory(path0, linkOptionArray0);
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      PathUtils.directoryAndFileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = null;
      PathUtils.directoryAndFileContentEquals((Path) null, (Path) null);
      PathUtils.sizeOfAsBigInteger(path0);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[3];
      pathArray0[0] = path0;
      pathArray0[1] = path0;
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      PathUtils.isDirectory(path0, linkOptionArray0);
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      PathUtils.directoryAndFileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      // Undeclared exception!
      try { 
        PathUtils.sizeOfDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      PathUtils.directoryAndFileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
      PathUtils.isEmptyDirectory(path0);
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.isEmptyFile(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4^-");
      PathUtils.isRegularFile(path0, linkOptionArray0);
      Charset.defaultCharset();
      PathUtils.getAclEntryList(path0);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, (Set<FileVisitOption>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.readBasicFileAttributesUnchecked(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>();
      LinkedHashSet<FileVisitOption> linkedHashSet1 = new LinkedHashSet<FileVisitOption>(linkedHashSet0);
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, path0, (Set<FileVisitOption>) linkedHashSet0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      OpenOption[] openOptionArray0 = new OpenOption[8];
      openOptionArray0[0] = (OpenOption) linkOption0;
      openOptionArray0[1] = (OpenOption) linkOption0;
      openOptionArray0[2] = (OpenOption) linkOption1;
      openOptionArray0[3] = (OpenOption) linkOption0;
      openOptionArray0[4] = (OpenOption) linkOption2;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE_NEW;
      openOptionArray0[5] = (OpenOption) standardOpenOption0;
      openOptionArray0[6] = (OpenOption) linkOption3;
      openOptionArray0[7] = (OpenOption) linkOption0;
      PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, openOptionArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 3);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption3;
      linkOptionArray0[3] = linkOption1;
      linkOptionArray0[4] = linkOption3;
      linkOptionArray0[5] = linkOption2;
      linkOptionArray0[6] = linkOption1;
      linkOptionArray0[7] = linkOption3;
      PathUtils.fileContentEquals(path0, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mjQb3#7Ca$S";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "mjQb3#7Ca$S", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'mjQb3#7Ca$S/mjQb3#7Ca$S'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.readBasicFileAttributes(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      Instant instant0 = MockInstant.ofEpochSecond(4096L);
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      // Undeclared exception!
      try { 
        MockInstant.minus(instant0, 4096L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Eras
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          PathUtils.current();
          Path path0 = PathUtils.getTempDirectory();
          CharBuffer charBuffer0 = CharBuffer.allocate(3258);
          CharBuffer.wrap((CharSequence) charBuffer0);
          MockURL.getFtpExample();
          FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 6);
          FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
          fileAttributeArray0[0] = fileAttribute0;
          fileAttributeArray0[1] = fileAttribute0;
          fileAttributeArray0[2] = fileAttribute0;
          fileAttributeArray0[3] = fileAttribute0;
          fileAttributeArray0[4] = fileAttribute0;
          fileAttributeArray0[5] = fileAttribute0;
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:339)
             // sun.reflect.GeneratedMethodAccessor189.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
          // Undeclared exception!
          try { 
            PathUtils.createParentDirectories(path0, fileAttributeArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:339)
             // sun.reflect.GeneratedMethodAccessor189.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "D<{c}Y}99CD'i");
      MockFile mockFile0 = new MockFile("D<{c}Y}99CD'i");
      Path path0 = mockFile0.toPath();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOptionArray0[0];
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption1;
      PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<Path>[] fileAttributeArray0 = (FileAttribute<Path>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<Path> fileAttribute0 = (FileAttribute<Path>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      PathUtils.fileContentEquals((Path) null, (Path) null, linkOptionArray0, (OpenOption[]) linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Path path0 = null;
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter((Path) null);
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.or(trueFileFilter0);
      AccumulatorPathVisitor.withLongCounters((PathFilter) iOFileFilter0, (PathFilter) iOFileFilter0);
      Class<BasicFileAttributes> class0 = BasicFileAttributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      // Undeclared exception!
      try { 
        PathUtils.readAttributes((Path) null, class0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.getAclEntryList(path0);
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.sizeOf(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          PathUtils.isEmptyFile(path0);
          // Undeclared exception!
          try { 
            PathUtils.newOutputStream(path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:1065)
             // sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.isEmptyFile(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
      try { 
        PathUtils.countDirectory(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.getTempDirectory();
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      Path path1 = PathUtils.current();
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      PathUtils.isOlder(path0, path1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      CharBuffer.allocate(1);
      Path path0 = PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path0, (long) 1, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PathUtils.current();
      Path path0 = PathUtils.getTempDirectory();
      CharBuffer charBuffer0 = CharBuffer.allocate(3258);
      CharBuffer.wrap((CharSequence) charBuffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, charBuffer0, charset0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PathUtils.getTempDirectory();
      Path path0 = PathUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, "-*a7_}Iu{", charset0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption6;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-378), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Path path0 = null;
      PathUtils.directoryContentEquals((Path) null, (Path) null);
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      LinkOption linkOption8 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[8] = linkOption8;
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      // Undeclared exception!
      try { 
        PathUtils.getPosixFileAttributeView(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[10];
      Instant instant0 = MockInstant.ofEpochSecond(4096L);
      MockInstant.plusNanos(instant0, 4096L);
      PathUtils.isDirectory((Path) null, linkOptionArray0);
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = (FileAttribute<CopyDirectoryVisitor>[]) Array.newInstance(FileAttribute.class, 0);
      PathUtils.createParentDirectories(path0, fileAttributeArray0);
      // Undeclared exception!
      try { 
        PathUtils.deleteFile((Path) null, linkOptionArray0, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isDirectory(path0, linkOptionArray0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFile(uRL0, path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.isDirectory(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      MockURL.URL("file", "file", "file");
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[9];
      linkOptionArray0[0] = linkOption1;
      linkOptionArray0[1] = linkOption4;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption6;
      linkOptionArray0[3] = linkOption5;
      linkOptionArray0[4] = linkOption3;
      linkOptionArray0[5] = linkOption2;
      linkOptionArray0[6] = linkOption2;
      linkOptionArray0[7] = linkOption4;
      linkOptionArray0[8] = linkOption0;
      PathUtils.isDirectory(path0, linkOptionArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          CopyOption[] copyOptionArray0 = new CopyOption[0];
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path0, path0, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:170)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:253)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[2];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          Path path1 = PathUtils.getTempDirectory();
          PathUtils.getAclFileAttributeView(path1, linkOptionArray0);
          PathUtils.sizeOfAsBigInteger(path0);
          // Undeclared exception!
          try { 
            PathUtils.copyDirectory(path1, path1, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.file.CopyDirectoryVisitor.copy(CopyDirectoryVisitor.java:86)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:170)
             // org.apache.commons.io.file.CopyDirectoryVisitor.visitFile(CopyDirectoryVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:253)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Path path0 = null;
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        PathUtils.newDirectoryStream((Path) null, fileFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[7];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      PathUtils.walk(path0, andFileFilter0, 482, false, fileVisitOptionArray0);
      PathUtils.getTempDirectory();
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("K$Qry");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.K$Qry
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Path path0 = PathUtils.current();
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      Path[] pathArray0 = new Path[0];
      // Undeclared exception!
      try { 
        PathUtils.walk(path0, andFileFilter0, (-136), true, (FileVisitOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory(uRL0, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        PathUtils.copyFileToDirectory((URL) null, path0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileAttribute<FileVisitOption>[] fileAttributeArray0 = (FileAttribute<FileVisitOption>[]) Array.newInstance(FileAttribute.class, 6);
      FileAttribute<FileVisitOption> fileAttribute0 = (FileAttribute<FileVisitOption>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      // Undeclared exception!
      try { 
        PathUtils.createParentDirectories((Path) null, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.directoryAndFileContentEquals(path0, path0);
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.ATOMIC_MOVE;
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      int int0 = (-1098);
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      fileVisitOptionArray0[0] = fileVisitOption0;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-1098), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.readBasicFileAttributes((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.readBasicFileAttributesUnchecked(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[8];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      FileVisitOption fileVisitOption3 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[3] = fileVisitOption3;
      FileVisitOption fileVisitOption4 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[4] = fileVisitOption4;
      FileVisitOption fileVisitOption5 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[5] = fileVisitOption5;
      FileVisitOption fileVisitOption6 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[6] = fileVisitOption6;
      FileVisitOption fileVisitOption7 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[7] = fileVisitOption7;
      // Undeclared exception!
      try { 
        PathUtils.directoryContentEquals(path0, path0, (-378), linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxDepth' is negative
         //
         verifyException("java.nio.file.FileTreeWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.readBasicFileAttributesUnchecked(path0);
      PathUtils.isOlder(path0, path0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Path path0 = null;
      Path path1 = PathUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        PathUtils.isOlder(path1, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOfDirectoryAsBigInteger(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.isNewer(path0, path0);
      PathUtils.isEmpty(path0);
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      String string0 = "8(`";
      // Undeclared exception!
      try { 
        StandardCopyOption.valueOf("8(`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardCopyOption.8(`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.isNewer(path0, path0);
      Path[] pathArray0 = new Path[0];
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "D<{c}Y}99CD'i");
      MockFile mockFile0 = new MockFile("D<{c}Y}99CD'i");
      Path path0 = mockFile0.toPath();
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      PathUtils.fileContentEquals((Path) null, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        PathUtils.writeString(path0, "D<{c}Y}99CD'i", charset0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.fileContentEquals(path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files: /tmp
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          PathUtils.directoryAndFileContentEquals(path0, path0);
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./mvn_compile_merge_pr_452.out\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:438)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:425)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.deleteDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:438)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:425)
             // sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.current();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1230)
             // sun.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        PathUtils.setReadOnly(path0, false, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          LinkOption[] linkOptionArray0 = new LinkOption[0];
          // Undeclared exception!
          try { 
            PathUtils.setReadOnly(path0, false, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1230)
             // sun.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[10];
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.delete(path0, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      assertNull(path1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Path path0 = PathUtils.current();
      FileAttribute<CopyDirectoryVisitor>[] fileAttributeArray0 = null;
      PathUtils.createParentDirectories(path0, (FileAttribute<?>[]) null);
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      DeleteOption[] deleteOptionArray0 = new DeleteOption[0];
      // Undeclared exception!
      try { 
        PathUtils.delete((Path) null, linkOptionArray0, deleteOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Path path0 = null;
      DeleteOption[] deleteOptionArray0 = null;
      // Undeclared exception!
      try { 
        PathUtils.deleteDirectory((Path) null, (DeleteOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.delete(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:438)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:369)
             // sun.reflect.GeneratedMethodAccessor184.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.readBasicFileAttributes(path0);
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkedList<FileVisitOption> linkedList0 = new LinkedList<FileVisitOption>();
      LinkedHashSet<FileVisitOption> linkedHashSet0 = new LinkedHashSet<FileVisitOption>(linkedList0);
      Path path1 = null;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.countDirectoryAsBigInteger((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        PathUtils.cleanDirectory((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.cleanDirectory(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/stderr8288454097745754677deferred\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:36)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1359)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:225)
             // org.apache.commons.io.file.PathUtils.cleanDirectory(PathUtils.java:212)
             // sun.reflect.GeneratedMethodAccessor183.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Path path0 = PathUtils.current();
      boolean boolean0 = PathUtils.isEmptyDirectory(path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[13];
      // Undeclared exception!
      try { 
        PathUtils.isPosix(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      PathUtils.isEmpty(path0);
      try { 
        PathUtils.sizeOfAsBigInteger(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          PathUtils.isEmptyDirectory(path0);
          PathUtils.isEmpty(path0);
          LinkOption[] linkOptionArray0 = new LinkOption[6];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[1] = linkOption1;
          LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[2] = linkOption2;
          LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[3] = linkOption3;
          LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[4] = linkOption4;
          LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[5] = linkOption5;
          // Undeclared exception!
          try { 
            PathUtils.isPosix(path0, linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.io.file.PathUtils.readAttributes(PathUtils.java:1008)
             // org.apache.commons.io.file.PathUtils.isPosix(PathUtils.java:992)
             // sun.reflect.GeneratedMethodAccessor187.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from(0L, timeUnit0);
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isNewer(path0, fileTime0, linkOptionArray0);
      PathUtils.isDirectory(path0, linkOptionArray0);
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[1];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) null, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[2];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      try { 
        PathUtils.directoryAndFileContentEquals(path0, path0, linkOptionArray0, (OpenOption[]) linkOptionArray0, fileVisitOptionArray0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path path1 = PathUtils.getTempDirectory();
      boolean boolean0 = PathUtils.isOlder(path0, path1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URL uRL0 = null;
      Path path0 = null;
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[0] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        PathUtils.copyFile((URL) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView(path0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      PathUtils.isRegularFile((Path) null, linkOptionArray0);
      // Undeclared exception!
      try { 
        PathUtils.getAclFileAttributeView((Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Path path0 = PathUtils.current();
      PathUtils.sizeOf(path0);
      PathUtils.isOlder(path0, path0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree((CopyDirectoryVisitor) null, "org.junitpioneer.jupiter.DefaultTimeZoneExtension", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'org.junitpioneer.jupiter.DefaultTimeZoneExtension'
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileVisitOption[] fileVisitOptionArray0 = new FileVisitOption[3];
      FileVisitOption fileVisitOption0 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[0] = fileVisitOption0;
      FileVisitOption fileVisitOption1 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[1] = fileVisitOption1;
      FileVisitOption fileVisitOption2 = FileVisitOption.FOLLOW_LINKS;
      fileVisitOptionArray0[2] = fileVisitOption2;
      PathUtils.toFileVisitOptionSet(fileVisitOptionArray0);
      SimpleFileVisitor<Object> simpleFileVisitor0 = (SimpleFileVisitor<Object>) mock(SimpleFileVisitor.class, new ViolatedAssumptionAnswer());
      String string0 = "tcYFm%3 Z|,WGcd]Z>";
      // Undeclared exception!
      try { 
        PathUtils.visitFileTree(simpleFileVisitor0, "tcYFm%3 Z|,WGcd]Z>", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Path path0 = PathUtils.current();
      Path[] pathArray0 = new Path[3];
      pathArray0[1] = path0;
      pathArray0[2] = path0;
      PathUtils.directoryContentEquals(pathArray0[0], path0);
      DeleteOption[] deleteOptionArray0 = new DeleteOption[7];
      String string0 = "Cannot cache the value of an abstract method: ";
      // Undeclared exception!
      try { 
        StandardDeleteOption.valueOf("Cannot cache the value of an abstract method: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.io.file.StandardDeleteOption.Cannot cache the value of an abstract method: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      try { 
        PathUtils.directoryContentEquals(path0, path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "File system element for parameter '";
      stringArray0[1] = "magicNumber";
      stringArray0[2] = "y=P-^xs`m>+";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
      DirectoryStream<Path> directoryStream0 = PathUtils.newDirectoryStream(path0, suffixFileFilter0);
      assertNotNull(directoryStream0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Path path0 = PathUtils.getTempDirectory();
      boolean boolean0 = PathUtils.isOlder(path0, path0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("Qtw");
      PathUtils.newDirectoryStream(path0, prefixFileFilter0);
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      LinkOption linkOption7 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[7] = linkOption7;
      boolean boolean0 = PathUtils.isOlder(path0, 0L, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Path path0 = PathUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            PathUtils.setLastModifiedTime(path0, path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.PathUtils.setLastModifiedTime(PathUtils.java:1208)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Path path0 = PathUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = PathUtils.isOlder(path0, 1L, linkOptionArray0);
      assertFalse(boolean0);
  }
}
