/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:34:36 GMT 2025
 */

package org.apache.commons.io.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOFunction;
import org.apache.commons.io.function.IOSupplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOFunction_ESTest extends IOFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IOConsumer<Integer> iOConsumer0 = iOFunction0.andThen(consumer0);
      IOConsumer<Integer> iOConsumer1 = iOFunction0.andThen(iOConsumer0);
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.compose((IOSupplier<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.compose((IOFunction<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.compose((Function<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.andThen((IOFunction<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.andThen((Function<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      IOSupplier<Integer> iOSupplier0 = iOFunction0.compose(supplier0);
      IOSupplier<Integer> iOSupplier1 = iOFunction0.compose(iOSupplier0);
      assertFalse(iOSupplier1.equals((Object)iOSupplier0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      IOFunction<Integer, Integer> iOFunction1 = iOFunction0.andThen((IOFunction<? super Integer, ? extends Integer>) iOFunction0);
      assertFalse(iOFunction1.equals((Object)iOFunction0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      Function<Integer, Integer> function0 = Function.identity();
      IOFunction<Integer, Integer> iOFunction1 = iOFunction0.compose((Function<? super Integer, ? extends Integer>) function0);
      IOFunction<Integer, Integer> iOFunction2 = iOFunction1.compose((IOFunction<? super Integer, ? extends Integer>) iOFunction0);
      assertFalse(iOFunction2.equals((Object)iOFunction1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.andThen((IOConsumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.andThen((Consumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      Function<Integer, Integer> function0 = Function.identity();
      IOFunction<Integer, Integer> iOFunction1 = iOFunction0.andThen((Function<? super Integer, ? extends Integer>) function0);
      IOFunction<Integer, Integer> iOFunction2 = iOFunction0.andThen((IOFunction<? super Integer, ? extends Integer>) iOFunction1);
      assertFalse(iOFunction2.equals((Object)iOFunction0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOFunction<Integer, Integer> iOFunction0 = IOFunction.identity();
      // Undeclared exception!
      try { 
        iOFunction0.compose((Supplier<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
