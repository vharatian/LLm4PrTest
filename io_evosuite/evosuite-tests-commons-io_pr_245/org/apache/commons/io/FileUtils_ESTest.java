/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:43:26 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.Clock;
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.LocalTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.MinguoDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("[v'BQMOK7V^/`hu@");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(fileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileUtils.decodeUrl("/home/azureuser/LLm4PrTest/ io_experiments/~()_=Zq#f/QG+[JzU0gp43,7/tmp/41:B%fX3O:/B2Xw");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "R0";
      stringArray0[1] = "dYAuDm";
      stringArray0[2] = "uRQ~VRq";
      stringArray0[3] = "R0";
      stringArray0[4] = "R0";
      stringArray0[5] = "R0";
      stringArray0[6] = "R0";
      stringArray0[7] = "/tmpGZ;(J -Bq&Se~[-Irm0";
      stringArray0[8] = "R0";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.copyDirectory(file0, file1, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      FileUtils.copyDirectory(file1, file0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "Se2EMf5", charset0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("Z;u(J -<q&Se4[-)Irm", "");
      FileUtils.writeStringToFile(file0, ")),\"kO/{2T|H/", (String) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("Z;u(J <q&Se4[-)I5r", ">");
      PriorityQueue<DayOfWeek> priorityQueue0 = new PriorityQueue<DayOfWeek>();
      FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, "Z;u(J <q&Se4[-)I5r", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX", "JTHvvFX");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      Vector<String> vector0 = new Vector<String>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) vector0, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      HashSet<String> hashSet0 = new HashSet<String>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) hashSet0, "Zmu(J@-<q&Se4[-bIrm");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&e4[-bIrm");
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 2, (int) (byte)69);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      FileUtils.write(file0, (CharSequence) "DDeb9H+V", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      FileUtils.write((File) mockFile0, (CharSequence) "Z;u]J <q&w4[-)5r", (String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          FileUtils.deleteQuietly(file0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.deleteDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1174)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1193)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ReM*xz,";
      stringArray0[1] = "";
      stringArray0[2] = " to be annotated with ";
      stringArray0[3] = " h]p+xgqq";
      File file0 = FileUtils.getFile(stringArray0);
      File[] fileArray0 = new File[2];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      FileUtils.toURLs(fileArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/fake/but/wellformed/url");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("file", "file", 9, "file", uRLStreamHandler0);
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/fake/but/wellformed/url");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Bd5a");
      URL uRL0 = MockURL.getFileExample();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      FileUtils.sizeOfAsBigInteger(mockFile0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"J)Hvv+FX");
      FileUtils.write((File) mockFile0, (CharSequence) "\"J)Hvv+FX");
      FileUtils.sizeOf(mockFile0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J q&w4[-)5");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      FileUtils.readLines((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http");
      File file0 = MockFile.createTempFile("fa[:q_i;&YH~/v):", "(BW[]Lp&\\", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readFileToString(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("H`9", "cRJ9");
      FileUtils.readFileToString(file0, (String) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = MockFile.createTempFile("yDiq+7G63dq", "%8'K0f755I~Kw/");
      FileUtils.openInputStream(file0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(list0, iOCase0);
      FileUtils.listFilesAndDirs(file0, prefixFileFilter0, prefixFileFilter0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0);
      FileUtils.listFiles(file0, (IOFileFilter) wildcardFileFilter0, (IOFileFilter) wildcardFileFilter0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      FileUtils.lineIterator(file0, (String) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      FileUtils.writeStringToFile((File) mockFile0, "W&T-");
      FileUtils.lineIterator((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lastModifiedUnchecked(file0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.lastModified(file0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("/tmp/Z;u(J -<q&Se4[-)Irm0");
      FileUtils.iterateFilesAndDirs(mockFile0, prefixFileFilter0, prefixFileFilter0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[3];
      FileUtils.iterateFiles(file0, stringArray0, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      FileUtils.iterateFiles(file0, (IOFileFilter) hiddenFileFilter0, (IOFileFilter) hiddenFileFilter0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochMilli(2158L);
      FileUtils.isFileOlder(file0, instant0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileOlder(file0, file0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-1L));
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/tmp");
      MockDate mockDate0 = new MockDate(2014L);
      FileUtils.isFileNewer((File) mockFile0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      File file1 = FileUtils.createParentDirectories(file0);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      FileUtils.isFileNewer(file1, instant0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isFileNewer(file0, file0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isEmptyDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadable(false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      FileUtils.getTempDirectory();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-,5+7";
      stringArray0[1] = "+~AH~RyRtYK:";
      stringArray0[2] = "/home/home";
      stringArray0[3] = "K5T)2A#Fdmj/.a.bq";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&Se4[-bIm");
      String[] stringArray0 = new String[0];
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DKD)bO*/P'h}AR+ 7a");
      FileUtils.createParentDirectories(mockFile0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(fileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      FileUtils.copyFile((File) mockFile0, (OutputStream) objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashSet<File> hashSet0 = new HashSet<File>();
      hashSet0.add((File) null);
      FileUtils.convertFileCollectionToFileArray(hashSet0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File[] fileArray0 = new File[2];
      File file0 = MockFile.createTempFile(" bytes", "-16192 bytes");
      fileArray0[0] = file0;
      FileUtils.checksumCRC32(fileArray0[0]);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("m>Q)nD|9", "m>Q)nD|9");
      CRC32 cRC32_0 = new CRC32();
      FileUtils.checksum(file0, cRC32_0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (Charset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "'", charset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/fake");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "N~3/4NK");
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.writeStringToFile(file0, "Se2EMf5", (Charset) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/fake/but/wellformed'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, " GB", "b:fbWJx1CzI", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // b:fbWJx1CzI
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/azureuser", "/tmp/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "s", "s");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "P/{VkFzD7C<7|1N/", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeStringToFile(file0, "6#7AbjZ'6n}xP", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "JTHvvFX");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("FSb9*", "/home/azureuser/LLm4PrTest/ io_experiments");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Object> stack0 = new Stack<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) stack0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("appendable");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) set0, "appendable", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("extensions");
      PriorityQueue<DayOfWeek> priorityQueue0 = new PriorityQueue<DayOfWeek>();
      try { 
        FileUtils.writeLines((File) mockFile0, (Collection<?>) priorityQueue0, " actual: ", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedHashSet0, "h7O2.EbO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) treeSet0, "Zmu(J@-<q&Se4[-bIm");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, " to a subdirectory of itself: ", (Collection<?>) vector0, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  to a subdirectory of itself: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, " to a subdirectory of itself: ", (Collection<?>) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "Zmu(J@-<q&Se4[-bIrm");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[1] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[2] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[3] = "/home/azureuser";
      stringArray0[4] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[5] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[6] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[7] = "Zmu(J@-<q&Se4[-bIrm";
      stringArray0[8] = "Zmu(J@-<q&Se4[-bIrm";
      File file1 = FileUtils.getFile(file0, stringArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      try { 
        FileUtils.writeLines(file1, "16c", (Collection<?>) set0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/Zmu(J@-<q&Se4[-bIrm0Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm/home/azureuser/Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.mkdir();
      FileUtils.deleteQuietly(file0);
      Vector<String> vector0 = new Vector<String>();
      try { 
        FileUtils.writeLines(file0, "'Rfd?", (Collection<?>) vector0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "Se2EMf5", (Collection<?>) linkedHashSet0, "File parameter '", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Se2EMf5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>(4849);
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, ";(J<q&Ce4[-)Irm", (Collection<?>) vector0, ";(J<q&Ce4[-)Irm", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "File parameter '", (Collection<?>) linkedHashSet0, "File parameter '", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "size", (Collection<?>) hashSet0, "U}:Cwj*VQ[e&T");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // size
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&Se4[-bIrm");
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "Zmu(J@-<q&Se4[-bIrm", (Collection<?>) hashSet0, "org.apache.commons.io.filefilter.PathVisitorFileFilter");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Zmu(J@-<q&Se4[-bIrm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "_p.0* 7sn\"", (Collection<?>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte) (-1), (-1), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 5, 37, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"J)Hvv+FX", "o?.@.pviD8%6NkPY}");
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-1081480510), 3, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1081480510
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      byte[] byteArray0 = new byte[1];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, 78, 78, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (int) (byte)69, (int) (byte)69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("/home/home/home", "", file0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file1, byteArray0, (int) (byte) (-25), 78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -25
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX", "JTHvvFX");
      byte[] byteArray0 = new byte[2];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, 112, (int) (byte) (-117));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      byte[] byteArray0 = new byte[0];
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) " bytes", charset0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "9AmoR[{j%/31c~", "file", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&e4[-bIrm", "");
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "Zmu(J@-<q&e4[-bIrm", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "\"J)Hvv+FX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "1 GB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, (-2070787801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      String[] stringArray0 = new String[1];
      try { 
        FileUtils.streamFiles(file0, false, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, true, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'W&T-'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r", "Z;u]J <q&w4[-)5r");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Z;u]J <q&w4[-)5r/Z;u]J <q&w4[-)5r'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "destinationDir");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // destinationDir
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "checksum");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // checksum
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/fake/but/wellformed'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "R%hOkOR~5pr4";
      stringArray0[1] = "N)+#B[v~i?\"w,61";
      stringArray0[2] = "{";
      stringArray0[3] = "4;G&>I?Gci/Pwc<B7|";
      stringArray0[4] = "MD5ln6dDMkUC?d)By";
      stringArray0[5] = "cs[WZ";
      stringArray0[6] = "A<XO*/&T2nA>MWQn";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/R%hOkOR~5pr4/N)+#B[v~i?\"w,61/{/4;G&>I?Gci/Pwc<B7|/MD5ln6dDMkUC?d)By/cs[WZ/A<XO*'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.moveToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/tmp/Zmu(J@-<q&Se4[-bIm0Zmu(J@-<q&Se4[-bIm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Zmu(J@-<q&Se4[-bIm/Zmu(J@-<q&Se4[-bIm0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Rw}XyES5`*zVhL~?}+");
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "");
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&Se4[-bIm");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/home/azureuser/LLm4PrTest/ io_experiments/Zmu(J@-<q&Se4[-bIm/Zmu(J@-<q&Se4[-bIm0'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(";(J<q&Se4[-)Irm");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory ';(J<q&Se4[-)Irm'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/azureuser", "/tmp/azureuser");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: '/tmp/tmp/azureuser0/tmp/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time./@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Uq;e.YVZ{ ,l<@)O");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0, "Uq;e.YVZ{ ,l<@)O");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'null' already exists: 'Uq;e.YVZ{ ,l<@)O'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      File file1 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      try { 
        FileUtils.moveDirectoryToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'W&T-' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&Se4[-bIrm", "Zmu(J@-<q&Se4[-bIrm");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Zmu(J@-<q&Se4[-bIrm/Zmu(J@-<q&Se4[-bIrm' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Path path0 = file0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.negate();
      // Undeclared exception!
      FileUtils.listFilesAndDirs(file0, iOFileFilter0, iOFileFilter0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, canReadFileFilter0, canReadFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // JTHvvFX
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvZFX", "JTHvvZFX");
      FileUtils.writeStringToFile((File) mockFile0, "/tmp/tmp/Zmu(J@-<q&Se4[-bIm0`");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) mockFile0, "JTHvvZFX");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // JTHvvZFX
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "}so_DZBfkE6?C<WpPT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser", "/home/azureuser");
      try { 
        FileUtils.lastModified(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      // Undeclared exception!
      FileUtils.iterateFilesAndDirs(file0, trueFileFilter0, trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      IOCase iOCase0 = IOCase.SENSITIVE;
      NameFileFilter nameFileFilter0 = new NameFileFilter("last-modified", iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, nameFileFilter0, nameFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[15];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = MockFile.createTempFile("4(4i[f9m5\"EX", "K%", (File) null);
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) trueFileFilter0, (IOFileFilter) trueFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/4(4i[f9m5\"EX0K%
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[6];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-883), 183, 2067475462);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // W&T-
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX", "JTHvvFX");
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) hijrahDate0, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // localTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/Qu");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, 1099511627776L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) mockDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "The source ");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/The source '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"JT)Hvv+FX", "0A)QsUxD}E5`'}z$");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/\"JT)Hvv+FX00A)QsUxD}E5`'}z$
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (long) 2507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.isEmptyDirectory(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Failed setLastModified(%s) on '%s'";
      stringArray0[1] = "\"JT)Hvv+FX";
      stringArray0[2] = "\"JT)Hvv+FX";
      stringArray0[3] = "\"JT)Hvv+FX";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/LLm4PrTest/ io_experiments/Failed setLastModified(%s) on '%s'/\"JT)Hvv+FX/\"JT)Hvv+FX/\"JT)Hvv+FX'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J q&w4[-)5");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: 'Z;u]J q&w4[-)5'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file1 = FileUtils.getUserDirectory();
      try { 
        FileUtils.directoryContains(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("/tmp/home/azureuser/LLm4PrTest/ io_experiments/JTHvvFX/tmp", "/tmp/tmp/destination0.tmp");
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/home/azureuser/LLm4PrTest/ io_experiments/JTHvvFX/tmp/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = MockFile.createTempFile("directory", "http");
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-1), (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 251, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvZFX", "JTHvvZFX");
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ReM*xz,";
      stringArray0[1] = "";
      stringArray0[2] = " to be annotated with ";
      stringArray0[3] = " h]p+xgqq";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(bufferedInputStream0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      linkedHashSet0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/fake/but/wellformed/url");
      FileSystemHandling.createFolder(evoSuiteFile0);
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destinationDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ o_experiments/JTHvvZFX", "/home/azureuser/LLm4PrTest/ o_experiments/JTHvvZFX");
      FileUtils.writeStringToFile((File) mockFile0, "/home/azureuser/LLm4PrTest/ o_experiments/JTHvvZFX");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destinationDir' is not a directory: '/home/azureuser/LLm4PrTest/ o_experiments/JTHvvZFX/home/azureuser/LLm4PrTest/ o_experiments/JTHvvZFX'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/mu(J@</&Se4[-bA/&Se4[-bA0", "/home/azureuser/LLm4PrTest/ io_experiments/mu(J@</&Se4[-bA/&Se4[-bA0");
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        FileUtils.copyInputStreamToFile(sequenceInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("1|sF?'E", "}9%[bL-0)P:Rb*1TD7r");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/1|sF?'E/}9%[bL-0)P:Rb*1TD7r'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'Z;u]J <q&w4[-)5r'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      File file0 = MockFile.createTempFile("/t", "/t");
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      try { 
        FileUtils.copyFile(file0, file0, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[10];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[0] = (CopyOption) linkOption0;
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX", "/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":", ":");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/:/:'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Ce4[-)Irm", ";(J<q&Ce4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp/;(J<q&Ce4[-)Irm0;(J<q&Ce4[-)Irm' (file1='/tmp/;(J<q&Ce4[-)Irm0;(J<q&Ce4[-)Irm', file2='/tmp/;(J<q&Ce4[-)Irm0;(J<q&Ce4[-)Irm')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = MockFile.createTempFile("/t\"", "/t\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyFile(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvv FX", "JTHvv FX");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/JTHvv FX/JTHvv FX'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'sourceDir' is not a directory: '/tmp/Zmu(J@-<q&Se4[-bIm0Zmu(J@-<q&Se4[-bIm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"JT)Hvv+FX", "\"JT)Hvv+FX");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/\"JT)Hvv+FX/\"JT)Hvv+FX'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) notFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      CopyOption[] copyOptionArray0 = new CopyOption[2];
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) orFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@J");
      IOCase iOCase0 = IOCase.SYSTEM;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("@J", iOCase0);
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) suffixFileFilter0, false, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '@J'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1475L));
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) ageFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("P@hr");
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) prefixFileFilter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(",jghEu4UWg9", iOCase0);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) wildcardFileFilter0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/home/azureuser";
      stringArray0[1] = "/home/azureuser";
      stringArray0[2] = "/home/azureuser";
      stringArray0[3] = "VCn]4]{0v";
      stringArray0[4] = "/home/azureuser";
      stringArray0[5] = "/home/azureuser";
      stringArray0[6] = "/home/azureuser";
      File file0 = FileUtils.getFile(stringArray0);
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, file0, (FileFilter) orFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) directoryFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/home", "/home/azureuser/home");
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) directoryFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/home/home/azureuser/home'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pg");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'pg'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "p]P;1 H,B8[X");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Ce4[-)Irm", ";(J<q&Ce4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" KB", " KB");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/ KB/ KB'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/Z-)&vGbS34W4/]#]/X[\"");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Z-)&vGbS34W4/]#]/X[\"'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, cRC32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(mockFile0, adler32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/;(J<q&Se4[-)Irm/;(J<q&Se4[-)Irm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/\"J)Hvv+FX/azureuser", "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/\"J)Hvv+FX/azureuser");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/\"J)Hvv+FX/azureuser", charset0, false);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "Zmu(J@-<q&Se4[-bIrm");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "Zmu(J@-<q&Se4[-bIrm", (Collection<?>) linkedHashSet0, "Zmu(J@-<q&Se4[-bIrm", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Zmu(J@-<q&Se4[-bIrm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-2092419962), (-2092419962), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"J)Hvv+FX");
      byte[] byteArray0 = new byte[8];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (int) (byte)5, 2423, false);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.streamFiles(file0, true, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.readLines(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      FileUtils.readFileToString((File) mockFile0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      FileUtils.openOutputStream(file0, true);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          FileUtils.deleteQuietly(file0);
          File file1 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file1, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:323)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1191)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2227)
             // sun.reflect.GeneratedMethodAccessor323.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J q&w4[-)5");
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: Z;u]J q&w4[-)5
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isSymlink(file0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileOlder(file0, (-834L));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (-1L));
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, 1755985138236L);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.isFileNewer(file0, 0L);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = MockFile.createTempFile("Z;u(J -<q&Se4[-)Irm", "");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (-3753L));
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/Z;u(J -<q&Se4[-)Irm0
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File file0 = MockFile.createTempFile("Z;u(J -<q&Se4[-)Irm", "");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/Z;u(J -<q&Se4[-)Irm0'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      File file0 = MockFile.createTempFile("http", " TB");
      FileUtils.copyToFile(sequenceInputStream0, file0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX", "JTHvvFX");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        FileUtils.copyToFile(pipedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/azureuser", "/tmp/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // destination
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/B2Xw", "/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX/JTHvvZFX/azureuser");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/tmp/B2Xw/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX/JTHvvZFX/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:919)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:976)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:434)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:391)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1340)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:323)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "1},Y27r", "Failed to delete original directory '", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Failed to delete original directory '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) directoryFileFilter0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) ";(J<q&Se4[-)Irm", "0w`C4Q)t6cA?B:KVOP", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0w`C4Q)t6cA?B:KVOP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Clock clock0 = MockClock.systemDefaultZone();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      FileUtils.isFileOlder(file0, (ChronoLocalDate) hijrahDate0, localTime0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O~b6v Xh38;{b Q,");
      byte[] byteArray0 = new byte[9];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Uq;e.YVZ{ ,l<@)O");
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'Uq;e.YVZ{ ,l<@)O' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, "U81;A@yjO");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) canExecuteFileFilter0, (IOFileFilter) canExecuteFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /fake/but/wellformed/url
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write(file0, (CharSequence) "", charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O/1=J");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, 637, 3163);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "g4Q]61SnhSTK");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-2082588741));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, (-932915833));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/home/azureuser/home", "/home/home/azureuser/home");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/home/azureuser/home/home/home/azureuser/home' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      File[] fileArray0 = new File[11];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":3c[/NRz17enCWm", ":3c[/NRz17enCWm");
      FileUtils.touch(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ek%4.ohb@h>fd^P", "");
      FileUtils.touch(file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(2, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":jE+Cv'\"N2", ":jE+Cv'\"N2");
      MockFile mockFile1 = new MockFile(":jE+Cv'\"N2");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) linkedHashSet0, "/tmp//tmp/tmp");
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(mockFile1);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      File file1 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Uq;e.YVZ{ ,l<@)O");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: 'Uq;e.YVZ{ ,l<@)O'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      file0.setWritable(false, true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'file is not writable: '/tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/azureuser", "/tmp/azureuser");
      List<String> list0 = FileUtils.readLines(file0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Ce4[-)Irm", ";(J<q&Ce4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      String string0 = FileUtils.readFileToString(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P!s}d", "/home/azureuser/LLm4PrTest/ io_experiments/;(J<q&Se4[-)Irm/;(J<q&Se4[-)Irm/azureuser");
      FileUtils.writeStringToFile((File) mockFile0, "/home/azureuser/LLm4PrTest/ io_experiments/;(J<q&Se4[-)Irm/;(J<q&Se4[-)Irm/azureuser");
      byte[] byteArray0 = FileUtils.readFileToByteArray(mockFile0);
      assertEquals(84, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'destDir' is not a directory: '/tmp/;(J<q&Se4[-)Irm0;(J<q&Se4[-)Irm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&Se4[-bIrm");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: 'Zmu(J@-<q&Se4[-bIrm'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("mu(J@</&Se4[-bI", "mu(J@</&Se4[-bI");
          MockFile mockFile0 = new MockFile("mu(J@</&Se4[-bI");
          // Undeclared exception!
          try { 
            FileUtils.moveFileToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/mu(J@</&Se4[-bI/&Se4[-bI\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2307)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2282)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2337)
             // sun.reflect.GeneratedMethodAccessor267.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";(J<q&Se4[-Irm";
      stringArray0[1] = "OL9lG4otT,3A}g|G5kB";
      stringArray0[2] = "user.home";
      File file0 = FileUtils.getFile(stringArray0);
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.moveToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser/LLm4PrTest/ io_experiments/;(J<q&Se4[-Irm/OL9lG4otT,3A}g|G5kB to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/;(J<q&Se4[-Irm/OL9lG4otT,3A}g|G5kB/user.home/OL9lG4otT,3A}g|G5kB
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"^&y_RFsKCnxd>", "\"^&y_RFsKCnxd>");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/\"^&y_RFsKCnxd>0\"^&y_RFsKCnxd>' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      DirectoryFileFilter directoryFileFilter0 = (DirectoryFileFilter)DirectoryFileFilter.DIRECTORY;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/tmp/home/azureuser/tmp";
      stringArray0[1] = "O2g0gjPYEAX";
      stringArray0[2] = "U:v4BAWZN";
      stringArray0[3] = "net.bytebuddy.build.Plugin$ForElementMatcher";
      stringArray0[4] = "/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX/JTHvvZFX";
      File file1 = FileUtils.getFile(stringArray0);
      assertNotNull(file1);
      
      FileUtils.copyDirectory(file0, file1, (FileFilter) directoryFileFilter0);
      assertTrue(file1.isDirectory());
      assertEquals(1755767590862L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J q&w4[-)5");
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, 1099511627776L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, 402000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX", "JTHvvFX");
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory(mockFile0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String[] stringArray0 = new String[20];
      stringArray0[0] = "/home/azureuser/home/azureuser/azureuser";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertFalse(file1.isHidden());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zmu(J@-<q&Se4[-bIrm");
      FileUtils.forceMkdirParent(mockFile0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdirParent(file0);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("/tt/", "/tt/");
          File file1 = FileUtils.createParentDirectories(file0);
          // Undeclared exception!
          try { 
            FileUtils.copyDirectoryToDirectory(file1, file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tt/0/0/tt\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:849)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1311)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:698)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:629)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:530)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:729)
             // sun.reflect.GeneratedMethodAccessor285.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"J)Hvv+FX");
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(".Qn%98Hf1OW:YZM[", ".Qn%98Hf1OW:YZM[");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX", "JTHvvFX");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wN=]]9.|Ua`:u] 2-?", "D3:rVTY,fXt*!AR@w");
      FileUtils.deleteDirectory(mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      HashSet<File> hashSet0 = new HashSet<File>();
      hashSet0.add(mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) hashSet0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'Z;u]J <q&w4[-)5r'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<File> linkedHashSet0 = new LinkedHashSet<File>();
      FileUtils.copyToDirectory((Iterable<File>) linkedHashSet0, file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/No advice defined by /' is not a file: ");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/No advice defined by /' is not a file: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX");
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIm", "Zmu(J@-<q&Se4[-bIm");
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      Enumeration<DataInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileUtils.copyInputStreamToFile(sequenceInputStream0, file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      long long0 = FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tt/", "/tt/");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "destFile");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tt/", "/tt/");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, ".pH2LF |r^0PGS+]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/mpx[k2", "/mpx[k2");
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "/mpx[k2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      File file0 = MockFile.createTempFile("VJo&", "", (File) null);
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, " for attribute '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "/home/azureuser/LLm4PrTest/ io_experiments/;(J<q&Se4[-)Irm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      MockFile mockFile0 = new MockFile("JTHvvFX");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/user.home/ftp/Negative initial size: /tmp");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z;u]J <q&w4[-)5r");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "destFile", (Collection<?>) stack0, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // destFile
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX", "/home/azureuser/LLm4PrTest/ io_experiments/JTHvvZFX");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Adler32 adler32_0 = new Adler32();
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "Zmu(J@-<q&Se4[-bIrm");
      Adler32 adler32_0 = new Adler32();
      Checksum checksum0 = FileUtils.checksum(file0, adler32_0);
      assertSame(adler32_0, checksum0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_ZB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1024 EB", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      StandardCopyOption[] standardCopyOptionArray0 = StandardCopyOption.values();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, (CopyOption[]) standardCopyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "[fgR2xe}} .");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(vector0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      File file0 = MockFile.createTempFile("Zmu(J@-<q&Se4[-bIrm", "");
      try { 
        FileUtils.write(file0, (CharSequence) "", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1099511627776000L, false);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(650L);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "W'\"0?k", (Collection<?>) linkedHashSet0, "org.apache.commons.io.filefilter.NotFileFilter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) vector0, "/tmp/p&! |CLY0file2", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null, (int) (byte)69, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      File file0 = MockFile.createTempFile(";(J<q&Se4[-)Irm", ";(J<q&Se4[-)Irm");
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, ";(J<q&Se4[-)Irm");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;(J<q&Se4[-)Irm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/~()_=Zq#f/QG+[JzU0gp43,7/tmp/41:B%fX3O:/B2Xw/d62>MLw@/Failed setLastModified(%s) on '%s'/?7}dS$/azureuser", "/home/azureuser/LLm4PrTest/ io_experiments/~()_=Zq#f/QG+[JzU0gp43,7/tmp/41:B%fX3O:/B2Xw/d62>MLw@/Failed setLastModified(%s) on '%s'/?7}dS$/azureuser");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/~()_=Zq#f/QG+[JzU0gp43,7/tmp/41:B%fX3O:/B2Xw/d62>MLw@/Failed setLastModified(%s) on '%s'/?7}dS$/azureuser/home/azureuser/LLm4PrTest/ io_experiments/~()_=Zq#f/QG+[JzU0gp43,7/tmp/41:B%fX3O:/B2Xw/d62>MLw@/Failed setLastModified(%s) on '%s'/?7}dS$/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "/tmp/so9'KL9f29]sR-o0so9'KL9f29]sR-o");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp/so9'KL9f29]sR-o0so9'KL9f29]sR-o
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) minguoDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      File file0 = MockFile.createTempFile("%1PH%$ZO1]zHmQbz\"q", (String) null, (File) null);
      Clock clock0 = MockClock.systemUTC();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) minguoDate0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/%1PH%$ZO1]zHmQbz\"q0.tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "]HRrka1QFqV6!0", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, " to a subdirectory of itself: ", (Collection<?>) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, (Collection<?>) linkedHashSet0, "Ehze8^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      MockFile mockFile0 = new MockFile("v.PM_:$L[e%h");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "/hom", "/hom");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /hom
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      // Undeclared exception!
      FileUtils.iterateFiles(file0, (IOFileFilter) trueFileFilter0, (IOFileFilter) trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      MockFile mockFile0 = new MockFile("File canonical paths are equal: '%s' (file1='%s', file2='%s')", "File canonical paths are equal: '%s' (file1='%s', file2='%s')");
      FileUtils.writeStringToFile((File) mockFile0, "File canonical paths are equal: '%s' (file1='%s', file2='%s')", true);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(tOY[/", "(tOY[/");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      Collection<File> collection0 = FileUtils.listFiles(file0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2147450094, (-236), 2147450094, 2147450094, 2147450094, 976);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, ageFileFilter0, ageFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W&T-");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      PriorityQueue<LinkOption> priorityQueue0 = new PriorityQueue<LinkOption>();
      FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, false);
      assertEquals("/fake/but/wellformed/url", file0.toString());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1048576L, FileUtils.ONE_MB);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      File file0 = MockFile.createTempFile("GMT", "S");
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) arrayList0);
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J9PiWv]j");
      FileUtils.write((File) mockFile0, (CharSequence) "J9PiWv]j", (Charset) null);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdir(file0);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(1167L);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "W", "W");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // W
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(1099511627776L);
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertFalse(boolean0);
  }
}
