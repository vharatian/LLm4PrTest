/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:06:03 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.io.FileSystem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileSystem_ESTest extends FileSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isReservedFileName("CONOUT$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystem[] fileSystemArray0 = FileSystem.values();
      assertEquals(4, fileSystemArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("WINDOWS");
      assertEquals('\\', fileSystem0.getNameSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("GENERIC");
      assertEquals(Integer.MAX_VALUE, fileSystem0.getMaxPathLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharSequence charSequence0 = fileSystem0.trimExtension("6.@SSv:Ge==Biwv]wT8");
      assertEquals("6", charSequence0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.getCurrent();
      String string0 = fileSystem0.toLegalFileName("", ']');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.supportsDriveLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      boolean boolean0 = fileSystem0.isLegalFileName("AUX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isCaseSensitive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.GENERIC;
      boolean boolean0 = fileSystem0.isCasePreserving();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      String[] stringArray0 = fileSystem0.getReservedFileNames();
      assertEquals(24, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      // Undeclared exception!
      fileSystem0.trimExtension(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.GENERIC;
      // Undeclared exception!
      try { 
        fileSystem0.trimExtension((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(14);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.put('\\');
      FileSystem fileSystem0 = FileSystem.GENERIC;
      // Undeclared exception!
      try { 
        fileSystem0.trimExtension(charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.toLegalFileName((String) null, 'i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharBuffer charBuffer0 = CharBuffer.allocate(1114111);
      // Undeclared exception!
      fileSystem0.isReservedFileName(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      // Undeclared exception!
      try { 
        fileSystem0.isReservedFileName(charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isReservedFileName("AUX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.isReservedFileName((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      CharBuffer charBuffer0 = CharBuffer.allocate(1196);
      boolean boolean0 = fileSystem0.isReservedFileName(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      // Undeclared exception!
      try { 
        fileSystem0.toLegalFileName("oM>?fz#|,~[^", '\u0000');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The replacement character '\\0' cannot be one of the WINDOWS illegal characters: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 42, 47, 58, 60, 62, 63, 92, 124]
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("LINUX");
      // Undeclared exception!
      try { 
        fileSystem0.toLegalFileName("6tWRL4", '/');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The replacement character '/' cannot be one of the LINUX illegal characters: [0, 47]
         //
         verifyException("org.apache.commons.io.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      FileSystem fileSystem0 = FileSystem.LINUX;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = fileSystem0.isLegalFileName(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isLegalFileName("AUX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isLegalFileName("NTFS ADS separator (':') in file name is forbidden.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      CharBuffer charBuffer0 = CharBuffer.allocate(1196);
      boolean boolean0 = fileSystem0.isLegalFileName(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = fileSystem0.isLegalFileName(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      boolean boolean0 = fileSystem0.isLegalFileName((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      String string0 = fileSystem0.toLegalFileName(".&r]05*:hGdB-", 'b');
      assertEquals(".&r]05bbhGdB-", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      char[] charArray0 = fileSystem0.getIllegalFileNameChars();
      assertEquals(41, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.LINUX;
      String string0 = fileSystem0.normalizeSeparators((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharBuffer charBuffer0 = CharBuffer.allocate(255);
      // Undeclared exception!
      try { 
        fileSystem0.isLegalFileName(charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharSequence charSequence0 = fileSystem0.trimExtension(".&r]05*:hGdB-");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Null character present i file/pach name.{There are no known legitimate use cases for such data, but several inj2ction attacks may use Zt");
      // Undeclared exception!
      try { 
        fileSystem0.isLegalFileName(charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      boolean boolean0 = fileSystem0.isCaseSensitive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      int int0 = fileSystem0.getBlockSize();
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      char char0 = fileSystem0.getNameSeparator();
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      boolean boolean0 = fileSystem0.supportsDriveLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      boolean boolean0 = fileSystem0.isCasePreserving();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      String[] stringArray0 = fileSystem0.getReservedFileNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      int int0 = fileSystem0.getMaxFileNameLength();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.MAC_OSX;
      String string0 = fileSystem0.normalizeSeparators("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.valueOf("LINUX");
      int int0 = fileSystem0.getMaxPathLength();
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.getCurrent();
      String string0 = fileSystem0.normalizeSeparators(":");
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystem fileSystem0 = FileSystem.WINDOWS;
      int[] intArray0 = fileSystem0.getIllegalFileNameCodePoints();
      assertEquals(41, intArray0.length);
  }
}
