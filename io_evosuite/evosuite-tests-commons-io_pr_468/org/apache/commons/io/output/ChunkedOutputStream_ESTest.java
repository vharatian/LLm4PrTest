/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:19:36 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.io.output.ChunkedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ChunkedOutputStream_ESTest extends ChunkedOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[5];
      chunkedOutputStream0.write(byteArray0, 0, (int) (byte) (-72));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      java.io.ByteArrayOutputStream byteArrayOutputStream0 = new java.io.ByteArrayOutputStream(767);
      ChunkedOutputStream chunkedOutputStream0 = null;
      try {
        chunkedOutputStream0 = new ChunkedOutputStream(byteArrayOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // chunkSize <= 0
         //
         verifyException("org.apache.commons.io.output.ChunkedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("chunkSize <= 0");
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      chunkedOutputStream0.write(byteArray0, 225, 306654252);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream((OutputStream) null, 224758828);
      // Undeclared exception!
      try { 
        chunkedOutputStream0.write((byte[]) null, 224758828, 224758828);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ChunkedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      java.io.ByteArrayOutputStream byteArrayOutputStream0 = new java.io.ByteArrayOutputStream(1627);
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream(byteArrayOutputStream0, 1627);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        chunkedOutputStream0.write(byteArray0, (int) (byte)0, 1627);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("chunkSize <= 0");
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        chunkedOutputStream0.write(byteArray0, (-1), 306654252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChunkedOutputStream.Builder chunkedOutputStream_Builder0 = new ChunkedOutputStream.Builder();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      try { 
        chunkedOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)36);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      chunkedOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChunkedOutputStream chunkedOutputStream0 = null;
      try {
        chunkedOutputStream0 = new ChunkedOutputStream((OutputStream) null, (-2711));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // chunkSize <= 0
         //
         verifyException("org.apache.commons.io.output.ChunkedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChunkedOutputStream chunkedOutputStream0 = new ChunkedOutputStream((OutputStream) null);
      int int0 = chunkedOutputStream0.getChunkSize();
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChunkedOutputStream.Builder chunkedOutputStream_Builder0 = ChunkedOutputStream.builder();
      // Undeclared exception!
      try { 
        chunkedOutputStream_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }
}
