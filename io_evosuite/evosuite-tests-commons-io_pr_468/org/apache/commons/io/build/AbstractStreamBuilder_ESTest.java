/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:12:52 GMT 2025
 */

package org.apache.commons.io.build;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.OpenOption;
import java.nio.file.StandardOpenOption;
import java.util.function.IntUnaryOperator;
import org.apache.commons.io.input.CharSequenceInputStream;
import org.apache.commons.io.input.MemoryMappedFileInputStream;
import org.apache.commons.io.input.MessageDigestCalculatingInputStream;
import org.apache.commons.io.input.UnsynchronizedBufferedInputStream;
import org.apache.commons.io.input.XmlStreamReader;
import org.apache.commons.io.output.ChunkedOutputStream;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.apache.commons.io.output.LockableFileWriter;
import org.apache.commons.io.output.UncheckedFilterOutputStream;
import org.apache.commons.io.output.UncheckedFilterWriter;
import org.apache.commons.io.output.XmlStreamWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractStreamBuilder_ESTest extends AbstractStreamBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlStreamReader.Builder xmlStreamReader_Builder0 = new XmlStreamReader.Builder();
      XmlStreamReader.Builder xmlStreamReader_Builder1 = xmlStreamReader_Builder0.setBufferSizeMax(0);
      assertSame(xmlStreamReader_Builder1, xmlStreamReader_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      Integer integer0 = Integer.valueOf((int) (byte)0);
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder1 = deferredFileOutputStream_Builder0.setBufferSize(integer0);
      assertSame(deferredFileOutputStream_Builder0, deferredFileOutputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageDigestCalculatingInputStream.Builder messageDigestCalculatingInputStream_Builder0 = new MessageDigestCalculatingInputStream.Builder();
      messageDigestCalculatingInputStream_Builder0.setBufferSizeMax(588);
      Integer integer0 = new Integer(588);
      MessageDigestCalculatingInputStream.Builder messageDigestCalculatingInputStream_Builder1 = messageDigestCalculatingInputStream_Builder0.setBufferSize(integer0);
      assertSame(messageDigestCalculatingInputStream_Builder0, messageDigestCalculatingInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder0 = new UnsynchronizedBufferedInputStream.Builder();
      Charset charset0 = Charset.defaultCharset();
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder1 = unsynchronizedBufferedInputStream_Builder0.setCharset(charset0);
      assertSame(unsynchronizedBufferedInputStream_Builder1, unsynchronizedBufferedInputStream_Builder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LockableFileWriter.Builder lockableFileWriter_Builder0 = new LockableFileWriter.Builder();
      LockableFileWriter.Builder lockableFileWriter_Builder1 = lockableFileWriter_Builder0.setCharset((String) null);
      assertSame(lockableFileWriter_Builder1, lockableFileWriter_Builder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LockableFileWriter.Builder lockableFileWriter_Builder0 = new LockableFileWriter.Builder();
      // Undeclared exception!
      try { 
        lockableFileWriter_Builder0.setCharset("5q^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5q^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageDigestCalculatingInputStream.Builder messageDigestCalculatingInputStream_Builder0 = new MessageDigestCalculatingInputStream.Builder();
      messageDigestCalculatingInputStream_Builder0.setBufferSizeMax(588);
      // Undeclared exception!
      try { 
        messageDigestCalculatingInputStream_Builder0.setBufferSize(2505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request 2,505 exceeds maximum 588
         //
         verifyException("org.apache.commons.io.build.AbstractStreamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder0 = new UnsynchronizedBufferedInputStream.Builder();
      StandardOpenOption[] standardOpenOptionArray0 = StandardOpenOption.values();
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder1 = unsynchronizedBufferedInputStream_Builder0.setOpenOptions(standardOpenOptionArray0);
      assertSame(unsynchronizedBufferedInputStream_Builder0, unsynchronizedBufferedInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChunkedOutputStream.Builder chunkedOutputStream_Builder0 = new ChunkedOutputStream.Builder();
      ChunkedOutputStream.Builder chunkedOutputStream_Builder1 = chunkedOutputStream_Builder0.setOpenOptions((OpenOption[]) null);
      assertSame(chunkedOutputStream_Builder1, chunkedOutputStream_Builder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlStreamReader.Builder xmlStreamReader_Builder0 = new XmlStreamReader.Builder();
      XmlStreamReader.Builder xmlStreamReader_Builder1 = xmlStreamReader_Builder0.setBufferSizeMax((-1));
      assertSame(xmlStreamReader_Builder0, xmlStreamReader_Builder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LockableFileWriter.Builder lockableFileWriter_Builder0 = new LockableFileWriter.Builder();
      IntUnaryOperator intUnaryOperator0 = IntUnaryOperator.identity();
      LockableFileWriter.Builder lockableFileWriter_Builder1 = lockableFileWriter_Builder0.setBufferSizeChecker(intUnaryOperator0);
      assertSame(lockableFileWriter_Builder1, lockableFileWriter_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LockableFileWriter.Builder lockableFileWriter_Builder0 = new LockableFileWriter.Builder();
      LockableFileWriter.Builder lockableFileWriter_Builder1 = lockableFileWriter_Builder0.setBufferSizeChecker((IntUnaryOperator) null);
      assertSame(lockableFileWriter_Builder1, lockableFileWriter_Builder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder0 = new UnsynchronizedBufferedInputStream.Builder();
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder1 = unsynchronizedBufferedInputStream_Builder0.setBufferSize((Integer) null);
      assertSame(unsynchronizedBufferedInputStream_Builder0, unsynchronizedBufferedInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LockableFileWriter.Builder lockableFileWriter_Builder0 = new LockableFileWriter.Builder();
      LockableFileWriter.Builder lockableFileWriter_Builder1 = lockableFileWriter_Builder0.setBufferSize((-1272));
      assertSame(lockableFileWriter_Builder1, lockableFileWriter_Builder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlStreamWriter.Builder xmlStreamWriter_Builder0 = new XmlStreamWriter.Builder();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MessageDigestCalculatingInputStream.Builder messageDigestCalculatingInputStream_Builder0 = new MessageDigestCalculatingInputStream.Builder();
      messageDigestCalculatingInputStream_Builder0.setBufferSizeMax(588);
      Integer integer0 = new Integer(624);
      // Undeclared exception!
      try { 
        messageDigestCalculatingInputStream_Builder0.setBufferSize(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request 624 exceeds maximum 588
         //
         verifyException("org.apache.commons.io.build.AbstractStreamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MemoryMappedFileInputStream.Builder memoryMappedFileInputStream_Builder0 = new MemoryMappedFileInputStream.Builder();
      // Undeclared exception!
      try { 
        memoryMappedFileInputStream_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = new CharSequenceInputStream.Builder();
      // Undeclared exception!
      try { 
        charSequenceInputStream_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UncheckedFilterWriter.Builder uncheckedFilterWriter_Builder0 = new UncheckedFilterWriter.Builder();
      // Undeclared exception!
      try { 
        uncheckedFilterWriter_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UncheckedFilterOutputStream.Builder uncheckedFilterOutputStream_Builder0 = new UncheckedFilterOutputStream.Builder();
      // Undeclared exception!
      try { 
        uncheckedFilterOutputStream_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlStreamReader.Builder xmlStreamReader_Builder0 = new XmlStreamReader.Builder();
      // Undeclared exception!
      try { 
        xmlStreamReader_Builder0.setCharset("^uo}|XjY`8L{+O *=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^uo}|XjY`8L{+O *=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder0 = new UnsynchronizedBufferedInputStream.Builder();
      // Undeclared exception!
      try { 
        unsynchronizedBufferedInputStream_Builder0.setCharset("reservedFileNames");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // reservedFileNames
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder0 = new UnsynchronizedBufferedInputStream.Builder();
      byte[] byteArray0 = new byte[2];
      UnsynchronizedBufferedInputStream.Builder unsynchronizedBufferedInputStream_Builder1 = unsynchronizedBufferedInputStream_Builder0.setByteArray(byteArray0);
      UnsynchronizedBufferedInputStream unsynchronizedBufferedInputStream0 = unsynchronizedBufferedInputStream_Builder1.get();
      assertTrue(unsynchronizedBufferedInputStream0.markSupported());
  }
}
