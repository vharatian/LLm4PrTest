/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:57:42 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.URI;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ThresholdingOutputStream_ESTest extends ThresholdingOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1, mockFile0);
      deferredFileOutputStream0.write(1);
      boolean boolean0 = deferredFileOutputStream0.isThresholdExceeded();
      assertEquals(1L, deferredFileOutputStream0.getByteCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eGtsori'ua0>UKB", "eGtsori'ua0>UKB");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1524, mockFile0);
      deferredFileOutputStream0.flush();
      assertFalse(deferredFileOutputStream0.isThresholdExceeded());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1195, 1195, (File) null);
      byte[] byteArray0 = new byte[6];
      deferredFileOutputStream0.write(byteArray0);
      assertEquals(6L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-547), mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isThresholdExceeded();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^gk");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1019, 1019, mockFile0);
      boolean boolean0 = deferredFileOutputStream0.isThresholdExceeded();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TT8oZEpDb6", "org.apache.commons.io.filefilter.DelegateFileFilter");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((byte)0, (byte)0, mockFile0);
      int int0 = deferredFileOutputStream0.getThreshold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "org.apache.commons.io.output.ThresholdingOutputStream");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1351, 1351, "W{+tFO?SgyZX[-u3", "", mockFile0);
      int int0 = deferredFileOutputStream0.getThreshold();
      assertEquals(1351, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1, mockFile0);
      deferredFileOutputStream0.write(1);
      long long0 = deferredFileOutputStream0.getByteCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(376, (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null, 376, 376);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(3573, (File) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(byteArray0, 3573, 3573);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-319), "", "", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null, (-319), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(2005, ",B'3[T", ",B'3[T", (File) null);
      byte[] byteArray0 = new byte[0];
      deferredFileOutputStream0.write(1224);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(byteArray0, (-2102744404), 2005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2102744404
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3132), "Sources must not be null", "Sources must not be null", (File) null);
      byte[] byteArray0 = new byte[0];
      try { 
        deferredFileOutputStream0.write(byteArray0, (-3132), 383);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3075), mockFile0);
      byte[] byteArray0 = new byte[0];
      try { 
        deferredFileOutputStream0.write(byteArray0, 250, 250);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^gk");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1019, 1019, mockFile0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ThresholdingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-687), "", "", (File) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.NameFileFilter");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-504), mockFile0);
      byte[] byteArray0 = new byte[0];
      try { 
        deferredFileOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-179), (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((-179));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K", "K");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-390), "K", "K", mockFile0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((-390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("w)Ap~]qSIH1j':M+*.(");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-622), mockFile0);
      try { 
        deferredFileOutputStream0.write((-622));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2045), mockFile0);
      try { 
        deferredFileOutputStream0.write((int) (byte)0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2596), 0, (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.checkThreshold(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-393), "", "", (File) null);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.checkThreshold(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^gk");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1019, 1019, mockFile0);
      try { 
        deferredFileOutputStream0.checkThreshold(1127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2145894095), mockFile0);
      try { 
        deferredFileOutputStream0.checkThreshold((-1062));
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "org.apache.commons.io.output.ThresholdingOutputStream");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1351, 1351, "W{+tFO?SgyZX[-u3", "", mockFile0);
      deferredFileOutputStream0.write(1351);
      deferredFileOutputStream0.checkThreshold(1351);
      byte[] byteArray0 = new byte[7];
      deferredFileOutputStream0.write(byteArray0, (int) (byte)5, 47);
      assertEquals(48L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1463, 1463, (File) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(deferredFileOutputStream0);
      objectOutputStream0.close();
      assertEquals(4L, deferredFileOutputStream0.getByteCount());
      assertEquals(1463, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = MockFile.createTempFile("r@&;xm~", ".");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-163), file0);
      deferredFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(deferredFileOutputStream0);
      deferredFileOutputStream0.writeTo(mockPrintStream0);
      assertEquals((-163), deferredFileOutputStream0.getThreshold());
      assertTrue(deferredFileOutputStream0.isThresholdExceeded());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(47, (File) null);
      deferredFileOutputStream0.setByteCount((-304L));
      long long0 = deferredFileOutputStream0.getByteCount();
      assertEquals((-304L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(47, (File) null);
      deferredFileOutputStream0.getByteCount();
      assertEquals(47, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1L:MPAq0]k");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-61), mockFile0);
      int int0 = deferredFileOutputStream0.getThreshold();
      assertEquals((-61), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-163), (File) null);
      deferredFileOutputStream0.resetByteCount();
      assertEquals((-163), deferredFileOutputStream0.getThreshold());
      assertEquals(0L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-504), mockFile0);
      byte[] byteArray0 = new byte[0];
      try { 
        deferredFileOutputStream0.write(byteArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
