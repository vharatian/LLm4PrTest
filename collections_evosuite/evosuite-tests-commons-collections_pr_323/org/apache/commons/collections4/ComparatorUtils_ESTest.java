/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:29:16 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.file.StandardCopyOption;
import java.time.DayOfWeek;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TreeSet;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ComparatorUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorUtils_ESTest extends ComparatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.THURSDAY;
      Comparator<DayOfWeek> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<DayOfWeek> comparator1 = ComparatorUtils.reversedComparator(comparator0);
      DayOfWeek dayOfWeek2 = ComparatorUtils.max(dayOfWeek0, dayOfWeek1, comparator1);
      assertEquals(DayOfWeek.THURSDAY, dayOfWeek2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object>[] comparatorArray0 = (Comparator<Object>[]) Array.newInstance(Comparator.class, 7);
      TreeSet<Comparator<Object>> treeSet0 = new TreeSet<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) treeSet0);
      Comparator<Object> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      comparatorArray0[0] = comparator1;
      comparatorArray0[6] = comparatorArray0[0];
      Object object0 = ComparatorUtils.min((Object) null, (Object) integer0, comparatorArray0[6]);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<Integer> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Comparator<Integer> comparator2 = ComparatorUtils.nullLowComparator(comparator1);
      assertNotSame(comparator2, comparator1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Comparator<ComparatorPredicate.Criterion>>[] comparatorArray0 = (Comparator<Comparator<ComparatorPredicate.Criterion>>[]) Array.newInstance(Comparator.class, 0);
      Comparator<Comparator<ComparatorPredicate.Criterion>> comparator0 = ComparatorUtils.chainedComparator(comparatorArray0);
      Comparator<Comparator<ComparatorPredicate.Criterion>> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Comparator<ComparatorPredicate.Criterion> comparator2 = ComparatorUtils.min((Comparator<ComparatorPredicate.Criterion>) null, (Comparator<ComparatorPredicate.Criterion>) null, comparator1);
      assertNull(comparator2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<StandardCopyOption> comparator0 = ComparatorUtils.naturalComparator();
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      StandardCopyOption standardCopyOption1 = ComparatorUtils.max(standardCopyOption0, standardCopyOption0, comparator0);
      assertSame(standardCopyOption0, standardCopyOption1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(162);
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 8);
      LinkedHashSet<Comparator<Integer>> linkedHashSet0 = new LinkedHashSet<Comparator<Integer>>();
      Comparator<Integer> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Integer>>) linkedHashSet0);
      comparatorArray0[4] = comparator0;
      // Undeclared exception!
      try { 
        ComparatorUtils.min(integer0, integer0, comparatorArray0[4]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 7);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Integer) null, (Integer) null, comparatorArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      LinkedList<Comparator<Locale.Category>> linkedList0 = new LinkedList<Comparator<Locale.Category>>();
      Comparator<Locale.Category> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Locale.Category>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max(locale_Category0, locale_Category0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Collection<Comparator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 5);
      comparatorArray0[0] = comparator0;
      comparatorArray0[1] = comparator0;
      comparatorArray0[2] = comparator0;
      comparatorArray0[3] = comparator0;
      comparatorArray0[4] = comparator0;
      Comparator<Integer> comparator1 = ComparatorUtils.chainedComparator(comparatorArray0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 9);
      Integer integer1 = new Integer(918);
      Integer integer2 = ComparatorUtils.max(integer1, integer0, comparatorArray0[2]);
      assertEquals(918, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Integer) null, (Integer) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer integer2 = ComparatorUtils.min(integer0, integer1, (Comparator<Integer>) null);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Locale.Category>[] comparatorArray0 = (Comparator<Locale.Category>[]) Array.newInstance(Comparator.class, 4);
      Comparator<Locale.Category> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Locale.Category>) null);
      comparatorArray0[0] = comparator0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      comparatorArray0[3] = comparatorArray0[0];
      Locale.Category locale_Category1 = ComparatorUtils.min(locale_Category0, locale_Category0, comparatorArray0[3]);
      assertSame(locale_Category1, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = ComparatorUtils.transformedComparator((Comparator<Predicate<Locale.Category>>) null, (Transformer<? super Locale.Category, ? extends Predicate<Locale.Category>>) null);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Predicate<Integer>> comparator0 = ComparatorUtils.nullHighComparator((Comparator<Predicate<Integer>>) null);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<Integer> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Integer integer0 = ComparatorUtils.max((Integer) null, (Integer) null, comparator1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Locale.Category>) null);
      Predicate<Locale.Category>[] predicateArray0 = (Predicate<Locale.Category>[]) Array.newInstance(Predicate.class, 18);
      Predicate<Locale.Category> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      OnePredicate<Locale.Category> onePredicate0 = new OnePredicate<Locale.Category>(predicateArray0);
      predicateArray0[1] = (Predicate<Locale.Category>) onePredicate0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Locale.Category, Locale.Category>[] transformerArray0 = (Transformer<Locale.Category, Locale.Category>[]) Array.newInstance(Transformer.class, 0);
      ClosureTransformer<Locale.Category> closureTransformer0 = new ClosureTransformer<Locale.Category>((Closure<? super Locale.Category>) null);
      SwitchTransformer<Locale.Category, Locale.Category> switchTransformer0 = new SwitchTransformer<Locale.Category, Locale.Category>(predicateArray0, transformerArray0, closureTransformer0);
      Comparator<Locale.Category> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Locale.Category, ? extends Locale.Category>) switchTransformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min(locale_Category0, locale_Category0, comparator1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 5);
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator(comparatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.booleanComparator(true);
      assertNotNull(comparator0);
  }
}
