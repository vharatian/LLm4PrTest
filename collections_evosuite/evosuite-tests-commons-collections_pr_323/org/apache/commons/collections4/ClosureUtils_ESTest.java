/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:27:07 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import java.lang.reflect.Array;
import java.time.temporal.ChronoField;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Stack;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ClosureUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClosureUtils_ESTest extends ClosureUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = ClosureUtils.asClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object> closure1 = ClosureUtils.forClosure((-1383), (Closure<? super Object>) null);
      Closure<Object> closure2 = ClosureUtils.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure1);
      assertFalse(closure2.equals((Object)closure1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      Closure<Object> closure1 = ClosureUtils.whileClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) closure0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, Object>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, Object>>();
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ClosureUtils.asClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[0] = closure0;
      Closure<Object> closure1 = ClosureUtils.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closureArray0[0]);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<InstanceofPredicate> closure0 = ClosureUtils.switchClosure((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Closure<? super InstanceofPredicate>[]) closureArray0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      Closure<Object> closure0 = ClosureUtils.asClosure((Transformer<? super Object, ?>) null);
      Closure<AbstractMap.SimpleImmutableEntry<Transformer, Closure>> closure1 = ClosureUtils.ifClosure((Predicate<? super AbstractMap.SimpleImmutableEntry<Transformer, Closure>>) equalPredicate0, (Closure<? super AbstractMap.SimpleImmutableEntry<Transformer, Closure>>) closure0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<InstanceofPredicate> closure0 = ClosureUtils.doWhileClosure((Closure<? super InstanceofPredicate>) transformerClosure0, (Predicate<? super InstanceofPredicate>) predicate0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, Object>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, Object>>();
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ClosureUtils.asClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[0] = closure0;
      Closure<Object> closure1 = ClosureUtils.chainedClosure((Closure<? super Object>[]) closureArray0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure0 = ClosureUtils.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      assertFalse(hashSet0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.switchMapClosure((Map<?, Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // objectsAndClosures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      Closure<Object> closure0 = ClosureUtils.asClosure((Transformer<? super Object, ?>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      predicateArray0[7] = (Predicate<Object>) equalPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Boolean>[]) null, (Closure<? super Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = ClosureUtils.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      closureArray0[0] = closure0;
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Transformer<Object, Transformer>>[]) predicateArray0, (Closure<? super Transformer<Object, Transformer>>[]) closureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure((String) null, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 1);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure("org.apache.commons.collections4.functors.EqualPredicate", (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Closure<? super Closure<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Closure<InstanceofPredicate>> stack0 = new Stack<Closure<InstanceofPredicate>>();
      stack0.add((Closure<InstanceofPredicate>) null);
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Collection<? extends Closure<? super InstanceofPredicate>>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<InstanceofPredicate, Closure<InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Closure<InstanceofPredicate>>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMap0.put(instanceofPredicate0, (Closure<InstanceofPredicate>) null);
      // Undeclared exception!
      try { 
        ClosureUtils.switchMapClosure((Map<? extends InstanceofPredicate, Closure<InstanceofPredicate>>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Closure<Object>, Closure<Closure<Object>>> hashMap0 = new HashMap<Closure<Object>, Closure<Closure<Object>>>();
      Closure<Closure<Object>> closure0 = ClosureUtils.switchMapClosure((Map<? extends Closure<Object>, Closure<Closure<Object>>>) hashMap0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, Object>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, Object>>();
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ClosureUtils.asClosure((Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.ifClosure((Predicate<? super Boolean>) null, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Closure<NonePredicate<BoundType>> closure0 = ClosureUtils.invokerClosure("/In!xS0#O9@m~");
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Closure<? super Object>[]) closureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Collection<? extends Closure<? super Transformer<Boolean, InstanceofPredicate>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Transformer<Object, Transformer>>[]) predicateArray0, (Closure<? super Transformer<Object, Transformer>>[]) closureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.exceptionClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.ifClosure((Predicate<? super Boolean>) null, (Closure<? super Boolean>) closure0, (Closure<? super Boolean>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Boolean>[]) predicateArray0, (Closure<? super Boolean>[]) null, (Closure<? super Boolean>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.exceptionClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.whileClosure((Predicate<? super Boolean>) null, (Closure<? super Boolean>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Map<Predicate<AbstractMap.SimpleImmutableEntry<NonePredicate, Closure>>, Closure<AbstractMap.SimpleImmutableEntry<NonePredicate, Closure>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicatesAndClosures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Closure<ChronoField> closure0 = ClosureUtils.invokerClosure("org.apache.commons.collections4.ClosureUtils", (Class<?>[]) null, (Object[]) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.doWhileClosure((Closure<? super Boolean>) closure0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }
}
