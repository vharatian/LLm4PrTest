/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:48:33 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import java.lang.reflect.Array;
import java.nio.file.LinkOption;
import java.time.chrono.HijrahEra;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.collection.PredicatedCollection;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.PredicatedMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PredicatedCollection_ESTest extends PredicatedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super InstanceofPredicate>) andPredicate0);
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      MultiSet<InstanceofPredicate> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet((MultiSet<InstanceofPredicate>) hashMultiSet0);
      assertFalse(multiSet0.contains(instanceofPredicate0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMultiSet<BoundType> hashMultiSet0 = new HashMultiSet<BoundType>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedMultiSet<BoundType> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<BoundType>) hashMultiSet0, (Predicate<? super BoundType>) allPredicate0);
      HashBag<Object> hashBag0 = new HashBag<Object>(predicatedMultiSet0);
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(hashBag0, allPredicate0);
      predicatedCollection0.validate(predicatedMultiSet0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PredicatedCollection.Builder<NonePredicate<InstanceofPredicate>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      HashSet<NonePredicate<InstanceofPredicate>> hashSet0 = new HashSet<NonePredicate<InstanceofPredicate>>();
      Set<NonePredicate<InstanceofPredicate>> set0 = predicatedCollection_Builder0.createPredicatedSet((Set<NonePredicate<InstanceofPredicate>>) hashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Queue<InstanceofPredicate> queue0 = predicatedCollection_Builder0.createPredicatedQueue((Queue<InstanceofPredicate>) arrayDeque0);
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      List<InstanceofPredicate> list0 = predicatedCollection_Builder0.createPredicatedList((List<InstanceofPredicate>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMultiSet<BoundType> hashMultiSet0 = new HashMultiSet<BoundType>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedMultiSet<BoundType> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<BoundType>) hashMultiSet0, (Predicate<? super BoundType>) allPredicate0);
      HashBag<Object> hashBag0 = new HashBag<Object>(predicatedMultiSet0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) allPredicate0);
      Bag<Object> bag0 = predicatedCollection_Builder0.createPredicatedBag((Bag<Object>) hashBag0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMultiSet<BoundType> hashMultiSet0 = new HashMultiSet<BoundType>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedMultiSet<BoundType> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<BoundType>) hashMultiSet0, (Predicate<? super BoundType>) allPredicate0);
      HashBag<Object> hashBag0 = new HashBag<Object>(predicatedMultiSet0);
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(hashBag0, allPredicate0);
      boolean boolean0 = predicatedCollection0.addAll(predicatedMultiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      Class<LinkOption> class0 = LinkOption.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedCollection0.validate(instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedHashSet0, (Predicate<? super InstanceofPredicate>) orPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedCollection0.validate(instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) hashMultiSet0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        predicatedCollection0.validate(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'java.lang.Object@6799089e' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMultiSet0.add(instanceofPredicate0);
      Predicate<InstanceofPredicate> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) hashMultiSet0, (Predicate<? super InstanceofPredicate>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<NonePredicate<InstanceofPredicate>>) null, (Predicate<? super NonePredicate<InstanceofPredicate>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicatedCollection.builder((Predicate<? super Closure<BoundType>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Class<BoundType> class0 = BoundType.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3343), (-2609), (-2609), (-3343)).when(comparator0).compare(any() , any());
      hashMultiSet0.add((Object) class0);
      Object object0 = new Object();
      hashMultiSet0.add(object0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(instanceofPredicate0, comparator0, comparatorPredicate_Criterion0);
      PredicatedMultiSet<Object> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Object>) hashMultiSet0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.addAll(hashMultiSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(allPredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nullIsTruePredicate0, equalPredicate0);
      PredicatedCollection.Builder<LinkOption> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super LinkOption>) orPredicate0);
      Collection<LinkOption> collection0 = predicatedCollection_Builder0.rejectedElements();
      PredicatedCollection<LinkOption> predicatedCollection0 = new PredicatedCollection<LinkOption>(collection0, equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<NonePredicate<BoundType>> treeBag0 = new TreeBag<NonePredicate<BoundType>>(comparator0);
      SortedBag<NonePredicate<BoundType>> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<NonePredicate<BoundType>>) treeBag0);
      PredicatedSortedBag<NonePredicate<BoundType>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag(sortedBag0, (Predicate<? super NonePredicate<BoundType>>) equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.addAll(treeBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<BoundType> predicate0 = AllPredicate.allPredicate((Predicate<? super BoundType>[]) predicateArray0);
      PriorityQueue<BoundType> priorityQueue0 = new PriorityQueue<BoundType>();
      PredicatedCollection<BoundType> predicatedCollection0 = new PredicatedCollection<BoundType>(priorityQueue0, predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeBag0);
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<InstanceofPredicate>) treeBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashBag0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.addAll(hashBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@6' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(linkedList0, predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<Object>) hashMultiSet0);
      Set<Object> set0 = synchronizedMultiSet0.uniqueSet();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) synchronizedMultiSet0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) set0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(synchronizedMultiSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) anyPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(treeBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedBag<InstanceofPredicate> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<InstanceofPredicate>) treeBag0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      SynchronizedSortedBag<InstanceofPredicate> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<InstanceofPredicate>) transformedSortedBag0);
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<InstanceofPredicate>) synchronizedSortedBag0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0, classArray0, predicateArray0);
      FactoryTransformer<Object, Object> factoryTransformer0 = new FactoryTransformer<Object, Object>(instantiateFactory0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(factoryTransformer0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) equalPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, equalPredicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) andPredicate0);
      predicateArray0[0] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(treeSet0, allPredicate0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(treeBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class org.apache.commons.collections4.bag.TreeBag cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(treeSet0, predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(predicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      SynchronizedSortedBag<InstanceofPredicate> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<InstanceofPredicate>) treeBag0);
      SortedBag<InstanceofPredicate> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<InstanceofPredicate>) synchronizedSortedBag0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) synchronizedSortedBag0);
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag(sortedBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PredicatedCollection.Builder<Boolean> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(predicatedCollection_Builder0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedCollection<Object> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Object>(linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      PredicatedCollection<Boolean> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Boolean>(stack0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(stack0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@1' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll((Collection<? extends InstanceofPredicate>) null);
      assertSame(predicatedCollection_Builder0, predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PredicatedCollection.Builder<BoundType> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      linkedHashSet0.add(boundType0);
      PredicatedCollection.Builder<BoundType> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(linkedHashSet0);
      assertSame(predicatedCollection_Builder0, predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(predicate0);
      Object object0 = new Object();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = predicatedCollection_Builder0.add(object0);
      assertNotNull(predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>(linkedList0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMultiSet0.add(instanceofPredicate0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(hashMultiSet0, instanceofPredicate0);
      boolean boolean0 = predicatedCollection0.addAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stack0);
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) stack0, (Predicate<? super InstanceofPredicate>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@1' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMultiSet<HijrahEra> hashMultiSet0 = new HashMultiSet<HijrahEra>();
      SynchronizedMultiSet<HijrahEra> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<HijrahEra>) hashMultiSet0);
      TreeBag<HijrahEra> treeBag0 = new TreeBag<HijrahEra>(synchronizedMultiSet0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      treeBag0.add(hijrahEra0);
      Predicate<HijrahEra> predicate0 = TruePredicate.truePredicate();
      PredicatedSortedBag<HijrahEra> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<HijrahEra>) treeBag0, (Predicate<? super HijrahEra>) predicate0);
      boolean boolean0 = predicatedSortedBag0.add(hijrahEra0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMultiSet<HijrahEra> hashMultiSet0 = new HashMultiSet<HijrahEra>();
      SynchronizedMultiSet<HijrahEra> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<HijrahEra>) hashMultiSet0);
      TreeBag<HijrahEra> treeBag0 = new TreeBag<HijrahEra>(synchronizedMultiSet0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Predicate<HijrahEra> predicate0 = TruePredicate.truePredicate();
      PredicatedSortedBag<HijrahEra> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<HijrahEra>) treeBag0, (Predicate<? super HijrahEra>) predicate0);
      boolean boolean0 = predicatedSortedBag0.add(hijrahEra0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Collection<InstanceofPredicate> collection0 = predicatedCollection_Builder0.rejectedElements();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection(collection0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) transformedCollection0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(instanceofPredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Predicate<BoundType> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedCollection.Builder<BoundType> predicatedCollection_Builder0 = new PredicatedCollection.Builder<BoundType>(predicate0);
      Queue<BoundType> queue0 = predicatedCollection_Builder0.createPredicatedQueue();
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Bag<InstanceofPredicate> bag0 = predicatedCollection_Builder0.createPredicatedBag();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(predicate0);
      List<Object> list0 = predicatedCollection_Builder0.createPredicatedList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Predicate<BoundType> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedCollection.Builder<BoundType> predicatedCollection_Builder0 = new PredicatedCollection.Builder<BoundType>(predicate0);
      MultiSet<BoundType> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet();
      assertNotNull(multiSet0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Set<Object> set0 = predicatedCollection_Builder0.createPredicatedSet();
      assertEquals(0, set0.size());
  }
}
