/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:50:52 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.Range;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.nio.file.LinkOption;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import org.apache.commons.collections4.collection.SynchronizedCollection;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SynchronizedCollection_ESTest extends SynchronizedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) arrayDeque0);
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = synchronizedCollection0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedHashSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(synchronizedCollection0);
      SynchronizedCollection<Object> synchronizedCollection1 = new SynchronizedCollection<Object>(priorityQueue0);
      Object[] objectArray0 = synchronizedCollection1.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedHashSet0);
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      int int0 = synchronizedCollection0.size();
      assertFalse(synchronizedCollection0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) arrayDeque0);
      Integer integer0 = new Integer(596);
      arrayDeque0.add(integer0);
      boolean boolean0 = synchronizedCollection0.retainAll(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<LinkOption> arrayDeque0 = new ArrayDeque<LinkOption>();
      SynchronizedCollection<LinkOption> synchronizedCollection0 = new SynchronizedCollection<LinkOption>(arrayDeque0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      arrayDeque0.add(linkOption0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<LinkOption> range0 = Range.upTo(linkOption0, boundType0);
      boolean boolean0 = synchronizedCollection0.removeIf(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Object>>) arrayList0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 31);
      boolean boolean0 = synchronizedCollection0.removeIf(bloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer((-1517));
      hashSet0.add(integer0);
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(hashSet0, integer0);
      boolean boolean0 = synchronizedCollection0.removeAll(hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-349));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) integer0);
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.remove(integer0);
      assertFalse(synchronizedCollection0.contains((-349)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<LinkOption> linkedHashSet0 = new LinkedHashSet<LinkOption>();
      SynchronizedCollection<LinkOption> synchronizedCollection0 = new SynchronizedCollection<LinkOption>(linkedHashSet0);
      Iterator<LinkOption> iterator0 = synchronizedCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<LinkedList<LinkOption>> priorityQueue0 = new PriorityQueue<LinkedList<LinkOption>>(comparator0);
      SynchronizedCollection<LinkedList<LinkOption>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<LinkOption>>) priorityQueue0);
      Collection<LinkedList<LinkOption>> collection0 = synchronizedCollection0.decorated();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      TextStyle[] textStyleArray0 = new TextStyle[9];
      textStyleArray0[0] = textStyle0;
      textStyleArray0[1] = textStyle0;
      textStyleArray0[2] = textStyle0;
      textStyleArray0[3] = textStyle0;
      textStyleArray0[4] = textStyle0;
      textStyleArray0[5] = textStyle0;
      textStyleArray0[6] = textStyle0;
      textStyleArray0[7] = textStyleArray0[4];
      textStyleArray0[8] = textStyleArray0[1];
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyleArray0);
      SynchronizedCollection<TextStyle> synchronizedCollection0 = new SynchronizedCollection<TextStyle>(enumSet0);
      boolean boolean0 = synchronizedCollection0.add(textStyleArray0[6]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray((ThaiBuddhistEra[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(vector0);
      Integer integer0 = Integer.getInteger("org.apache.commons.io.file.CopyDirectoryVisitor", 0);
      synchronizedCollection0.add(integer0);
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray(linkOptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedCollection.synchronizedCollection((Collection<TreeSet<TextStyle>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      LinkedHashSet<TextStyle> linkedHashSet0 = new LinkedHashSet<TextStyle>();
      // Undeclared exception!
      try { 
        synchronizedCollection0.retainAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      SynchronizedCollection<LinkedList<Integer>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Integer>>) arrayList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      linkedList0.offerFirst(listIterator0);
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      TreeSet<TextStyle> treeSet0 = new TreeSet<TextStyle>();
      // Undeclared exception!
      try { 
        synchronizedCollection0.retainAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<TreeSet<TextStyle>> treeSet0 = new TreeSet<TreeSet<TextStyle>>();
      LinkedList<LinkedList<TextStyle>> linkedList0 = new LinkedList<LinkedList<TextStyle>>();
      SynchronizedCollection<LinkedList<TextStyle>> synchronizedCollection0 = new SynchronizedCollection<LinkedList<TextStyle>>(linkedList0, treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(linkedList0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      priorityQueue0.add(treeSet0);
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) priorityQueue0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.remove(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(arrayList0);
      synchronizedCollection0.add(arrayList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedHashSet<TextStyle> linkedHashSet0 = new LinkedHashSet<TextStyle>();
      SynchronizedCollection<TextStyle> synchronizedCollection0 = new SynchronizedCollection<TextStyle>(linkedHashSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.containsAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      SynchronizedCollection<LinkOption> synchronizedCollection0 = new SynchronizedCollection<LinkOption>(treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.containsAll(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PriorityQueue<TreeSet<TextStyle>> priorityQueue0 = new PriorityQueue<TreeSet<TextStyle>>();
      SynchronizedCollection<TreeSet<TextStyle>> synchronizedCollection0 = new SynchronizedCollection<TreeSet<TextStyle>>(priorityQueue0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.addAll(priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedHashSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(synchronizedCollection0);
      SynchronizedCollection<Object> synchronizedCollection1 = new SynchronizedCollection<Object>(priorityQueue0);
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      // Undeclared exception!
      try { 
        synchronizedCollection1.addAll(synchronizedCollection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.collection.SynchronizedCollection cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SynchronizedCollection<ResolverStyle> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<ResolverStyle>((Collection<ResolverStyle>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SynchronizedCollection<Object> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<Object>((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      boolean boolean0 = synchronizedCollection0.equals(treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      boolean boolean0 = synchronizedCollection0.equals(synchronizedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      PriorityQueue<LinkOption> priorityQueue0 = new PriorityQueue<LinkOption>();
      SynchronizedCollection<LinkOption> synchronizedCollection1 = new SynchronizedCollection<LinkOption>(priorityQueue0, synchronizedCollection0);
      boolean boolean0 = synchronizedCollection1.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(vector0);
      assertTrue(synchronizedCollection0.isEmpty());
      
      Integer integer0 = Integer.getInteger("org.apache.commons.io.file.CopyDirectoryVisitor", 0);
      synchronizedCollection0.add(integer0);
      boolean boolean0 = synchronizedCollection0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayDeque<LinkedList<Integer>> arrayDeque0 = new ArrayDeque<LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      arrayDeque0.add(linkedList0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(hashSet0);
      LinkedList<LinkOption> linkedList1 = new LinkedList<LinkOption>();
      synchronizedCollection0.addAll(arrayDeque0);
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      SynchronizedCollection<LinkOption> synchronizedCollection1 = new SynchronizedCollection<LinkOption>(linkedList1, standardDeleteOption0);
      boolean boolean0 = synchronizedCollection1.containsAll(synchronizedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-3124));
      linkedList0.add((Object) integer0);
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) synchronizedCollection0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.add(predicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(treeSet0);
      synchronizedCollection0.clear();
      assertTrue(synchronizedCollection0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(hashSet0);
      LinkedList<LinkOption> linkedList0 = new LinkedList<LinkOption>();
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      SynchronizedCollection<LinkOption> synchronizedCollection1 = new SynchronizedCollection<LinkOption>(linkedList0, standardDeleteOption0);
      boolean boolean0 = synchronizedCollection1.containsAll(synchronizedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedHashSet0);
      int int0 = synchronizedCollection0.size();
      assertFalse(synchronizedCollection0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(vector0);
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      LinkOption[] linkOptionArray1 = synchronizedCollection0.toArray(linkOptionArray0);
      assertSame(linkOptionArray0, linkOptionArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SynchronizedCollection<BoundType> synchronizedCollection0 = new SynchronizedCollection<BoundType>(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeIf((Predicate<? super BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<LinkOption> linkedList0 = new LinkedList<LinkOption>();
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      SynchronizedCollection<LinkOption> synchronizedCollection0 = new SynchronizedCollection<LinkOption>(linkedList0, standardDeleteOption0);
      Object[] objectArray0 = synchronizedCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(priorityQueue0);
      String string0 = synchronizedCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector<LinkOption> vector0 = new Vector<LinkOption>();
      SynchronizedCollection<LinkOption> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkOption>) vector0);
      synchronizedCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) treeSet0);
      boolean boolean0 = synchronizedCollection0.retainAll(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(hashSet0);
      TreeSet<StandardDeleteOption> treeSet0 = new TreeSet<StandardDeleteOption>();
      boolean boolean0 = synchronizedCollection0.removeAll(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-349));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      boolean boolean0 = synchronizedCollection0.remove(integer0);
      assertFalse(boolean0);
  }
}
