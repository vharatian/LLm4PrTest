/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:31:30 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.file.LinkOption;
import java.nio.file.StandardCopyOption;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FluentIterable_ESTest extends FluentIterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      FluentIterable<StandardCopyOption> fluentIterable0 = FluentIterable.of(standardCopyOption0);
      Iterable<StandardCopyOption>[] iterableArray0 = (Iterable<StandardCopyOption>[]) Array.newInstance(Iterable.class, 7);
      iterableArray0[0] = (Iterable<StandardCopyOption>) fluentIterable0;
      iterableArray0[1] = (Iterable<StandardCopyOption>) fluentIterable0;
      iterableArray0[2] = (Iterable<StandardCopyOption>) fluentIterable0;
      iterableArray0[3] = (Iterable<StandardCopyOption>) fluentIterable0;
      iterableArray0[4] = (Iterable<StandardCopyOption>) fluentIterable0;
      iterableArray0[5] = (Iterable<StandardCopyOption>) fluentIterable0;
      iterableArray0[6] = (Iterable<StandardCopyOption>) fluentIterable0;
      FluentIterable<StandardCopyOption> fluentIterable1 = fluentIterable0.zip(iterableArray0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = fluentIterable0.toArray(class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      boolean boolean0 = fluentIterable0.contains(integerArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Vector<Object> vector0 = new Vector<Object>(linkedHashSet0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append((Iterable<?>) vector0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.of((Iterable<Predicate<Object>>) arrayDeque0);
      // Undeclared exception!
      try { 
        fluentIterable0.skip((-287L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentIterable.of((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentIterable.of((Iterable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) linkedHashSet0);
      // Undeclared exception!
      try { 
        fluentIterable0.limit((-3276L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      // Undeclared exception!
      try { 
        fluentIterable0.get(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      FluentIterable<Object> fluentIterable0 = FluentIterable.of(object0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        fluentIterable0.forEach(closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-12931));
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.loop();
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.reverse();
      // Undeclared exception!
      fluentIterable2.eval();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        fluentIterable0.collate((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      // Undeclared exception!
      try { 
        fluentIterable0.append((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FluentIterable<Object> fluentIterable0 = FluentIterable.of(objectArray0);
      // Undeclared exception!
      try { 
        fluentIterable0.allMatch((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of((Iterable<Integer>) fluentIterable0);
      assertSame(fluentIterable0, fluentIterable1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      Iterator<Integer> iterator0 = fluentIterable0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      // Undeclared exception!
      try { 
        fluentIterable0.append((Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Object> fluentIterable1 = fluentIterable0.skip(0L);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.filter(equalPredicate0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FluentIterable<StandardCopyOption> fluentIterable0 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<? extends StandardCopyOption>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterables
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = FluentIterable.empty();
      Enumeration<Integer> enumeration0 = fluentIterable0.asEnumeration();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.limit(0L);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      FluentIterable<Object> fluentIterable1 = fluentIterable0.transform((Transformer<? super Integer, ?>) transformer0);
      assertNotNull(fluentIterable1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) linkOption0);
      // Undeclared exception!
      try { 
        fluentIterable0.get(1250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1249
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object[]) predicateArray0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.unmodifiable();
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      FluentIterable<Object> fluentIterable1 = FluentIterable.of((Object) fluentIterable0);
      FluentIterable<Object> fluentIterable2 = fluentIterable1.zip((Iterable<?>) arrayDeque0);
      FluentIterable<Object> fluentIterable3 = fluentIterable2.eval();
      assertNotSame(fluentIterable1, fluentIterable3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FluentIterable<StandardCopyOption> fluentIterable0 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable0.forEach((Closure<? super StandardCopyOption>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      boolean boolean0 = fluentIterable0.allMatch(equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) priorityQueue0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Integer>) fluentIterable0, (Comparator<? super Integer>) comparator0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FluentIterable<Object>[] fluentIterableArray0 = (FluentIterable<Object>[]) Array.newInstance(FluentIterable.class, 3);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) arrayList0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append((Object[]) fluentIterableArray0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Object> fluentIterable1 = fluentIterable0.collate((Iterable<?>) fluentIterable0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) priorityQueue0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.unique();
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) arrayList0);
      boolean boolean0 = fluentIterable0.contains(fluentIterable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FluentIterable<StandardCopyOption> fluentIterable0 = FluentIterable.empty();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      boolean boolean0 = fluentIterable0.anyMatch(nullIsTruePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<LinkOption> stack0 = new Stack<LinkOption>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(stack0);
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) linkedList0);
      String string0 = fluentIterable0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      FluentIterable<StandardCopyOption> fluentIterable0 = FluentIterable.of(standardCopyOption0);
      Class<StandardCopyOption> class0 = StandardCopyOption.class;
      StandardCopyOption[] standardCopyOptionArray0 = fluentIterable0.toArray(class0);
      assertEquals(1, standardCopyOptionArray0.length);
  }
}
