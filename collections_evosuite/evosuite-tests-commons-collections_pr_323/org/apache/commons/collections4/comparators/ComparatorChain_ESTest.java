/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:57:52 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.file.LinkOption;
import java.time.Month;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) null);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.addComparator(comparator0, true);
      assertEquals(2, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      comparatorChain0.setForwardSort(3002);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>(comparatorChain0, true);
      int int0 = comparatorChain1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4998L, (-1L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      Month month0 = Month.OCTOBER;
      comparatorChain0.compare(month0, linkedList0);
      boolean boolean0 = comparatorChain0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComparatorChain<ComparatorChain<CharBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<CharBuffer>>((List<Comparator<ComparatorChain<CharBuffer>>>) null, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1427L, 1L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.compare(comparator0, comparator0);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1481));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 804L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      Month month0 = Month.OCTOBER;
      comparatorChain0.compare(month0, linkedList0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-2099), comparator0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<ComparatorChain<Month>> comparatorChain0 = new ComparatorChain<ComparatorChain<Month>>((List<Comparator<ComparatorChain<Month>>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-794), (Comparator<ComparatorChain<Month>>) comparatorChain0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(23, (Comparator<ComparatorChain<Object>>) comparatorChain0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), (Comparator<Object>) comparatorChain0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1433L, (-8L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.compare(comparator0, comparator0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>((List<Comparator<ComparatorChain<Integer>>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(2778, (Comparator<ComparatorChain<Integer>>) comparatorChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      try { 
        comparatorChain0.setComparator(0, (Comparator<ComparatorChain<Object>>) comparatorChain0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      ComparatorChain<Comparator<Integer>> comparatorChain1 = new ComparatorChain<Comparator<Integer>>((Comparator<Comparator<Integer>>) null);
      // Undeclared exception!
      try { 
        comparatorChain1.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Function<Object, LinkOption> function0 = (Function<Object, LinkOption>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, LinkOption> converter0 = Converter.from((Function<? super Object, ? extends LinkOption>) function0, (Function<? super LinkOption, ?>) function0);
      Comparator<Object> comparator0 = Comparator.comparing((java.util.function.Function<? super Object, ? extends LinkOption>) converter0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        comparatorChain0.compare(object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, false);
      Comparator<Integer> comparator1 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator1);
      comparatorChain0.compare(comparator0, comparatorChain1);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator(comparator0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Comparator<ComparatorChain<Object>>> arrayList0 = new ArrayList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>(arrayList0, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator((Comparator<ComparatorChain<Object>>) comparatorChain0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = null;
      try {
        comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Comparator<Object>> arrayList0 = new ArrayList<Comparator<Object>>();
      arrayList0.add((Comparator<Object>) null);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(arrayList0);
      comparatorChain0.setComparator(0, (Comparator<Object>) comparatorChain0, false);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Comparator<Comparator<Object>>> linkedList0 = new LinkedList<Comparator<Comparator<Object>>>();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>(linkedList0, bitSet0);
      comparatorChain0.addComparator((Comparator<Comparator<Object>>) comparatorChain0, false);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparatorChain0);
      boolean boolean0 = comparatorChain1.equals(comparatorChain2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      comparatorChain0.setReverseSort(5);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Object object0 = new Object();
      boolean boolean0 = comparatorChain0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Comparator<Object>> arrayList0 = new ArrayList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(arrayList0, (BitSet) null);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1947L), 1066L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      Month month0 = Month.OCTOBER;
      comparatorChain0.compare(month0, linkedList0);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-1549));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1433L, (-8L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      int int0 = comparatorChain0.compare(comparator0, comparator0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4585L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      Month month0 = Month.OCTOBER;
      comparatorChain0.compare(month0, linkedList0);
      LinkedList<Comparator<Comparator<Object>>> linkedList1 = new LinkedList<Comparator<Comparator<Object>>>();
      Object object0 = new Object();
      int int0 = comparatorChain0.compare(object0, linkedList1);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComparatorChain<LinkOption> comparatorChain0 = new ComparatorChain<LinkOption>();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      try { 
        comparatorChain0.compare(linkOption0, linkOption0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4998L, (-1L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      Month month0 = Month.OCTOBER;
      comparatorChain0.compare(month0, linkedList0);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator(comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComparatorChain<LongBuffer> comparatorChain0 = new ComparatorChain<LongBuffer>();
      ComparatorChain<LongBuffer> comparatorChain1 = new ComparatorChain<LongBuffer>(comparatorChain0);
      comparatorChain1.setComparator(0, (Comparator<LongBuffer>) comparatorChain0, true);
      assertEquals(0, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null);
      comparatorChain0.setComparator(0, (Comparator<Object>) null);
      assertEquals(1, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      try { 
        comparatorChain0.setComparator((-1), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1481));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1481
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.addComparator(comparator0);
      assertEquals(2, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      boolean boolean0 = comparatorChain0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      int int0 = comparatorChain0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-1549));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1549
         //
         verifyException("java.util.BitSet", e);
      }
  }
}
