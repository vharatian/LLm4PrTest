/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:00:27 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import java.lang.reflect.Array;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.function.ToDoubleFunction;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TransformingComparator_ESTest extends TransformingComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<Transformer<ChronoUnit, ChronoUnit>> hashSet0 = new HashSet<Transformer<ChronoUnit, ChronoUnit>>();
      Transformer<ChronoUnit, ChronoUnit> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super ChronoUnit, ? extends ChronoUnit>>) hashSet0);
      TransformingComparator<ChronoUnit, ChronoUnit> transformingComparator0 = new TransformingComparator<ChronoUnit, ChronoUnit>(transformer0);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      ChronoUnit chronoUnit1 = ChronoUnit.DAYS;
      int int0 = transformingComparator0.compare(chronoUnit0, chronoUnit1);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<BoundType, BoundType> transformer0 = NOPTransformer.nopTransformer();
      TransformingComparator<BoundType, Comparable<BoundType>> transformingComparator0 = new TransformingComparator<BoundType, Comparable<BoundType>>(transformer0);
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = BoundType.CLOSED;
      int int0 = transformingComparator0.compare(boundType0, boundType1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<TransformingComparator<Integer, Integer>, Object> transformingComparator0 = new TransformingComparator<TransformingComparator<Integer, Integer>, Object>(transformer0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      TransformingComparator<Integer, Integer> transformingComparator1 = new TransformingComparator<Integer, Integer>(invokerTransformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(transformingComparator1, transformingComparator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ConstantTransformer<BoundType, BoundType> constantTransformer0 = new ConstantTransformer<BoundType, BoundType>(boundType0);
      TransformingComparator<BoundType, BoundType> transformingComparator0 = new TransformingComparator<BoundType, BoundType>(constantTransformer0);
      Transformer<TransformingComparator<BoundType, BoundType>, BoundType> transformer0 = ConstantTransformer.nullTransformer();
      TransformingComparator<TransformingComparator<BoundType, BoundType>, BoundType> transformingComparator1 = new TransformingComparator<TransformingComparator<BoundType, BoundType>, BoundType>(transformer0);
      // Undeclared exception!
      try { 
        transformingComparator1.compare(transformingComparator0, transformingComparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DefaultEquator<MockFile> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<MockFile> equalPredicate0 = new EqualPredicate<MockFile>(mockFile0, defaultEquator0);
      ConstantTransformer<MockFile, Predicate<MockFile>> constantTransformer0 = new ConstantTransformer<MockFile, Predicate<MockFile>>(equalPredicate0);
      TransformingComparator<MockFile, Predicate<MockFile>> transformingComparator0 = new TransformingComparator<MockFile, Predicate<MockFile>>(constantTransformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(mockFile0, mockFile0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.EqualPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      TransformingComparator<Integer, Object> transformingComparator0 = new TransformingComparator<Integer, Object>(transformer0, comparator0);
      TransformingComparator<Object, Object> transformingComparator1 = new TransformingComparator<Object, Object>(transformer0, comparator0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<Boolean, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Boolean, ? extends Integer>) null);
      TransformingComparator<Boolean, Integer> transformingComparator0 = new TransformingComparator<Boolean, Integer>(transformer0);
      TransformingComparator<Predicate<Integer>, Integer> transformingComparator1 = new TransformingComparator<Predicate<Integer>, Integer>((Transformer<? super Predicate<Integer>, ? extends Integer>) null);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Predicate<Object>> hashMap0 = new HashMap<Object, Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Predicate<Object>>) hashMap0);
      Integer integer0 = new Integer(1682554634);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformingComparator<Predicate<Object>, Integer> transformingComparator0 = new TransformingComparator<Predicate<Object>, Integer>(constantTransformer0);
      TransformingComparator<TransformingComparator<Integer, Integer>, Predicate<Object>> transformingComparator1 = new TransformingComparator<TransformingComparator<Integer, Integer>, Predicate<Object>>(transformer0, transformingComparator0);
      Object object0 = new Object();
      boolean boolean0 = transformingComparator1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformingComparator<TransformingComparator<Object, Object>, Predicate<Object>> transformingComparator0 = new TransformingComparator<TransformingComparator<Object, Object>, Predicate<Object>>((Transformer<? super TransformingComparator<Object, Object>, ? extends Predicate<Object>>) null);
      boolean boolean0 = transformingComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ConstantTransformer<BoundType, BoundType> constantTransformer0 = new ConstantTransformer<BoundType, BoundType>(boundType0);
      TransformingComparator<BoundType, BoundType> transformingComparator0 = new TransformingComparator<BoundType, BoundType>(constantTransformer0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 0);
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      TransformingComparator<Object, Object> transformingComparator0 = new TransformingComparator<Object, Object>(chainedTransformer0);
      TransformingComparator<Object, Object> transformingComparator1 = new TransformingComparator<Object, Object>(chainedTransformer0, transformingComparator0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 0);
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      TransformingComparator<Object, Object> transformingComparator0 = new TransformingComparator<Object, Object>(chainedTransformer0);
      TransformingComparator<Closure<Integer>, Object> transformingComparator1 = new TransformingComparator<Closure<Integer>, Object>(chainedTransformer0, transformingComparator0);
      transformingComparator1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransformingComparator<Object, Integer> transformingComparator0 = new TransformingComparator<Object, Integer>((Transformer<? super Object, ? extends Integer>) null, (Comparator<Integer>) null);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSet<Transformer<ChronoUnit, ChronoUnit>> hashSet0 = new HashSet<Transformer<ChronoUnit, ChronoUnit>>();
      Transformer<ChronoUnit, ChronoUnit> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super ChronoUnit, ? extends ChronoUnit>>) hashSet0);
      TransformingComparator<ChronoUnit, ChronoUnit> transformingComparator0 = new TransformingComparator<ChronoUnit, ChronoUnit>(transformer0);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      int int0 = transformingComparator0.compare(chronoUnit0, chronoUnit0);
      assertEquals(0, int0);
  }
}
