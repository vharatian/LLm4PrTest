/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:34:01 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.collect.BoundType;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.nio.file.LinkOption;
import java.time.DayOfWeek;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahEra;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.IterableSortedMap;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.collections4.OrderedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableBidiMap;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.CaseInsensitiveMap;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.DefaultedMap;
import org.apache.commons.collections4.map.FixedSizeSortedMap;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LazyMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.apache.commons.collections4.map.PredicatedMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DualTreeBidiMap<HijrahEra, HijrahEra> dualTreeBidiMap0 = new DualTreeBidiMap<HijrahEra, HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      ConstantTransformer<HijrahEra, HijrahEra> constantTransformer0 = new ConstantTransformer<HijrahEra, HijrahEra>(hijrahEra0);
      SortedMap<HijrahEra, HijrahEra> sortedMap0 = MapUtils.transformedSortedMap((SortedMap<HijrahEra, HijrahEra>) dualTreeBidiMap0, (Transformer<? super HijrahEra, ? extends HijrahEra>) constantTransformer0, (Transformer<? super HijrahEra, ? extends HijrahEra>) null);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      LinkedMap<Object, Predicate<Object>> linkedMap0 = new LinkedMap<Object, Predicate<Object>>();
      DualTreeBidiMap<Object, Predicate<Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Predicate<Object>>(linkedMap0);
      Set<Predicate<Object>> set0 = dualTreeBidiMap0.values();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) set0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IterableMap<Object, Object> iterableMap0 = MapUtils.predicatedMap((Map<Object, Object>) referenceMap0, (Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedMap<Object, Predicate<Object>> linkedMap0 = new LinkedMap<Object, Predicate<Object>>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Byte, Byte> referenceMap0 = new ReferenceMap<Byte, Byte>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Byte byte0 = new Byte((byte) (-3));
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Byte, ?>) linkedMap0, byte0, (Map<?, ?>) referenceMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator1);
      Byte byte0 = new Byte((byte) (-60));
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, (Map<?, ?>) dualTreeBidiMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long((byte) (-128));
      SingletonMap<Long, Long> singletonMap0 = new SingletonMap<Long, Long>(long0, long0);
      DualTreeBidiMap<Long, Long> dualTreeBidiMap0 = new DualTreeBidiMap<Long, Long>(singletonMap0);
      Transformer<Long, Long> transformer0 = InvokerTransformer.invokerTransformer("}");
      SortedMap<Long, Long> sortedMap0 = MapUtils.transformedSortedMap((SortedMap<Long, Long>) dualTreeBidiMap0, (Transformer<? super Long, ? extends Long>) transformer0, (Transformer<? super Long, ? extends Long>) transformer0);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Byte, Byte> referenceMap0 = new ReferenceMap<Byte, Byte>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (byte)32, (byte)32);
      Map<Byte, Byte> map0 = MapUtils.invertMap((Map<Byte, Byte>) referenceMap0);
      Object[] objectArray0 = new Object[3];
      MapUtils.putAll(map0, objectArray0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((byte) (-128));
      SingletonMap<Long, Long> singletonMap0 = new SingletonMap<Long, Long>(long0, long0);
      IterableMap<Long, Long> iterableMap0 = MapUtils.predicatedMap((Map<Long, Long>) singletonMap0, (Predicate<? super Long>) null, (Predicate<? super Long>) null);
      assertFalse(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator1);
      Byte byte0 = new Byte((byte)83);
      dualTreeBidiMap0.put(byte0, byte0);
      Transformer<Byte, Byte> transformer0 = ConstantTransformer.constantTransformer(byte0);
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Byte, Byte>) dualTreeBidiMap0, (Transformer<? super Byte, ? extends Byte>) transformer0);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      dualTreeBidiMap0.put(chronoUnit0, chronoUnit0);
      ConstantFactory<ChronoUnit> constantFactory0 = new ConstantFactory<ChronoUnit>(chronoUnit0);
      SortedMap<ChronoUnit, ChronoUnit> sortedMap0 = MapUtils.lazySortedMap((SortedMap<ChronoUnit, ChronoUnit>) dualTreeBidiMap0, (Factory<? extends ChronoUnit>) constantFactory0);
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Transformer<ChronoUnit, ChronoUnit> transformer0 = ExceptionTransformer.exceptionTransformer();
      SingletonMap<Transformer<ChronoUnit, ChronoUnit>, ChronoUnit> singletonMap0 = new SingletonMap<Transformer<ChronoUnit, ChronoUnit>, ChronoUnit>(transformer0, chronoUnit0);
      Short short0 = new Short((short)0);
      Short short1 = MapUtils.getShort((Map<? super Transformer<ChronoUnit, ChronoUnit>, ?>) singletonMap0, transformer0, short0);
      assertEquals((short)0, (short)short1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(timeUnit0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(703, closure0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DefaultedMap<Object, LinkedList<Object>> defaultedMap0 = new DefaultedMap<Object, LinkedList<Object>>(linkedList0);
      LinkedList<Object> linkedList1 = MapUtils.getObject((Map<? super Object, LinkedList<Object>>) defaultedMap0, (Object) forClosure0);
      assertFalse(linkedList1.contains(703));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-2595)).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator1).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator1);
      Byte byte0 = dualTreeBidiMap0.get((Object) null);
      dualTreeBidiMap0.put((Byte) null, (Byte) null);
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, (Map<?, ?>) dualTreeBidiMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedMap<LinkOption, LinkOption> linkedMap0 = new LinkedMap<LinkOption, LinkOption>();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Long long0 = new Long((byte)3);
      Long long1 = MapUtils.getLong((Map<? super LinkOption, ?>) linkedMap0, linkOption0, long0);
      assertEquals(3L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator1);
      Byte byte0 = new Byte((byte) (-60));
      Integer integer0 = new Integer((byte) (-60));
      Integer integer1 = MapUtils.getInteger((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, integer0);
      assertEquals((-60), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      FactoryTransformer<Object, LinkedList<Object>> factoryTransformer0 = new FactoryTransformer<Object, LinkedList<Object>>(constantFactory0);
      DefaultedMap<Object, LinkedList<Object>> defaultedMap0 = new DefaultedMap<Object, LinkedList<Object>>((Transformer<? super Object, ? extends LinkedList<Object>>) factoryTransformer0);
      ExceptionFactory<Chronology> exceptionFactory0 = (ExceptionFactory<Chronology>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      int int0 = MapUtils.getIntValue((Map<? super ExceptionFactory<Chronology>, ?>) defaultedMap0, exceptionFactory0, (-1952));
      assertEquals((-1952), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TreeMap<Byte, Byte> treeMap0 = new TreeMap<Byte, Byte>();
      OrderedMap<Byte, Byte> orderedMap0 = MapUtils.orderedMap((Map<Byte, Byte>) treeMap0);
      PassiveExpiringMap<Byte, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Byte>((-9223372036854775808L), timeUnit0, orderedMap0);
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte) (-107));
      passiveExpiringMap0.put(byte0, byte1);
      int int0 = MapUtils.getIntValue((Map<? super Byte, ?>) passiveExpiringMap0, byte0);
      assertEquals((-107), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator1).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator1);
      ArrayList<Transformer<Byte, Byte>> arrayList0 = new ArrayList<Transformer<Byte, Byte>>();
      Transformer<Byte, Byte> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Byte, ? extends Byte>>) arrayList0);
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Byte, Byte>) dualTreeBidiMap0, (Transformer<? super Byte, ? extends Byte>) transformer0);
      Byte byte0 = new Byte((byte) (-3));
      Float float0 = MapUtils.getFloat((Map<? super Byte, ?>) sortedMap0, byte0);
      assertEquals((-3.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<Long, Long> linkedMap0 = new LinkedMap<Long, Long>(9);
      Long long0 = new Long(9);
      double double0 = MapUtils.getDoubleValue((Map<? super Long, ?>) linkedMap0, long0, (double) 9);
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      double double0 = MapUtils.getDoubleValue((Map<? super IOCase, ?>) null, iOCase0, (double)  (-60));
      assertEquals((-60.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Converter<Byte, Byte> converter0 = Converter.identity();
      Byte byte1 = MapUtils.getByte((Map<? super Byte, ?>) null, byte0, (Function<Byte, Byte>) converter0);
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Properties properties0 = MapUtils.toProperties((Map<TimeUnit, LinkedList<LinkedList>>) null);
      Byte byte0 = new Byte((byte)77);
      com.google.common.base.Function<Object, Byte> function0 = (com.google.common.base.Function<Object, Byte>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Byte> converter0 = Converter.from((com.google.common.base.Function<? super Object, ? extends Byte>) function0, (com.google.common.base.Function<? super Byte, ?>) function0);
      // Undeclared exception!
      try { 
        MapUtils.getByte((Map<? super Object, ?>) properties0, (Object) properties0, (Function<Object, Byte>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      UnmodifiableMapEntry<TimeUnit, TimeUnit> unmodifiableMapEntry0 = new UnmodifiableMapEntry<TimeUnit, TimeUnit>(timeUnit0, timeUnit0);
      SingletonMap<TimeUnit, TimeUnit> singletonMap0 = new SingletonMap<TimeUnit, TimeUnit>((Map.Entry<? extends TimeUnit, ? extends TimeUnit>) unmodifiableMapEntry0);
      IterableMap<TimeUnit, TimeUnit> iterableMap0 = MapUtils.fixedSizeMap((Map<TimeUnit, TimeUnit>) singletonMap0);
      assertEquals(1, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode>(comparator0, comparator0);
      Map<Locale.FilteringMode, Locale.FilteringMode> map0 = MapUtils.emptyIfNull((Map<Locale.FilteringMode, Locale.FilteringMode>) dualTreeBidiMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1272)).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      Comparator<LinkedList<Byte>> comparator1 = (Comparator<LinkedList<Byte>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2147483645).when(comparator1).compare(any(java.util.LinkedList.class) , any(java.util.LinkedList.class));
      DualTreeBidiMap<Byte, LinkedList<Byte>> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, LinkedList<Byte>>(comparator0, comparator1);
      Byte byte0 = new Byte((byte)1);
      dualTreeBidiMap0.put(byte0, (LinkedList<Byte>) null);
      Map<Byte, LinkedList<Byte>> map0 = MapUtils.emptyIfNull((Map<Byte, LinkedList<Byte>>) dualTreeBidiMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableSortedMap((SortedMap<Object, ? extends Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.transformedSortedMap((SortedMap<HijrahEra, HijrahEra>) null, (Transformer<? super HijrahEra, ? extends HijrahEra>) null, (Transformer<? super HijrahEra, ? extends HijrahEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.synchronizedSortedMap((SortedMap<Predicate<Byte>, Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.synchronizedMap((Map<Predicate<Byte>, Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      Predicate<Predicate<Object>> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Predicate<Object>, Boolean>) transformer0);
      try { 
        MapUtils.safeAddToMap((Map<? super LinkedList<Object>, Object>) null, linkedList0, (Object) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeBidiMap<Byte, Byte> treeBidiMap0 = new TreeBidiMap<Byte, Byte>();
      BidiMap<Byte, Byte> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Byte, ? extends Byte>) treeBidiMap0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<Byte, Byte>) bidiMap0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.UnmodifiableBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<Long, LinkedList<LinkedList>>) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) dualTreeBidiMap0;
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<Byte, Byte>) dualTreeBidiMap0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Predicate<ChronoUnit> predicate0 = EqualPredicate.equalPredicate(chronoUnit0);
      // Undeclared exception!
      try { 
        MapUtils.predicatedMap((Map<ChronoUnit, ChronoUnit>) null, (Predicate<? super ChronoUnit>) predicate0, (Predicate<? super ChronoUnit>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      LinkedMap<Object, Predicate<Object>> linkedMap0 = new LinkedMap<Object, Predicate<Object>>();
      LinkedMap<LinkedList<Predicate<Object>>, Object> linkedMap1 = new LinkedMap<LinkedList<Predicate<Object>>, Object>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedMap0);
      Object object0 = MapUtils.getObject((Map<LinkedList<Predicate<Object>>, Object>) linkedMap1, linkedList0, (Object) identityPredicate0);
      referenceMap0.put(object0, identityPredicate0);
      // Undeclared exception!
      try { 
        MapUtils.predicatedMap((Map<Object, Object>) referenceMap0, (Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) identityPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      FactoryTransformer<Object, Object> factoryTransformer0 = new FactoryTransformer<Object, Object>(constantFactory0);
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Object, Object>) null, (Transformer<? super Object, ?>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Class<ResolverStyle>[] classArray0 = (Class<ResolverStyle>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<ResolverStyle, Predicate<ResolverStyle>> invokerTransformer0 = new InvokerTransformer<ResolverStyle, Predicate<ResolverStyle>>("", classArray0, objectArray0);
      // Undeclared exception!
      try { 
        MapUtils.lazyMap((Map<ResolverStyle, Predicate<ResolverStyle>>) null, (Transformer<? super ResolverStyle, ? extends Predicate<ResolverStyle>>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.iterableMap((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, LinkedList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.invertMap((Map<LinkedList<Object>, Map<Object, LinkedList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      com.google.common.base.Function<FormatStyle, String> function0 = (com.google.common.base.Function<FormatStyle, String>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.format.FormatStyle.class));
      com.google.common.base.Function<String, FormatStyle> function1 = (com.google.common.base.Function<String, FormatStyle>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      Converter<FormatStyle, String> converter0 = Converter.from((com.google.common.base.Function<? super FormatStyle, ? extends String>) function0, (com.google.common.base.Function<? super String, ? extends FormatStyle>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getString((Map<? super FormatStyle, ?>) null, formatStyle0, (Function<FormatStyle, String>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CaseInsensitiveMap<Long, Long> caseInsensitiveMap0 = new CaseInsensitiveMap<Long, Long>(1369);
      DualTreeBidiMap<Long, Long> dualTreeBidiMap0 = new DualTreeBidiMap<Long, Long>(caseInsensitiveMap0);
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super Long, ?>) dualTreeBidiMap0, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DualTreeBidiMap<LinkedList<Float>, Float> dualTreeBidiMap0 = new DualTreeBidiMap<LinkedList<Float>, Float>();
      DualTreeBidiMap<Object, Object> dualTreeBidiMap1 = new DualTreeBidiMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, Object>) dualTreeBidiMap1);
      // Undeclared exception!
      try { 
        MapUtils.getLong((Map<? super Object, ?>) fixedSizeSortedMap0, (Object) dualTreeBidiMap0, (Long) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CaseInsensitiveMap<Long, Long> caseInsensitiveMap0 = new CaseInsensitiveMap<Long, Long>(421);
      DualTreeBidiMap<Long, Long> dualTreeBidiMap0 = new DualTreeBidiMap<Long, Long>(caseInsensitiveMap0);
      // Undeclared exception!
      try { 
        MapUtils.getLong((Map<? super Long, ?>) dualTreeBidiMap0, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 4);
      Transformer<LinkedList<Long>, Long> transformer0 = InvokerTransformer.invokerTransformer("Yz+T$[Kc} :d@|;Jsp", (Class<?>[]) classArray0, (Object[]) classArray0);
      DefaultedMap<LinkedList<Long>, Long> defaultedMap0 = new DefaultedMap<LinkedList<Long>, Long>(transformer0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Float float0 = new Float((float) (byte)32);
      // Undeclared exception!
      try { 
        MapUtils.getFloat((Map<? super LinkedList<Long>, ?>) defaultedMap0, linkedList0, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Yz+T$[Kc} :d@|;Jsp' on 'class java.util.LinkedList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashedMap<Long, Long> hashedMap0 = new HashedMap<Long, Long>(8);
      Factory<Long> factory0 = ExceptionFactory.exceptionFactory();
      LazyMap<Long, Long> lazyMap0 = LazyMap.lazyMap((Map<Long, Long>) hashedMap0, (Factory<? extends Long>) factory0);
      Long long0 = new Long((byte) (-59));
      // Undeclared exception!
      try { 
        MapUtils.getFloat((Map<? super Long, ?>) lazyMap0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeBidiMap<ResolverStyle, ResolverStyle> treeBidiMap0 = new TreeBidiMap<ResolverStyle, ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      com.google.common.base.Function<ResolverStyle, Double> function0 = (com.google.common.base.Function<ResolverStyle, Double>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.format.ResolverStyle.class));
      com.google.common.base.Function<Double, ResolverStyle> function1 = (com.google.common.base.Function<Double, ResolverStyle>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      Converter<ResolverStyle, Double> converter0 = Converter.from((com.google.common.base.Function<? super ResolverStyle, ? extends Double>) function0, (com.google.common.base.Function<? super Double, ? extends ResolverStyle>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super ResolverStyle, ?>) treeBidiMap0, resolverStyle0, (Function<ResolverStyle, Double>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      Long long0 = new Long(0);
      com.google.common.base.Function<Long, Byte> function0 = (com.google.common.base.Function<Long, Byte>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyLong());
      com.google.common.base.Function<Byte, Long> function1 = (com.google.common.base.Function<Byte, Long>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      Converter<Long, Byte> converter0 = Converter.from((com.google.common.base.Function<? super Long, ? extends Byte>) function0, (com.google.common.base.Function<? super Byte, ? extends Long>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getByteValue((Map<? super Long, ?>) referenceIdentityMap0, long0, (Function<Long, Byte>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>();
      DualTreeBidiMap<Object, Object> dualTreeBidiMap1 = new DualTreeBidiMap<Object, Object>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        MapUtils.getBooleanValue((Map<? super Object, ?>) dualTreeBidiMap1, (Object) dualTreeBidiMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(comparator0, comparator0);
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, (int) (byte)3, (int) (byte)3);
      com.google.common.base.Function<CharBuffer, Boolean> function0 = (com.google.common.base.Function<CharBuffer, Boolean>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.nio.CharBuffer.class));
      com.google.common.base.Function<Boolean, CharBuffer> function1 = (com.google.common.base.Function<Boolean, CharBuffer>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      Converter<CharBuffer, Boolean> converter0 = Converter.from((com.google.common.base.Function<? super CharBuffer, ? extends Boolean>) function0, (com.google.common.base.Function<? super Boolean, ? extends CharBuffer>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getBoolean((Map<? super CharBuffer, ?>) dualTreeBidiMap0, charBuffer0, (Function<CharBuffer, Boolean>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeSortedMap((SortedMap<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedMap<Long, Long> linkedMap0 = new LinkedMap<Long, Long>(9);
      ArrayList<Long> arrayList0 = new ArrayList<Long>(1325);
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 1);
      Transformer<Long, Long> transformer0 = InvokerTransformer.invokerTransformer("x", (Class<?>[]) classArray0, (Object[]) classArray0);
      MapUtils.populateMap((Map<Long, Long>) linkedMap0, (Iterable<? extends Long>) arrayList0, transformer0, transformer0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CaseInsensitiveMap<Long, Long> caseInsensitiveMap0 = new CaseInsensitiveMap<Long, Long>();
      DualTreeBidiMap<Long, Long> dualTreeBidiMap0 = new DualTreeBidiMap<Long, Long>(caseInsensitiveMap0);
      boolean boolean0 = MapUtils.isEmpty(dualTreeBidiMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CaseInsensitiveMap<Byte, Byte> caseInsensitiveMap0 = new CaseInsensitiveMap<Byte, Byte>(421);
      Byte byte0 = new Byte((byte)32);
      String string0 = MapUtils.getString((Map<? super Byte, ?>) caseInsensitiveMap0, byte0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CaseInsensitiveMap<Long, Long> caseInsensitiveMap0 = new CaseInsensitiveMap<Long, Long>();
      DualTreeBidiMap<Long, Long> dualTreeBidiMap0 = new DualTreeBidiMap<Long, Long>(caseInsensitiveMap0);
      Long long0 = new Long(1L);
      Number number0 = MapUtils.getNumber((Map<? super Long, ?>) dualTreeBidiMap0, long0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ReferenceIdentityMap<DayOfWeek, DayOfWeek> referenceIdentityMap0 = new ReferenceIdentityMap<DayOfWeek, DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      Long long0 = MapUtils.getLong((Map<? super DayOfWeek, ?>) referenceIdentityMap0, dayOfWeek0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<LinkedList<ChronoUnit>, ChronoUnit> referenceMap0 = new ReferenceMap<LinkedList<ChronoUnit>, ChronoUnit>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 8, 7070.09F, true);
      Integer integer0 = MapUtils.getInteger((Map<? super LinkedList<ChronoUnit>, ?>) referenceMap0, (LinkedList<ChronoUnit>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(1041L, timeUnit0);
      Long long0 = new Long(3224L);
      Double double0 = MapUtils.getDouble((Map<? super Long, ?>) passiveExpiringMap0, long0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedMap<Object, Object> predicatedMap0 = PredicatedMap.predicatedMap((Map<Object, Object>) passiveExpiringMap0, (Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Byte byte0 = MapUtils.getByte((Map<? super Object, ?>) predicatedMap0, (Object) predicatedMap0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Properties properties0 = MapUtils.toProperties((Map<TimeUnit, LinkedList<LinkedList>>) null);
      com.google.common.base.Function<Object, Byte> function0 = (com.google.common.base.Function<Object, Byte>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Byte> converter0 = Converter.from((com.google.common.base.Function<? super Object, ? extends Byte>) function0, (com.google.common.base.Function<? super Byte, ?>) function0);
      // Undeclared exception!
      try { 
        MapUtils.getByte((Map<? super Object, ?>) properties0, (Object) properties0, (Function<Object, Byte>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>(65);
      int int0 = MapUtils.size(lRUMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>();
      Object[] objectArray0 = new Object[0];
      Map<Byte, Byte> map0 = MapUtils.putAll((Map<Byte, Byte>) lRUMap0, objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>();
      Map<Byte, Byte> map0 = MapUtils.putAll((Map<Byte, Byte>) lRUMap0, (Object[]) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)124);
      linkedMap0.put(byte0, byte0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2{Ou4^!>3}5");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object object0 = new Object();
      MapUtils.debugPrint(mockPrintStream0, object0, linkedMap0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)124);
      linkedMap0.put(byte0, byte0);
      boolean boolean0 = MapUtils.isNotEmpty(linkedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CaseInsensitiveMap<Long, Long> caseInsensitiveMap0 = new CaseInsensitiveMap<Long, Long>();
      boolean boolean0 = MapUtils.isNotEmpty(caseInsensitiveMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = MapUtils.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Byte, Byte> referenceMap0 = new ReferenceMap<Byte, Byte>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (byte)32, (byte)32);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      Object object0 = MapUtils.getObject((Map<ResolverStyle, Object>) null, resolverStyle0, (Object) referenceMap0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CaseInsensitiveMap<Long, Long> caseInsensitiveMap0 = new CaseInsensitiveMap<Long, Long>(2324, 2324);
      Long long0 = new Long(2324);
      Long long1 = MapUtils.getObject((Map<? super Long, Long>) caseInsensitiveMap0, long0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Long long0 = new Long((-1L));
      Short short0 = MapUtils.getShort((Map<? super Long, ?>) null, long0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      FactoryTransformer<Object, LinkedList<Object>> factoryTransformer0 = new FactoryTransformer<Object, LinkedList<Object>>(constantFactory0);
      DefaultedMap<Object, LinkedList<Object>> defaultedMap0 = new DefaultedMap<Object, LinkedList<Object>>((Transformer<? super Object, ? extends LinkedList<Object>>) factoryTransformer0);
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super Object, ?>) defaultedMap0, (Object) defaultedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<LinkedList<Byte>, Byte> referenceMap0 = new ReferenceMap<LinkedList<Byte>, Byte>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 4, 4, true);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      referenceMap0.put(linkedList0, byte0);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super LinkedList<Byte>, ?>) referenceMap0, linkedList0, (Function<LinkedList<Byte>, Boolean>) null);
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Map<AbstractMap.SimpleImmutableEntry<Map, LinkedList>, LinkedList<Map>> map0 = MapUtils.emptyIfNull((Map<AbstractMap.SimpleImmutableEntry<Map, LinkedList>, LinkedList<Map>>) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TreeMap<Byte, Byte> treeMap0 = new TreeMap<Byte, Byte>();
      OrderedMap<Byte, Byte> orderedMap0 = MapUtils.orderedMap((Map<Byte, Byte>) treeMap0);
      PassiveExpiringMap<Byte, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Byte>((-9223372036854775808L), timeUnit0, orderedMap0);
      Byte byte0 = new Byte((byte)0);
      passiveExpiringMap0.put(byte0, byte0);
      Byte byte1 = new Byte((byte)0);
      int int0 = MapUtils.getIntValue((Map<? super Byte, ?>) passiveExpiringMap0, byte1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      BoundType boundType0 = BoundType.OPEN;
      float float0 = MapUtils.getFloatValue((Map<? super BoundType, ?>) treeMap0, boundType0, (float) 124);
      assertEquals(124.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>(comparator0, comparator0);
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      ConstantFactory<ChronoUnit> constantFactory0 = new ConstantFactory<ChronoUnit>(chronoUnit0);
      SortedMap<ChronoUnit, ChronoUnit> sortedMap0 = MapUtils.lazySortedMap((SortedMap<ChronoUnit, ChronoUnit>) dualTreeBidiMap0, (Factory<? extends ChronoUnit>) constantFactory0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      CompositeMap<Byte, Byte> compositeMap0 = new CompositeMap<Byte, Byte>(linkedMap0, linkedMap0);
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(compositeMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        MapUtils.getShortValue((Map<? super Object, ?>) dualTreeBidiMap0, object0, (short)860);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      SortedMap<Object, Object> sortedMap0 = MapUtils.predicatedSortedMap((SortedMap<Object, Object>) treeMap0, (Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean boolean0 = MapUtils.getBoolean((Map<? super LinkedList<Byte>, ?>) null, linkedList0, (Function<LinkedList<Byte>, Boolean>) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      CompositeMap<Byte, Byte> compositeMap0 = new CompositeMap<Byte, Byte>(linkedMap0, linkedMap0);
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(compositeMap0);
      SortedMap<Object, Object> sortedMap0 = MapUtils.unmodifiableSortedMap((SortedMap<Object, ?>) dualTreeBidiMap0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      float float0 = MapUtils.getFloatValue((Map<? super Locale.Category, ?>) null, locale_Category0, (Function<Locale.Category, Float>) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(1);
      Map<Object, Object> map0 = MapUtils.unmodifiableMap((Map<?, ?>) lRUMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode>(comparator0, comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Byte byte0 = new Byte((byte)61);
      Byte byte1 = MapUtils.getByte((Map<? super Locale.FilteringMode, ?>) dualTreeBidiMap0, locale_FilteringMode0, byte0);
      assertEquals((byte)61, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<LinkedList<Byte>, Byte> hashMap0 = new HashMap<LinkedList<Byte>, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      double double0 = MapUtils.getDoubleValue((Map<? super LinkedList<Byte>, ?>) hashMap0, linkedList0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(comparator0, comparator0);
      com.google.common.base.Function<Object, Boolean> function0 = (com.google.common.base.Function<Object, Boolean>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Boolean> converter0 = Converter.from((com.google.common.base.Function<? super Object, ? extends Boolean>) function0, (com.google.common.base.Function<? super Boolean, ?>) function0);
      // Undeclared exception!
      try { 
        MapUtils.getBooleanValue((Map<? super Object, ?>) dualTreeBidiMap0, (Object) dualTreeBidiMap0, (Function<Object, Boolean>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      FactoryTransformer<Object, LinkedList<Object>> factoryTransformer0 = new FactoryTransformer<Object, LinkedList<Object>>(constantFactory0);
      DefaultedMap<Object, LinkedList<Object>> defaultedMap0 = new DefaultedMap<Object, LinkedList<Object>>((Transformer<? super Object, ? extends LinkedList<Object>>) factoryTransformer0);
      IterableMap<Object, LinkedList<Object>> iterableMap0 = MapUtils.transformedMap((Map<Object, LinkedList<Object>>) defaultedMap0, (Transformer<? super Object, ?>) factoryTransformer0, (Transformer<? super LinkedList<Object>, ? extends LinkedList<Object>>) factoryTransformer0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>(65);
      Closure<Byte> closure0 = ForClosure.forClosure(6, (Closure<? super Byte>) null);
      Transformer<Byte, Byte> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Byte>) closure0);
      IterableMap<Byte, Byte> iterableMap0 = MapUtils.lazyMap((Map<Byte, Byte>) lRUMap0, (Transformer<? super Byte, ? extends Byte>) transformer0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(1);
      Float float0 = new Float((float) 1);
      String string0 = MapUtils.getString((Map<? super Float, ?>) lRUMap0, float0, "npR/5b&}-r`z");
      assertEquals("npR/5b&}-r`z", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LRUMap<CharBuffer, CharBuffer> lRUMap0 = new LRUMap<CharBuffer, CharBuffer>((byte)61, 627.4156F);
      PassiveExpiringMap<CharBuffer, CharBuffer> passiveExpiringMap0 = new PassiveExpiringMap<CharBuffer, CharBuffer>(9223372036854775807L, lRUMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      com.google.common.base.Function<CharBuffer, Long> function0 = (com.google.common.base.Function<CharBuffer, Long>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.nio.CharBuffer.class));
      com.google.common.base.Function<Long, CharBuffer> function1 = (com.google.common.base.Function<Long, CharBuffer>) mock(com.google.common.base.Function.class, new ViolatedAssumptionAnswer());
      Converter<CharBuffer, Long> converter0 = Converter.from((com.google.common.base.Function<? super CharBuffer, ? extends Long>) function0, (com.google.common.base.Function<? super Long, ? extends CharBuffer>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getLong((Map<? super CharBuffer, ?>) passiveExpiringMap0, charBuffer0, (Function<CharBuffer, Long>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinkedMap<Object, Predicate<Object>> linkedMap0 = new LinkedMap<Object, Predicate<Object>>();
      short short0 = MapUtils.getShortValue((Map<? super Transformer<AbstractMap.SimpleImmutableEntry, LinkedList>, ?>) linkedMap0, (Transformer<AbstractMap.SimpleImmutableEntry, LinkedList>) null, (Function<Transformer<AbstractMap.SimpleImmutableEntry, LinkedList>, Short>) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Comparator<LinkedList<Float>> comparator0 = (Comparator<LinkedList<Float>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Float> comparator1 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<LinkedList<Float>, Float> dualTreeBidiMap0 = new DualTreeBidiMap<LinkedList<Float>, Float>(comparator0, comparator1);
      IterableSortedMap<LinkedList<Float>, Float> iterableSortedMap0 = MapUtils.iterableSortedMap((SortedMap<LinkedList<Float>, Float>) dualTreeBidiMap0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>(3226);
      Transformer<Float, LinkedList<Float>> transformer0 = InvokerTransformer.invokerTransformer("");
      MapUtils.populateMap((Map<LinkedList<Float>, Float>) iterableSortedMap0, (Iterable<? extends Float>) arrayList0, transformer0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PassiveExpiringMap<Chronology, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Chronology, Byte>();
      Locale locale0 = Locale.ROOT;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      Float float0 = new Float((-1304.4F));
      Number number0 = MapUtils.getNumber((Map<? super Chronology, ?>) passiveExpiringMap0, chronology0, (Number) float0);
      assertEquals((-1304.4F), number0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Byte> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Byte>(1L);
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>(3135);
      PassiveExpiringMap<Byte, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Byte>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, linkedMap0);
      Byte byte0 = new Byte((byte)65);
      Short short0 = new Short((byte)65);
      Short short1 = MapUtils.getShort((Map<? super Byte, ?>) passiveExpiringMap0, byte0, short0);
      assertEquals((short)65, (short)short1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(comparator0, comparator0);
      Predicate<Long>[] predicateArray0 = (Predicate<Long>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Long> allPredicate0 = new AllPredicate<Long>(predicateArray0);
      short short0 = MapUtils.getShortValue((Map<? super Predicate<Long>, ?>) dualTreeBidiMap0, (Predicate<Long>) allPredicate0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      double double0 = MapUtils.getDoubleValue((Map<? super Closure<AbstractMap.SimpleImmutableEntry>, ?>) linkedMap0, (Closure<AbstractMap.SimpleImmutableEntry>) null, (Function<Closure<AbstractMap.SimpleImmutableEntry>, Double>) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Boolean boolean0 = new Boolean((String) null);
      Boolean boolean1 = MapUtils.getBoolean((Map<? super LinkedList<Float>, ?>) null, linkedList0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedMap<LinkedList<Byte>, Byte> linkedMap0 = new LinkedMap<LinkedList<Byte>, Byte>();
      byte byte0 = MapUtils.getByteValue((Map<? super LinkedList<Byte>, ?>) linkedMap0, linkedList0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      ArrayList<Transformer<Byte, Byte>> arrayList0 = new ArrayList<Transformer<Byte, Byte>>();
      Transformer<Byte, Byte> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Byte, ? extends Byte>>) arrayList0);
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Byte, Byte>) dualTreeBidiMap0, (Transformer<? super Byte, ? extends Byte>) transformer0);
      Byte byte0 = new Byte((byte)3);
      MapUtils.getFloat((Map<? super Byte, ?>) sortedMap0, byte0);
      assertEquals(1, sortedMap0.size());
      assertEquals(1, dualTreeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DualTreeBidiMap<IOCase, IOCase> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, IOCase>();
      IOCase iOCase0 = IOCase.SENSITIVE;
      double double0 = MapUtils.getDoubleValue((Map<? super IOCase, ?>) dualTreeBidiMap0, iOCase0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      CaseInsensitiveMap<Byte, Byte> caseInsensitiveMap0 = new CaseInsensitiveMap<Byte, Byte>(421);
      Byte byte0 = Byte.valueOf((byte)32);
      Integer integer0 = new Integer(421);
      Integer integer1 = MapUtils.getInteger((Map<? super Byte, ?>) caseInsensitiveMap0, byte0, integer0);
      assertEquals(421, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      DualTreeBidiMap<Long, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Long, Object>();
      SortedMap<Long, Object> sortedMap0 = MapUtils.synchronizedSortedMap((SortedMap<Long, Object>) dualTreeBidiMap0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Byte> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Byte>(1L);
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>(3135);
      PassiveExpiringMap<Byte, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Byte>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, linkedMap0);
      Byte byte0 = new Byte((byte)65);
      byte byte1 = MapUtils.getByteValue((Map<? super Byte, ?>) passiveExpiringMap0, byte0, (byte)76);
      assertEquals((byte)76, byte1);
  }
}
