/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:07:25 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.function.Consumer;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.FilterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilterIterator_ESTest extends FilterIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0, (Equator<Locale.Category>) defaultEquator0);
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      filterIterator0.next();
      FilterIterator<Object> filterIterator1 = new FilterIterator<Object>(iterator0);
      filterIterator1.remove();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      FilterIterator<Locale.FilteringMode> filterIterator0 = new FilterIterator<Locale.FilteringMode>(iterator0);
      Predicate<? super Locale.FilteringMode> predicate0 = filterIterator0.getPredicate();
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>();
      Iterator<? extends Locale.Category> iterator0 = filterIterator0.getIterator();
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Integer integer0 = Integer.getInteger("wa1Lw7+oi?qlsn'R-", 1);
      linkedList0.add(integer0);
      FilterIterator<Integer> filterIterator0 = new FilterIterator<Integer>(iterator0);
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Iterator<Locale.Category> iterator0 = serviceLoader0.iterator();
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0);
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ServiceLoader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FilterIterator<Predicate<Locale.Category>> filterIterator0 = new FilterIterator<Predicate<Locale.Category>>();
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      // Undeclared exception!
      try { 
        filterIterator0.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      priorityQueue0.add(iterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      FilterIterator<Object> filterIterator0 = new FilterIterator<Object>(iterator0, predicate0);
      // Undeclared exception!
      try { 
        filterIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Transformer<Object, Object>> stack0 = new Stack<Transformer<Object, Object>>();
      Iterator<Transformer<Object, Object>> iterator0 = stack0.iterator();
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>((Object) null);
      stack0.add((Transformer<Object, Object>) constantTransformer0);
      FilterIterator<Transformer<Object, Object>> filterIterator0 = new FilterIterator<Transformer<Object, Object>>(iterator0);
      // Undeclared exception!
      try { 
        filterIterator0.hasNext();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterIterator<Transformer<Locale.Category, Object>> filterIterator0 = new FilterIterator<Transformer<Locale.Category, Object>>();
      // Undeclared exception!
      try { 
        filterIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0, (Equator<Locale.Category>) defaultEquator0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      filterIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0, (Equator<Locale.Category>) defaultEquator0);
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      filterIterator0.hasNext();
      FilterIterator<Object> filterIterator1 = new FilterIterator<Object>(filterIterator0);
      // Undeclared exception!
      try { 
        filterIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() cannot be called
         //
         verifyException("org.apache.commons.collections4.iterators.FilterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      FilterIterator<Object> filterIterator0 = new FilterIterator<Object>(iterator0);
      // Undeclared exception!
      try { 
        filterIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.RegularEnumSet$EnumSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      FilterIterator<Integer> filterIterator0 = new FilterIterator<Integer>(iterator0);
      // Undeclared exception!
      try { 
        filterIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0, (Equator<Locale.Category>) defaultEquator0);
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      filterIterator0.next();
      boolean boolean0 = filterIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0);
      // Undeclared exception!
      try { 
        filterIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0);
      Iterator<? extends Locale.Category> iterator1 = filterIterator0.getIterator();
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      FilterIterator<Object> filterIterator0 = new FilterIterator<Object>(iterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      filterIterator0.setPredicate(predicate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0, (Equator<Locale.Category>) defaultEquator0);
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      Predicate<? super Locale.Category> predicate1 = filterIterator0.getPredicate();
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Locale.Category> predicate0 = EqualPredicate.equalPredicate(locale_Category0, (Equator<Locale.Category>) defaultEquator0);
      FilterIterator<Locale.Category> filterIterator0 = new FilterIterator<Locale.Category>(iterator0, predicate0);
      filterIterator0.hasNext();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      filterIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FilterIterator<Integer> filterIterator0 = new FilterIterator<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      filterIterator0.setIterator(listIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
