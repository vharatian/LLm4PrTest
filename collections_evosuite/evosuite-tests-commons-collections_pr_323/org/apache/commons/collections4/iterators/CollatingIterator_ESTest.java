/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:05:15 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.DayOfWeek;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.CollatingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollatingIterator_ESTest extends CollatingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3389), 33).when(comparator0).compare(any() , any());
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      collatingIterator0.addIterator(iterator0);
      Object object0 = collatingIterator0.next();
      assertEquals(DayOfWeek.TUESDAY, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 6);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.iterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, 8202);
      iteratorArray0[1] = (Iterator<Object>) collatingIterator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator1, iteratorArray0[1], iterator0);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 6);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Object>(comparator0, iteratorArray0[1], iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      collatingIterator0.setIterator(1, iterator0);
      assertFalse(linkedList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.addLast((Integer) null);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      iteratorArray0[0] = iterator0;
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>(comparator0, iteratorArray0);
      Integer integer0 = collatingIterator0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DayOfWeek>[] iteratorArray0 = (Iterator<DayOfWeek>[]) Array.newInstance(Iterator.class, 1);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      iteratorArray0[0] = iterator0;
      CollatingIterator<DayOfWeek> collatingIterator0 = new CollatingIterator<DayOfWeek>(comparator0, iteratorArray0);
      boolean boolean0 = collatingIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) dayOfWeek0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.addIterator(iterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator0.forEachRemaining(consumer0);
      int int0 = collatingIterator0.getIteratorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      Comparator<? super Integer> comparator0 = collatingIterator0.getComparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(10, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(2, (Iterator<?>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-3), collatingIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.setComparator((Comparator<? super Integer>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.range(dayOfWeek0, dayOfWeek0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.addIterator(iterator0);
      collatingIterator0.next();
      collatingIterator0.remove();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.RegularEnumSet$EnumSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.addIterator(collatingIterator0);
      // Undeclared exception!
      collatingIterator0.next();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<DayOfWeek> stack0 = new Stack<DayOfWeek>();
      ListIterator<DayOfWeek> listIterator0 = stack0.listIterator();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      stack0.add(dayOfWeek0);
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, listIterator0, listIterator0);
      // Undeclared exception!
      try { 
        collatingIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.range(dayOfWeek0, dayOfWeek0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      Iterator<DayOfWeek> iterator1 = enumSet0.iterator();
      collatingIterator0.addIterator(iterator1);
      collatingIterator0.addIterator(iterator0);
      // Undeclared exception!
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.addIterator(collatingIterator0);
      // Undeclared exception!
      collatingIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Iterator<DayOfWeek>[] iteratorArray0 = (Iterator<DayOfWeek>[]) Array.newInstance(Iterator.class, 1);
      CollatingIterator<Object> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CollatingIterator<DayOfWeek> collatingIterator0 = new CollatingIterator<DayOfWeek>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator0.setComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CollatingIterator<DayOfWeek> collatingIterator0 = new CollatingIterator<DayOfWeek>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator((Iterator<? extends DayOfWeek>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.getIteratorIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value has been returned yet
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CollatingIterator<DayOfWeek> collatingIterator0 = new CollatingIterator<DayOfWeek>();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, 1291);
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, 1313);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      linkedList0.add((Object) dayOfWeek0);
      Object object0 = new Object();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      collatingIterator0.addIterator(iterator0);
      collatingIterator0.addIterator(iterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<DayOfWeek> collatingIterator0 = new CollatingIterator<DayOfWeek>(comparator0, 21);
      collatingIterator0.addIterator(collatingIterator0);
      List<Iterator<? extends DayOfWeek>> list0 = collatingIterator0.getIterators();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<DayOfWeek> collatingIterator1 = new CollatingIterator<DayOfWeek>(comparator1, list0);
      assertFalse(collatingIterator1.equals((Object)collatingIterator0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, 1291);
      Comparator<? super Object> comparator1 = collatingIterator0.getComparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CollatingIterator<DayOfWeek> collatingIterator0 = new CollatingIterator<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, collatingIterator0, collatingIterator0);
      collatingIterator1.addIterator(iterator0);
      collatingIterator1.next();
      int int0 = collatingIterator1.getIteratorIndex();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0);
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(1, iterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
