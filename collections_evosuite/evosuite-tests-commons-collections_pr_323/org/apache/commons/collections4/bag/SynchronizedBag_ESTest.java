/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:38:38 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.format.ResolverStyle;
import java.util.Comparator;
import java.util.Set;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SynchronizedBag_ESTest extends SynchronizedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      Object object0 = new Object();
      collectionSortedBag0.add((Object) synchronizedSortedBag0);
      assertTrue(collectionSortedBag0.contains(0));
      
      boolean boolean0 = synchronizedSortedBag0.remove(object0, 1850);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<ResolverStyle> comparator0 = (Comparator<ResolverStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      int int0 = synchronizedSortedBag0.getCount(treeBag0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeBag0.add(resolverStyle0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      int int0 = synchronizedSortedBag0.getCount(synchronizedSortedBag0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<ResolverStyle> comparator0 = (Comparator<ResolverStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      Bag<ResolverStyle> bag0 = synchronizedSortedBag0.getBag();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeBag0.add(resolverStyle0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      Bag<ResolverStyle> bag0 = synchronizedSortedBag0.getBag();
      assertTrue(bag0.contains(resolverStyle0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<ResolverStyle> comparator0 = (Comparator<ResolverStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      Object object0 = new Object();
      boolean boolean0 = synchronizedSortedBag0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SortedBag<ResolverStyle> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<ResolverStyle>) treeBag0);
      SynchronizedBag<ResolverStyle> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<ResolverStyle>) sortedBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      synchronizedBag0.add(resolverStyle0, 0);
      assertFalse(synchronizedBag0.contains(resolverStyle0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedBag.synchronizedBag((Bag<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SortedBag<ResolverStyle> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<ResolverStyle>) treeBag0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = new SynchronizedSortedBag<ResolverStyle>(sortedBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.remove((Object) resolverStyle0, (-1010));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = new SynchronizedBag<ResolverStyle>(treeBag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.remove((Object) null, 1487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<ResolverStyle>) treeBag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.remove((Object) treeBag0, 517);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = new SynchronizedBag<ResolverStyle>(treeBag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.getCount(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = new SynchronizedBag<ResolverStyle>(treeBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      treeBag0.add(resolverStyle0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(58, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag1 = new TreeBag<Object>(comparator0);
      treeBag1.add((Object) null);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      collectionSortedBag0.add((Object) synchronizedBag0);
      treeBag0.add(resolverStyle0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.equals(synchronizedBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = new SynchronizedBag<ResolverStyle>(treeBag0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag1 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      collectionSortedBag0.add((Object) synchronizedBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      treeBag0.add(resolverStyle0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(collectionSortedBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.equals(synchronizedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeBag<HashBag<Integer>> treeBag0 = new TreeBag<HashBag<Integer>>();
      Transformer<Object, HashBag<Integer>> transformer0 = InvokerTransformer.invokerTransformer("ok%1");
      TransformedSortedBag<HashBag<Integer>> transformedSortedBag0 = new TransformedSortedBag<HashBag<Integer>>(treeBag0, transformer0);
      SynchronizedSortedBag<HashBag<Integer>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<HashBag<Integer>>) transformedSortedBag0);
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.add(hashBag0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'ok%1' on 'class org.apache.commons.collections4.bag.HashBag' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      PredicatedSortedBag<ResolverStyle> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<ResolverStyle>) synchronizedSortedBag0, (Predicate<? super ResolverStyle>) nonePredicate0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag1 = new SynchronizedSortedBag<ResolverStyle>(predicatedSortedBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      // Undeclared exception!
      try { 
        synchronizedSortedBag1.add(resolverStyle0, 0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      SynchronizedBag<Object> synchronizedBag0 = SynchronizedBag.synchronizedBag(bag0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      // Undeclared exception!
      try { 
        synchronizedBag0.add((Object) resolverStyle0, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.add((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.add((Object) treeBag0, 36);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      SynchronizedBag<ResolverStyle> synchronizedBag0 = null;
      try {
        synchronizedBag0 = new SynchronizedBag<ResolverStyle>(synchronizedSortedBag0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SynchronizedBag<ResolverStyle> synchronizedBag0 = null;
      try {
        synchronizedBag0 = new SynchronizedBag<ResolverStyle>((Bag<ResolverStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = new SynchronizedBag<ResolverStyle>(treeBag0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag1 = new TreeBag<Object>(comparator0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag1);
      boolean boolean0 = synchronizedSortedBag0.equals(synchronizedBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<ResolverStyle> comparator0 = (Comparator<ResolverStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      boolean boolean0 = synchronizedSortedBag0.equals(synchronizedSortedBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedBag<ResolverStyle> synchronizedBag0 = new SynchronizedBag<ResolverStyle>(treeBag0);
      TreeBag<Transformer<Integer, ResolverStyle>> treeBag1 = new TreeBag<Transformer<Integer, ResolverStyle>>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(synchronizedBag0);
      PredicatedSortedBag<Transformer<Integer, ResolverStyle>> predicatedSortedBag0 = new PredicatedSortedBag<Transformer<Integer, ResolverStyle>>(treeBag1, equalPredicate0);
      SynchronizedBag<Transformer<Integer, ResolverStyle>> synchronizedBag1 = SynchronizedBag.synchronizedBag((Bag<Transformer<Integer, ResolverStyle>>) predicatedSortedBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      ConstantTransformer<Integer, ResolverStyle> constantTransformer0 = new ConstantTransformer<Integer, ResolverStyle>(resolverStyle0);
      // Undeclared exception!
      try { 
        synchronizedBag1.add((Transformer<Integer, ResolverStyle>) constantTransformer0, 1073741823);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.ConstantTransformer@f763aadd' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(treeBag0);
      Set<Object> set0 = synchronizedBag0.uniqueSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      TreeBag<Predicate<Integer>> treeBag0 = new TreeBag<Predicate<Integer>>();
      SynchronizedBag<Predicate<Integer>> synchronizedBag0 = new SynchronizedBag<Predicate<Integer>>(treeBag0, resolverStyle0);
      synchronizedBag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.getCount((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>();
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = new SynchronizedSortedBag<ResolverStyle>(treeBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      boolean boolean0 = synchronizedSortedBag0.remove((Object) resolverStyle0, (-1010));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ResolverStyle> treeBag0 = new TreeBag<ResolverStyle>(comparator0);
      SynchronizedSortedBag<ResolverStyle> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<ResolverStyle>) treeBag0);
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      boolean boolean0 = synchronizedSortedBag0.add(resolverStyle0, 0);
      assertFalse(boolean0);
  }
}
