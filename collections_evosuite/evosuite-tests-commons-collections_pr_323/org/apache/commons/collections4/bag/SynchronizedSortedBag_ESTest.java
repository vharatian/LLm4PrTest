/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:40:45 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DayOfWeek;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.TreeSet;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.MapTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SynchronizedSortedBag_ESTest extends SynchronizedSortedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      synchronizedSortedBag0.add((Object) null);
      Object object0 = synchronizedSortedBag0.last();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeBag<DayOfWeek> treeBag0 = new TreeBag<DayOfWeek>((Comparator<? super DayOfWeek>) null);
      Integer integer0 = new Integer(34);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      treeBag0.add(dayOfWeek0);
      SynchronizedSortedBag<DayOfWeek> synchronizedSortedBag0 = new SynchronizedSortedBag<DayOfWeek>(treeBag0, integer0);
      Object object0 = synchronizedSortedBag0.last();
      assertSame(object0, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Transformer<Boolean, Boolean>> treeBag0 = new TreeBag<Transformer<Boolean, Boolean>>(comparator0);
      SynchronizedSortedBag<Transformer<Boolean, Boolean>> synchronizedSortedBag0 = new SynchronizedSortedBag<Transformer<Boolean, Boolean>>(treeBag0);
      SortedBag<Transformer<Boolean, Boolean>> sortedBag0 = synchronizedSortedBag0.getSortedBag();
      assertEquals(0, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Integer integer0 = Integer.valueOf(0);
      treeSet0.add(integer0);
      TreeBag<Object> treeBag0 = new TreeBag<Object>(treeSet0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      SortedBag<Object> sortedBag0 = synchronizedSortedBag0.getSortedBag();
      assertEquals(1, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(0);
      transformedSortedBag0.add(integer0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      Object object0 = synchronizedSortedBag0.first();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      treeBag0.add((Object) locale_FilteringMode0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      Object object0 = synchronizedSortedBag0.first();
      assertSame(object0, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<TransformedSortedBag<Object>> treeBag0 = new TreeBag<TransformedSortedBag<Object>>();
      SynchronizedSortedBag<TransformedSortedBag<Object>> synchronizedSortedBag0 = new SynchronizedSortedBag<TransformedSortedBag<Object>>(treeBag0, treeBag0);
      Comparator<? super TransformedSortedBag<Object>> comparator0 = synchronizedSortedBag0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      SynchronizedSortedBag<Predicate<Object>> synchronizedSortedBag0 = new SynchronizedSortedBag<Predicate<Object>>(treeBag0);
      Comparator<? super Predicate<Object>> comparator1 = synchronizedSortedBag0.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Predicate<Predicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.last();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashBag<TransformedSortedBag<Integer>> hashBag0 = new HashBag<TransformedSortedBag<Integer>>();
      SynchronizedSortedBag<TransformedSortedBag<Integer>> synchronizedSortedBag0 = new SynchronizedSortedBag<TransformedSortedBag<Integer>>(hashBag0, hashBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.getSortedBag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.HashBag cannot be cast to org.apache.commons.collections4.SortedBag
         //
         verifyException("org.apache.commons.collections4.bag.SynchronizedSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(hashBag0, hashBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.first();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.HashBag cannot be cast to org.apache.commons.collections4.SortedBag
         //
         verifyException("org.apache.commons.collections4.bag.SynchronizedSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SynchronizedSortedBag<TransformedSortedBag<Object>> synchronizedSortedBag0 = null;
      try {
        synchronizedSortedBag0 = new SynchronizedSortedBag<TransformedSortedBag<Object>>((SortedBag<TransformedSortedBag<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SynchronizedSortedBag<DayOfWeek> synchronizedSortedBag0 = null;
      try {
        synchronizedSortedBag0 = new SynchronizedSortedBag<DayOfWeek>((Bag<DayOfWeek>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashBag<TransformedSortedBag<InstanceofPredicate>> hashBag0 = new HashBag<TransformedSortedBag<InstanceofPredicate>>();
      SynchronizedSortedBag<TransformedSortedBag<InstanceofPredicate>> synchronizedSortedBag0 = new SynchronizedSortedBag<TransformedSortedBag<InstanceofPredicate>>(hashBag0, hashBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.comparator();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.HashBag cannot be cast to org.apache.commons.collections4.SortedBag
         //
         verifyException("org.apache.commons.collections4.bag.SynchronizedSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.first();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashBag<Boolean> hashBag0 = new HashBag<Boolean>();
      SynchronizedSortedBag<Boolean> synchronizedSortedBag0 = new SynchronizedSortedBag<Boolean>(hashBag0, hashBag0);
      // Undeclared exception!
      try { 
        synchronizedSortedBag0.last();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.HashBag cannot be cast to org.apache.commons.collections4.SortedBag
         //
         verifyException("org.apache.commons.collections4.bag.SynchronizedSortedBag", e);
      }
  }
}
