/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:43:09 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.Range;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.Duration;
import java.time.Month;
import java.time.ZoneOffset;
import java.time.chrono.HijrahEra;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.SortedBidiMap;
import org.apache.commons.collections4.bidimap.AbstractDualBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableBidiMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractDualBidiMap_ESTest extends AbstractDualBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Locale.FilteringMode> comparator1 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, Locale.FilteringMode>(comparator0, comparator1);
      dualTreeBidiMap0.keySet();
      Collection<Locale.FilteringMode> collection0 = dualTreeBidiMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Locale.FilteringMode> comparator1 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, Locale.FilteringMode>(comparator0, comparator1);
      dualTreeBidiMap0.mapIterator();
      Collection<Locale.FilteringMode> collection0 = dualTreeBidiMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualTreeBidiMap0.putAll(dualLinkedHashBidiMap0);
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DualHashBidiMap<TextStyle, Locale.FilteringMode> dualHashBidiMap0 = new DualHashBidiMap<TextStyle, Locale.FilteringMode>();
      Set<Map.Entry<TextStyle, Locale.FilteringMode>> set0 = (Set<Map.Entry<TextStyle, Locale.FilteringMode>>)dualHashBidiMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DualHashBidiMap<ChronoUnit, ThaiBuddhistEra> dualHashBidiMap0 = new DualHashBidiMap<ChronoUnit, ThaiBuddhistEra>();
      ArrayDeque<ChronoUnit> arrayDeque0 = new ArrayDeque<ChronoUnit>();
      Iterator<ChronoUnit> iterator0 = arrayDeque0.iterator();
      AbstractDualBidiMap.KeySetIterator<ChronoUnit> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<ChronoUnit>(iterator0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DualLinkedHashBidiMap<Locale.Category, Locale.Category> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Locale.Category, Locale.Category>();
      AbstractDualBidiMap.KeySet<Locale.Category> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Locale.Category>(dualLinkedHashBidiMap0);
      Iterator<Locale.Category> iterator0 = abstractDualBidiMap_KeySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      Iterator<Map.Entry<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>>> iterator0 = (Iterator<Map.Entry<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualLinkedHashBidiMap0);
      SortedBidiMap<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>> sortedBidiMap0 = dualTreeBidiMap0.inverseBidiMap();
      DualHashBidiMap<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>> dualHashBidiMap0 = new DualHashBidiMap<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>>(sortedBidiMap0);
      AbstractDualBidiMap.EntrySetIterator<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<ChronoUnit, AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>>(iterator0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // entry
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(8192);
      arrayList0.add(integer0);
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      TreeBidiMap<Integer, Charset> treeBidiMap0 = new TreeBidiMap<Integer, Charset>();
      DualLinkedHashBidiMap<Charset, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Charset, Integer>((Map<Charset, Integer>) null, treeBidiMap0, treeBidiMap0);
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(listIterator0, dualLinkedHashBidiMap0);
      Integer integer1 = abstractDualBidiMap_ValuesIterator0.next();
      assertEquals(8192, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DualLinkedHashBidiMap<TextStyle, AbstractDualBidiMap.KeySet<TextStyle>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<TextStyle, AbstractDualBidiMap.KeySet<TextStyle>>();
      TextStyle textStyle0 = TextStyle.FULL;
      AbstractDualBidiMap.KeySet<TextStyle> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<TextStyle>(dualLinkedHashBidiMap0);
      dualLinkedHashBidiMap0.put(textStyle0, abstractDualBidiMap_KeySet0);
      AbstractDualBidiMap.BidiMapIterator<TextStyle, AbstractDualBidiMap.KeySet<TextStyle>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<TextStyle, AbstractDualBidiMap.KeySet<TextStyle>>(dualLinkedHashBidiMap0);
      TextStyle textStyle1 = abstractDualBidiMap_BidiMapIterator0.next();
      assertSame(textStyle1, textStyle0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit>(chronoUnit0, chronoUnit0);
      AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(abstractMap_SimpleEntry1);
      dualHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, chronoUnit0);
      int int0 = dualHashBidiMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DualHashBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualHashBidiMap0 = new DualHashBidiMap<Locale.FilteringMode, Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      dualHashBidiMap0.put(locale_FilteringMode0, locale_FilteringMode0);
      BidiMap<Locale.FilteringMode, Locale.FilteringMode> bidiMap0 = dualHashBidiMap0.inverseBidiMap();
      assertEquals(1, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      dualHashBidiMap0.get(minguoEra0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TextStyle, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TextStyle, Integer>(comparator0, comparator1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      Iterator<Integer> iterator0 = dualTreeBidiMap0.createValuesIterator(listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DualTreeBidiMap<Integer, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, ChronoUnit>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      MapIterator<Integer, Integer> mapIterator0 = dualLinkedHashBidiMap0.mapIterator();
      Iterator<Integer> iterator0 = dualTreeBidiMap0.createKeySetIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Locale.FilteringMode, Locale.FilteringMode>, MinguoEra> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Locale.FilteringMode, Locale.FilteringMode>, MinguoEra>();
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Locale.FilteringMode, Locale.FilteringMode>, MinguoEra>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Locale.FilteringMode, Locale.FilteringMode>, MinguoEra>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Locale.FilteringMode, Locale.FilteringMode>, MinguoEra>> iterator1 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Locale.FilteringMode, Locale.FilteringMode>, MinguoEra>>)dualLinkedHashBidiMap0.createEntrySetIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeBidiMap<ChronoUnit, Locale.FilteringMode> treeBidiMap0 = new TreeBidiMap<ChronoUnit, Locale.FilteringMode>();
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<ChronoUnit> comparator1 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Locale.FilteringMode, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.FilteringMode, ChronoUnit>(comparator0, comparator1);
      BidiMap<Locale.FilteringMode, ChronoUnit> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Locale.FilteringMode, ? extends ChronoUnit>) dualTreeBidiMap0);
      DualHashBidiMap<ChronoUnit, Locale.FilteringMode> dualHashBidiMap0 = new DualHashBidiMap<ChronoUnit, Locale.FilteringMode>(treeBidiMap0, bidiMap0, bidiMap0);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        dualHashBidiMap0.put(chronoUnit0, locale_FilteringMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.UnmodifiableBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      HashMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> hashMap0 = new HashMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>();
      DualHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit>();
      DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> dualHashBidiMap1 = new DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>(hashMap0, (Map<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit>) null, dualHashBidiMap0);
      AbstractDualBidiMap.KeySet<ChronoUnit> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<ChronoUnit>(dualHashBidiMap1);
      // Undeclared exception!
      try { 
        dualHashBidiMap1.put(chronoUnit0, abstractDualBidiMap_KeySet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Month> comparator0 = (Comparator<Month>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any(java.time.Month.class) , any(java.time.Month.class));
      DualTreeBidiMap<Month, Month> dualTreeBidiMap0 = new DualTreeBidiMap<Month, Month>(comparator0, comparator0);
      Month month0 = Month.DECEMBER;
      SortedMap<Month, Month> sortedMap0 = dualTreeBidiMap0.subMap(month0, month0);
      DualHashBidiMap<Month, Month> dualHashBidiMap0 = new DualHashBidiMap<Month, Month>(sortedMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.put(month0, month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, AbstractDualBidiMap.KeySet<ChronoUnit>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, AbstractDualBidiMap.KeySet<ChronoUnit>>();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(chronoUnit0, chronoUnit0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.put(abstractMap_SimpleImmutableEntry0, (AbstractDualBidiMap.KeySet<ChronoUnit>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(chronoUnit0, chronoUnit0);
      DualTreeBidiMap<AbstractDualBidiMap.KeySet<TextStyle>, AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractDualBidiMap.KeySet<TextStyle>, AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.getKey(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualHashBidiMap0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(chronoUnit0, chronoUnit0);
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(abstractMap_SimpleImmutableEntry1, chronoUnit0);
      abstractDualBidiMap_BidiMapIterator0.last = (Map.Entry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>) abstractMap_SimpleEntry0;
      DualTreeBidiMap<AbstractDualBidiMap.KeySet<TextStyle>, AbstractDualBidiMap.KeySet<BoundType>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractDualBidiMap.KeySet<TextStyle>, AbstractDualBidiMap.KeySet<BoundType>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.get(abstractDualBidiMap_BidiMapIterator0.last);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Comparator<ThaiBuddhistEra> comparator0 = (Comparator<ThaiBuddhistEra>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ThaiBuddhistEra, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ThaiBuddhistEra, ChronoUnit>(comparator0, (Comparator<? super ChronoUnit>) null);
      DualHashBidiMap<ChronoUnit, ThaiBuddhistEra> dualHashBidiMap0 = new DualHashBidiMap<ChronoUnit, ThaiBuddhistEra>((Map<ChronoUnit, ThaiBuddhistEra>) null, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.equals(chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBidiMap<Integer, Charset> treeBidiMap0 = new TreeBidiMap<Integer, Charset>();
      DualLinkedHashBidiMap<Charset, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Charset, Integer>((Map<Charset, Integer>) null, treeBidiMap0, treeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeBidiMap<FormatStyle, FormatStyle> treeBidiMap0 = new TreeBidiMap<FormatStyle, FormatStyle>();
      DualLinkedHashBidiMap<FormatStyle, FormatStyle> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<FormatStyle, FormatStyle>(treeBidiMap0);
      DualHashBidiMap<FormatStyle, FormatStyle> dualHashBidiMap0 = new DualHashBidiMap<FormatStyle, FormatStyle>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.createKeySetIterator((Iterator<FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      // Undeclared exception!
      try { 
        dualHashBidiMap0.createEntrySetIterator((Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> hashMap0 = new HashMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>();
      DualHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit>();
      DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> dualHashBidiMap1 = new DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>(hashMap0, (Map<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit>) null, dualHashBidiMap0);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        dualHashBidiMap1.containsValue(chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualLinkedHashBidiMap0);
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>();
      MapIterator<ChronoUnit, ChronoUnit> mapIterator0 = dualTreeBidiMap0.mapIterator();
      MapIterator<ChronoUnit, ChronoUnit> mapIterator1 = dualTreeBidiMap0.mapIterator();
      assertNotSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = dualHashBidiMap0.keySet();
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set1 = dualHashBidiMap0.keySet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, textStyle0);
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle>(hashMap0);
      TextStyle textStyle1 = dualLinkedHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, textStyle0);
      assertEquals(TextStyle.FULL, textStyle1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle>();
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle>(hashMap0);
      boolean boolean0 = dualLinkedHashBidiMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, textStyle0);
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>, TextStyle>(hashMap0);
      boolean boolean0 = dualLinkedHashBidiMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<AbstractDualBidiMap.KeySet<Integer>, AbstractDualBidiMap.KeySet<ResolverStyle>> hashMap0 = new HashMap<AbstractDualBidiMap.KeySet<Integer>, AbstractDualBidiMap.KeySet<ResolverStyle>>();
      DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ResolverStyle>, AbstractDualBidiMap.KeySet<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ResolverStyle>, AbstractDualBidiMap.KeySet<Integer>>();
      DualHashBidiMap<AbstractDualBidiMap.KeySet<Integer>, AbstractDualBidiMap.KeySet<ResolverStyle>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.KeySet<Integer>, AbstractDualBidiMap.KeySet<ResolverStyle>>(hashMap0, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      dualHashBidiMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      dualHashBidiMap0.clear();
      assertTrue(dualHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.setValue(chronoUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualHashBidiMap0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(chronoUnit0, chronoUnit0);
      AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(abstractMap_SimpleImmutableEntry1, chronoUnit0);
      abstractDualBidiMap_BidiMapIterator0.last = (Map.Entry<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>) abstractMap_SimpleEntry0;
      abstractDualBidiMap_BidiMapIterator0.setValue(chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>();
      AbstractDualBidiMap.BidiMapIterator<ChronoUnit, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<ChronoUnit, ChronoUnit>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>>(dualHashBidiMap0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>(hijrahEra0, locale_FilteringMode0);
      AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>(abstractMap_SimpleImmutableEntry0);
      DualHashBidiMap<Locale.FilteringMode, HijrahEra> dualHashBidiMap1 = new DualHashBidiMap<Locale.FilteringMode, HijrahEra>();
      AbstractDualBidiMap.KeySet<Locale.FilteringMode> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Locale.FilteringMode>(dualHashBidiMap1);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>>(abstractMap_SimpleImmutableEntry1, abstractDualBidiMap_KeySet0);
      abstractDualBidiMap_BidiMapIterator0.last = (Map.Entry<AbstractMap.SimpleImmutableEntry<HijrahEra, Locale.FilteringMode>, AbstractDualBidiMap.KeySet<Locale.FilteringMode>>) abstractMap_SimpleEntry0;
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      AbstractMap.SimpleImmutableEntry<ChronoUnit, Locale.FilteringMode> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, Locale.FilteringMode>(chronoUnit0, locale_FilteringMode0);
      DualTreeBidiMap<ChronoUnit, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, Locale.FilteringMode>();
      ChronoUnit chronoUnit1 = ChronoUnit.CENTURIES;
      dualTreeBidiMap0.put(chronoUnit1, locale_FilteringMode0);
      AbstractDualBidiMap.MapEntry<ChronoUnit, Locale.FilteringMode> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<ChronoUnit, Locale.FilteringMode>(abstractMap_SimpleImmutableEntry0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_MapEntry0.setValue(locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use setValue() when the object being set is already in the map
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      AbstractMap.SimpleImmutableEntry<ChronoUnit, Locale.FilteringMode> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ChronoUnit, Locale.FilteringMode>(chronoUnit0, locale_FilteringMode0);
      DualTreeBidiMap<ChronoUnit, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, Locale.FilteringMode>();
      dualTreeBidiMap0.put(chronoUnit0, locale_FilteringMode0);
      AbstractDualBidiMap.MapEntry<ChronoUnit, Locale.FilteringMode> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<ChronoUnit, Locale.FilteringMode>(abstractMap_SimpleImmutableEntry0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_MapEntry0.setValue(locale_FilteringMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit>(chronoUnit0, chronoUnit0);
      AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<ChronoUnit, ChronoUnit>(abstractMap_SimpleEntry0);
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>();
      DualHashBidiMap<ChronoUnit, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<ChronoUnit, ChronoUnit>(dualTreeBidiMap0);
      AbstractDualBidiMap.MapEntry<ChronoUnit, ChronoUnit> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<ChronoUnit, ChronoUnit>(abstractMap_SimpleEntry1, dualHashBidiMap0);
      ChronoUnit chronoUnit1 = abstractDualBidiMap_MapEntry0.setValue(chronoUnit0);
      assertSame(chronoUnit0, chronoUnit1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Charset, Charset>, IOCase>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Charset, Charset>, IOCase>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Charset, Charset>, IOCase> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Charset, Charset>, IOCase>();
      AbstractDualBidiMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Charset, Charset>, IOCase> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Charset, Charset>, IOCase>(iterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualTreeBidiMap<IOCase, IOCase> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, IOCase>();
      Iterator<Map.Entry<IOCase, IOCase>> iterator0 = (Iterator<Map.Entry<IOCase, IOCase>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      AbstractDualBidiMap.EntrySetIterator<IOCase, IOCase> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<IOCase, IOCase>(iterator0, dualTreeBidiMap0);
      abstractDualBidiMap_EntrySetIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<TextStyle, ZoneOffset> hashMap0 = new HashMap<TextStyle, ZoneOffset>();
      HashMap<ZoneOffset, TextStyle> hashMap1 = new HashMap<ZoneOffset, TextStyle>();
      DualLinkedHashBidiMap<ZoneOffset, TextStyle> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ZoneOffset, TextStyle>(hashMap1);
      TreeBidiMap<ZoneOffset, TextStyle> treeBidiMap0 = new TreeBidiMap<ZoneOffset, TextStyle>(dualLinkedHashBidiMap0);
      DualLinkedHashBidiMap<TextStyle, ZoneOffset> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<TextStyle, ZoneOffset>(hashMap0, treeBidiMap0, treeBidiMap0);
      AbstractDualBidiMap.EntrySet<TextStyle, ZoneOffset> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<TextStyle, ZoneOffset>(dualLinkedHashBidiMap1);
      AbstractDualBidiMap.KeySet<ZoneOffset> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<ZoneOffset>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove(abstractDualBidiMap_KeySet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>>();
      Iterator<AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>> iterator0 = linkedList0.descendingIterator();
      DualTreeBidiMap<Charset, AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>> dualTreeBidiMap0 = new DualTreeBidiMap<Charset, AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>>();
      AbstractDualBidiMap.ValuesIterator<AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<AbstractMap.SimpleImmutableEntry<ZoneOffset, ZoneOffset>>(iterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashSet<AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>> hashSet0 = new HashSet<AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>>();
      Iterator<AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>> iterator0 = hashSet0.iterator();
      DualHashBidiMap<Locale.Category, AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>> dualHashBidiMap0 = new DualHashBidiMap<Locale.Category, AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>>();
      AbstractDualBidiMap.ValuesIterator<AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<AbstractMap.SimpleImmutableEntry<Locale.Category, Locale.Category>>(iterator0, dualHashBidiMap0);
      abstractDualBidiMap_ValuesIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>((Integer) null, (Integer) null);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry1);
      dualHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, (Integer) null);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove((Object) null);
      assertTrue(dualHashBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparator<Month> comparator0 = (Comparator<Month>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Month, Month> dualTreeBidiMap0 = new DualTreeBidiMap<Month, Month>(comparator0, comparator0);
      Month month0 = Month.DECEMBER;
      AbstractDualBidiMap.Values<Month> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Month>(dualTreeBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove(month0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DualLinkedHashBidiMap<MinguoEra, Locale.FilteringMode> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<MinguoEra, Locale.FilteringMode>();
      AbstractDualBidiMap.Values<Locale.FilteringMode> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Locale.FilteringMode>(dualLinkedHashBidiMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = abstractDualBidiMap_Values0.contains(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>(comparator0, comparator0);
      MapIterator<ChronoUnit, ChronoUnit> mapIterator0 = dualTreeBidiMap0.mapIterator();
      AbstractDualBidiMap.KeySetIterator<ChronoUnit> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<ChronoUnit>(mapIterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>(comparator0, comparator0);
      MapIterator<ChronoUnit, ChronoUnit> mapIterator0 = dualTreeBidiMap0.mapIterator();
      AbstractDualBidiMap.KeySetIterator<ChronoUnit> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<ChronoUnit>(mapIterator0, dualTreeBidiMap0);
      abstractDualBidiMap_KeySetIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>(comparator0, comparator0);
      DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer>();
      AbstractDualBidiMap.KeySet<ChronoUnit> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<ChronoUnit>(dualTreeBidiMap0);
      AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet1.remove(abstractDualBidiMap_KeySet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      AbstractMap.SimpleEntry<TextStyle, TextStyle> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(abstractMap_SimpleEntry0);
      DualLinkedHashBidiMap<ChronoUnit, ChronoUnit> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, ChronoUnit>();
      AbstractDualBidiMap.KeySet<ChronoUnit> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<ChronoUnit>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DualLinkedHashBidiMap<Locale.Category, Locale.Category> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Locale.Category, Locale.Category>();
      AbstractDualBidiMap.KeySet<Locale.Category> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Locale.Category>(dualLinkedHashBidiMap0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeIf(range0);
      assertFalse(boolean0);
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DualLinkedHashBidiMap<Locale.Category, Locale.Category> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Locale.Category, Locale.Category>();
      AbstractDualBidiMap.KeySet<Locale.Category> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Locale.Category>(dualLinkedHashBidiMap0);
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>(comparator0, comparator0);
      DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer>();
      AbstractDualBidiMap.KeySet<ChronoUnit> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<ChronoUnit>(dualTreeBidiMap0);
      Integer integer0 = new Integer(886);
      dualLinkedHashBidiMap1.put(abstractDualBidiMap_KeySet1, integer0);
      AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>> abstractDualBidiMap_KeySet2 = new AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>>(dualLinkedHashBidiMap1);
      boolean boolean0 = abstractDualBidiMap_KeySet2.remove(abstractDualBidiMap_KeySet0);
      assertEquals(0, dualLinkedHashBidiMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Set<Integer> set0 = dualLinkedHashBidiMap0.values();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DualHashBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualHashBidiMap0 = new DualHashBidiMap<Locale.FilteringMode, Locale.FilteringMode>();
      BidiMap<Locale.FilteringMode, Locale.FilteringMode> bidiMap0 = dualHashBidiMap0.inverseBidiMap();
      assertEquals(0, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>();
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap1 = dualTreeBidiMap0.createBidiMap(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      OrderedBidiMap<ChronoUnit, ChronoUnit> orderedBidiMap0 = dualTreeBidiMap1.inverseOrderedBidiMap();
      assertEquals(0, orderedBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = dualHashBidiMap0.removeValue(chronoUnit0);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      DualTreeBidiMap<ChronoUnit, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, Locale.FilteringMode>();
      dualTreeBidiMap0.put(chronoUnit0, locale_FilteringMode0);
      dualTreeBidiMap0.remove(chronoUnit0);
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DualLinkedHashBidiMap<Month, AbstractDualBidiMap.KeySet<Month>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Month, AbstractDualBidiMap.KeySet<Month>>();
      Month month0 = Month.APRIL;
      AbstractDualBidiMap.KeySet<Month> abstractDualBidiMap_KeySet0 = dualLinkedHashBidiMap0.remove((Object) month0);
      assertNull(abstractDualBidiMap_KeySet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DualHashBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualHashBidiMap0 = new DualHashBidiMap<Locale.FilteringMode, Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = dualHashBidiMap0.put(locale_FilteringMode0, locale_FilteringMode0);
      dualHashBidiMap0.put(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(dualHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer>();
      AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>>(dualLinkedHashBidiMap0);
      TreeBidiMap<Duration, Duration> treeBidiMap0 = new TreeBidiMap<Duration, Duration>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Set<ChronoUnit> set0 = treeBidiMap_Inverse0.values();
      boolean boolean0 = abstractDualBidiMap_KeySet0.retainAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      Iterator<Integer> iterator0 = abstractDualBidiMap_Values0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<CharBuffer, CharBuffer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_BidiMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.temporal.ChronoUnit.class) , any(java.time.temporal.ChronoUnit.class));
      Comparator<Locale.FilteringMode> comparator1 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.util.Locale.FilteringMode.class) , any(java.util.Locale.FilteringMode.class));
      DualTreeBidiMap<ChronoUnit, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, Locale.FilteringMode>(comparator0, comparator1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      dualTreeBidiMap0.put(chronoUnit0, locale_FilteringMode0);
      DualTreeBidiMap<ChronoUnit, Locale.FilteringMode> dualTreeBidiMap1 = new DualTreeBidiMap<ChronoUnit, Locale.FilteringMode>(dualTreeBidiMap0);
      assertEquals(1, dualTreeBidiMap0.size());
      assertTrue(dualTreeBidiMap1.equals((Object)dualTreeBidiMap0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      HashMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> hashMap0 = new HashMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>();
      DualHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit>();
      DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> dualHashBidiMap1 = new DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>(hashMap0, (Map<AbstractDualBidiMap.KeySet<ChronoUnit>, ChronoUnit>) null, dualHashBidiMap0);
      AbstractDualBidiMap.KeySet<ChronoUnit> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<ChronoUnit>(dualHashBidiMap1);
      dualHashBidiMap0.put(abstractDualBidiMap_KeySet0, chronoUnit0);
      DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>> dualHashBidiMap2 = new DualHashBidiMap<ChronoUnit, AbstractDualBidiMap.KeySet<ChronoUnit>>(dualHashBidiMap1, dualHashBidiMap0, dualHashBidiMap0);
      boolean boolean0 = dualHashBidiMap2.containsValue(chronoUnit0);
      assertFalse(dualHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      // Undeclared exception!
      try { 
        dualHashBidiMap0.createValuesIterator((Iterator<ChronoUnit>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparator<Month> comparator0 = (Comparator<Month>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Month, Month> dualTreeBidiMap0 = new DualTreeBidiMap<Month, Month>(comparator0, comparator0);
      Month month0 = Month.DECEMBER;
      DualHashBidiMap<Month, Month> dualHashBidiMap0 = new DualHashBidiMap<Month, Month>(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      boolean boolean0 = dualHashBidiMap0.equals(month0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DualLinkedHashBidiMap<Locale.Category, Locale.Category> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Locale.Category, Locale.Category>();
      AbstractDualBidiMap.KeySet<Locale.Category> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Locale.Category>(dualLinkedHashBidiMap0);
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<ChronoUnit, ChronoUnit> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, ChronoUnit>(comparator0, comparator0);
      DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<ChronoUnit>, Integer>();
      AbstractDualBidiMap.KeySet<ChronoUnit> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<ChronoUnit>(dualTreeBidiMap0);
      Integer integer0 = new Integer(1201);
      dualLinkedHashBidiMap1.put(abstractDualBidiMap_KeySet1, integer0);
      AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>> abstractDualBidiMap_KeySet2 = new AbstractDualBidiMap.KeySet<AbstractDualBidiMap.KeySet<ChronoUnit>>(dualLinkedHashBidiMap1);
      assertEquals(1, dualLinkedHashBidiMap1.size());
      
      boolean boolean0 = abstractDualBidiMap_KeySet2.retainAll(abstractDualBidiMap_KeySet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<ChronoUnit, ChronoUnit>, ChronoUnit>();
      int int0 = dualLinkedHashBidiMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoField, AbstractDualBidiMap.KeySet<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoField, AbstractDualBidiMap.KeySet<Integer>>();
      Integer integer0 = new Integer((-2145561100));
      dualLinkedHashBidiMap0.getKey(integer0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DualTreeBidiMap<ChronoUnit, Month> dualTreeBidiMap0 = new DualTreeBidiMap<ChronoUnit, Month>();
      String string0 = dualTreeBidiMap0.toString();
      assertNotNull(string0);
  }
}
