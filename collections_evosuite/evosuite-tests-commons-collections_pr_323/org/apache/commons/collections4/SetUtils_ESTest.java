/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:36:28 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.file.LinkOption;
import java.time.DayOfWeek;
import java.time.chrono.HijrahEra;
import java.time.chrono.MinguoEra;
import java.time.format.TextStyle;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUtils_ESTest extends SetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[3];
      HashSet<Object> hashSet0 = SetUtils.hashSet(objectArray0);
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(0, 2938.9348F);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) hashSet0, (Set<?>) hashSet0);
      hashSet0.add(hashSet0);
      SetUtils.SetView<Object> setUtils_SetView1 = SetUtils.disjunction((Set<?>) setUtils_SetView0, (Set<?>) hashSet0);
      // Undeclared exception!
      try { 
        setUtils_SetView1.toSet();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SortedSet<Integer> sortedSet0 = SetUtils.unmodifiableSortedSet((SortedSet<Integer>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<Predicate<Object>> set0 = SetUtils.emptyIfNull((Set<Predicate<Object>>) null);
      Set<Predicate<Object>> set1 = SetUtils.unmodifiableSet((Set<? extends Predicate<Object>>) set0);
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Transformer<Object, Integer>> treeSet0 = new TreeSet<Transformer<Object, Integer>>();
      SortedSet<Transformer<Object, Integer>> sortedSet0 = SetUtils.unmodifiableNavigableSet((NavigableSet<Transformer<Object, Integer>>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      SortedSet<Integer> sortedSet0 = SetUtils.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HijrahEra[] hijrahEraArray0 = new HijrahEra[1];
      HashSet<HijrahEra> hashSet0 = SetUtils.hashSet(hijrahEraArray0);
      Transformer<HijrahEra, HijrahEra> transformer0 = ExceptionTransformer.exceptionTransformer();
      Set<HijrahEra> set0 = SetUtils.transformedSet((Set<HijrahEra>) hashSet0, (Transformer<? super HijrahEra, ? extends HijrahEra>) transformer0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2706);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      SortedSet<Integer> sortedSet0 = SetUtils.transformedNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertFalse(sortedSet0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      SortedSet<LinkedHashSet<Object>> sortedSet0 = SetUtils.synchronizedSortedSet((SortedSet<LinkedHashSet<Object>>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Object> set0 = SetUtils.synchronizedSet((Set<Object>) linkedHashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SortedSet<Integer> sortedSet1 = SetUtils.predicatedSortedSet(sortedSet0, (Predicate<? super Integer>) predicate0);
      assertTrue(sortedSet1.equals((Object)sortedSet0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set<Integer> set0 = SetUtils.newIdentityHashSet();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) set0, (Equator<Object>) defaultEquator0);
      Set<Integer> set1 = SetUtils.predicatedSet(set0, (Predicate<? super Integer>) predicate0);
      assertEquals(0, set1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SortedSet<Object> sortedSet0 = SetUtils.predicatedNavigableSet((NavigableSet<Object>) treeSet0, (Predicate<? super Object>) predicate0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(0, 2938.9348F);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) hashSet0, (Set<?>) hashSet0);
      int int0 = setUtils_SetView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<Transformer<Object, Integer>> treeSet0 = new TreeSet<Transformer<Object, Integer>>();
      Object[] objectArray0 = new Object[4];
      HashSet<Object> hashSet0 = SetUtils.hashSet(objectArray0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) treeSet0, (Set<?>) hashSet0);
      Iterator<Object> iterator0 = setUtils_SetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[0];
      HashSet<MinguoEra> hashSet0 = SetUtils.hashSet(minguoEraArray0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(0, 2938.9348F);
      Set<Object> set0 = SetUtils.emptyIfNull((Set<Object>) hashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      HashSet<Object> hashSet0 = SetUtils.hashSet(objectArray0);
      Set<Object> set0 = SetUtils.emptyIfNull((Set<Object>) hashSet0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setB
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextStyle[] textStyleArray0 = new TextStyle[7];
      Set<TextStyle> set0 = SetUtils.unmodifiableSet(textStyleArray0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 7);
      Transformer<TextStyle, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) textStyleArray0);
      Predicate<TextStyle> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super TextStyle, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet(set0, (Predicate<? super TextStyle>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      TreeSet<HijrahEra> treeSet0 = new TreeSet<HijrahEra>();
      treeSet0.add(hijrahEra0);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<HijrahEra>) treeSet0, (Predicate<? super HijrahEra>) equalPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'AH' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.orderedSet((Set<LinkedHashSet<LinkOption>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      linkedHashSet0.add(setUtils_SetView0);
      // Undeclared exception!
      SetUtils.isEqualSet(linkedHashSet0, setUtils_SetView0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(linkedHashSet0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(linkedHashSet0, setUtils_SetView0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      linkedHashSet0.add((Object) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) treeSet0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(setUtils_SetView0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      linkedHashSet0.add(treeSet0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) treeSet0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(treeSet0, setUtils_SetView0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      linkedHashSet0.add(setUtils_SetView0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linkedHashSet0;
      // Undeclared exception!
      SetUtils.hashSet(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      linkedHashSet0.add(setUtils_SetView0);
      // Undeclared exception!
      try { 
        SetUtils.hashCodeForSet((Collection<Object>) setUtils_SetView0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<? extends LinkedHashSet<HijrahEra>>) null, (Set<? extends LinkedHashSet<HijrahEra>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends LinkedHashSet<Locale.Category>>) null, (Set<? extends LinkedHashSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HijrahEra[] hijrahEraArray0 = new HijrahEra[1];
      HashSet<HijrahEra> hashSet0 = SetUtils.hashSet(hijrahEraArray0);
      Predicate<HijrahEra> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<HijrahEra>) hashSet0, (Predicate<? super HijrahEra>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Set<Object> set0 = SetUtils.unmodifiableSet((Object[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      linkedHashSet0.add(treeSet0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) treeSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      linkedHashSet0.add(setUtils_SetView0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      linkedHashSet0.add(setUtils_SetView0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      Object object1 = new Object();
      linkedHashSet1.add(object1);
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      linkedHashSet0.add(treeSet0);
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      linkedHashSet0.add(treeSet0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashSet<Object> hashSet0 = SetUtils.hashSet((Object[]) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      linkedHashSet0.add(treeSet0);
      int int0 = SetUtils.hashCodeForSet((Collection<Object>) linkedHashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      assertNotNull(set0);
      
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) set0, (Set<?>) set0);
      int int0 = SetUtils.hashCodeForSet((Collection<Object>) setUtils_SetView0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = SetUtils.hashCodeForSet((Collection<IOCase>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.difference((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeSet<Transformer<Object, Object>> treeSet0 = new TreeSet<Transformer<Object, Object>>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) treeSet0, (Set<?>) treeSet0);
      boolean boolean0 = SetUtils.isEqualSet(treeSet0, setUtils_SetView0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TreeSet<InvokerTransformer<Boolean, Boolean>> treeSet0 = new TreeSet<InvokerTransformer<Boolean, Boolean>>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<InvokerTransformer<Boolean, Boolean>>) treeSet0, (Predicate<? super InvokerTransformer<Boolean, Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Set<Object> set0 = SetUtils.emptySet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSet(set0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Set<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSet((Set<InvokerTransformer<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableNavigableSet((NavigableSet<Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSortedSet((SortedSet<Transformer<Transformer, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Set<Object> set0 = SetUtils.newIdentityHashSet();
      boolean boolean0 = SetUtils.isEqualSet(set0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSortedSet((SortedSet<LinkedHashSet<InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Object> set0 = SetUtils.orderedSet((Set<Object>) linkedHashSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SortedSet<MinguoEra> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSortedSet(sortedSet0, (Transformer<? super MinguoEra, ? extends MinguoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.intersection((Set<?>) null, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Object>) null, (Predicate<? super Object>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SortedSet<LinkedHashSet<Object>> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<LinkedHashSet<Object>>) sortedSet0, (Predicate<? super LinkedHashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TreeSet<DayOfWeek> treeSet0 = new TreeSet<DayOfWeek>();
      // Undeclared exception!
      try { 
        SetUtils.transformedNavigableSet((NavigableSet<DayOfWeek>) treeSet0, (Transformer<? super DayOfWeek, ? extends DayOfWeek>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }
}
