/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:39:03 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Shape_ESTest extends Shape_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4434, 4434);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 4434);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
      assertEquals(3073, shape1.getNumberOfHashFunctions());
      assertFalse(shape0.equals((Object)shape1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4434, 4434);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 4041);
      boolean boolean0 = shape1.equals(shape0);
      assertFalse(boolean0);
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
      assertEquals(2801, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "org.apache.commons.collections4.bloomfilter.hasher.Shape", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 1L, 0, 146);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("6Fd4iA2f]", "uYP%>5cK", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 0L, 984, 2672);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 927L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 0.6491375386124196, 3, 658);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Calculated probability is greater than or equal to 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("$VALUES", "$VALUES", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 3561L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 3096, 2146219678, 3096);
      double double0 = shape0.getProbability();
      assertEquals(3096, shape0.getNumberOfHashFunctions());
      assertEquals(2146219678, shape0.getNumberOfBits());
      assertEquals(3096, shape0.getNumberOfItems());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("!T/zj>", "!T/zj>", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4445, 4445);
      shape0.getHashFunctionIdentity();
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("!T/zj>", "2HE`\")|Vz@Q{", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1L));
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4, 4);
      shape0.getHashFunctionIdentity();
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (-608), (-608), (-608));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hashFunctionIdentity
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (-62), (-62));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hashFunctionIdentity
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (-36), (double) (-36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hashFunctionIdentity
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (double) 2933, 2933, 2933);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hashFunctionIdentity
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4445, 4445);
      double double0 = shape0.getProbability();
      assertEquals(0.6321205588285577, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4434, 4434);
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("Shape[ l*bsBS0-UNSIGNED-ITERATIVE n=4434 m=4434 k=1 ]", "Shape[ l*bsBS0-UNSIGNED-ITERATIVE n=4434 m=4434 k=1 ]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1L);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl1, 4434, 4434);
      boolean boolean0 = shape0.equals(shape1);
      assertFalse(boolean0);
      assertEquals(0.6321205588285577, shape1.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4, 4);
      Shape shape1 = new Shape(hashFunctionIdentityImpl0, 0.6321205588285577, 4, 4);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
      assertEquals(0.815236744584549, shape1.getProbability(), 0.01);
      assertFalse(shape1.equals((Object)shape0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4445, 4445);
      Shape shape1 = new Shape(hashFunctionIdentityImpl0, 0.6321205588285577, 4, 4);
      shape0.equals(shape1);
      assertEquals(0.815236744584549, shape1.getProbability(), 0.01);
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4445, 4445);
      boolean boolean0 = shape0.equals(shape0);
      assertTrue(boolean0);
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4445, 4445);
      Object object0 = new Object();
      boolean boolean0 = shape0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("1cYGs$4!4E}~w", "1cYGs$4!4E}~w", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2928);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2928, 649);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter too small: Calculated number of hash functions (0) was less than 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 3494);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 3494, 3494, 3494);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Calculated probability is greater than or equal to 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(">>", ">>", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1L));
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: -1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 2, (-1371));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of hash functions must be greater than 0: -1371
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(">>", ">>", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1855);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1855, (-2871), (-2871));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be greater than or equal to 8: -2871
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("k6Y", "k6Y", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-608));
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, (-608), (-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than 0: -608
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("P\"", "P\"", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2146999326);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 2146999326, 4.463348232716754E-10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resulting filter has more than 2147483647 bits: 9.6210847876E10
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "`LUNy;#NEIg&", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 927L);
      Shape shape0 = new Shape(hashFunctionIdentityImpl0, 2, 4.463348232716754E-10);
      assertEquals(90, shape0.getNumberOfBits());
      assertEquals(4.0784489690965103E-10, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("B?=HVxP3:Go=j\"P@a", "B?=HVxP3:Go=j\"P@a", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1L);
      Shape shape0 = new Shape(hashFunctionIdentityImpl0, 4.463348232716754E-10, 3, 3);
      shape0.getHashFunctionIdentity();
      assertEquals(0.25258045782764715, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4434, 4434);
      String string0 = shape0.toString();
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
      assertEquals("Shape[ l*bsBS0-UNSIGNED-ITERATIVE n=4434 m=4434 k=1 ]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4445, 4445);
      shape0.hashCode();
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("B?=HVxP3:Go=j\"P@a", "B?=HVxP3:Go=j\"P@a", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1L);
      Shape shape0 = new Shape(hashFunctionIdentityImpl0, 4.463348232716754E-10, 3, 3);
      int int0 = shape0.getNumberOfItems();
      assertEquals(0.25258045782764715, shape0.getProbability(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1431655832);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, (double) 1431655832, 1431655832, 1431655832);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1.431655832E9
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1431655770);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1431655770, 1431655770);
      int int0 = shape0.getNumberOfBits();
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
      assertEquals(1431655770, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("l*bsBS0", "l*bsBS0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 4434, 4434);
      int int0 = shape0.getNumberOfHashFunctions();
      assertEquals(0.6321205588285577, shape0.getProbability(), 0.01);
      assertEquals(1, int0);
  }
}
