/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:41:09 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PrimitiveIterator;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StaticHasher_ESTest extends StaticHasher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(248);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      assertFalse(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1800);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1800, 1800);
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(iterator0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bit index (1800) is too big for Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1800 m=1800 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      int int0 = staticHasher0.size();
      assertFalse(linkedList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      StaticHasher staticHasher0 = new StaticHasher(iterator0, (Shape) null);
      Shape shape0 = staticHasher0.getShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      Shape shape1 = staticHasher0.getShape();
      assertSame(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher$NoValuesIterator", "ow4|P^(Q4", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 255L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 27, 27);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HashFunctionIdentity hashFunctionIdentity0 = staticHasher0.getHashFunctionIdentity();
      assertEquals(HashFunctionIdentity.Signedness.SIGNED, hashFunctionIdentity0.getSignedness());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HashFunctionIdentity hashFunctionIdentity0 = staticHasher0.getHashFunctionIdentity();
      assertEquals("Murmur3_x86_32", hashFunctionIdentity0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = staticHasher0.getBits(shape0);
      assertNotNull(primitiveIterator_OfInt0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      StaticHasher staticHasher0 = new StaticHasher(iterator0, (Shape) null);
      // Undeclared exception!
      try { 
        staticHasher0.getHashFunctionIdentity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      StaticHasher staticHasher0 = new StaticHasher(iterator0, (Shape) null);
      // Undeclared exception!
      try { 
        staticHasher0.getBits((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 27, 27, 27);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 27, 27);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape1);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher(staticHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=27 m=27 k=1 ]) is not the same as shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=27 m=27 k=27 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      StaticHasher staticHasher0 = new StaticHasher(iterator0, (Shape) null);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher((Hasher) staticHasher0, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1409, 1409);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher((Hasher) staticHasher0, (Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (null) does not match internal shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1409 m=1409 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      linkedList0.clear();
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(iterator0, (Shape) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher((Iterator<Integer>) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Bit index (%s) is too big for %s", "Hasher shape (%s) is not the same as shape (%s)", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 2);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      boolean boolean0 = staticHasher0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      boolean boolean0 = staticHasher0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      // Undeclared exception!
      try { 
        staticHasher0.getBits((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (null) does not match internal shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=468 m=468 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 16, 16, 16);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher(staticHasher0, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 468, 468);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      StaticHasher staticHasher1 = new StaticHasher(staticHasher0, shape0);
      assertFalse(staticHasher1.equals((Object)staticHasher0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(1800);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 468, 468);
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(iterator0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bit index (1800) is too big for Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=468 m=468 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1655));
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2202, 2202);
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(iterator0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bit index (-1655) may not be less than zero
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Bit index (%s) is too big for %s", "Hasher shape (%s) is not the same as shape (%s)", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 2);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      StaticHasher staticHasher1 = new StaticHasher((Hasher) staticHasher0, shape0);
      assertFalse(staticHasher1.equals((Object)staticHasher0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("c~(y", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 3679);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      int int0 = staticHasher0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("c~(y", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 3679);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HashFunctionIdentity hashFunctionIdentity0 = staticHasher0.getHashFunctionIdentity();
      assertEquals(0L, hashFunctionIdentity0.getSignature());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("c~(y", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 3679);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      Shape shape1 = staticHasher0.getShape();
      assertEquals(1275, shape1.getNumberOfHashFunctions());
  }
}
