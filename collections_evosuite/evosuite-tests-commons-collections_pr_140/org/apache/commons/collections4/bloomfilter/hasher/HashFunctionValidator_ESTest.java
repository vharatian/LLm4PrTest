/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:36:55 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashFunctionValidator_ESTest extends HashFunctionValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-2722L));
      int int0 = HashFunctionValidator.hash(hashFunctionIdentityImpl0);
      //  // Unstable assertion: assertEquals(956974367, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashFunctionValidator.hash((HashFunctionIdentity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1492L);
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl0, (HashFunctionIdentity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashFunctionValidator.areEqual((HashFunctionIdentity) null, (HashFunctionIdentity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "+N59}[\"<+3{/|", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2703L);
      HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl0);
      assertEquals(HashFunctionIdentity.ProcessType.CYCLIC, hashFunctionIdentityImpl0.getProcessType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("YHW", "(X(AkB-:68q", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("(X(AkB-:68q", "YHW", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      boolean boolean0 = HashFunctionValidator.areEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1L));
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType1 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("", "Hash functions are not equal: (%s) != (%s)", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType1, (-1L));
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: (-SIGNED-ITERATIVE) != (Hash functions are not equal: (%s) != (%s)-SIGNED-CYCLIC)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("YHW", "(X(AkB-:68q", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      boolean boolean0 = HashFunctionValidator.areEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("F}kC 6:v", "SIGNED", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-2322L));
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness1 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("SIGNED", "SIGNED", hashFunctionIdentity_Signedness1, hashFunctionIdentity_ProcessType0, 974L);
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl1, hashFunctionIdentityImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: (SIGNED-SIGNED-CYCLIC) != (SIGNED-UNSIGNED-CYCLIC)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("sUC^", "sUC^", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1L));
      int int0 = HashFunctionValidator.hash(hashFunctionIdentityImpl0);
      //  // Unstable assertion: assertEquals((-264166563), int0);
  }
}
