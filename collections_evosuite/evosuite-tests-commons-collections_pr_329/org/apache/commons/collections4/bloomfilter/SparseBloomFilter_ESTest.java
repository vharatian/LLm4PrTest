/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:22:04 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SparseBloomFilter_ESTest extends SparseBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1454, 1454);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((byte)15, 0L);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      boolean boolean0 = sparseBloomFilter0.merge((BloomFilter) sparseBloomFilter1);
      assertTrue(boolean0);
      assertEquals(1, sparseBloomFilter1.characteristics());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(14, 14);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (IndexProducer) simpleBloomFilter0);
      assertEquals(1, sparseBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1679, 1679);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (BitMapProducer) simpleBloomFilter0);
      assertEquals(1, sparseBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1670, 1670);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1670, 1670);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape0);
      boolean boolean0 = sparseBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1670, 1670);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1670, 1670);
      EnhancedDoubleHasher enhancedDoubleHasher1 = new EnhancedDoubleHasher(1670, 1670);
      enhancedDoubleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(577, int0);
      
      SparseBloomFilter sparseBloomFilter1 = sparseBloomFilter0.copy();
      boolean boolean0 = sparseBloomFilter1.merge((Hasher) enhancedDoubleHasher1);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      countingLongPredicate0.and(longPredicate0);
      countingLongPredicate0.or(longPredicate0);
      boolean boolean1 = sparseBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = sparseBloomFilter1.contains((BitMapProducer) arrayCountingBloomFilter0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(127, 127);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(simpleBloomFilter0);
      boolean boolean0 = sparseBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 2);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[2];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      boolean boolean0 = sparseBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1454, 1454);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.characteristics();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4973, 4973);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(4973, 4973);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(sparseBloomFilter0);
      // Undeclared exception!
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(20, 20);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(13, 13, 13);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(13, 13);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      Shape shape1 = Shape.fromNM(13, 98);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1, enhancedDoubleHasher0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 85 is greater than maximum value (13)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(19, 19);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1670, 1670);
      Hasher[] hasherArray0 = new Hasher[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1670, 1670);
      hasherArray0[0] = (Hasher) enhancedDoubleHasher0;
      HasherCollection hasherCollection0 = new HasherCollection(hasherArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, hasherCollection0);
      Shape shape1 = Shape.fromNM(1670, 1670);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape1);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(125, 1073741823);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[4];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      // Undeclared exception!
      sparseBloomFilter0.forEachBitMap(longPredicate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(9, 9);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(125, 1073741823);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(2, 2, 2);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 461845907);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(461845907, 461845907);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(86251, 86251);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(86251, 86251);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null, (Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(9999, 9999);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1454, 1454);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1705, 1705);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1705, 1705);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      sparseBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1670, 1670);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1670, 1670);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1454, 1454);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      assertEquals(1, sparseBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1640, 1640);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      Shape shape1 = sparseBloomFilter0.getShape();
      assertEquals(1, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNM(141, 141);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[4];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(longPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1682554634, 1682554634);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(19, 19);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(19, 19);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapProducer) sparseBloomFilter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(28, 28);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(28, 1804);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.negate();
      boolean boolean0 = sparseBloomFilter0.forEachIndex(intPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNM(22, 22);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(22, 22);
      Shape shape1 = Shape.fromNM(22, 25);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1, enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter1 = null;
      try {
        sparseBloomFilter1 = new SparseBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 22 is greater than maximum value (22)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 2);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,2) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(148, 148);
      int[] intArray0 = new int[3];
      intArray0[1] = (-3423);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,148) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8287, 8287);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromNM(372, 372);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null, (IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null, (BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }
}
