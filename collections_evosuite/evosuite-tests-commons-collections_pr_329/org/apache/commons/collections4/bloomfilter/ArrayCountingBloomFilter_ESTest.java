/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:15:21 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitCountProducer;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayCountingBloomFilter_ESTest extends ArrayCountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, (-961L));
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      arrayCountingBloomFilter0.asIndexArray();
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1855, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4565, 4565);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(5, 5);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = new long[2];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4565, 4565);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(5, 5);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = new long[2];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean0);
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-1465L), 3273L);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bitCountProducer_BitCountConsumer0).test(anyInt() , anyInt());
      boolean boolean1 = arrayCountingBloomFilter0.forEachCount(bitCountProducer_BitCountConsumer0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1855, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1855, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(29, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      HasherCollection hasherCollection0 = new HasherCollection();
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) hasherCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      assertEquals(1, arrayCountingBloomFilter0.characteristics());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1855, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(16, 16);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = arrayCountingBloomFilter0.getShape();
      assertSame(shape0, shape1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      arrayCountingBloomFilter0.copy();
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromKM(8251, 8251);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(8251, 8251);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      // Undeclared exception!
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, (-961L));
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      Shape shape1 = Shape.fromKM(2095, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(8199, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 8199);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(30, 30);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = Shape.fromNMK(30, 1073741824, 1073741824);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1, (IndexProducer) arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2055, 2055);
      Shape shape1 = Shape.fromNMK(16, 16, 25);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.ArrayIndexOutOfBoundsException
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2142, 2142);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(38, 38);
      Shape shape1 = Shape.fromNM(38, 38);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(38, 38);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(65536, 65536);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachCount(bitCountProducer_BitCountConsumer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5, 5);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachCount((BitCountProducer.BitCountConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(8251, 8251);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      long[] longArray0 = new long[0];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      LongPredicate longPredicate1 = countingLongPredicate0.or(longPredicate0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachBitMap(longPredicate1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8245, 8245);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2101, 2101);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2101;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains(indexProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(10847, 9983);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.contains((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNP(7, 4.9E-324);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2096, 2096);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.add((BitCountProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = null;
      try {
        arrayCountingBloomFilter0 = new ArrayCountingBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2101, 2101);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2101, 2101);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, (-961L));
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(bitCountProducer_BitCountConsumer0).test(anyInt() , anyInt());
      boolean boolean0 = arrayCountingBloomFilter0.forEachCount(bitCountProducer_BitCountConsumer0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = arrayCountingBloomFilter0.forEachCount(bitCountProducer_BitCountConsumer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1855, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2049, 2049);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.subtract((BitCountProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(28, 28, 28);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(28, 28);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int[] intArray0 = arrayCountingBloomFilter0.asIndexArray();
      assertEquals(13, intArray0.length);
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(35, 35);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(35, 35);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) sparseBloomFilter0);
      boolean boolean1 = arrayCountingBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5, 5);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(5, 5);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2063, 2063);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2063, 2063);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2101, 2101);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2101, 2101);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.negate();
      boolean boolean0 = arrayCountingBloomFilter0.forEachIndex(intPredicate0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2095, 2095);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((BloomFilter) simpleBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4, 4);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(4, 4);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertEquals(2, int0);
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5, 5);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5, 5);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2095, 2095);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      assertTrue(arrayCountingBloomFilter1.isValid());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2092, 2092);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Shape shape0 = Shape.fromNM(16, 16);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.characteristics();
      assertEquals(1, int0);
  }
}
