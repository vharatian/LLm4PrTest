/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:17:33 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(26, 26);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      byte[] byteArray0 = new byte[9];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(144, 144);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      LinkedHashSet<Hasher> linkedHashSet0 = new LinkedHashSet<Hasher>();
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = linkedHashSet0.add(enhancedDoubleHasher0);
      HasherCollection hasherCollection0 = new HasherCollection(linkedHashSet0);
      arrayCountingBloomFilter0.remove((Hasher) hasherCollection0);
      boolean boolean1 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1510, 4330);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateUnion(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(26, 26);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      byte[] byteArray0 = new byte[2];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(arrayCountingBloomFilter0);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateUnion(sparseBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1090, 1090);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateN();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 3169L);
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateN();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(255, 255);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(57, 1089, 1);
      byte[] byteArray0 = new byte[5];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(5, 5, 5);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      HasherCollection hasherCollection0 = new HasherCollection();
      boolean boolean0 = simpleBloomFilter0.contains((Hasher) hasherCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1510, 1510);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      byte[] byteArray0 = new byte[8];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = simpleBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1510, 1510);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      byte[] byteArray0 = new byte[8];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter1.contains((BitMapProducer) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(11, 11);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      LinkedList<Hasher> linkedList0 = new LinkedList<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(linkedList0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, hasherCollection0);
      // Undeclared exception!
      simpleBloomFilter0.isFull();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1092, 1092);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateUnion((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = Shape.fromKM(375, 375);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateUnion(simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1682554608, 1682554608);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.estimateIntersection(sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(255, 255);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateIntersection((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(84, 84);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = Shape.fromKM(84, 2702);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateIntersection(simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 2 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2619L), (-2619L));
      Shape shape0 = Shape.fromKM(676, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      Hasher[] hasherArray0 = new Hasher[7];
      hasherArray0[0] = (Hasher) enhancedDoubleHasher0;
      hasherArray0[1] = (Hasher) enhancedDoubleHasher0;
      hasherArray0[2] = (Hasher) enhancedDoubleHasher0;
      hasherArray0[3] = (Hasher) enhancedDoubleHasher0;
      hasherArray0[4] = (Hasher) enhancedDoubleHasher0;
      hasherArray0[5] = (Hasher) enhancedDoubleHasher0;
      hasherArray0[6] = (Hasher) enhancedDoubleHasher0;
      HasherCollection hasherCollection0 = new HasherCollection(hasherArray0);
      // Undeclared exception!
      simpleBloomFilter0.contains((Hasher) hasherCollection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(11, 11, 11);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      LinkedList<Hasher> linkedList0 = new LinkedList<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(linkedList0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, hasherCollection0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(34, 34, 34);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(57, 1089, 1);
      byte[] byteArray0 = new byte[5];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateN();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 3169L);
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 3169L);
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 387, 387);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 1L);
      Shape shape0 = Shape.fromNMK(1, 387, 387);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 3169L);
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 3169L);
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2618L), 3169L);
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      assertEquals((-1), int0);
  }
}
