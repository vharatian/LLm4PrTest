/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:00:12 GMT 2025
 */

package org.apache.commons.collections4.multimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractSetValuedMap_ESTest extends AbstractSetValuedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, LinkedHashSet<Integer>> hashMap0 = new HashMap<Integer, LinkedHashSet<Integer>>();
      HashSetValuedHashMap<Integer, LinkedHashSet<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedHashSet<Integer>>(hashMap0);
      Integer integer0 = new Integer(8287);
      Set<LinkedHashSet<Integer>> set0 = hashSetValuedHashMap0.wrappedCollection(integer0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashMap<Integer, LinkedHashSet<Integer>> hashMap0 = new HashMap<Integer, LinkedHashSet<Integer>>();
      hashMap0.put((Integer) null, linkedHashSet0);
      HashSetValuedHashMap<Integer, LinkedHashSet<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedHashSet<Integer>>(hashMap0);
      Set<LinkedHashSet<Integer>> set0 = hashSetValuedHashMap0.remove((Object) null);
      assertTrue(set0.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashSetValuedHashMap<Integer, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Object>(hashMap0);
      hashSetValuedHashMap0.setMap((Map<Integer, ? extends Collection<Object>>) null);
      Map<Integer, Set<Object>> map0 = hashSetValuedHashMap0.getMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>();
      Map<Integer, Set<Integer>> map0 = hashSetValuedHashMap0.getMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(8232);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(hashMap0);
      hashSetValuedHashMap0.put(integer0, integer0);
      Map<Integer, Set<Integer>> map0 = hashSetValuedHashMap0.getMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>();
      hashSetValuedHashMap0.setMap((Map<Integer, ? extends Collection<Integer>>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        hashSetValuedHashMap0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractSetValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashSetValuedHashMap<Integer, Collection<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Collection<Integer>>();
      Set<Collection<Integer>> set0 = hashSetValuedHashMap0.get((Integer) null);
      HashMap<Collection<Integer>, Integer> hashMap0 = new HashMap<Collection<Integer>, Integer>();
      HashSetValuedHashMap<Collection<Integer>, Integer> hashSetValuedHashMap1 = new HashSetValuedHashMap<Collection<Integer>, Integer>(hashMap0);
      Set<Integer> set1 = hashSetValuedHashMap1.remove(set0);
      assertEquals(0, set1.size());
  }
}
